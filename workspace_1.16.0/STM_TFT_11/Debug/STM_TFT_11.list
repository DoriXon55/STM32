
STM_TFT_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004b5c  08004b5c  00005b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd8  08004cd8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00005cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00005cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004ce0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a358  20000070  08004d50  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a3c8  08004d50  000063c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0cd  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1f  00000000  00000000  0002216d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009d9d  00000000  00000000  00025f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b5  00000000  00000000  00030d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029468  00000000  00000000  00031dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c32e  00000000  00000000  0005b23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100460  00000000  00000000  0007756b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001779cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003168  00000000  00000000  00177a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0017ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b44 	.word	0x08004b44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b44 	.word	0x08004b44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000562:	2400      	movs	r4, #0
{
 8000564:	b08a      	sub	sp, #40	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	2218      	movs	r2, #24
 8000568:	4621      	mov	r1, r4
 800056a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800056c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000570:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	f003 fe28 	bl	80041c6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000576:	4828      	ldr	r0, [pc, #160]	@ (8000618 <MX_ADC1_Init+0xb8>)
 8000578:	4b28      	ldr	r3, [pc, #160]	@ (800061c <MX_ADC1_Init+0xbc>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 3;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800057e:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000580:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000584:	2301      	movs	r3, #1
 8000586:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800058a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800058e:	8302      	strh	r2, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000590:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.NbrOfConversion = 3;
 8000594:	2203      	movs	r2, #3
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
  hadc1.Init.NbrOfConversion = 3;
 80005a2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005a4:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005a6:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005aa:	f000 fca9 	bl	8000f00 <HAL_ADC_Init>
 80005ae:	b108      	cbz	r0, 80005b4 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 80005b0:	f000 fa96 	bl	8000ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b4:	4818      	ldr	r0, [pc, #96]	@ (8000618 <MX_ADC1_Init+0xb8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b6:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b8:	a901      	add	r1, sp, #4
 80005ba:	f001 f9ff 	bl	80019bc <HAL_ADCEx_MultiModeConfigChannel>
 80005be:	b108      	cbz	r0, 80005c4 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 80005c0:	f000 fa8e 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c4:	4816      	ldr	r0, [pc, #88]	@ (8000620 <MX_ADC1_Init+0xc0>)
 80005c6:	2306      	movs	r3, #6
 80005c8:	e9cd 0304 	strd	r0, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80005cc:	9306      	str	r3, [sp, #24]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ce:	247f      	movs	r4, #127	@ 0x7f
 80005d0:	2304      	movs	r3, #4
 80005d2:	e9cd 4307 	strd	r4, r3, [sp, #28]
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	4810      	ldr	r0, [pc, #64]	@ (8000618 <MX_ADC1_Init+0xb8>)
  sConfig.Offset = 0;
 80005d8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80005dc:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005de:	f000 fed9 	bl	8001394 <HAL_ADC_ConfigChannel>
 80005e2:	b108      	cbz	r0, 80005e8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80005e4:	f000 fa7c 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005e8:	490e      	ldr	r1, [pc, #56]	@ (8000624 <MX_ADC1_Init+0xc4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ec:	230c      	movs	r3, #12
 80005ee:	e9cd 1304 	strd	r1, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	a904      	add	r1, sp, #16
 80005f4:	f000 fece 	bl	8001394 <HAL_ADC_ConfigChannel>
 80005f8:	b108      	cbz	r0, 80005fe <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80005fa:	f000 fa71 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <MX_ADC1_Init+0xc8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000602:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000606:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060a:	f000 fec3 	bl	8001394 <HAL_ADC_ConfigChannel>
 800060e:	b108      	cbz	r0, 8000614 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000610:	f000 fa66 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000614:	b00a      	add	sp, #40	@ 0x28
 8000616:	bd10      	pop	{r4, pc}
 8000618:	200000d4 	.word	0x200000d4
 800061c:	50040000 	.word	0x50040000
 8000620:	04300002 	.word	0x04300002
 8000624:	08600004 	.word	0x08600004
 8000628:	0c900008 	.word	0x0c900008

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	b0aa      	sub	sp, #168	@ 0xa8
 8000630:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	2214      	movs	r2, #20
 8000634:	2100      	movs	r1, #0
 8000636:	a803      	add	r0, sp, #12
 8000638:	f003 fdc5 	bl	80041c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	2288      	movs	r2, #136	@ 0x88
 800063e:	2100      	movs	r1, #0
 8000640:	a808      	add	r0, sp, #32
 8000642:	f003 fdc0 	bl	80041c6 <memset>
  if(adcHandle->Instance==ADC1)
 8000646:	682a      	ldr	r2, [r5, #0]
 8000648:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 800064a:	429a      	cmp	r2, r3
 800064c:	d157      	bne.n	80006fe <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800064e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000652:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000654:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000658:	9326      	str	r3, [sp, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800065a:	2301      	movs	r3, #1
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800065c:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000660:	f04f 0c10 	mov.w	ip, #16
 8000664:	2307      	movs	r3, #7
 8000666:	e9cd c30b 	strd	ip, r3, [sp, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800066c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000672:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000676:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	f002 f964 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 800067c:	b108      	cbz	r0, 8000682 <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 800067e:	f000 fa2f 	bl	8000ae0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000682:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <HAL_ADC_MspInit+0xdc>)
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	4821      	ldr	r0, [pc, #132]	@ (800070c <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8000686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000688:	4c21      	ldr	r4, [pc, #132]	@ (8000710 <HAL_ADC_MspInit+0xe4>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800068a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800068e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000690:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000692:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800069c:	f042 0204 	orr.w	r2, r2, #4
 80006a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b0:	230b      	movs	r3, #11
 80006b2:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f001 fb49 	bl	8001d50 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <HAL_ADC_MspInit+0xe8>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c0:	6226      	str	r6, [r4, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006c2:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006c6:	2180      	movs	r1, #128	@ 0x80
 80006c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d0:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006d4:	2320      	movs	r3, #32
 80006d6:	e9c4 0306 	strd	r0, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006da:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006dc:	e9c4 6602 	strd	r6, r6, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e0:	f001 fa46 	bl	8001b70 <HAL_DMA_Init>
 80006e4:	b108      	cbz	r0, 80006ea <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80006e6:	f000 f9fb 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80006ea:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ec:	64ec      	str	r4, [r5, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006f2:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80006f4:	f001 f9e8 	bl	8001ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006f8:	2012      	movs	r0, #18
 80006fa:	f001 fa17 	bl	8001b2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fe:	b02a      	add	sp, #168	@ 0xa8
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	bf00      	nop
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	2000008c 	.word	0x2000008c
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_DMA_Init+0x3c>)
{
 800071a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800071e:	f042 0201 	orr.w	r2, r2, #1
 8000722:	649a      	str	r2, [r3, #72]	@ 0x48
 8000724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2102      	movs	r1, #2
 8000730:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000734:	f001 f9c8 	bl	8001ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000738:	200b      	movs	r0, #11
 800073a:	f001 f9f7 	bl	8001b2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2102      	movs	r1, #2
 8000742:	200f      	movs	r0, #15
 8000744:	f001 f9c0 	bl	8001ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000748:	200f      	movs	r0, #15

}
 800074a:	b003      	add	sp, #12
 800074c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000750:	f001 b9ec 	b.w	8001b2c <HAL_NVIC_EnableIRQ>
 8000754:	40021000 	.word	0x40021000

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b510      	push	{r4, lr}
 800075a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	2214      	movs	r2, #20
 800075e:	2100      	movs	r1, #0
 8000760:	a803      	add	r0, sp, #12
 8000762:	f003 fd30 	bl	80041c6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000768:	4c1b      	ldr	r4, [pc, #108]	@ (80007d8 <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800076c:	f042 0204 	orr.w	r2, r2, #4
 8000770:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000774:	f002 0204 	and.w	r2, r2, #4
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000784:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000786:	f002 0201 	and.w	r2, r2, #1
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000790:	f042 0202 	orr.w	r2, r2, #2
 8000794:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800079e:	4620      	mov	r0, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	f640 0104 	movw	r1, #2052	@ 0x804
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80007a8:	f001 fbac 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80007ac:	4620      	mov	r0, r4
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b4:	f001 fba6 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	f641 0204 	movw	r2, #6148	@ 0x1804
 80007bc:	2301      	movs	r3, #1
 80007be:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f001 fac0 	bl	8001d50 <HAL_GPIO_Init>

}
 80007d0:	b008      	add	sp, #32
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000400 	.word	0x48000400

080007dc <lcd_data>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
static void lcd_data(uint8_t data)
{
 80007dc:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80007de:	4c0f      	ldr	r4, [pc, #60]	@ (800081c <lcd_data+0x40>)
{
 80007e0:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4620      	mov	r0, r4
 80007e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ec:	f001 fb8a 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80007f0:	4620      	mov	r0, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f8:	f001 fb84 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	f10d 0107 	add.w	r1, sp, #7
 8000804:	2201      	movs	r2, #1
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <lcd_data+0x44>)
 8000808:	f002 fbd4 	bl	8002fb4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	4620      	mov	r0, r4
 8000814:	f001 fb76 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8000818:	b002      	add	sp, #8
 800081a:	bd10      	pop	{r4, pc}
 800081c:	48000400 	.word	0x48000400
 8000820:	2000a188 	.word	0x2000a188

08000824 <lcd_data16>:
	} else {
		lcd_data(value);
	}
}
static void lcd_data16(uint16_t value)
{
 8000824:	b510      	push	{r4, lr}
 8000826:	4604      	mov	r4, r0
	lcd_data(value >> 8);
 8000828:	0a00      	lsrs	r0, r0, #8
 800082a:	f7ff ffd7 	bl	80007dc <lcd_data>
	lcd_data(value);
 800082e:	b2e0      	uxtb	r0, r4
}
 8000830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_data(value);
 8000834:	f7ff bfd2 	b.w	80007dc <lcd_data>

08000838 <lcd_cmd>:
{
 8000838:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800083a:	4c0f      	ldr	r4, [pc, #60]	@ (8000878 <lcd_cmd+0x40>)
{
 800083c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	4620      	mov	r0, r4
 8000844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000848:	f001 fb5c 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800084c:	4620      	mov	r0, r4
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000854:	f001 fb56 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	f10d 0107 	add.w	r1, sp, #7
 8000860:	2201      	movs	r2, #1
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <lcd_cmd+0x44>)
 8000864:	f002 fba6 	bl	8002fb4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800086e:	4620      	mov	r0, r4
 8000870:	f001 fb48 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8000874:	b002      	add	sp, #8
 8000876:	bd10      	pop	{r4, pc}
 8000878:	48000400 	.word	0x48000400
 800087c:	2000a188 	.word	0x2000a188

08000880 <lcd_init>:
  CMD(0xf6), 0x00,
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};
void lcd_init(void)
{
 8000880:	b538      	push	{r3, r4, r5, lr}
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2104      	movs	r1, #4
 8000886:	4815      	ldr	r0, [pc, #84]	@ (80008dc <lcd_init+0x5c>)
 8000888:	4d15      	ldr	r5, [pc, #84]	@ (80008e0 <lcd_init+0x60>)
 800088a:	f001 fb3b 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800088e:	2064      	movs	r0, #100	@ 0x64
 8000890:	f000 fb0a 	bl	8000ea8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <lcd_init+0x5c>)
 8000896:	2201      	movs	r2, #1
 8000898:	2104      	movs	r1, #4
 800089a:	f001 fb33 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800089e:	2064      	movs	r0, #100	@ 0x64
 80008a0:	f000 fb02 	bl	8000ea8 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80008a4:	2400      	movs	r4, #0
    lcd_send(init_table[i]);
 80008a6:	f835 3b02 	ldrh.w	r3, [r5], #2
		lcd_cmd(value);
 80008aa:	b2d8      	uxtb	r0, r3
	if (value & 0x100) {
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	d512      	bpl.n	80008d6 <lcd_init+0x56>
		lcd_cmd(value);
 80008b0:	f7ff ffc2 	bl	8000838 <lcd_cmd>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80008b4:	3401      	adds	r4, #1
 80008b6:	2c4c      	cmp	r4, #76	@ 0x4c
 80008b8:	d1f5      	bne.n	80008a6 <lcd_init+0x26>
  }

  HAL_Delay(200);
 80008ba:	20c8      	movs	r0, #200	@ 0xc8
 80008bc:	f000 faf4 	bl	8000ea8 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 80008c0:	2011      	movs	r0, #17
 80008c2:	f7ff ffb9 	bl	8000838 <lcd_cmd>
  HAL_Delay(120);
 80008c6:	2078      	movs	r0, #120	@ 0x78
 80008c8:	f000 faee 	bl	8000ea8 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
}
 80008cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lcd_cmd(ST7735S_DISPON);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff bfb1 	b.w	8000838 <lcd_cmd>
		lcd_data(value);
 80008d6:	f7ff ff81 	bl	80007dc <lcd_data>
 80008da:	e7eb      	b.n	80008b4 <lcd_init+0x34>
 80008dc:	48000400 	.word	0x48000400
 80008e0:	08004b5c 	.word	0x08004b5c

080008e4 <lcd_put_pixel>:
void lcd_put_pixel(int x, int y, uint16_t color)
{
	frame_buffer[x + y * LCD_WIDTH] = color;
 80008e4:	23a0      	movs	r3, #160	@ 0xa0
 80008e6:	fb03 0001 	mla	r0, r3, r1, r0
 80008ea:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <lcd_put_pixel+0x10>)
 80008ec:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000138 	.word	0x20000138

080008f8 <lcd_copy>:
void lcd_copy(void)
{
 80008f8:	b510      	push	{r4, lr}
  lcd_cmd(ST7735S_CASET);
 80008fa:	202a      	movs	r0, #42	@ 0x2a
 80008fc:	f7ff ff9c 	bl	8000838 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff ff8f 	bl	8000824 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8000906:	20a0      	movs	r0, #160	@ 0xa0
 8000908:	f7ff ff8c 	bl	8000824 <lcd_data16>
  lcd_cmd(ST7735S_RASET);
 800090c:	202b      	movs	r0, #43	@ 0x2b
 800090e:	f7ff ff93 	bl	8000838 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff ff86 	bl	8000824 <lcd_data16>
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
	lcd_cmd(ST7735S_RAMWR);
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000918:	4c0d      	ldr	r4, [pc, #52]	@ (8000950 <lcd_copy+0x58>)
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800091a:	2081      	movs	r0, #129	@ 0x81
 800091c:	f7ff ff82 	bl	8000824 <lcd_data16>
	lcd_cmd(ST7735S_RAMWR);
 8000920:	202c      	movs	r0, #44	@ 0x2c
 8000922:	f7ff ff89 	bl	8000838 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000926:	4620      	mov	r0, r4
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092e:	f001 fae9 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000932:	4620      	mov	r0, r4
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800093a:	f001 fae3 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
}
 800093e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8000942:	4904      	ldr	r1, [pc, #16]	@ (8000954 <lcd_copy+0x5c>)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <lcd_copy+0x60>)
 8000946:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800094a:	f002 bbf9 	b.w	8003140 <HAL_SPI_Transmit_DMA>
 800094e:	bf00      	nop
 8000950:	48000400 	.word	0x48000400
 8000954:	20000138 	.word	0x20000138
 8000958:	2000a188 	.word	0x2000a188

0800095c <lcd_transfer_done>:
void lcd_transfer_done(void)
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <lcd_transfer_done+0xc>)
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000964:	f001 bace 	b.w	8001f04 <HAL_GPIO_WritePin>
 8000968:	48000400 	.word	0x48000400

0800096c <lcd_is_busy>:
}
bool lcd_is_busy(void)
{
 800096c:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 800096e:	4803      	ldr	r0, [pc, #12]	@ (800097c <lcd_is_busy+0x10>)
 8000970:	f002 fcb7 	bl	80032e2 <HAL_SPI_GetState>
		return true;
	else
		return false;
}
 8000974:	1e83      	subs	r3, r0, #2
 8000976:	4258      	negs	r0, r3
 8000978:	4158      	adcs	r0, r3
 800097a:	bd08      	pop	{r3, pc}
 800097c:	2000a188 	.word	0x2000a188

08000980 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint16_t current_progress = 0;
int __io_putchar(int ch)
{
 8000980:	b507      	push	{r0, r1, r2, lr}
    if (ch == '\n')
 8000982:	280a      	cmp	r0, #10
{
 8000984:	9001      	str	r0, [sp, #4]
    if (ch == '\n')
 8000986:	d102      	bne.n	800098e <__io_putchar+0xe>
        __io_putchar('\r');
 8000988:	200d      	movs	r0, #13
 800098a:	f7ff fff9 	bl	8000980 <__io_putchar>

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	2201      	movs	r2, #1
 8000994:	a901      	add	r1, sp, #4
 8000996:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <__io_putchar+0x24>)
 8000998:	f002 fe86 	bl	80036a8 <HAL_UART_Transmit>
    return 1;
}
 800099c:	2001      	movs	r0, #1
 800099e:	b003      	add	sp, #12
 80009a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a4:	2000a1f0 	.word	0x2000a1f0

080009a8 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi)
{
    if(hspi == &hspi2)
 80009a8:	4b02      	ldr	r3, [pc, #8]	@ (80009b4 <HAL_SPI_TxCpltCallback+0xc>)
 80009aa:	4283      	cmp	r3, r0
 80009ac:	d101      	bne.n	80009b2 <HAL_SPI_TxCpltCallback+0xa>
    {
    	lcd_transfer_done();
 80009ae:	f7ff bfd5 	b.w	800095c <lcd_transfer_done>
    }
}
 80009b2:	4770      	bx	lr
 80009b4:	2000a188 	.word	0x2000a188

080009b8 <potentiometer_ball>:
// zad.3 piłka kierowana dzięki potencjometrom (2 - jeden od x drugi od y)



void potentiometer_ball(uint16_t x_value, uint16_t y_value)
{
 80009b8:	b538      	push	{r3, r4, r5, lr}
    uint16_t potentiometer_ball_x = (x_value * 128) / 4095; ;
    uint16_t potentiometer_ball_y =  (y_value * 159)  / 4095;
 80009ba:	249f      	movs	r4, #159	@ 0x9f
{
 80009bc:	460a      	mov	r2, r1
    uint16_t potentiometer_ball_x = (x_value * 128) / 4095; ;
 80009be:	01c5      	lsls	r5, r0, #7
    uint16_t potentiometer_ball_y =  (y_value * 159)  / 4095;
 80009c0:	434c      	muls	r4, r1

    printf("x_value = %d, y_value = %d\n", x_value, y_value);
 80009c2:	4601      	mov	r1, r0
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <potentiometer_ball+0x40>)
    uint16_t potentiometer_ball_x = (x_value * 128) / 4095; ;
 80009c6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80009ca:	fbb5 f5f3 	udiv	r5, r5, r3
    uint16_t potentiometer_ball_y =  (y_value * 159)  / 4095;
 80009ce:	fbb4 f4f3 	udiv	r4, r4, r3
    printf("x_value = %d, y_value = %d\n", x_value, y_value);
 80009d2:	f003 fba3 	bl	800411c <iprintf>

    // zrobić ekran żeby piłka nie wypadła !!!
	uint16_t ball_radius = 5; // maybe this will be controlled by 3 potentiometer or photoresistor :o
	hagl_clear_screen();
 80009d6:	f003 f911 	bl	8003bfc <hagl_clear_screen>
	hagl_fill_circle(potentiometer_ball_x,potentiometer_ball_y,ball_radius,WHITE);
 80009da:	b221      	sxth	r1, r4
 80009dc:	b228      	sxth	r0, r5
 80009de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009e2:	2205      	movs	r2, #5
 80009e4:	f003 f928 	bl	8003c38 <hagl_fill_circle>
    printf("pontentiometer_value_X = %d, potentiometer_value_Y = %d\n", potentiometer_ball_x, potentiometer_ball_y);
 80009e8:	4622      	mov	r2, r4
 80009ea:	4629      	mov	r1, r5
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <potentiometer_ball+0x44>)
    
}
 80009ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("pontentiometer_value_X = %d, potentiometer_value_Y = %d\n", potentiometer_ball_x, potentiometer_ball_y);
 80009f2:	f003 bb93 	b.w	800411c <iprintf>
 80009f6:	bf00      	nop
 80009f8:	08004bf4 	.word	0x08004bf4
 80009fc:	08004c10 	.word	0x08004c10

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b500      	push	{lr}
 8000a02:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a04:	2244      	movs	r2, #68	@ 0x44
 8000a06:	2100      	movs	r1, #0
 8000a08:	a805      	add	r0, sp, #20
 8000a0a:	f003 fbdc 	bl	80041c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0e:	2214      	movs	r2, #20
 8000a10:	2100      	movs	r1, #0
 8000a12:	4668      	mov	r0, sp
 8000a14:	f003 fbd7 	bl	80041c6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a18:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a1c:	f001 fa80 	bl	8001f20 <HAL_PWREx_ControlVoltageScaling>
 8000a20:	b108      	cbz	r0, 8000a26 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a22:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a26:	2310      	movs	r3, #16
 8000a28:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a2a:	2360      	movs	r3, #96	@ 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a2c:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a2e:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a32:	e9cd 200b 	strd	r2, r0, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a36:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a3a:	2028      	movs	r0, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a3e:	2207      	movs	r2, #7
 8000a40:	e9cd 0212 	strd	r0, r2, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a46:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f001 fb2f 	bl	80020ac <HAL_RCC_OscConfig>
 8000a4e:	b108      	cbz	r0, 8000a54 <SystemClock_Config+0x54>
 8000a50:	b672      	cpsid	i
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	220f      	movs	r2, #15
 8000a5a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a66:	f001 fd9f 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000a6a:	b108      	cbz	r0, 8000a70 <SystemClock_Config+0x70>
 8000a6c:	b672      	cpsid	i
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <SystemClock_Config+0x6e>
}
 8000a70:	b017      	add	sp, #92	@ 0x5c
 8000a72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000a78 <main>:
{
 8000a78:	b508      	push	{r3, lr}
  HAL_Init();
 8000a7a:	f000 f9f3 	bl	8000e64 <HAL_Init>
  SystemClock_Config();
 8000a7e:	f7ff ffbf 	bl	8000a00 <SystemClock_Config>
  MX_GPIO_Init();
 8000a82:	f7ff fe69 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a86:	f7ff fe47 	bl	8000718 <MX_DMA_Init>
  MX_SPI2_Init();
 8000a8a:	f000 f82b 	bl	8000ae4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000a8e:	f000 f939 	bl	8000d04 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a92:	f7ff fd65 	bl	8000560 <MX_ADC1_Init>
  current_progress = 0;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <main+0x5c>)
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a98:	480f      	ldr	r0, [pc, #60]	@ (8000ad8 <main+0x60>)
      potentiometer_ball(ADC_Value[1], ADC_Value[2]);
 8000a9a:	4c10      	ldr	r4, [pc, #64]	@ (8000adc <main+0x64>)
  current_progress = 0;
 8000a9c:	2200      	movs	r2, #0
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a9e:	217f      	movs	r1, #127	@ 0x7f
  current_progress = 0;
 8000aa0:	801a      	strh	r2, [r3, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000aa2:	f000 ff3e 	bl	8001922 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 3);
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <main+0x64>)
 8000aa8:	480b      	ldr	r0, [pc, #44]	@ (8000ad8 <main+0x60>)
 8000aaa:	2203      	movs	r2, #3
 8000aac:	f000 fe8c 	bl	80017c8 <HAL_ADC_Start_DMA>
  lcd_init();
 8000ab0:	f7ff fee6 	bl	8000880 <lcd_init>
      potentiometer_ball(ADC_Value[1], ADC_Value[2]);
 8000ab4:	8860      	ldrh	r0, [r4, #2]
 8000ab6:	88a1      	ldrh	r1, [r4, #4]
 8000ab8:	b280      	uxth	r0, r0
 8000aba:	b289      	uxth	r1, r1
 8000abc:	f7ff ff7c 	bl	80009b8 <potentiometer_ball>
      while (lcd_is_busy()) {}
 8000ac0:	f7ff ff54 	bl	800096c <lcd_is_busy>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1fb      	bne.n	8000ac0 <main+0x48>
      lcd_copy();
 8000ac8:	f7ff ff16 	bl	80008f8 <lcd_copy>
      HAL_Delay(50);
 8000acc:	2032      	movs	r0, #50	@ 0x32
 8000ace:	f000 f9eb 	bl	8000ea8 <HAL_Delay>
      potentiometer_ball(ADC_Value[1], ADC_Value[2]);
 8000ad2:	e7ef      	b.n	8000ab4 <main+0x3c>
 8000ad4:	2000a13e 	.word	0x2000a13e
 8000ad8:	200000d4 	.word	0x200000d4
 8000adc:	2000a138 	.word	0x2000a138

08000ae0 <Error_Handler>:
 8000ae0:	b672      	cpsid	i
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <Error_Handler+0x2>

08000ae4 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ae4:	4810      	ldr	r0, [pc, #64]	@ (8000b28 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4a11      	ldr	r2, [pc, #68]	@ (8000b2c <MX_SPI2_Init+0x48>)
{
 8000ae8:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aea:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000aee:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000af8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b00:	2210      	movs	r2, #16
 8000b02:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8000b06:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b10:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b14:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b16:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b18:	f002 f9e2 	bl	8002ee0 <HAL_SPI_Init>
 8000b1c:	b118      	cbz	r0, 8000b26 <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b22:	f7ff bfdd 	b.w	8000ae0 <Error_Handler>
}
 8000b26:	bd08      	pop	{r3, pc}
 8000b28:	2000a188 	.word	0x2000a188
 8000b2c:	40003800 	.word	0x40003800

08000b30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	4606      	mov	r6, r0
 8000b34:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	2214      	movs	r2, #20
 8000b38:	2100      	movs	r1, #0
 8000b3a:	a803      	add	r0, sp, #12
 8000b3c:	f003 fb43 	bl	80041c6 <memset>
  if(spiHandle->Instance==SPI2)
 8000b40:	6832      	ldr	r2, [r6, #0]
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <HAL_SPI_MspInit+0xb4>)
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d14a      	bne.n	8000bde <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b48:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	4825      	ldr	r0, [pc, #148]	@ (8000be8 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000b56:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b5a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000b5e:	9200      	str	r2, [sp, #0]
 8000b60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b64:	f042 0204 	orr.w	r2, r2, #4
 8000b68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6c:	f002 0204 	and.w	r2, r2, #4
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b76:	f042 0202 	orr.w	r2, r2, #2
 8000b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b84:	2405      	movs	r4, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b88:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b92:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f001 f8db 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	4812      	ldr	r0, [pc, #72]	@ (8000bec <HAL_SPI_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	a903      	add	r1, sp, #12

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000baa:	4c11      	ldr	r4, [pc, #68]	@ (8000bf0 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f001 f8ce 	bl	8001d50 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <HAL_SPI_MspInit+0xc4>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbe:	2310      	movs	r3, #16
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bc4:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	2380      	movs	r3, #128	@ 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc8:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000bcc:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bd0:	f000 ffce 	bl	8001b70 <HAL_DMA_Init>
 8000bd4:	b108      	cbz	r0, 8000bda <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000bd6:	f7ff ff83 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000bda:	6574      	str	r4, [r6, #84]	@ 0x54
 8000bdc:	62a6      	str	r6, [r4, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bde:	b009      	add	sp, #36	@ 0x24
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40003800 	.word	0x40003800
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	2000a140 	.word	0x2000a140
 8000bf4:	40020058 	.word	0x40020058

08000bf8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_MspInit+0x2c>)
 8000bfa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bfc:	f042 0201 	orr.w	r2, r2, #1
 8000c00:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8000c04:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	f002 0201 	and.w	r2, r2, #1
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c10:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	b002      	add	sp, #8
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000

08000c28 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler>

08000c2a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler>

08000c2c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler>

08000c2e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler>

08000c30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler>

08000c32 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 b924 	b.w	8000e84 <HAL_IncTick>

08000c3c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c3c:	4801      	ldr	r0, [pc, #4]	@ (8000c44 <DMA1_Channel1_IRQHandler+0x8>)
 8000c3e:	f001 b83d 	b.w	8001cbc <HAL_DMA_IRQHandler>
 8000c42:	bf00      	nop
 8000c44:	2000008c 	.word	0x2000008c

08000c48 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c48:	4801      	ldr	r0, [pc, #4]	@ (8000c50 <DMA1_Channel5_IRQHandler+0x8>)
 8000c4a:	f001 b837 	b.w	8001cbc <HAL_DMA_IRQHandler>
 8000c4e:	bf00      	nop
 8000c50:	2000a140 	.word	0x2000a140

08000c54 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c54:	4801      	ldr	r0, [pc, #4]	@ (8000c5c <ADC1_2_IRQHandler+0x8>)
 8000c56:	f000 ba39 	b.w	80010cc <HAL_ADC_IRQHandler>
 8000c5a:	bf00      	nop
 8000c5c:	200000d4 	.word	0x200000d4

08000c60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	460d      	mov	r5, r1
 8000c64:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	460e      	mov	r6, r1
 8000c68:	1b73      	subs	r3, r6, r5
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	dc01      	bgt.n	8000c72 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000c6e:	4620      	mov	r0, r4
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000c72:	f3af 8000 	nop.w
 8000c76:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	e7f5      	b.n	8000c68 <_read+0x8>

08000c7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	460e      	mov	r6, r1
 8000c84:	1b73      	subs	r3, r6, r5
 8000c86:	429c      	cmp	r4, r3
 8000c88:	dc01      	bgt.n	8000c8e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000c8e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000c92:	f7ff fe75 	bl	8000980 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	e7f5      	b.n	8000c84 <_write+0x8>

08000c98 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4770      	bx	lr

08000cac <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000cac:	2000      	movs	r0, #0
 8000cae:	4770      	bx	lr

08000cb0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <_sbrk+0x30>)
 8000cb2:	6811      	ldr	r1, [r2, #0]
{
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000cb8:	b909      	cbnz	r1, 8000cbe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000cba:	490a      	ldr	r1, [pc, #40]	@ (8000ce4 <_sbrk+0x34>)
 8000cbc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	4909      	ldr	r1, [pc, #36]	@ (8000ce8 <_sbrk+0x38>)
 8000cc2:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <_sbrk+0x3c>)
 8000cc4:	4403      	add	r3, r0
 8000cc6:	1b09      	subs	r1, r1, r4
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d906      	bls.n	8000cda <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ccc:	f003 fada 	bl	8004284 <__errno>
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000cd8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000cda:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000cdc:	e7fc      	b.n	8000cd8 <_sbrk+0x28>
 8000cde:	bf00      	nop
 8000ce0:	2000a1ec 	.word	0x2000a1ec
 8000ce4:	2000a3c8 	.word	0x2000a3c8
 8000ce8:	20018000 	.word	0x20018000
 8000cec:	00002000 	.word	0x00002000

08000cf0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf0:	4a03      	ldr	r2, [pc, #12]	@ (8000d00 <SystemInit+0x10>)
 8000cf2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000cf6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8000d06:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <MX_USART2_UART_Init+0x38>)
{
 8000d08:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8000d0a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d0e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d16:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d24:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d26:	f002 fd69 	bl	80037fc <HAL_UART_Init>
 8000d2a:	b118      	cbz	r0, 8000d34 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000d30:	f7ff bed6 	b.w	8000ae0 <Error_Handler>
}
 8000d34:	bd08      	pop	{r3, pc}
 8000d36:	bf00      	nop
 8000d38:	2000a1f0 	.word	0x2000a1f0
 8000d3c:	40004400 	.word	0x40004400

08000d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d40:	b510      	push	{r4, lr}
 8000d42:	b0aa      	sub	sp, #168	@ 0xa8
 8000d44:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	2214      	movs	r2, #20
 8000d48:	2100      	movs	r1, #0
 8000d4a:	a803      	add	r0, sp, #12
 8000d4c:	f003 fa3b 	bl	80041c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	2288      	movs	r2, #136	@ 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	a808      	add	r0, sp, #32
 8000d56:	f003 fa36 	bl	80041c6 <memset>
  if(uartHandle->Instance==USART2)
 8000d5a:	6822      	ldr	r2, [r4, #0]
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <HAL_UART_MspInit+0x7c>)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d129      	bne.n	8000db6 <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d62:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d66:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f001 fdec 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	b108      	cbz	r0, 8000d72 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000d6e:	f7ff feb7 	bl	8000ae0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_UART_MspInit+0x80>)
 8000d74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000d7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d7e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d88:	f042 0201 	orr.w	r2, r2, #1
 8000d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	9302      	str	r3, [sp, #8]
 8000d96:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	220c      	movs	r2, #12
 8000d9a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dac:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f000 ffcd 	bl	8001d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db6:	b02a      	add	sp, #168	@ 0xa8
 8000db8:	bd10      	pop	{r4, pc}
 8000dba:	bf00      	nop
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff ff92 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f003 fa4d 	bl	8004290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fe3f 	bl	8000a78 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e08:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 8000e0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e10:	2000a3c8 	.word	0x2000a3c8

08000e14 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC3_IRQHandler>
	...

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_InitTick+0x40>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
{
 8000e1e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	b90a      	cbnz	r2, 8000e26 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e22:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000e24:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_InitTick+0x44>)
 8000e30:	6810      	ldr	r0, [r2, #0]
 8000e32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e36:	f000 fe87 	bl	8001b48 <HAL_SYSTICK_Config>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	d1f0      	bne.n	8000e22 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	2d0f      	cmp	r5, #15
 8000e42:	d8ee      	bhi.n	8000e22 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	4602      	mov	r2, r0
 8000e46:	4629      	mov	r1, r5
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 fe3c 	bl	8001ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_InitTick+0x48>)
 8000e52:	4620      	mov	r0, r4
 8000e54:	601d      	str	r5, [r3, #0]
  return status;
 8000e56:	e7e5      	b.n	8000e24 <HAL_InitTick+0xc>
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_Init>:
{
 8000e64:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 fe1c 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6c:	200f      	movs	r0, #15
 8000e6e:	f7ff ffd3 	bl	8000e18 <HAL_InitTick>
 8000e72:	4604      	mov	r4, r0
 8000e74:	b918      	cbnz	r0, 8000e7e <HAL_Init+0x1a>
    HAL_MspInit();
 8000e76:	f7ff febf 	bl	8000bf8 <HAL_MspInit>
}
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e7e:	2401      	movs	r4, #1
 8000e80:	e7fb      	b.n	8000e7a <HAL_Init+0x16>
	...

08000e84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4a03      	ldr	r2, [pc, #12]	@ (8000e94 <HAL_IncTick+0x10>)
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <HAL_IncTick+0x14>)
 8000e88:	6811      	ldr	r1, [r2, #0]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000a278 	.word	0x2000a278
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e9c:	4b01      	ldr	r3, [pc, #4]	@ (8000ea4 <HAL_GetTick+0x8>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000a278 	.word	0x2000a278

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff fff6 	bl	8000e9c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8000eb2:	bf1c      	itt	ne
 8000eb4:	4b05      	ldrne	r3, [pc, #20]	@ (8000ecc <HAL_Delay+0x24>)
 8000eb6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8000eba:	bf18      	it	ne
 8000ebc:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	f7ff ffed 	bl	8000e9c <HAL_GetTick>
 8000ec2:	1b43      	subs	r3, r0, r5
 8000ec4:	42a3      	cmp	r3, r4
 8000ec6:	d3fa      	bcc.n	8000ebe <HAL_Delay+0x16>
  {
  }
}
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ed0:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000ed2:	0dcc      	lsrs	r4, r1, #23
 8000ed4:	f004 0404 	and.w	r4, r4, #4
 8000ed8:	3014      	adds	r0, #20
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eda:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000ede:	5903      	ldr	r3, [r0, r4]
 8000ee0:	2507      	movs	r5, #7
 8000ee2:	408d      	lsls	r5, r1
 8000ee4:	ea23 0305 	bic.w	r3, r3, r5
 8000ee8:	408a      	lsls	r2, r1
 8000eea:	4313      	orrs	r3, r2
 8000eec:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000eee:	bd30      	pop	{r4, r5, pc}

08000ef0 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ef0:	6880      	ldr	r0, [r0, #8]
}
 8000ef2:	f000 0001 	and.w	r0, r0, #1
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ef8:	6880      	ldr	r0, [r0, #8]
}
 8000efa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000efe:	4770      	bx	lr

08000f00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f06:	4604      	mov	r4, r0
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	f000 80c5 	beq.w	8001098 <HAL_ADC_Init+0x198>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0e:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8000f10:	b925      	cbnz	r5, 8000f1c <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f12:	f7ff fb8b 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f16:	65a5      	str	r5, [r4, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f18:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f1c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	0095      	lsls	r5, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f22:	bf41      	itttt	mi
 8000f24:	689a      	ldrmi	r2, [r3, #8]
 8000f26:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 8000f2a:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 8000f2e:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	00d0      	lsls	r0, r2, #3
 8000f34:	f140 808f 	bpl.w	8001056 <HAL_ADC_Init+0x156>
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	00d1      	lsls	r1, r2, #3
 8000f3c:	f100 80a2 	bmi.w	8001084 <HAL_ADC_Init+0x184>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f42:	f042 0210 	orr.w	r2, r2, #16
 8000f46:	6562      	str	r2, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f48:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	65a2      	str	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f50:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffd0 	bl	8000ef8 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f5a:	f002 0210 	and.w	r2, r2, #16
 8000f5e:	4302      	orrs	r2, r0
 8000f60:	f040 8096 	bne.w	8001090 <HAL_ADC_Init+0x190>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f66:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8000f6a:	f042 0202 	orr.w	r2, r2, #2
 8000f6e:	6562      	str	r2, [r4, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ffbd 	bl	8000ef0 <LL_ADC_IsEnabled>
 8000f76:	b998      	cbnz	r0, 8000fa0 <HAL_ADC_Init+0xa0>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f78:	4848      	ldr	r0, [pc, #288]	@ (800109c <HAL_ADC_Init+0x19c>)
 8000f7a:	f7ff ffb9 	bl	8000ef0 <LL_ADC_IsEnabled>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4847      	ldr	r0, [pc, #284]	@ (80010a0 <HAL_ADC_Init+0x1a0>)
 8000f82:	f7ff ffb5 	bl	8000ef0 <LL_ADC_IsEnabled>
 8000f86:	4302      	orrs	r2, r0
 8000f88:	4846      	ldr	r0, [pc, #280]	@ (80010a4 <HAL_ADC_Init+0x1a4>)
 8000f8a:	f7ff ffb1 	bl	8000ef0 <LL_ADC_IsEnabled>
 8000f8e:	4302      	orrs	r2, r0
 8000f90:	d106      	bne.n	8000fa0 <HAL_ADC_Init+0xa0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f92:	4845      	ldr	r0, [pc, #276]	@ (80010a8 <HAL_ADC_Init+0x1a8>)
 8000f94:	6865      	ldr	r5, [r4, #4]
 8000f96:	6882      	ldr	r2, [r0, #8]
 8000f98:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8000f9c:	432a      	orrs	r2, r5
 8000f9e:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8000fa0:	68e5      	ldr	r5, [r4, #12]
 8000fa2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fa4:	f894 0020 	ldrb.w	r0, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8000fa8:	432a      	orrs	r2, r5
 8000faa:	68a5      	ldr	r5, [r4, #8]
 8000fac:	432a      	orrs	r2, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fae:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb0:	2801      	cmp	r0, #1
                 hadc->Init.DataAlign                                                   |
 8000fb2:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fba:	bf02      	ittt	eq
 8000fbc:	6a60      	ldreq	r0, [r4, #36]	@ 0x24
 8000fbe:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8000fc2:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000fc8:	b120      	cbz	r0, 8000fd4 <HAL_ADC_Init+0xd4>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8000fca:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fcc:	f400 7070 	and.w	r0, r0, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000fd0:	4328      	orrs	r0, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fd2:	4302      	orrs	r2, r0
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000fd4:	68dd      	ldr	r5, [r3, #12]
 8000fd6:	4835      	ldr	r0, [pc, #212]	@ (80010ac <HAL_ADC_Init+0x1ac>)
 8000fd8:	4028      	ands	r0, r5
 8000fda:	4310      	orrs	r0, r2
 8000fdc:	60d8      	str	r0, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	0712      	lsls	r2, r2, #28
 8000fe2:	d420      	bmi.n	8001026 <HAL_ADC_Init+0x126>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fe4:	68d8      	ldr	r0, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fe6:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fea:	7e25      	ldrb	r5, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fec:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fee:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ff2:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000ff6:	f020 0002 	bic.w	r0, r0, #2
 8000ffa:	4302      	orrs	r2, r0
 8000ffc:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ffe:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8001002:	2a01      	cmp	r2, #1
 8001004:	d140      	bne.n	8001088 <HAL_ADC_Init+0x188>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001006:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	@ 0x3c
 800100a:	6918      	ldr	r0, [r3, #16]
 800100c:	f420 60ff 	bic.w	r0, r0, #2040	@ 0x7f8
 8001010:	f020 0004 	bic.w	r0, r0, #4
 8001014:	432a      	orrs	r2, r5
 8001016:	4302      	orrs	r2, r0
 8001018:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800101a:	4302      	orrs	r2, r0
 800101c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800101e:	4302      	orrs	r2, r0
 8001020:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001024:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001026:	6922      	ldr	r2, [r4, #16]
 8001028:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800102a:	bf05      	ittet	eq
 800102c:	6b18      	ldreq	r0, [r3, #48]	@ 0x30
 800102e:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001030:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001032:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001036:	bf06      	itte	eq
 8001038:	f020 000f 	biceq.w	r0, r0, #15
 800103c:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800103e:	f022 020f 	bicne.w	r2, r2, #15
 8001042:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001044:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001046:	f023 0303 	bic.w	r3, r3, #3
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001050:	4608      	mov	r0, r1
 8001052:	b003      	add	sp, #12
 8001054:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001056:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001058:	4915      	ldr	r1, [pc, #84]	@ (80010b0 <HAL_ADC_Init+0x1b0>)
 800105a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800105e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001062:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_ADC_Init+0x1b4>)
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	fbb2 f2f1 	udiv	r2, r2, r1
 8001070:	3201      	adds	r2, #1
 8001072:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 8001074:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8001076:	9a01      	ldr	r2, [sp, #4]
 8001078:	2a00      	cmp	r2, #0
 800107a:	f43f af5d 	beq.w	8000f38 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 800107e:	9a01      	ldr	r2, [sp, #4]
 8001080:	3a01      	subs	r2, #1
 8001082:	e7f7      	b.n	8001074 <HAL_ADC_Init+0x174>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	2100      	movs	r1, #0
 8001086:	e764      	b.n	8000f52 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	e7c9      	b.n	8001024 <HAL_ADC_Init+0x124>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001090:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001098:	2101      	movs	r1, #1
 800109a:	e7d9      	b.n	8001050 <HAL_ADC_Init+0x150>
 800109c:	50040000 	.word	0x50040000
 80010a0:	50040100 	.word	0x50040100
 80010a4:	50040200 	.word	0x50040200
 80010a8:	50040300 	.word	0x50040300
 80010ac:	fff0c007 	.word	0xfff0c007
 80010b0:	00030d40 	.word	0x00030d40
 80010b4:	20000000 	.word	0x20000000

080010b8 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 80010b8:	4770      	bx	lr

080010ba <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 80010ba:	4770      	bx	lr

080010bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80010bc:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010be:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80010c0:	f7ff fffb 	bl	80010ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010c4:	bd08      	pop	{r3, pc}

080010c6 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80010c6:	4770      	bx	lr

080010c8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80010cc:	6803      	ldr	r3, [r0, #0]
{
 80010ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010d2:	f8df 8238 	ldr.w	r8, [pc, #568]	@ 800130c <HAL_ADC_IRQHandler+0x240>
  uint32_t tmp_isr = hadc->Instance->ISR;
 80010d6:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80010d8:	685d      	ldr	r5, [r3, #4]
 80010da:	f8d8 7008 	ldr.w	r7, [r8, #8]
{
 80010de:	4604      	mov	r4, r0
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80010e0:	07b0      	lsls	r0, r6, #30
 80010e2:	f007 071f 	and.w	r7, r7, #31
 80010e6:	d50e      	bpl.n	8001106 <HAL_ADC_IRQHandler+0x3a>
 80010e8:	07a9      	lsls	r1, r5, #30
 80010ea:	d50c      	bpl.n	8001106 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010ee:	06da      	lsls	r2, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80010f0:	bf5e      	ittt	pl
 80010f2:	6d63      	ldrpl	r3, [r4, #84]	@ 0x54
 80010f4:	f443 6300 	orrpl.w	r3, r3, #2048	@ 0x800
 80010f8:	6563      	strpl	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80010fa:	4620      	mov	r0, r4
 80010fc:	f000 fc5d 	bl	80019ba <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	2202      	movs	r2, #2
 8001104:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001106:	0773      	lsls	r3, r6, #29
 8001108:	d501      	bpl.n	800110e <HAL_ADC_IRQHandler+0x42>
 800110a:	0768      	lsls	r0, r5, #29
 800110c:	d403      	bmi.n	8001116 <HAL_ADC_IRQHandler+0x4a>
 800110e:	0731      	lsls	r1, r6, #28
 8001110:	d537      	bpl.n	8001182 <HAL_ADC_IRQHandler+0xb6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001112:	072a      	lsls	r2, r5, #28
 8001114:	d535      	bpl.n	8001182 <HAL_ADC_IRQHandler+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001116:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001118:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800111a:	bf5e      	ittt	pl
 800111c:	6d63      	ldrpl	r3, [r4, #84]	@ 0x54
 800111e:	f443 7300 	orrpl.w	r3, r3, #512	@ 0x200
 8001122:	6563      	strpl	r3, [r4, #84]	@ 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001124:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800112c:	d123      	bne.n	8001176 <HAL_ADC_IRQHandler+0xaa>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800112e:	4a75      	ldr	r2, [pc, #468]	@ (8001304 <HAL_ADC_IRQHandler+0x238>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d105      	bne.n	8001140 <HAL_ADC_IRQHandler+0x74>
 8001134:	f240 2221 	movw	r2, #545	@ 0x221
 8001138:	40fa      	lsrs	r2, r7
 800113a:	07d0      	lsls	r0, r2, #31
 800113c:	f140 80be 	bpl.w	80012bc <HAL_ADC_IRQHandler+0x1f0>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001140:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001142:	0491      	lsls	r1, r2, #18
 8001144:	d417      	bmi.n	8001176 <HAL_ADC_IRQHandler+0xaa>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	0712      	lsls	r2, r2, #28
 800114a:	d514      	bpl.n	8001176 <HAL_ADC_IRQHandler+0xaa>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fed3 	bl	8000ef8 <LL_ADC_REG_IsConversionOngoing>
 8001152:	2800      	cmp	r0, #0
 8001154:	f040 80b5 	bne.w	80012c2 <HAL_ADC_IRQHandler+0x1f6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	f022 020c 	bic.w	r2, r2, #12
 800115e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001160:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001166:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001168:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800116a:	04d8      	lsls	r0, r3, #19
 800116c:	d403      	bmi.n	8001176 <HAL_ADC_IRQHandler+0xaa>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800116e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff ff9e 	bl	80010b8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001182:	06b1      	lsls	r1, r6, #26
 8001184:	d501      	bpl.n	800118a <HAL_ADC_IRQHandler+0xbe>
 8001186:	06aa      	lsls	r2, r5, #26
 8001188:	d403      	bmi.n	8001192 <HAL_ADC_IRQHandler+0xc6>
 800118a:	0673      	lsls	r3, r6, #25
 800118c:	d53a      	bpl.n	8001204 <HAL_ADC_IRQHandler+0x138>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800118e:	0668      	lsls	r0, r5, #25
 8001190:	d538      	bpl.n	8001204 <HAL_ADC_IRQHandler+0x138>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001192:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001194:	4a5b      	ldr	r2, [pc, #364]	@ (8001304 <HAL_ADC_IRQHandler+0x238>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001196:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001198:	bf5e      	ittt	pl
 800119a:	6d63      	ldrpl	r3, [r4, #84]	@ 0x54
 800119c:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 80011a0:	6563      	strpl	r3, [r4, #84]	@ 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80011a2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011a4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011a6:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011a8:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011aa:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 80011ae:	f040 8091 	bne.w	80012d4 <HAL_ADC_IRQHandler+0x208>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011b2:	22c1      	movs	r2, #193	@ 0xc1
 80011b4:	40fa      	lsrs	r2, r7
 80011b6:	07d2      	lsls	r2, r2, #31
 80011b8:	f100 808c 	bmi.w	80012d4 <HAL_ADC_IRQHandler+0x208>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80011bc:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <HAL_ADC_IRQHandler+0x23c>)
 80011be:	68d2      	ldr	r2, [r2, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80011c0:	b9d1      	cbnz	r1, 80011f8 <HAL_ADC_IRQHandler+0x12c>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80011c2:	0191      	lsls	r1, r2, #6
 80011c4:	d505      	bpl.n	80011d2 <HAL_ADC_IRQHandler+0x106>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80011c6:	f402 5100 	and.w	r1, r2, #8192	@ 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011ca:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80011ce:	4301      	orrs	r1, r0
 80011d0:	d112      	bne.n	80011f8 <HAL_ADC_IRQHandler+0x12c>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	0649      	lsls	r1, r1, #25
 80011d6:	d50f      	bpl.n	80011f8 <HAL_ADC_IRQHandler+0x12c>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80011d8:	0292      	lsls	r2, r2, #10
 80011da:	d40d      	bmi.n	80011f8 <HAL_ADC_IRQHandler+0x12c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	0710      	lsls	r0, r2, #28
 80011e0:	d47a      	bmi.n	80012d8 <HAL_ADC_IRQHandler+0x20c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80011e8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80011ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011f0:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80011f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011f4:	05d9      	lsls	r1, r3, #23
 80011f6:	d578      	bpl.n	80012ea <HAL_ADC_IRQHandler+0x21e>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011f8:	4620      	mov	r0, r4
 80011fa:	f000 fbda 	bl	80019b2 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	2260      	movs	r2, #96	@ 0x60
 8001202:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001204:	0632      	lsls	r2, r6, #24
 8001206:	d50b      	bpl.n	8001220 <HAL_ADC_IRQHandler+0x154>
 8001208:	062b      	lsls	r3, r5, #24
 800120a:	d509      	bpl.n	8001220 <HAL_ADC_IRQHandler+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800120c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800120e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001212:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff ff56 	bl	80010c6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001220:	05f0      	lsls	r0, r6, #23
 8001222:	d50c      	bpl.n	800123e <HAL_ADC_IRQHandler+0x172>
 8001224:	05e9      	lsls	r1, r5, #23
 8001226:	d50a      	bpl.n	800123e <HAL_ADC_IRQHandler+0x172>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001228:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800122a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122e:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001230:	4620      	mov	r0, r4
 8001232:	f000 fbc0 	bl	80019b6 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800123c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800123e:	05b2      	lsls	r2, r6, #22
 8001240:	d50c      	bpl.n	800125c <HAL_ADC_IRQHandler+0x190>
 8001242:	05ab      	lsls	r3, r5, #22
 8001244:	d50a      	bpl.n	800125c <HAL_ADC_IRQHandler+0x190>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001246:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124c:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800124e:	4620      	mov	r0, r4
 8001250:	f000 fbb2 	bl	80019b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800125c:	06f0      	lsls	r0, r6, #27
 800125e:	d518      	bpl.n	8001292 <HAL_ADC_IRQHandler+0x1c6>
 8001260:	06e9      	lsls	r1, r5, #27
 8001262:	d516      	bpl.n	8001292 <HAL_ADC_IRQHandler+0x1c6>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001266:	b133      	cbz	r3, 8001276 <HAL_ADC_IRQHandler+0x1aa>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001268:	2f00      	cmp	r7, #0
 800126a:	d043      	beq.n	80012f4 <HAL_ADC_IRQHandler+0x228>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800126c:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001270:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001274:	d00a      	beq.n	800128c <HAL_ADC_IRQHandler+0x1c0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001276:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001278:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127c:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800127e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff ff1e 	bl	80010c8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001292:	0572      	lsls	r2, r6, #21
 8001294:	d533      	bpl.n	80012fe <HAL_ADC_IRQHandler+0x232>
 8001296:	056b      	lsls	r3, r5, #21
 8001298:	d531      	bpl.n	80012fe <HAL_ADC_IRQHandler+0x232>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800129a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80012a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80012b0:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80012b8:	f000 bb7c 	b.w	80019b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_IRQHandler+0x23c>)
 80012be:	68d2      	ldr	r2, [r2, #12]
 80012c0:	e73f      	b.n	8001142 <HAL_ADC_IRQHandler+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80012d2:	e750      	b.n	8001176 <HAL_ADC_IRQHandler+0xaa>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	e773      	b.n	80011c0 <HAL_ADC_IRQHandler+0xf4>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80012e8:	e786      	b.n	80011f8 <HAL_ADC_IRQHandler+0x12c>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6563      	str	r3, [r4, #84]	@ 0x54
 80012f2:	e781      	b.n	80011f8 <HAL_ADC_IRQHandler+0x12c>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f013 0f01 	tst.w	r3, #1
 80012fc:	e7ba      	b.n	8001274 <HAL_ADC_IRQHandler+0x1a8>
}
 80012fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001302:	bf00      	nop
 8001304:	50040100 	.word	0x50040100
 8001308:	50040000 	.word	0x50040000
 800130c:	50040300 	.word	0x50040300

08001310 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001310:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001312:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001314:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001318:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800131c:	d121      	bne.n	8001362 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	6811      	ldr	r1, [r2, #0]
 8001328:	0708      	lsls	r0, r1, #28
 800132a:	d516      	bpl.n	800135a <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800132c:	68d1      	ldr	r1, [r2, #12]
 800132e:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 8001332:	d10e      	bne.n	8001352 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001334:	68d2      	ldr	r2, [r2, #12]
 8001336:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800133a:	d10a      	bne.n	8001352 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800133c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800133e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001342:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001346:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001348:	bf5e      	ittt	pl
 800134a:	6d5a      	ldrpl	r2, [r3, #84]	@ 0x54
 800134c:	f042 0201 	orrpl.w	r2, r2, #1
 8001350:	655a      	strpl	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feb0 	bl	80010b8 <HAL_ADC_ConvCpltCallback>
}
 8001358:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800135a:	68d2      	ldr	r2, [r2, #12]
 800135c:	f012 0f02 	tst.w	r2, #2
 8001360:	e7eb      	b.n	800133a <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001362:	06d2      	lsls	r2, r2, #27
 8001364:	d503      	bpl.n	800136e <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff feae 	bl	80010c8 <HAL_ADC_ErrorCallback>
 800136c:	e7f4      	b.n	8001358 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001376:	4718      	bx	r3

08001378 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001378:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800137a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800137c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800137e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001382:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001384:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800138c:	f7ff fe9c 	bl	80010c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001390:	bd08      	pop	{r3, pc}
	...

08001394 <HAL_ADC_ConfigChannel>:
{
 8001394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001396:	2300      	movs	r3, #0
 8001398:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800139a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800139e:	2b01      	cmp	r3, #1
{
 80013a0:	4605      	mov	r5, r0
 80013a2:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80013a4:	f000 81b0 	beq.w	8001708 <HAL_ADC_ConfigChannel+0x374>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a8:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80013aa:	2301      	movs	r3, #1
 80013ac:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff fda1 	bl	8000ef8 <LL_ADC_REG_IsConversionOngoing>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f040 81a0 	bne.w	80016fc <HAL_ADC_ConfigChannel+0x368>
    uint32_t config_rank = pConfig->Rank;
 80013bc:	684b      	ldr	r3, [r1, #4]
    if (pConfig->Rank <= 5U)
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d806      	bhi.n	80013d0 <HAL_ADC_ConfigChannel+0x3c>
      switch (pConfig->Rank)
 80013c2:	3b02      	subs	r3, #2
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	bf9a      	itte	ls
 80013c8:	4ab8      	ldrls	r2, [pc, #736]	@ (80016ac <HAL_ADC_ConfigChannel+0x318>)
 80013ca:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
    if (pConfig->Rank <= 5U)
 80013ce:	2306      	movhi	r3, #6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013d0:	0999      	lsrs	r1, r3, #6
  MODIFY_REG(*preg,
 80013d2:	6832      	ldr	r2, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013d4:	f001 010c 	and.w	r1, r1, #12
 80013d8:	f104 0730 	add.w	r7, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	5878      	ldr	r0, [r7, r1]
 80013e2:	f04f 0c1f 	mov.w	ip, #31
 80013e6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80013ea:	409a      	lsls	r2, r3
 80013ec:	fa0c f303 	lsl.w	r3, ip, r3
 80013f0:	ea20 0303 	bic.w	r3, r0, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	507a      	str	r2, [r7, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fd7d 	bl	8000ef8 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013fe:	68a3      	ldr	r3, [r4, #8]
 8001400:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001404:	4303      	orrs	r3, r0
 8001406:	d120      	bne.n	800144a <HAL_ADC_ConfigChannel+0xb6>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001408:	68b2      	ldr	r2, [r6, #8]
 800140a:	6831      	ldr	r1, [r6, #0]
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fd5f 	bl	8000ed0 <LL_ADC_SetChannelSamplingTime>
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001412:	6930      	ldr	r0, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001414:	6977      	ldr	r7, [r6, #20]
 8001416:	68e1      	ldr	r1, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001418:	6833      	ldr	r3, [r6, #0]
 800141a:	2804      	cmp	r0, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141c:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 8001420:	d057      	beq.n	80014d2 <HAL_ADC_ConfigChannel+0x13e>
  MODIFY_REG(*preg,
 8001422:	f852 e020 	ldr.w	lr, [r2, r0, lsl #2]
 8001426:	f8df c2ac 	ldr.w	ip, [pc, #684]	@ 80016d4 <HAL_ADC_ConfigChannel+0x340>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800142a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800142e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8001432:	ea0e 0c0c 	and.w	ip, lr, ip
 8001436:	0049      	lsls	r1, r1, #1
 8001438:	ea43 030c 	orr.w	r3, r3, ip
 800143c:	fa07 f101 	lsl.w	r1, r7, r1
 8001440:	430b      	orrs	r3, r1
 8001442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001446:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff fd50 	bl	8000ef0 <LL_ADC_IsEnabled>
 8001450:	bba0      	cbnz	r0, 80014bc <HAL_ADC_ConfigChannel+0x128>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001452:	68f7      	ldr	r7, [r6, #12]
 8001454:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001456:	4a96      	ldr	r2, [pc, #600]	@ (80016b0 <HAL_ADC_ConfigChannel+0x31c>)
 8001458:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800145c:	f007 0c18 	and.w	ip, r7, #24
 8001460:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8001464:	fa22 f20c 	lsr.w	r2, r2, ip
 8001468:	401a      	ands	r2, r3
 800146a:	ea21 0100 	bic.w	r1, r1, r0
 800146e:	430a      	orrs	r2, r1
 8001470:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001474:	4a8f      	ldr	r2, [pc, #572]	@ (80016b4 <HAL_ADC_ConfigChannel+0x320>)
 8001476:	4297      	cmp	r7, r2
 8001478:	d120      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x128>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800147a:	2800      	cmp	r0, #0
 800147c:	f040 8088 	bne.w	8001590 <HAL_ADC_ConfigChannel+0x1fc>
 8001480:	0e9a      	lsrs	r2, r3, #26
 8001482:	3201      	adds	r2, #1
 8001484:	f002 071f 	and.w	r7, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001488:	2f09      	cmp	r7, #9
 800148a:	f04f 0101 	mov.w	r1, #1
 800148e:	ea4f 6282 	mov.w	r2, r2, lsl #26
 8001492:	f200 809d 	bhi.w	80015d0 <HAL_ADC_ConfigChannel+0x23c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001496:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800149a:	40b9      	lsls	r1, r7
 800149c:	4311      	orrs	r1, r2
 800149e:	2800      	cmp	r0, #0
 80014a0:	f040 8091 	bne.w	80015c6 <HAL_ADC_ConfigChannel+0x232>
 80014a4:	0e9b      	lsrs	r3, r3, #26
 80014a6:	3301      	adds	r3, #1
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014b2:	68b2      	ldr	r2, [r6, #8]
 80014b4:	4319      	orrs	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fd0a 	bl	8000ed0 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014bc:	6831      	ldr	r1, [r6, #0]
 80014be:	4b7e      	ldr	r3, [pc, #504]	@ (80016b8 <HAL_ADC_ConfigChannel+0x324>)
 80014c0:	4219      	tst	r1, r3
 80014c2:	f040 80b3 	bne.w	800162c <HAL_ADC_ConfigChannel+0x298>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80014c8:	2300      	movs	r3, #0
 80014ca:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
}
 80014ce:	b003      	add	sp, #12
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014d2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80014d4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014d6:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014da:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014de:	2800      	cmp	r0, #0
 80014e0:	d139      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x1c2>
 80014e2:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014e6:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80014e8:	bf02      	ittt	eq
 80014ea:	6e23      	ldreq	r3, [r4, #96]	@ 0x60
 80014ec:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 80014f0:	6623      	streq	r3, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014f2:	6853      	ldr	r3, [r2, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014f4:	6833      	ldr	r3, [r6, #0]
 80014f6:	6851      	ldr	r1, [r2, #4]
 80014f8:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014fc:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001500:	2800      	cmp	r0, #0
 8001502:	d12f      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
 8001504:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001508:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800150a:	bf02      	ittt	eq
 800150c:	6853      	ldreq	r3, [r2, #4]
 800150e:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8001512:	6053      	streq	r3, [r2, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001514:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001516:	6833      	ldr	r3, [r6, #0]
 8001518:	6891      	ldr	r1, [r2, #8]
 800151a:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800151e:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001522:	bb30      	cbnz	r0, 8001572 <HAL_ADC_ConfigChannel+0x1de>
 8001524:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001528:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800152a:	bf02      	ittt	eq
 800152c:	6893      	ldreq	r3, [r2, #8]
 800152e:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8001532:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001534:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001536:	6833      	ldr	r3, [r6, #0]
 8001538:	68d1      	ldr	r1, [r2, #12]
 800153a:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800153e:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001542:	b9e8      	cbnz	r0, 8001580 <HAL_ADC_ConfigChannel+0x1ec>
 8001544:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001548:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800154a:	bf02      	ittt	eq
 800154c:	68d3      	ldreq	r3, [r2, #12]
 800154e:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8001552:	60d3      	streq	r3, [r2, #12]
}
 8001554:	e779      	b.n	800144a <HAL_ADC_ConfigChannel+0xb6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0c9      	beq.n	80014f2 <HAL_ADC_ConfigChannel+0x15e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	e7c0      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x152>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0d3      	beq.n	8001514 <HAL_ADC_ConfigChannel+0x180>
  return __builtin_clz(value);
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	e7ca      	b.n	8001508 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0dc      	beq.n	8001534 <HAL_ADC_ConfigChannel+0x1a0>
  return __builtin_clz(value);
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	e7d3      	b.n	8001528 <HAL_ADC_ConfigChannel+0x194>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001584:	2b00      	cmp	r3, #0
 8001586:	f43f af60 	beq.w	800144a <HAL_ADC_ConfigChannel+0xb6>
  return __builtin_clz(value);
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	e7db      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8001594:	b132      	cbz	r2, 80015a4 <HAL_ADC_ConfigChannel+0x210>
  return __builtin_clz(value);
 8001596:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800159a:	3201      	adds	r2, #1
 800159c:	f002 021f 	and.w	r2, r2, #31
 80015a0:	2a09      	cmp	r2, #9
 80015a2:	d825      	bhi.n	80015f0 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80015a8:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80015ac:	3201      	adds	r2, #1
 80015ae:	0692      	lsls	r2, r2, #26
 80015b0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80015b8:	fab7 f787 	clz	r7, r7
 80015bc:	3701      	adds	r7, #1
 80015be:	f007 071f 	and.w	r7, r7, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	e769      	b.n	800149a <HAL_ADC_ConfigChannel+0x106>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	e76a      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x112>
 80015d0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80015d4:	40b9      	lsls	r1, r7
 80015d6:	4311      	orrs	r1, r2
 80015d8:	b9d8      	cbnz	r0, 8001612 <HAL_ADC_ConfigChannel+0x27e>
 80015da:	0e9b      	lsrs	r3, r3, #26
 80015dc:	3301      	adds	r3, #1
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015e6:	3b1e      	subs	r3, #30
 80015e8:	051b      	lsls	r3, r3, #20
 80015ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ee:	e760      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x11e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	3201      	adds	r2, #1
 80015fa:	0692      	lsls	r2, r2, #26
 80015fc:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8001604:	fab7 f787 	clz	r7, r7
 8001608:	3701      	adds	r7, #1
 800160a:	f007 071f 	and.w	r7, r7, #31
 800160e:	2101      	movs	r1, #1
 8001610:	e7e0      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x240>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	3201      	adds	r2, #1
 800161c:	f002 021f 	and.w	r2, r2, #31
 8001620:	2303      	movs	r3, #3
 8001622:	f06f 001d 	mvn.w	r0, #29
 8001626:	fb13 0302 	smlabb	r3, r3, r2, r0
 800162a:	e7dd      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x254>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <HAL_ADC_ConfigChannel+0x328>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800162e:	4e24      	ldr	r6, [pc, #144]	@ (80016c0 <HAL_ADC_ConfigChannel+0x32c>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	42b1      	cmp	r1, r6
 8001634:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
 8001638:	d121      	bne.n	800167e <HAL_ADC_ConfigChannel+0x2ea>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800163a:	0216      	lsls	r6, r2, #8
 800163c:	f53f af43 	bmi.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001640:	4a20      	ldr	r2, [pc, #128]	@ (80016c4 <HAL_ADC_ConfigChannel+0x330>)
 8001642:	4294      	cmp	r4, r2
 8001644:	d004      	beq.n	8001650 <HAL_ADC_ConfigChannel+0x2bc>
 8001646:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800164a:	4294      	cmp	r4, r2
 800164c:	f47f af3b 	bne.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001656:	4302      	orrs	r2, r0
 8001658:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800165c:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_ADC_ConfigChannel+0x334>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_ADC_ConfigChannel+0x338>)
 8001664:	fbb2 f2f3 	udiv	r2, r2, r3
 8001668:	230c      	movs	r3, #12
 800166a:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 800166e:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f43f af27 	beq.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
            wait_loop_index--;
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	e7f7      	b.n	800166e <HAL_ADC_ConfigChannel+0x2da>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800167e:	4e14      	ldr	r6, [pc, #80]	@ (80016d0 <HAL_ADC_ConfigChannel+0x33c>)
 8001680:	42b1      	cmp	r1, r6
 8001682:	d129      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x344>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001684:	01d1      	lsls	r1, r2, #7
 8001686:	f53f af1e 	bmi.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <HAL_ADC_ConfigChannel+0x330>)
 800168c:	4294      	cmp	r4, r2
 800168e:	d004      	beq.n	800169a <HAL_ADC_ConfigChannel+0x306>
 8001690:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001694:	4294      	cmp	r4, r2
 8001696:	f47f af16 	bne.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80016a0:	4302      	orrs	r2, r0
 80016a2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	e70d      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x132>
 80016aa:	bf00      	nop
 80016ac:	08004c94 	.word	0x08004c94
 80016b0:	0007ffff 	.word	0x0007ffff
 80016b4:	407f0000 	.word	0x407f0000
 80016b8:	80080000 	.word	0x80080000
 80016bc:	50040300 	.word	0x50040300
 80016c0:	c7520000 	.word	0xc7520000
 80016c4:	50040000 	.word	0x50040000
 80016c8:	20000000 	.word	0x20000000
 80016cc:	00030d40 	.word	0x00030d40
 80016d0:	cb840000 	.word	0xcb840000
 80016d4:	03fff000 	.word	0x03fff000
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016d8:	4e0c      	ldr	r6, [pc, #48]	@ (800170c <HAL_ADC_ConfigChannel+0x378>)
 80016da:	42b1      	cmp	r1, r6
 80016dc:	f47f aef3 	bne.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016e0:	0252      	lsls	r2, r2, #9
 80016e2:	f53f aef0 	bmi.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
        if (ADC_VREFINT_INSTANCE(hadc))
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_ADC_ConfigChannel+0x37c>)
 80016e8:	4294      	cmp	r4, r2
 80016ea:	f47f aeec 	bne.w	80014c6 <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80016f4:	4302      	orrs	r2, r0
 80016f6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80016fa:	e7d4      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x312>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	656a      	str	r2, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001704:	4618      	mov	r0, r3
 8001706:	e6df      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 8001708:	2002      	movs	r0, #2
 800170a:	e6e0      	b.n	80014ce <HAL_ADC_ConfigChannel+0x13a>
 800170c:	80000001 	.word	0x80000001
 8001710:	50040000 	.word	0x50040000

08001714 <ADC_Enable>:
{
 8001714:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001716:	6802      	ldr	r2, [r0, #0]
{
 8001718:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800171a:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171c:	4610      	mov	r0, r2
  __IO uint32_t wait_loop_index = 0UL;
 800171e:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001720:	f7ff fbe6 	bl	8000ef0 <LL_ADC_IsEnabled>
 8001724:	b110      	cbz	r0, 800172c <ADC_Enable+0x18>
  return HAL_OK;
 8001726:	2000      	movs	r0, #0
}
 8001728:	b002      	add	sp, #8
 800172a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800172c:	6891      	ldr	r1, [r2, #8]
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <ADC_Enable+0xa0>)
 8001730:	4219      	tst	r1, r3
 8001732:	d009      	beq.n	8001748 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001734:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8001744:	2001      	movs	r0, #1
 8001746:	e7ef      	b.n	8001728 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8001748:	6893      	ldr	r3, [r2, #8]
 800174a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800174e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <ADC_Enable+0xa4>)
 800175a:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800175c:	0219      	lsls	r1, r3, #8
 800175e:	d41a      	bmi.n	8001796 <ADC_Enable+0x82>
    tickstart = HAL_GetTick();
 8001760:	f7ff fb9c 	bl	8000e9c <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 8001764:	4e15      	ldr	r6, [pc, #84]	@ (80017bc <ADC_Enable+0xa8>)
 8001766:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001768:	6822      	ldr	r2, [r4, #0]
 800176a:	6813      	ldr	r3, [r2, #0]
 800176c:	07db      	lsls	r3, r3, #31
 800176e:	d4da      	bmi.n	8001726 <ADC_Enable+0x12>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001770:	4610      	mov	r0, r2
 8001772:	f7ff fbbd 	bl	8000ef0 <LL_ADC_IsEnabled>
 8001776:	b920      	cbnz	r0, 8001782 <ADC_Enable+0x6e>
 8001778:	6893      	ldr	r3, [r2, #8]
 800177a:	4033      	ands	r3, r6
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001782:	f7ff fb8b 	bl	8000e9c <HAL_GetTick>
 8001786:	1b40      	subs	r0, r0, r5
 8001788:	2802      	cmp	r0, #2
 800178a:	d9ed      	bls.n	8001768 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	07da      	lsls	r2, r3, #31
 8001792:	d4e9      	bmi.n	8001768 <ADC_Enable+0x54>
 8001794:	e7ce      	b.n	8001734 <ADC_Enable+0x20>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <ADC_Enable+0xac>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <ADC_Enable+0xb0>)
 800179c:	fbb2 f2f3 	udiv	r2, r2, r3
 80017a0:	230c      	movs	r3, #12
 80017a2:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 80017a6:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80017a8:	9b01      	ldr	r3, [sp, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0d8      	beq.n	8001760 <ADC_Enable+0x4c>
        wait_loop_index--;
 80017ae:	9b01      	ldr	r3, [sp, #4]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	e7f8      	b.n	80017a6 <ADC_Enable+0x92>
 80017b4:	8000003f 	.word	0x8000003f
 80017b8:	50040300 	.word	0x50040300
 80017bc:	7fffffc0 	.word	0x7fffffc0
 80017c0:	20000000 	.word	0x20000000
 80017c4:	00030d40 	.word	0x00030d40

080017c8 <HAL_ADC_Start_DMA>:
{
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017ca:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <HAL_ADC_Start_DMA+0xc8>)
 80017cc:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ce:	6803      	ldr	r3, [r0, #0]
{
 80017d0:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d2:	4618      	mov	r0, r3
{
 80017d4:	460e      	mov	r6, r1
 80017d6:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d8:	f7ff fb8e 	bl	8000ef8 <LL_ADC_REG_IsConversionOngoing>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d155      	bne.n	800188c <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 80017e0:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 80017e4:	2901      	cmp	r1, #1
 80017e6:	d051      	beq.n	800188c <HAL_ADC_Start_DMA+0xc4>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001894 <HAL_ADC_Start_DMA+0xcc>)
    __HAL_LOCK(hadc);
 80017ea:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 80017f2:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_Start_DMA+0x3a>
 80017f8:	f240 2321 	movw	r3, #545	@ 0x221
 80017fc:	40eb      	lsrs	r3, r5
 80017fe:	4003      	ands	r3, r0
 8001800:	d041      	beq.n	8001886 <HAL_ADC_Start_DMA+0xbe>
      tmp_hal_status = ADC_Enable(hadc);
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff ff86 	bl	8001714 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001808:	2800      	cmp	r0, #0
 800180a:	d13b      	bne.n	8001884 <HAL_ADC_Start_DMA+0xbc>
        ADC_STATE_CLR_SET(hadc->State,
 800180c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800180e:	6821      	ldr	r1, [r4, #0]
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_ADC_Start_DMA+0xd0>)
        ADC_STATE_CLR_SET(hadc->State,
 8001812:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 8001816:	f020 0001 	bic.w	r0, r0, #1
 800181a:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800181e:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 8001820:	6560      	str	r0, [r4, #84]	@ 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001822:	d100      	bne.n	8001826 <HAL_ADC_Start_DMA+0x5e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001824:	b91d      	cbnz	r5, 800182e <HAL_ADC_Start_DMA+0x66>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001826:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001828:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800182c:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800182e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001830:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001832:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001836:	bf1c      	itt	ne
 8001838:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 800183a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800183e:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <HAL_ADC_Start_DMA+0xd4>)
 8001842:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_ADC_Start_DMA+0xd8>)
 8001846:	6303      	str	r3, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_ADC_Start_DMA+0xdc>)
 800184a:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800184c:	231c      	movs	r3, #28
 800184e:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8001850:	2300      	movs	r3, #0
 8001852:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001856:	684b      	ldr	r3, [r1, #4]
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800185e:	68cb      	ldr	r3, [r1, #12]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001866:	4632      	mov	r2, r6
 8001868:	463b      	mov	r3, r7
 800186a:	3140      	adds	r1, #64	@ 0x40
 800186c:	f000 f9e8 	bl	8001c40 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001870:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001872:	6893      	ldr	r3, [r2, #8]
 8001874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001878:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6093      	str	r3, [r2, #8]
}
 8001882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8001884:	2300      	movs	r3, #0
      __HAL_UNLOCK(hadc);
 8001886:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800188a:	e7fa      	b.n	8001882 <HAL_ADC_Start_DMA+0xba>
    __HAL_LOCK(hadc);
 800188c:	2002      	movs	r0, #2
 800188e:	e7f8      	b.n	8001882 <HAL_ADC_Start_DMA+0xba>
 8001890:	50040300 	.word	0x50040300
 8001894:	50040200 	.word	0x50040200
 8001898:	50040100 	.word	0x50040100
 800189c:	08001311 	.word	0x08001311
 80018a0:	080010bd 	.word	0x080010bd
 80018a4:	08001379 	.word	0x08001379

080018a8 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80018a8:	6802      	ldr	r2, [r0, #0]
{
 80018aa:	b538      	push	{r3, r4, r5, lr}
 80018ac:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018ae:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018b0:	6893      	ldr	r3, [r2, #8]
 80018b2:	f7ff fb1d 	bl	8000ef0 <LL_ADC_IsEnabled>
 80018b6:	b908      	cbnz	r0, 80018bc <ADC_Disable+0x14>
  return HAL_OK;
 80018b8:	2000      	movs	r0, #0
}
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 80018bc:	0799      	lsls	r1, r3, #30
 80018be:	d4fb      	bmi.n	80018b8 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80018c0:	6893      	ldr	r3, [r2, #8]
 80018c2:	f003 030d 	and.w	r3, r3, #13
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d119      	bne.n	80018fe <ADC_Disable+0x56>
  MODIFY_REG(ADCx->CR,
 80018ca:	6893      	ldr	r3, [r2, #8]
 80018cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018da:	2303      	movs	r3, #3
 80018dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80018de:	f7ff fadd 	bl	8000e9c <HAL_GetTick>
 80018e2:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	07db      	lsls	r3, r3, #31
 80018ea:	d5e5      	bpl.n	80018b8 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ec:	f7ff fad6 	bl	8000e9c <HAL_GetTick>
 80018f0:	1b40      	subs	r0, r0, r5
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d9f6      	bls.n	80018e4 <ADC_Disable+0x3c>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	07da      	lsls	r2, r3, #31
 80018fc:	d5f2      	bpl.n	80018e4 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
 8001910:	e7d3      	b.n	80018ba <ADC_Disable+0x12>

08001912 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001912:	6880      	ldr	r0, [r0, #8]
}
 8001914:	f000 0001 	and.w	r0, r0, #1
 8001918:	4770      	bx	lr

0800191a <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800191a:	6880      	ldr	r0, [r0, #8]
}
 800191c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001920:	4770      	bx	lr

08001922 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001922:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001924:	2300      	movs	r3, #0
 8001926:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800192c:	2b01      	cmp	r3, #1
{
 800192e:	4604      	mov	r4, r0
 8001930:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8001932:	d03c      	beq.n	80019ae <HAL_ADCEx_Calibration_Start+0x8c>
 8001934:	2301      	movs	r3, #1
 8001936:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800193a:	f7ff ffb5 	bl	80018a8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status == HAL_OK)
 8001940:	bb90      	cbnz	r0, 80019a8 <HAL_ADCEx_Calibration_Start+0x86>
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001946:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800194a:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8001952:	6893      	ldr	r3, [r2, #8]
 8001954:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800195c:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8001960:	432b      	orrs	r3, r5
 8001962:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001966:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001968:	6893      	ldr	r3, [r2, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da12      	bge.n	8001994 <HAL_ADCEx_Calibration_Start+0x72>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	3301      	adds	r3, #1
 8001972:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001974:	9b01      	ldr	r3, [sp, #4]
 8001976:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800197a:	d3f5      	bcc.n	8001968 <HAL_ADCEx_Calibration_Start+0x46>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800197c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800197e:	f023 0312 	bic.w	r3, r3, #18
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6563      	str	r3, [r4, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001988:	2300      	movs	r3, #0
 800198a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

        return HAL_ERROR;
 800198e:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001990:	b003      	add	sp, #12
 8001992:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001994:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199e:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80019a0:	2300      	movs	r3, #0
 80019a2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return tmp_hal_status;
 80019a6:	e7f3      	b.n	8001990 <HAL_ADCEx_Calibration_Start+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	e7f7      	b.n	800199e <HAL_ADCEx_Calibration_Start+0x7c>
  __HAL_LOCK(hadc);
 80019ae:	2002      	movs	r0, #2
 80019b0:	e7ee      	b.n	8001990 <HAL_ADCEx_Calibration_Start+0x6e>

080019b2 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80019b2:	4770      	bx	lr

080019b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 80019b4:	4770      	bx	lr

080019b6 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 80019b6:	4770      	bx	lr

080019b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80019b8:	4770      	bx	lr

080019ba <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80019ba:	4770      	bx	lr

080019bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019be:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80019c2:	680c      	ldr	r4, [r1, #0]
  __HAL_LOCK(hadc);
 80019c4:	2a01      	cmp	r2, #1
{
 80019c6:	b09a      	sub	sp, #104	@ 0x68
 80019c8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80019ca:	d060      	beq.n	8001a8e <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 80019cc:	2201      	movs	r2, #1
 80019ce:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80019d2:	681d      	ldr	r5, [r3, #0]
 80019d4:	4e2f      	ldr	r6, [pc, #188]	@ (8001a94 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80019d6:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80019d8:	42b5      	cmp	r5, r6
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80019da:	9016      	str	r0, [sp, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80019dc:	9017      	str	r0, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80019de:	d10e      	bne.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80019e0:	482d      	ldr	r0, [pc, #180]	@ (8001a98 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 80019e2:	f7ff ff9a 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 80019e6:	4606      	mov	r6, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e8:	4628      	mov	r0, r5
 80019ea:	f7ff ff96 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 80019ee:	4330      	orrs	r0, r6
 80019f0:	d00e      	beq.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x54>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80019f4:	f041 0120 	orr.w	r1, r1, #32
 80019f8:	6559      	str	r1, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80019fa:	4610      	mov	r0, r2
 80019fc:	e02b      	b.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8001a00:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a04:	f041 0120 	orr.w	r1, r1, #32
 8001a08:	6559      	str	r1, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a0a:	4610      	mov	r0, r2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001a0c:	b01a      	add	sp, #104	@ 0x68
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001a10:	4a22      	ldr	r2, [pc, #136]	@ (8001a9c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001a12:	b324      	cbz	r4, 8001a5e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a14:	6890      	ldr	r0, [r2, #8]
 8001a16:	684e      	ldr	r6, [r1, #4]
 8001a18:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8001a1c:	4330      	orrs	r0, r6
 8001a1e:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
 8001a22:	ea40 3046 	orr.w	r0, r0, r6, lsl #13
 8001a26:	6090      	str	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f7ff ff72 	bl	8001912 <LL_ADC_IsEnabled>
 8001a2e:	4605      	mov	r5, r0
 8001a30:	4819      	ldr	r0, [pc, #100]	@ (8001a98 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8001a32:	f7ff ff6e 	bl	8001912 <LL_ADC_IsEnabled>
 8001a36:	4305      	orrs	r5, r0
 8001a38:	4819      	ldr	r0, [pc, #100]	@ (8001aa0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001a3a:	f7ff ff6a 	bl	8001912 <LL_ADC_IsEnabled>
 8001a3e:	4305      	orrs	r5, r0
 8001a40:	d108      	bne.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR,
 8001a42:	6889      	ldr	r1, [r1, #8]
 8001a44:	6890      	ldr	r0, [r2, #8]
 8001a46:	430c      	orrs	r4, r1
 8001a48:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8001a4c:	f021 010f 	bic.w	r1, r1, #15
 8001a50:	430c      	orrs	r4, r1
 8001a52:	6094      	str	r4, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return tmp_hal_status;
 8001a5c:	e7d6      	b.n	8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a5e:	6891      	ldr	r1, [r2, #8]
 8001a60:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8001a64:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a66:	4628      	mov	r0, r5
 8001a68:	f7ff ff53 	bl	8001912 <LL_ADC_IsEnabled>
 8001a6c:	4601      	mov	r1, r0
 8001a6e:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8001a70:	f7ff ff4f 	bl	8001912 <LL_ADC_IsEnabled>
 8001a74:	4301      	orrs	r1, r0
 8001a76:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001a78:	f7ff ff4b 	bl	8001912 <LL_ADC_IsEnabled>
 8001a7c:	4301      	orrs	r1, r0
 8001a7e:	d1e9      	bne.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001a80:	6891      	ldr	r1, [r2, #8]
 8001a82:	f421 6171 	bic.w	r1, r1, #3856	@ 0xf10
 8001a86:	f021 010f 	bic.w	r1, r1, #15
 8001a8a:	6091      	str	r1, [r2, #8]
 8001a8c:	e7e2      	b.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
  __HAL_LOCK(hadc);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	e7bc      	b.n	8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8001a92:	bf00      	nop
 8001a94:	50040000 	.word	0x50040000
 8001a98:	50040100 	.word	0x50040100
 8001a9c:	50040300 	.word	0x50040300
 8001aa0:	50040200 	.word	0x50040200

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4907      	ldr	r1, [pc, #28]	@ (8001ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001aa6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001ac0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aca:	b530      	push	{r4, r5, lr}
 8001acc:	68dc      	ldr	r4, [r3, #12]
 8001ace:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	bf28      	it	cs
 8001adc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae4:	bf8c      	ite	hi
 8001ae6:	3c03      	subhi	r4, #3
 8001ae8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aea:	fa05 f303 	lsl.w	r3, r5, r3
 8001aee:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af2:	40a5      	lsls	r5, r4
 8001af4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001afa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	bfac      	ite	ge
 8001b02:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	4a08      	ldrlt	r2, [pc, #32]	@ (8001b28 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	bfb8      	it	lt
 8001b0e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	bfaa      	itet	ge
 8001b16:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b20:	bd30      	pop	{r4, r5, pc}
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	e000ed14 	.word	0xe000ed14

08001b2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	db07      	blt.n	8001b40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_NVIC_EnableIRQ+0x18>)
 8001b32:	0941      	lsrs	r1, r0, #5
 8001b34:	2301      	movs	r3, #1
 8001b36:	f000 001f 	and.w	r0, r0, #31
 8001b3a:	4083      	lsls	r3, r0
 8001b3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	3801      	subs	r0, #1
 8001b4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001b4e:	d20b      	bcs.n	8001b68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	21f0      	movs	r1, #240	@ 0xf0
 8001b5a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b60:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b62:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b72:	4603      	mov	r3, r0
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d056      	beq.n	8001c26 <HAL_DMA_Init+0xb6>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b78:	6805      	ldr	r5, [r0, #0]
 8001b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c2c <HAL_DMA_Init+0xbc>)
 8001b7c:	4295      	cmp	r5, r2
 8001b7e:	f04f 0114 	mov.w	r1, #20
 8001b82:	d83e      	bhi.n	8001c02 <HAL_DMA_Init+0x92>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b84:	4a2a      	ldr	r2, [pc, #168]	@ (8001c30 <HAL_DMA_Init+0xc0>)
 8001b86:	482b      	ldr	r0, [pc, #172]	@ (8001c34 <HAL_DMA_Init+0xc4>)
 8001b88:	442a      	add	r2, r5
 8001b8a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b8e:	0092      	lsls	r2, r2, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b90:	2102      	movs	r1, #2
 8001b92:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b96:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9a:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8001b9c:	682c      	ldr	r4, [r5, #0]
  tmp |=  hdma->Init.Direction        |
 8001b9e:	4331      	orrs	r1, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	4339      	orrs	r1, r7
 8001ba2:	695f      	ldr	r7, [r3, #20]
 8001ba4:	4339      	orrs	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba6:	699f      	ldr	r7, [r3, #24]
 8001ba8:	4339      	orrs	r1, r7
 8001baa:	69df      	ldr	r7, [r3, #28]
 8001bac:	4339      	orrs	r1, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bae:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bb0:	f424 44ff 	bic.w	r4, r4, #32640	@ 0x7f80
 8001bb4:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb8:	4339      	orrs	r1, r7
  tmp |=  hdma->Init.Direction        |
 8001bba:	4321      	orrs	r1, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bbc:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
    hdma->DmaBaseAddress = DMA1;
 8001bc0:	e9c3 0210 	strd	r0, r2, [r3, #64]	@ 0x40
  hdma->Instance->CCR = tmp;
 8001bc4:	6029      	str	r1, [r5, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bc6:	d014      	beq.n	8001bf2 <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bc8:	685c      	ldr	r4, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bca:	f002 021c 	and.w	r2, r2, #28
 8001bce:	210f      	movs	r1, #15
 8001bd0:	4091      	lsls	r1, r2
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bd2:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8001bd4:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <HAL_DMA_Init+0xc4>)
 8001bd6:	4290      	cmp	r0, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bd8:	ea6f 0101 	mvn.w	r1, r1
    if (DMA1 == hdma->DmaBaseAddress)
 8001bdc:	d118      	bne.n	8001c10 <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bde:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 8001be2:	400a      	ands	r2, r1
 8001be4:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001be8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 8001bec:	4322      	orrs	r2, r4
 8001bee:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bf4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf6:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bf8:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c02:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <HAL_DMA_Init+0xc8>)
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <HAL_DMA_Init+0xcc>)
 8001c06:	442a      	add	r2, r5
 8001c08:	fbb2 f2f1 	udiv	r2, r2, r1
 8001c0c:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8001c0e:	e7bf      	b.n	8001b90 <HAL_DMA_Init+0x20>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c10:	f8d2 04a8 	ldr.w	r0, [r2, #1192]	@ 0x4a8
 8001c14:	4001      	ands	r1, r0
 8001c16:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c1a:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8001c1e:	4321      	orrs	r1, r4
 8001c20:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
 8001c24:	e7e5      	b.n	8001bf2 <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 8001c26:	2001      	movs	r0, #1
 8001c28:	e7ea      	b.n	8001c00 <HAL_DMA_Init+0x90>
 8001c2a:	bf00      	nop
 8001c2c:	40020407 	.word	0x40020407
 8001c30:	bffdfff8 	.word	0xbffdfff8
 8001c34:	40020000 	.word	0x40020000
 8001c38:	bffdfbf8 	.word	0xbffdfbf8
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c42:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8001c46:	2c01      	cmp	r4, #1
 8001c48:	d036      	beq.n	8001cb8 <HAL_DMA_Start_IT+0x78>
 8001c4a:	2401      	movs	r4, #1
 8001c4c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c50:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8001c54:	2c01      	cmp	r4, #1
 8001c56:	b2e5      	uxtb	r5, r4
 8001c58:	f04f 0400 	mov.w	r4, #0
 8001c5c:	d12a      	bne.n	8001cb4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5e:	2602      	movs	r6, #2
 8001c60:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c64:	63c4      	str	r4, [r0, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	6804      	ldr	r4, [r0, #0]
 8001c68:	6826      	ldr	r6, [r4, #0]
 8001c6a:	f026 0601 	bic.w	r6, r6, #1
 8001c6e:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c70:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	@ 0x40
 8001c74:	f007 071c 	and.w	r7, r7, #28
 8001c78:	40bd      	lsls	r5, r7
 8001c7a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c7c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c7e:	6883      	ldr	r3, [r0, #8]
 8001c80:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8001c82:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c84:	bf0b      	itete	eq
 8001c86:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c88:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c8a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c8c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001c8e:	b14b      	cbz	r3, 8001ca4 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c96:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca0:	2000      	movs	r0, #0
}
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	f043 030a 	orr.w	r3, r3, #10
 8001cb2:	e7f0      	b.n	8001c96 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8001cb4:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	e7f2      	b.n	8001ca2 <HAL_DMA_Start_IT+0x62>

08001cbc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cbc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cbe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001cc0:	6803      	ldr	r3, [r0, #0]
{
 8001cc2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cc4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cc8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001cca:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ccc:	2404      	movs	r4, #4
 8001cce:	4094      	lsls	r4, r2
 8001cd0:	4234      	tst	r4, r6
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x36>
 8001cd4:	f015 0f04 	tst.w	r5, #4
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cde:	bf5e      	ittt	pl
 8001ce0:	681a      	ldrpl	r2, [r3, #0]
 8001ce2:	f022 0204 	bicpl.w	r2, r2, #4
 8001ce6:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001ce8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cea:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001cec:	b373      	cbz	r3, 8001d4c <HAL_DMA_IRQHandler+0x90>
}
 8001cee:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001cf0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cf2:	2402      	movs	r4, #2
 8001cf4:	4094      	lsls	r4, r2
 8001cf6:	4234      	tst	r4, r6
 8001cf8:	d012      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x64>
 8001cfa:	f015 0f02 	tst.w	r5, #2
 8001cfe:	d00f      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	0695      	lsls	r5, r2, #26
 8001d04:	d406      	bmi.n	8001d14 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f022 020a 	bic.w	r2, r2, #10
 8001d0c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001d14:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d16:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001d18:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8001d1c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001d1e:	e7e5      	b.n	8001cec <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d20:	2408      	movs	r4, #8
 8001d22:	4094      	lsls	r4, r2
 8001d24:	4234      	tst	r4, r6
 8001d26:	d011      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x90>
 8001d28:	072c      	lsls	r4, r5, #28
 8001d2a:	d50f      	bpl.n	8001d4c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2c:	681c      	ldr	r4, [r3, #0]
 8001d2e:	f024 040e 	bic.w	r4, r4, #14
 8001d32:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d34:	2301      	movs	r3, #1
 8001d36:	fa03 f202 	lsl.w	r2, r3, r2
 8001d3a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d3c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001d42:	2300      	movs	r3, #0
 8001d44:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8001d48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001d4a:	e7cf      	b.n	8001cec <HAL_DMA_IRQHandler+0x30>
}
 8001d4c:	bc70      	pop	{r4, r5, r6}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d54:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8001f00 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d58:	4c67      	ldr	r4, [pc, #412]	@ (8001ef8 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 8001d5a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5c:	680a      	ldr	r2, [r1, #0]
 8001d5e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001d62:	d102      	bne.n	8001d6a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001d64:	b003      	add	sp, #12
 8001d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8001d70:	ea18 0202 	ands.w	r2, r8, r2
 8001d74:	f000 80b1 	beq.w	8001eda <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d78:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d7c:	f005 0603 	and.w	r6, r5, #3
 8001d80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d84:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d88:	1e77      	subs	r7, r6, #1
 8001d8a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d90:	d834      	bhi.n	8001dfc <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001d92:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d94:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d98:	68cf      	ldr	r7, [r1, #12]
 8001d9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d9e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001da2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001da4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001daa:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001dae:	409f      	lsls	r7, r3
 8001db0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001db4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001db6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	688f      	ldr	r7, [r1, #8]
 8001dbe:	fa07 f70e 	lsl.w	r7, r7, lr
 8001dc2:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc6:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001dc8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dca:	d122      	bne.n	8001e12 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 8001dcc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001dd0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001dd8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ddc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001de0:	f04f 0b0f 	mov.w	fp, #15
 8001de4:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001de8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dec:	690f      	ldr	r7, [r1, #16]
 8001dee:	fa07 f70a 	lsl.w	r7, r7, sl
 8001df2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8001df6:	f8c8 7020 	str.w	r7, [r8, #32]
 8001dfa:	e00a      	b.n	8001e12 <HAL_GPIO_Init+0xc2>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dfc:	2e03      	cmp	r6, #3
 8001dfe:	d1da      	bne.n	8001db6 <HAL_GPIO_Init+0x66>
        temp = GPIOx->ASCR;
 8001e00:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e02:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e06:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001e0a:	409f      	lsls	r7, r3
 8001e0c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->ASCR = temp;
 8001e10:	62c7      	str	r7, [r0, #44]	@ 0x2c
      temp = GPIOx->MODER;
 8001e12:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e14:	fa06 f60e 	lsl.w	r6, r6, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e18:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1c:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001e22:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e24:	d059      	beq.n	8001eda <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 8001e2a:	f046 0601 	orr.w	r6, r6, #1
 8001e2e:	f8c9 6060 	str.w	r6, [r9, #96]	@ 0x60
 8001e32:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 8001e36:	f023 0703 	bic.w	r7, r3, #3
 8001e3a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001e3e:	f006 0601 	and.w	r6, r6, #1
 8001e42:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8001e46:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e48:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e4e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e50:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001e54:	f04f 0e0f 	mov.w	lr, #15
 8001e58:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e60:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e64:	d03b      	beq.n	8001ede <HAL_GPIO_Init+0x18e>
 8001e66:	4e25      	ldr	r6, [pc, #148]	@ (8001efc <HAL_GPIO_Init+0x1ac>)
 8001e68:	42b0      	cmp	r0, r6
 8001e6a:	d03a      	beq.n	8001ee2 <HAL_GPIO_Init+0x192>
 8001e6c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001e70:	42b0      	cmp	r0, r6
 8001e72:	d038      	beq.n	8001ee6 <HAL_GPIO_Init+0x196>
 8001e74:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001e78:	42b0      	cmp	r0, r6
 8001e7a:	d036      	beq.n	8001eea <HAL_GPIO_Init+0x19a>
 8001e7c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001e80:	42b0      	cmp	r0, r6
 8001e82:	d034      	beq.n	8001eee <HAL_GPIO_Init+0x19e>
 8001e84:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001e88:	42b0      	cmp	r0, r6
 8001e8a:	d032      	beq.n	8001ef2 <HAL_GPIO_Init+0x1a2>
 8001e8c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001e90:	42b0      	cmp	r0, r6
 8001e92:	bf14      	ite	ne
 8001e94:	2607      	movne	r6, #7
 8001e96:	2606      	moveq	r6, #6
 8001e98:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e9c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea0:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001ea2:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001ea4:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea6:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8001eaa:	bf0c      	ite	eq
 8001eac:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001eae:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001eb0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001eb2:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb4:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8001eb8:	bf0c      	ite	eq
 8001eba:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ebc:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001ebe:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001ec0:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8001ec6:	bf0c      	ite	eq
 8001ec8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001eca:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001ecc:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001ece:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed0:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001ed2:	bf54      	ite	pl
 8001ed4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001ed6:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001ed8:	6026      	str	r6, [r4, #0]
    position++;
 8001eda:	3301      	adds	r3, #1
 8001edc:	e73e      	b.n	8001d5c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ede:	2600      	movs	r6, #0
 8001ee0:	e7da      	b.n	8001e98 <HAL_GPIO_Init+0x148>
 8001ee2:	2601      	movs	r6, #1
 8001ee4:	e7d8      	b.n	8001e98 <HAL_GPIO_Init+0x148>
 8001ee6:	2602      	movs	r6, #2
 8001ee8:	e7d6      	b.n	8001e98 <HAL_GPIO_Init+0x148>
 8001eea:	2603      	movs	r6, #3
 8001eec:	e7d4      	b.n	8001e98 <HAL_GPIO_Init+0x148>
 8001eee:	2604      	movs	r6, #4
 8001ef0:	e7d2      	b.n	8001e98 <HAL_GPIO_Init+0x148>
 8001ef2:	2605      	movs	r6, #5
 8001ef4:	e7d0      	b.n	8001e98 <HAL_GPIO_Init+0x148>
 8001ef6:	bf00      	nop
 8001ef8:	40010400 	.word	0x40010400
 8001efc:	48000400 	.word	0x48000400
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f04:	b10a      	cbz	r2, 8001f0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	6181      	str	r1, [r0, #24]
 8001f08:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f10:	4b02      	ldr	r3, [pc, #8]	@ (8001f1c <HAL_PWREx_GetVoltageRange+0xc>)
 8001f12:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001f14:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000

08001f20 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f24:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2c:	d11b      	bne.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x46>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f32:	d01b      	beq.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x4c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2132      	movs	r1, #50	@ 0x32
 8001f46:	434b      	muls	r3, r1
 8001f48:	490f      	ldr	r1, [pc, #60]	@ (8001f88 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f50:	6951      	ldr	r1, [r2, #20]
 8001f52:	0549      	lsls	r1, r1, #21
 8001f54:	d500      	bpl.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x38>
 8001f56:	b923      	cbnz	r3, 8001f62 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f58:	6953      	ldr	r3, [r2, #20]
 8001f5a:	055b      	lsls	r3, r3, #21
 8001f5c:	d506      	bpl.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        return HAL_TIMEOUT;
 8001f5e:	2003      	movs	r0, #3
    }
  }
#endif

  return HAL_OK;
}
 8001f60:	4770      	bx	lr
        wait_loop_index--;
 8001f62:	3b01      	subs	r3, #1
 8001f64:	e7f4      	b.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x30>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6a:	d101      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x50>
  return HAL_OK;
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f70:	6813      	ldr	r3, [r2, #0]
 8001f72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e7f6      	b.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x4c>
 8001f7e:	bf00      	nop
 8001f80:	40007000 	.word	0x40007000
 8001f84:	20000000 	.word	0x20000000
 8001f88:	000f4240 	.word	0x000f4240

08001f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f8e:	4d1e      	ldr	r5, [pc, #120]	@ (8002008 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001f90:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001f92:	00da      	lsls	r2, r3, #3
{
 8001f94:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f96:	d518      	bpl.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f98:	f7ff ffba 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001fa0:	d123      	bne.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	2c80      	cmp	r4, #128	@ 0x80
 8001fa4:	d929      	bls.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa6:	2ca1      	cmp	r4, #161	@ 0xa1
 8001fa8:	bf34      	ite	cc
 8001faa:	2401      	movcc	r4, #1
 8001fac:	2402      	movcs	r4, #2
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fae:	4917      	ldr	r1, [pc, #92]	@ (800200c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001fb0:	680a      	ldr	r2, [r1, #0]
 8001fb2:	f022 0207 	bic.w	r2, r2, #7
 8001fb6:	4322      	orrs	r2, r4
 8001fb8:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fba:	6808      	ldr	r0, [r1, #0]
 8001fbc:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001fc0:	1b00      	subs	r0, r0, r4
 8001fc2:	bf18      	it	ne
 8001fc4:	2001      	movne	r0, #1
 8001fc6:	b003      	add	sp, #12
 8001fc8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001fd2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001fdc:	f7ff ff98 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001fe8:	e7d8      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001fea:	2c80      	cmp	r4, #128	@ 0x80
 8001fec:	d807      	bhi.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001fee:	d008      	beq.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001ff0:	f1a4 0370 	sub.w	r3, r4, #112	@ 0x70
 8001ff4:	425c      	negs	r4, r3
 8001ff6:	415c      	adcs	r4, r3
 8001ff8:	e7d9      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	e7d7      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ffe:	2403      	movs	r4, #3
 8002000:	e7d5      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002002:	2402      	movs	r4, #2
 8002004:	e7d3      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002010:	4b22      	ldr	r3, [pc, #136]	@ (800209c <HAL_RCC_GetSysClockFreq+0x8c>)
 8002012:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002014:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002016:	f012 020c 	ands.w	r2, r2, #12
 800201a:	d005      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x18>
 800201c:	2a0c      	cmp	r2, #12
 800201e:	d115      	bne.n	800204c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002024:	2901      	cmp	r1, #1
 8002026:	d118      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002028:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800202a:	481d      	ldr	r0, [pc, #116]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800202c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202e:	bf55      	itete	pl
 8002030:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002034:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002036:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800203e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002042:	b34a      	cbz	r2, 8002098 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002044:	2a0c      	cmp	r2, #12
 8002046:	d009      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x4c>
 8002048:	2000      	movs	r0, #0
  return sysclockfreq;
 800204a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800204c:	2a04      	cmp	r2, #4
 800204e:	d022      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002050:	2a08      	cmp	r2, #8
 8002052:	4814      	ldr	r0, [pc, #80]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002054:	bf18      	it	ne
 8002056:	2000      	movne	r0, #0
 8002058:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800205a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002062:	2a02      	cmp	r2, #2
 8002064:	d015      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x82>
 8002066:	490f      	ldr	r1, [pc, #60]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002068:	2a03      	cmp	r2, #3
 800206a:	bf08      	it	eq
 800206c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800206e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002076:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002078:	68d8      	ldr	r0, [r3, #12]
 800207a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800207e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002082:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002084:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002086:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002088:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800208c:	fbb2 f0f0 	udiv	r0, r2, r0
 8002090:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002094:	e7eb      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002096:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	08004c4c 	.word	0x08004c4c
 80020a4:	007a1200 	.word	0x007a1200
 80020a8:	00f42400 	.word	0x00f42400

080020ac <HAL_RCC_OscConfig>:
{
 80020ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80020b0:	4605      	mov	r5, r0
 80020b2:	b918      	cbnz	r0, 80020bc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
}
 80020b6:	b003      	add	sp, #12
 80020b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020bc:	4c92      	ldr	r4, [pc, #584]	@ (8002308 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020be:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c4:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ca:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ce:	d53d      	bpl.n	800214c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d0:	b11e      	cbz	r6, 80020da <HAL_RCC_OscConfig+0x2e>
 80020d2:	2e0c      	cmp	r6, #12
 80020d4:	d166      	bne.n	80021a4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020d6:	2f01      	cmp	r7, #1
 80020d8:	d164      	bne.n	80021a4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	0799      	lsls	r1, r3, #30
 80020de:	d502      	bpl.n	80020e6 <HAL_RCC_OscConfig+0x3a>
 80020e0:	69ab      	ldr	r3, [r5, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0e6      	beq.n	80020b4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	6a28      	ldr	r0, [r5, #32]
 80020ea:	071a      	lsls	r2, r3, #28
 80020ec:	bf56      	itet	pl
 80020ee:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
 80020f2:	6823      	ldrmi	r3, [r4, #0]
 80020f4:	091b      	lsrpl	r3, r3, #4
 80020f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020fa:	4298      	cmp	r0, r3
 80020fc:	d93b      	bls.n	8002176 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020fe:	f7ff ff45 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 8002102:	2800      	cmp	r0, #0
 8002104:	d1d6      	bne.n	80020b4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	6a2a      	ldr	r2, [r5, #32]
 8002112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002116:	4313      	orrs	r3, r2
 8002118:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	69ea      	ldr	r2, [r5, #28]
 800211e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002126:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002128:	f7ff ff72 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800212c:	68a3      	ldr	r3, [r4, #8]
 800212e:	4a77      	ldr	r2, [pc, #476]	@ (800230c <HAL_RCC_OscConfig+0x260>)
 8002130:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	40d8      	lsrs	r0, r3
 800213c:	4b74      	ldr	r3, [pc, #464]	@ (8002310 <HAL_RCC_OscConfig+0x264>)
 800213e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002140:	4b74      	ldr	r3, [pc, #464]	@ (8002314 <HAL_RCC_OscConfig+0x268>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f7fe fe68 	bl	8000e18 <HAL_InitTick>
        if(status != HAL_OK)
 8002148:	2800      	cmp	r0, #0
 800214a:	d1b4      	bne.n	80020b6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	07d9      	lsls	r1, r3, #31
 8002150:	d45f      	bmi.n	8002212 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002152:	682b      	ldr	r3, [r5, #0]
 8002154:	079a      	lsls	r2, r3, #30
 8002156:	f100 809e 	bmi.w	8002296 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	682b      	ldr	r3, [r5, #0]
 800215c:	0719      	lsls	r1, r3, #28
 800215e:	f100 80db 	bmi.w	8002318 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	075a      	lsls	r2, r3, #29
 8002166:	f100 8101 	bmi.w	800236c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 816a 	bne.w	8002446 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002172:	2000      	movs	r0, #0
 8002174:	e79f      	b.n	80020b6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002184:	4303      	orrs	r3, r0
 8002186:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002188:	6863      	ldr	r3, [r4, #4]
 800218a:	69ea      	ldr	r2, [r5, #28]
 800218c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002194:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002196:	2e00      	cmp	r6, #0
 8002198:	d1c6      	bne.n	8002128 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800219a:	f7ff fef7 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d0c2      	beq.n	8002128 <HAL_RCC_OscConfig+0x7c>
 80021a2:	e787      	b.n	80020b4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a4:	69ab      	ldr	r3, [r5, #24]
 80021a6:	b31b      	cbz	r3, 80021f0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021b0:	f7fe fe74 	bl	8000e9c <HAL_GetTick>
 80021b4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	079b      	lsls	r3, r3, #30
 80021ba:	d511      	bpl.n	80021e0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	6023      	str	r3, [r4, #0]
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	6a2a      	ldr	r2, [r5, #32]
 80021c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021cc:	4313      	orrs	r3, r2
 80021ce:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	69ea      	ldr	r2, [r5, #28]
 80021d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021dc:	6063      	str	r3, [r4, #4]
 80021de:	e7b5      	b.n	800214c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e0:	f7fe fe5c 	bl	8000e9c <HAL_GetTick>
 80021e4:	eba0 0008 	sub.w	r0, r0, r8
 80021e8:	2802      	cmp	r0, #2
 80021ea:	d9e4      	bls.n	80021b6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80021ec:	2003      	movs	r0, #3
 80021ee:	e762      	b.n	80020b6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021f8:	f7fe fe50 	bl	8000e9c <HAL_GetTick>
 80021fc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	0798      	lsls	r0, r3, #30
 8002202:	d5a3      	bpl.n	800214c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002204:	f7fe fe4a 	bl	8000e9c <HAL_GetTick>
 8002208:	eba0 0008 	sub.w	r0, r0, r8
 800220c:	2802      	cmp	r0, #2
 800220e:	d9f6      	bls.n	80021fe <HAL_RCC_OscConfig+0x152>
 8002210:	e7ec      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002212:	2e08      	cmp	r6, #8
 8002214:	d003      	beq.n	800221e <HAL_RCC_OscConfig+0x172>
 8002216:	2e0c      	cmp	r6, #12
 8002218:	d108      	bne.n	800222c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800221a:	2f03      	cmp	r7, #3
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	039b      	lsls	r3, r3, #14
 8002222:	d596      	bpl.n	8002152 <HAL_RCC_OscConfig+0xa6>
 8002224:	686b      	ldr	r3, [r5, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d193      	bne.n	8002152 <HAL_RCC_OscConfig+0xa6>
 800222a:	e743      	b.n	80020b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	686b      	ldr	r3, [r5, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002232:	d110      	bne.n	8002256 <HAL_RCC_OscConfig+0x1aa>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800223c:	f7fe fe2e 	bl	8000e9c <HAL_GetTick>
 8002240:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	0398      	lsls	r0, r3, #14
 8002246:	d484      	bmi.n	8002152 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe fe28 	bl	8000e9c <HAL_GetTick>
 800224c:	eba0 0008 	sub.w	r0, r0, r8
 8002250:	2864      	cmp	r0, #100	@ 0x64
 8002252:	d9f6      	bls.n	8002242 <HAL_RCC_OscConfig+0x196>
 8002254:	e7ca      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800225a:	d104      	bne.n	8002266 <HAL_RCC_OscConfig+0x1ba>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	e7e6      	b.n	8002234 <HAL_RCC_OscConfig+0x188>
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800226c:	6022      	str	r2, [r4, #0]
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002274:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e0      	bne.n	800223c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800227a:	f7fe fe0f 	bl	8000e9c <HAL_GetTick>
 800227e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	0399      	lsls	r1, r3, #14
 8002284:	f57f af65 	bpl.w	8002152 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fe08 	bl	8000e9c <HAL_GetTick>
 800228c:	eba0 0008 	sub.w	r0, r0, r8
 8002290:	2864      	cmp	r0, #100	@ 0x64
 8002292:	d9f5      	bls.n	8002280 <HAL_RCC_OscConfig+0x1d4>
 8002294:	e7aa      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002296:	2e04      	cmp	r6, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
 800229a:	2e0c      	cmp	r6, #12
 800229c:	d110      	bne.n	80022c0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800229e:	2f02      	cmp	r7, #2
 80022a0:	d10e      	bne.n	80022c0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	055a      	lsls	r2, r3, #21
 80022a6:	d503      	bpl.n	80022b0 <HAL_RCC_OscConfig+0x204>
 80022a8:	68eb      	ldr	r3, [r5, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f43f af02 	beq.w	80020b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	692a      	ldr	r2, [r5, #16]
 80022b4:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80022b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022bc:	6063      	str	r3, [r4, #4]
 80022be:	e74c      	b.n	800215a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	68eb      	ldr	r3, [r5, #12]
 80022c2:	b17b      	cbz	r3, 80022e4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022cc:	f7fe fde6 	bl	8000e9c <HAL_GetTick>
 80022d0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	055b      	lsls	r3, r3, #21
 80022d6:	d4eb      	bmi.n	80022b0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe fde0 	bl	8000e9c <HAL_GetTick>
 80022dc:	1bc0      	subs	r0, r0, r7
 80022de:	2802      	cmp	r0, #2
 80022e0:	d9f7      	bls.n	80022d2 <HAL_RCC_OscConfig+0x226>
 80022e2:	e783      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022ec:	f7fe fdd6 	bl	8000e9c <HAL_GetTick>
 80022f0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	0558      	lsls	r0, r3, #21
 80022f6:	f57f af30 	bpl.w	800215a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fa:	f7fe fdcf 	bl	8000e9c <HAL_GetTick>
 80022fe:	1bc0      	subs	r0, r0, r7
 8002300:	2802      	cmp	r0, #2
 8002302:	d9f6      	bls.n	80022f2 <HAL_RCC_OscConfig+0x246>
 8002304:	e772      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	08004c84 	.word	0x08004c84
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002318:	696b      	ldr	r3, [r5, #20]
 800231a:	b19b      	cbz	r3, 8002344 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800231c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002328:	f7fe fdb8 	bl	8000e9c <HAL_GetTick>
 800232c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8002332:	079b      	lsls	r3, r3, #30
 8002334:	f53f af15 	bmi.w	8002162 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe fdb0 	bl	8000e9c <HAL_GetTick>
 800233c:	1bc0      	subs	r0, r0, r7
 800233e:	2802      	cmp	r0, #2
 8002340:	d9f5      	bls.n	800232e <HAL_RCC_OscConfig+0x282>
 8002342:	e753      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002344:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002350:	f7fe fda4 	bl	8000e9c <HAL_GetTick>
 8002354:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002356:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800235a:	0798      	lsls	r0, r3, #30
 800235c:	f57f af01 	bpl.w	8002162 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe fd9c 	bl	8000e9c <HAL_GetTick>
 8002364:	1bc0      	subs	r0, r0, r7
 8002366:	2802      	cmp	r0, #2
 8002368:	d9f5      	bls.n	8002356 <HAL_RCC_OscConfig+0x2aa>
 800236a:	e73f      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800236c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800236e:	00d9      	lsls	r1, r3, #3
 8002370:	d429      	bmi.n	80023c6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	65a3      	str	r3, [r4, #88]	@ 0x58
 800237a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002384:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	4f84      	ldr	r7, [pc, #528]	@ (800259c <HAL_RCC_OscConfig+0x4f0>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	05da      	lsls	r2, r3, #23
 800238e:	d51d      	bpl.n	80023cc <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	68ab      	ldr	r3, [r5, #8]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d12b      	bne.n	80023ee <HAL_RCC_OscConfig+0x342>
 8002396:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80023a2:	f7fe fd7b 	bl	8000e9c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80023aa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80023b0:	0798      	lsls	r0, r3, #30
 80023b2:	d542      	bpl.n	800243a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80023b4:	f1b8 0f00 	cmp.w	r8, #0
 80023b8:	f43f aed7 	beq.w	800216a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80023c4:	e6d1      	b.n	800216a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	f04f 0800 	mov.w	r8, #0
 80023ca:	e7dd      	b.n	8002388 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80023d4:	f7fe fd62 	bl	8000e9c <HAL_GetTick>
 80023d8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	05db      	lsls	r3, r3, #23
 80023de:	d4d7      	bmi.n	8002390 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fd5c 	bl	8000e9c <HAL_GetTick>
 80023e4:	eba0 0009 	sub.w	r0, r0, r9
 80023e8:	2802      	cmp	r0, #2
 80023ea:	d9f6      	bls.n	80023da <HAL_RCC_OscConfig+0x32e>
 80023ec:	e6fe      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x354>
 80023f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80023fe:	e7ca      	b.n	8002396 <HAL_RCC_OscConfig+0x2ea>
 8002400:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
 800240c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002410:	f022 0204 	bic.w	r2, r2, #4
 8002414:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1c2      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800241c:	f7fe fd3e 	bl	8000e9c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002424:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002426:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800242a:	0799      	lsls	r1, r3, #30
 800242c:	d5c2      	bpl.n	80023b4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fd35 	bl	8000e9c <HAL_GetTick>
 8002432:	1bc0      	subs	r0, r0, r7
 8002434:	4548      	cmp	r0, r9
 8002436:	d9f6      	bls.n	8002426 <HAL_RCC_OscConfig+0x37a>
 8002438:	e6d8      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fd2f 	bl	8000e9c <HAL_GetTick>
 800243e:	1bc0      	subs	r0, r0, r7
 8002440:	4548      	cmp	r0, r9
 8002442:	d9b3      	bls.n	80023ac <HAL_RCC_OscConfig+0x300>
 8002444:	e6d2      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002446:	2b02      	cmp	r3, #2
 8002448:	f040 808f 	bne.w	800256a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800244c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8002450:	f003 0103 	and.w	r1, r3, #3
 8002454:	4291      	cmp	r1, r2
 8002456:	d124      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002458:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 800245a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800245e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002460:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002464:	d11d      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002466:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8002468:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002470:	d117      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002472:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8002474:	3a07      	subs	r2, #7
 8002476:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 800247a:	bf18      	it	ne
 800247c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	4291      	cmp	r1, r2
 8002480:	d10f      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002482:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002484:	0852      	lsrs	r2, r2, #1
 8002486:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800248a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800248c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002492:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002494:	0852      	lsrs	r2, r2, #1
 8002496:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800249a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80024a0:	d04a      	beq.n	8002538 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a2:	2e0c      	cmp	r6, #12
 80024a4:	f43f ae06 	beq.w	80020b4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	f53f ae02 	bmi.w	80020b4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	f53f adfe 	bmi.w	80020b4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024be:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80024c0:	f7fe fcec 	bl	8000e9c <HAL_GetTick>
 80024c4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	019f      	lsls	r7, r3, #6
 80024ca:	d42f      	bmi.n	800252c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	68e2      	ldr	r2, [r4, #12]
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80024d4:	4313      	orrs	r3, r2
 80024d6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80024d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024dc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80024de:	3a01      	subs	r2, #1
 80024e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80024e4:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80024e6:	0912      	lsrs	r2, r2, #4
 80024e8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80024ec:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80024ee:	0852      	lsrs	r2, r2, #1
 80024f0:	3a01      	subs	r2, #1
 80024f2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80024f6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80024f8:	0852      	lsrs	r2, r2, #1
 80024fa:	3a01      	subs	r2, #1
 80024fc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002500:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002508:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800250a:	68e3      	ldr	r3, [r4, #12]
 800250c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002510:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002512:	f7fe fcc3 	bl	8000e9c <HAL_GetTick>
 8002516:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	0198      	lsls	r0, r3, #6
 800251c:	f53f ae29 	bmi.w	8002172 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fcbc 	bl	8000e9c <HAL_GetTick>
 8002524:	1b40      	subs	r0, r0, r5
 8002526:	2802      	cmp	r0, #2
 8002528:	d9f6      	bls.n	8002518 <HAL_RCC_OscConfig+0x46c>
 800252a:	e65f      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fcb6 	bl	8000e9c <HAL_GetTick>
 8002530:	1b80      	subs	r0, r0, r6
 8002532:	2802      	cmp	r0, #2
 8002534:	d9c7      	bls.n	80024c6 <HAL_RCC_OscConfig+0x41a>
 8002536:	e659      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	0199      	lsls	r1, r3, #6
 800253c:	f53f ae19 	bmi.w	8002172 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002546:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002548:	68e3      	ldr	r3, [r4, #12]
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002550:	f7fe fca4 	bl	8000e9c <HAL_GetTick>
 8002554:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	019a      	lsls	r2, r3, #6
 800255a:	f53f ae0a 	bmi.w	8002172 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe fc9d 	bl	8000e9c <HAL_GetTick>
 8002562:	1b40      	subs	r0, r0, r5
 8002564:	2802      	cmp	r0, #2
 8002566:	d9f6      	bls.n	8002556 <HAL_RCC_OscConfig+0x4aa>
 8002568:	e640      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256a:	2e0c      	cmp	r6, #12
 800256c:	f43f ada2 	beq.w	80020b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002576:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002578:	f7fe fc90 	bl	8000e9c <HAL_GetTick>
 800257c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	d404      	bmi.n	800258e <HAL_RCC_OscConfig+0x4e2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002584:	68e2      	ldr	r2, [r4, #12]
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	4013      	ands	r3, r2
 800258a:	60e3      	str	r3, [r4, #12]
 800258c:	e5f1      	b.n	8002172 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fc85 	bl	8000e9c <HAL_GetTick>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	2802      	cmp	r0, #2
 8002596:	d9f2      	bls.n	800257e <HAL_RCC_OscConfig+0x4d2>
 8002598:	e628      	b.n	80021ec <HAL_RCC_OscConfig+0x140>
 800259a:	bf00      	nop
 800259c:	40007000 	.word	0x40007000
 80025a0:	f99d808c 	.word	0xf99d808c
 80025a4:	feeefffc 	.word	0xfeeefffc

080025a8 <HAL_RCC_ClockConfig>:
{
 80025a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80025ae:	4604      	mov	r4, r0
 80025b0:	b910      	cbnz	r0, 80025b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
}
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4a4b      	ldr	r2, [pc, #300]	@ (80026e8 <HAL_RCC_ClockConfig+0x140>)
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	428b      	cmp	r3, r1
 80025c2:	d32c      	bcc.n	800261e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	6821      	ldr	r1, [r4, #0]
 80025c6:	0788      	lsls	r0, r1, #30
 80025c8:	d434      	bmi.n	8002634 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	07c9      	lsls	r1, r1, #31
 80025cc:	d43f      	bmi.n	800264e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ce:	6821      	ldr	r1, [r4, #0]
 80025d0:	078a      	lsls	r2, r1, #30
 80025d2:	d468      	bmi.n	80026a6 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <HAL_RCC_ClockConfig+0x140>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	42ab      	cmp	r3, r5
 80025de:	d86f      	bhi.n	80026c0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	f011 0f04 	tst.w	r1, #4
 80025e4:	4d41      	ldr	r5, [pc, #260]	@ (80026ec <HAL_RCC_ClockConfig+0x144>)
 80025e6:	d177      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	070b      	lsls	r3, r1, #28
 80025ea:	d506      	bpl.n	80025fa <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ec:	68ab      	ldr	r3, [r5, #8]
 80025ee:	6922      	ldr	r2, [r4, #16]
 80025f0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80025f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025f8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025fa:	f7ff fd09 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 80025fe:	68ab      	ldr	r3, [r5, #8]
 8002600:	4a3b      	ldr	r2, [pc, #236]	@ (80026f0 <HAL_RCC_ClockConfig+0x148>)
 8002602:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	40d8      	lsrs	r0, r3
 8002612:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_RCC_ClockConfig+0x14c>)
 8002614:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002616:	4b38      	ldr	r3, [pc, #224]	@ (80026f8 <HAL_RCC_ClockConfig+0x150>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f7fe bbfd 	b.w	8000e18 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	f023 0307 	bic.w	r3, r3, #7
 8002624:	430b      	orrs	r3, r1
 8002626:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	428b      	cmp	r3, r1
 8002630:	d1bf      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xa>
 8002632:	e7c7      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002634:	4a2d      	ldr	r2, [pc, #180]	@ (80026ec <HAL_RCC_ClockConfig+0x144>)
 8002636:	68a0      	ldr	r0, [r4, #8]
 8002638:	6893      	ldr	r3, [r2, #8]
 800263a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263e:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	bf81      	itttt	hi
 8002642:	6893      	ldrhi	r3, [r2, #8]
 8002644:	f023 03f0 	bichi.w	r3, r3, #240	@ 0xf0
 8002648:	4303      	orrhi	r3, r0
 800264a:	6093      	strhi	r3, [r2, #8]
 800264c:	e7bd      	b.n	80025ca <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	6862      	ldr	r2, [r4, #4]
 8002650:	4e26      	ldr	r6, [pc, #152]	@ (80026ec <HAL_RCC_ClockConfig+0x144>)
 8002652:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	d11a      	bne.n	800268e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	d0a9      	beq.n	80025b2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800265e:	68b3      	ldr	r3, [r6, #8]
 8002660:	f023 0303 	bic.w	r3, r3, #3
 8002664:	4313      	orrs	r3, r2
 8002666:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002668:	f7fe fc18 	bl	8000e9c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002670:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	68b3      	ldr	r3, [r6, #8]
 8002674:	6862      	ldr	r2, [r4, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800267e:	d0a6      	beq.n	80025ce <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fc0c 	bl	8000e9c <HAL_GetTick>
 8002684:	1bc0      	subs	r0, r0, r7
 8002686:	4540      	cmp	r0, r8
 8002688:	d9f3      	bls.n	8002672 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800268a:	2003      	movs	r0, #3
 800268c:	e792      	b.n	80025b4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	2a02      	cmp	r2, #2
 8002690:	d102      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002692:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002696:	e7e1      	b.n	800265c <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002698:	b912      	cbnz	r2, 80026a0 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269a:	f013 0f02 	tst.w	r3, #2
 800269e:	e7dd      	b.n	800265c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80026a4:	e7da      	b.n	800265c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026a6:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <HAL_RCC_ClockConfig+0x144>)
 80026a8:	68a0      	ldr	r0, [r4, #8]
 80026aa:	6893      	ldr	r3, [r2, #8]
 80026ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b0:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b2:	bf3f      	itttt	cc
 80026b4:	6893      	ldrcc	r3, [r2, #8]
 80026b6:	f023 03f0 	biccc.w	r3, r3, #240	@ 0xf0
 80026ba:	4303      	orrcc	r3, r0
 80026bc:	6093      	strcc	r3, [r2, #8]
 80026be:	e789      	b.n	80025d4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c0:	6813      	ldr	r3, [r2, #0]
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	432b      	orrs	r3, r5
 80026c8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	42ab      	cmp	r3, r5
 80026d2:	f47f af6e 	bne.w	80025b2 <HAL_RCC_ClockConfig+0xa>
 80026d6:	e783      	b.n	80025e0 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	68ab      	ldr	r3, [r5, #8]
 80026da:	68e2      	ldr	r2, [r4, #12]
 80026dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60ab      	str	r3, [r5, #8]
 80026e4:	e780      	b.n	80025e8 <HAL_RCC_ClockConfig+0x40>
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08004c84 	.word	0x08004c84
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026fe:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	4a04      	ldr	r2, [pc, #16]	@ (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 800270a:	6810      	ldr	r0, [r2, #0]
 800270c:	f003 031f 	and.w	r3, r3, #31
}
 8002710:	40d8      	lsrs	r0, r3
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	08004c7c 	.word	0x08004c7c
 800271c:	20000000 	.word	0x20000000

08002720 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002722:	4a06      	ldr	r2, [pc, #24]	@ (800273c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272e:	6810      	ldr	r0, [r2, #0]
 8002730:	f003 031f 	and.w	r3, r3, #31
}
 8002734:	40d8      	lsrs	r0, r3
 8002736:	4770      	bx	lr
 8002738:	40021000 	.word	0x40021000
 800273c:	08004c7c 	.word	0x08004c7c
 8002740:	20000000 	.word	0x20000000

08002744 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002746:	4c41      	ldr	r4, [pc, #260]	@ (800284c <RCCEx_PLLSAI1_Config+0x108>)
 8002748:	68e3      	ldr	r3, [r4, #12]
 800274a:	079b      	lsls	r3, r3, #30
{
 800274c:	4605      	mov	r5, r0
 800274e:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002750:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002752:	d028      	beq.n	80027a6 <RCCEx_PLLSAI1_Config+0x62>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002754:	68e3      	ldr	r3, [r4, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	4283      	cmp	r3, r0
 800275c:	d13a      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x90>
       ||
 800275e:	2b00      	cmp	r3, #0
 8002760:	d038      	beq.n	80027d4 <RCCEx_PLLSAI1_Config+0x90>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002762:	68e3      	ldr	r3, [r4, #12]
       ||
 8002764:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002766:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800276a:	3301      	adds	r3, #1
       ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d131      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x90>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002776:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe fb90 	bl	8000e9c <HAL_GetTick>
 800277c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	011a      	lsls	r2, r3, #4
 8002782:	d430      	bmi.n	80027e6 <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002784:	68aa      	ldr	r2, [r5, #8]
 8002786:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002788:	b3a6      	cbz	r6, 80027f4 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800278a:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800278c:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800278e:	d14c      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002790:	6929      	ldr	r1, [r5, #16]
 8002792:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002796:	0849      	lsrs	r1, r1, #1
 8002798:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800279c:	3901      	subs	r1, #1
 800279e:	4313      	orrs	r3, r2
 80027a0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80027a4:	e030      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xc4>
    switch(PllSai1->PLLSAI1Source)
 80027a6:	2802      	cmp	r0, #2
 80027a8:	d010      	beq.n	80027cc <RCCEx_PLLSAI1_Config+0x88>
 80027aa:	2803      	cmp	r0, #3
 80027ac:	d014      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x94>
 80027ae:	2801      	cmp	r0, #1
 80027b0:	d110      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x90>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	079f      	lsls	r7, r3, #30
 80027b6:	d51c      	bpl.n	80027f2 <RCCEx_PLLSAI1_Config+0xae>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b8:	68e3      	ldr	r3, [r4, #12]
 80027ba:	686a      	ldr	r2, [r5, #4]
 80027bc:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 80027c0:	3a01      	subs	r2, #1
 80027c2:	4303      	orrs	r3, r0
 80027c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80027c8:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80027ca:	e7d1      	b.n	8002770 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d2:	d1f1      	bne.n	80027b8 <RCCEx_PLLSAI1_Config+0x74>
 80027d4:	2001      	movs	r0, #1
 80027d6:	e00c      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xae>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	0399      	lsls	r1, r3, #14
 80027dc:	d4ec      	bmi.n	80027b8 <RCCEx_PLLSAI1_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80027e4:	e7f5      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0x8e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027e6:	f7fe fb59 	bl	8000e9c <HAL_GetTick>
 80027ea:	1bc0      	subs	r0, r0, r7
 80027ec:	2802      	cmp	r0, #2
 80027ee:	d9c6      	bls.n	800277e <RCCEx_PLLSAI1_Config+0x3a>
 80027f0:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f4:	6923      	ldr	r3, [r4, #16]
 80027f6:	68e9      	ldr	r1, [r5, #12]
 80027f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002800:	0909      	lsrs	r1, r1, #4
 8002802:	4313      	orrs	r3, r2
 8002804:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002808:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002810:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002812:	f7fe fb43 	bl	8000e9c <HAL_GetTick>
 8002816:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	d510      	bpl.n	8002840 <RCCEx_PLLSAI1_Config+0xfc>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800281e:	6923      	ldr	r3, [r4, #16]
 8002820:	69aa      	ldr	r2, [r5, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	6123      	str	r3, [r4, #16]
 8002826:	2000      	movs	r0, #0
  return status;
 8002828:	e7e3      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800282a:	6969      	ldr	r1, [r5, #20]
 800282c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002830:	0849      	lsrs	r1, r1, #1
 8002832:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002836:	3901      	subs	r1, #1
 8002838:	4313      	orrs	r3, r2
 800283a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800283e:	e7e3      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xc4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002840:	f7fe fb2c 	bl	8000e9c <HAL_GetTick>
 8002844:	1b80      	subs	r0, r0, r6
 8002846:	2802      	cmp	r0, #2
 8002848:	d9e6      	bls.n	8002818 <RCCEx_PLLSAI1_Config+0xd4>
 800284a:	e7d1      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0xac>
 800284c:	40021000 	.word	0x40021000

08002850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002852:	4c3b      	ldr	r4, [pc, #236]	@ (8002940 <RCCEx_PLLSAI2_Config+0xf0>)
 8002854:	68e3      	ldr	r3, [r4, #12]
 8002856:	079b      	lsls	r3, r3, #30
{
 8002858:	4605      	mov	r5, r0
 800285a:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800285c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285e:	d026      	beq.n	80028ae <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002860:	68e3      	ldr	r3, [r4, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	4283      	cmp	r3, r0
 8002868:	d138      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x8c>
       ||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <RCCEx_PLLSAI2_Config+0x8c>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800286e:	68e3      	ldr	r3, [r4, #12]
       ||
 8002870:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002872:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002876:	3301      	adds	r3, #1
       ||
 8002878:	4293      	cmp	r3, r2
 800287a:	d12f      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x8c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002882:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fb0a 	bl	8000e9c <HAL_GetTick>
 8002888:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	009a      	lsls	r2, r3, #2
 800288e:	d42e      	bmi.n	80028ee <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002890:	68a9      	ldr	r1, [r5, #8]
 8002892:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002894:	b396      	cbz	r6, 80028fc <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002896:	6963      	ldr	r3, [r4, #20]
 8002898:	692a      	ldr	r2, [r5, #16]
 800289a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800289e:	0852      	lsrs	r2, r2, #1
 80028a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028a4:	3a01      	subs	r2, #1
 80028a6:	430b      	orrs	r3, r1
 80028a8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80028ac:	e030      	b.n	8002910 <RCCEx_PLLSAI2_Config+0xc0>
    switch(PllSai2->PLLSAI2Source)
 80028ae:	2802      	cmp	r0, #2
 80028b0:	d010      	beq.n	80028d4 <RCCEx_PLLSAI2_Config+0x84>
 80028b2:	2803      	cmp	r0, #3
 80028b4:	d014      	beq.n	80028e0 <RCCEx_PLLSAI2_Config+0x90>
 80028b6:	2801      	cmp	r0, #1
 80028b8:	d110      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x8c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	079f      	lsls	r7, r3, #30
 80028be:	d51c      	bpl.n	80028fa <RCCEx_PLLSAI2_Config+0xaa>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028c0:	68e3      	ldr	r3, [r4, #12]
 80028c2:	686a      	ldr	r2, [r5, #4]
 80028c4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 80028c8:	3a01      	subs	r2, #1
 80028ca:	4303      	orrs	r3, r0
 80028cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80028d0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80028d2:	e7d3      	b.n	800287c <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028da:	d1f1      	bne.n	80028c0 <RCCEx_PLLSAI2_Config+0x70>
 80028dc:	2001      	movs	r0, #1
 80028de:	e00c      	b.n	80028fa <RCCEx_PLLSAI2_Config+0xaa>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	0399      	lsls	r1, r3, #14
 80028e4:	d4ec      	bmi.n	80028c0 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80028ec:	e7f5      	b.n	80028da <RCCEx_PLLSAI2_Config+0x8a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ee:	f7fe fad5 	bl	8000e9c <HAL_GetTick>
 80028f2:	1bc0      	subs	r0, r0, r7
 80028f4:	2802      	cmp	r0, #2
 80028f6:	d9c8      	bls.n	800288a <RCCEx_PLLSAI2_Config+0x3a>
 80028f8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80028fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028fc:	6963      	ldr	r3, [r4, #20]
 80028fe:	68ea      	ldr	r2, [r5, #12]
 8002900:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002908:	0912      	lsrs	r2, r2, #4
 800290a:	430b      	orrs	r3, r1
 800290c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002910:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800291a:	f7fe fabf 	bl	8000e9c <HAL_GetTick>
 800291e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	d505      	bpl.n	8002932 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002926:	6963      	ldr	r3, [r4, #20]
 8002928:	696a      	ldr	r2, [r5, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	6163      	str	r3, [r4, #20]
 800292e:	2000      	movs	r0, #0
  return status;
 8002930:	e7e3      	b.n	80028fa <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002932:	f7fe fab3 	bl	8000e9c <HAL_GetTick>
 8002936:	1b80      	subs	r0, r0, r6
 8002938:	2802      	cmp	r0, #2
 800293a:	d9f1      	bls.n	8002920 <RCCEx_PLLSAI2_Config+0xd0>
 800293c:	e7dc      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0xa8>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_RCCEx_PeriphCLKConfig>:
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002944:	6803      	ldr	r3, [r0, #0]
{
 8002946:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800294a:	051d      	lsls	r5, r3, #20
{
 800294c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800294e:	d528      	bpl.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002950:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8002952:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8002956:	d026      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002958:	d817      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800295a:	b351      	cbz	r1, 80029b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800295c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8002960:	d02e      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002962:	2501      	movs	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	04d8      	lsls	r0, r3, #19
 8002968:	d50d      	bpl.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x42>
    switch(PeriphClkInit->Sai2ClockSelection)
 800296a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800296c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8002970:	f000 8147 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002974:	d829      	bhi.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002976:	2900      	cmp	r1, #0
 8002978:	f000 8149 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800297c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8002980:	f000 814a 	beq.w	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002984:	2501      	movs	r5, #1
 8002986:	462f      	mov	r7, r5
 8002988:	e02f      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai1ClockSelection)
 800298a:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800298e:	d1e8      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002990:	4aab      	ldr	r2, [pc, #684]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002992:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002994:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002998:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800299c:	430b      	orrs	r3, r1
 800299e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029a2:	2500      	movs	r5, #0
 80029a4:	e7de      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a6:	4aa6      	ldr	r2, [pc, #664]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80029a8:	68d3      	ldr	r3, [r2, #12]
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ae:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80029b0:	e7ee      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b2:	3004      	adds	r0, #4
 80029b4:	f7ff fec6 	bl	8002744 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d1d2      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80029be:	e7e7      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c0:	2100      	movs	r1, #0
 80029c2:	3020      	adds	r0, #32
 80029c4:	f7ff ff44 	bl	8002850 <RCCEx_PLLSAI2_Config>
 80029c8:	e7f6      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 80029ca:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80029ce:	d1d9      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029d0:	462f      	mov	r7, r5
    if(ret == HAL_OK)
 80029d2:	2f00      	cmp	r7, #0
 80029d4:	f040 8126 	bne.w	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d8:	4a99      	ldr	r2, [pc, #612]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80029da:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80029dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80029e0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80029e4:	430b      	orrs	r3, r1
 80029e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	0399      	lsls	r1, r3, #14
 80029ee:	d53a      	bpl.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029f0:	4e93      	ldr	r6, [pc, #588]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80029f2:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	f100 8117 	bmi.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	65b3      	str	r3, [r6, #88]	@ 0x58
 8002a02:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a0c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a10:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8002c44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002a14:	f8d9 3000 	ldr.w	r3, [r9]
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002a20:	f7fe fa3c 	bl	8000e9c <HAL_GetTick>
 8002a24:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a26:	f8d9 3000 	ldr.w	r3, [r9]
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	f140 80ff 	bpl.w	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    if(ret == HAL_OK)
 8002a30:	b98f      	cbnz	r7, 8002a56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a32:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a36:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8002a3a:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8002a3e:	f040 8103 	bne.w	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a42:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8002a46:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8002a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
 8002a54:	462f      	mov	r7, r5
    if(pwrclkchanged == SET)
 8002a56:	f1b8 0f00 	cmp.w	r8, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	65b3      	str	r3, [r6, #88]	@ 0x58
 8002a64:	463d      	mov	r5, r7
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	07da      	lsls	r2, r3, #31
 8002a6a:	d508      	bpl.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6c:	4974      	ldr	r1, [pc, #464]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a6e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002a70:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002a74:	f022 0203 	bic.w	r2, r2, #3
 8002a78:	4302      	orrs	r2, r0
 8002a7a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7e:	079f      	lsls	r7, r3, #30
 8002a80:	d508      	bpl.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a82:	496f      	ldr	r1, [pc, #444]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a84:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002a86:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002a8a:	f022 020c 	bic.w	r2, r2, #12
 8002a8e:	4302      	orrs	r2, r0
 8002a90:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a94:	075e      	lsls	r6, r3, #29
 8002a96:	d508      	bpl.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a98:	4969      	ldr	r1, [pc, #420]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a9a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002a9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002aa0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002aa4:	4302      	orrs	r2, r0
 8002aa6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aaa:	0718      	lsls	r0, r3, #28
 8002aac:	d508      	bpl.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aae:	4964      	ldr	r1, [pc, #400]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ab0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002ab2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ab6:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002aba:	4302      	orrs	r2, r0
 8002abc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ac0:	06d9      	lsls	r1, r3, #27
 8002ac2:	d508      	bpl.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ac4:	495e      	ldr	r1, [pc, #376]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ac6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002ac8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002acc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ad0:	4302      	orrs	r2, r0
 8002ad2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad6:	069a      	lsls	r2, r3, #26
 8002ad8:	d508      	bpl.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ada:	4959      	ldr	r1, [pc, #356]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002adc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002ade:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ae2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ae6:	4302      	orrs	r2, r0
 8002ae8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aec:	059f      	lsls	r7, r3, #22
 8002aee:	d508      	bpl.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af0:	4953      	ldr	r1, [pc, #332]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002af2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002af4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002af8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002afc:	4302      	orrs	r2, r0
 8002afe:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b02:	055e      	lsls	r6, r3, #21
 8002b04:	d508      	bpl.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b06:	494e      	ldr	r1, [pc, #312]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b08:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002b0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002b0e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002b12:	4302      	orrs	r2, r0
 8002b14:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b18:	0658      	lsls	r0, r3, #25
 8002b1a:	d508      	bpl.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1c:	4948      	ldr	r1, [pc, #288]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b1e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002b20:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002b24:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002b28:	4302      	orrs	r2, r0
 8002b2a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b2e:	0619      	lsls	r1, r3, #24
 8002b30:	d508      	bpl.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b32:	4943      	ldr	r1, [pc, #268]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b34:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002b36:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002b3a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002b3e:	4302      	orrs	r2, r0
 8002b40:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b44:	05da      	lsls	r2, r3, #23
 8002b46:	d508      	bpl.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b48:	493d      	ldr	r1, [pc, #244]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002b50:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002b54:	4302      	orrs	r2, r0
 8002b56:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b5a:	049f      	lsls	r7, r3, #18
 8002b5c:	d510      	bpl.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b5e:	4a38      	ldr	r2, [pc, #224]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b60:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002b62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b66:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002b6a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b74:	f040 808f 	bne.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x352>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	68d3      	ldr	r3, [r2, #12]
 8002b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	60d3      	str	r3, [r2, #12]
 8002b80:	462f      	mov	r7, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	031e      	lsls	r6, r3, #12
 8002b86:	d510      	bpl.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b8a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002b8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b90:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002b94:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b96:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b9e:	f040 8087 	bne.w	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba2:	68d3      	ldr	r3, [r2, #12]
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
 8002baa:	463e      	mov	r6, r7
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	035d      	lsls	r5, r3, #13
 8002bb0:	d50f      	bpl.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb2:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bb4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002bb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002bba:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002bbe:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bc0:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bc8:	d17f      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bca:	68d3      	ldr	r3, [r2, #12]
 8002bcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd0:	60d3      	str	r3, [r2, #12]
 8002bd2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	0458      	lsls	r0, r3, #17
 8002bd8:	f140 8086 	bpl.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bdc:	4918      	ldr	r1, [pc, #96]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bde:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8002be0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002be4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002be8:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bea:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bf2:	d176      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	1d20      	adds	r0, r4, #4
 8002bf8:	f7ff fda4 	bl	8002744 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d073      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002c00:	e073      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c02:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c04:	68d3      	ldr	r3, [r2, #12]
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	60d3      	str	r3, [r2, #12]
      break;
 8002c0c:	e6e0      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c0e:	1d20      	adds	r0, r4, #4
 8002c10:	f7ff fd98 	bl	8002744 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c14:	4607      	mov	r7, r0
      break;
 8002c16:	e6dc      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	f104 0020 	add.w	r0, r4, #32
 8002c1e:	f7ff fe17 	bl	8002850 <RCCEx_PLLSAI2_Config>
 8002c22:	e7f7      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c24:	463d      	mov	r5, r7
 8002c26:	e6e0      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa6>
    FlagStatus       pwrclkchanged = RESET;
 8002c28:	f04f 0800 	mov.w	r8, #0
 8002c2c:	e6f0      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe f935 	bl	8000e9c <HAL_GetTick>
 8002c32:	eba0 000a 	sub.w	r0, r0, sl
 8002c36:	2802      	cmp	r0, #2
 8002c38:	f67f aef5 	bls.w	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8002c3c:	2703      	movs	r7, #3
 8002c3e:	e70a      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d011      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4c:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c50:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8002c54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c58:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c64:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c68:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8002c6c:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c70:	07d8      	lsls	r0, r3, #31
 8002c72:	f57f aee6 	bpl.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tickstart = HAL_GetTick();
 8002c76:	f7fe f911 	bl	8000e9c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002c7e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c80:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8002c84:	0799      	lsls	r1, r3, #30
 8002c86:	f53f aedc 	bmi.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe f907 	bl	8000e9c <HAL_GetTick>
 8002c8e:	1bc0      	subs	r0, r0, r7
 8002c90:	4548      	cmp	r0, r9
 8002c92:	d9f5      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c94:	e7d2      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c96:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8002c9a:	f47f af71 	bne.w	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	1d20      	adds	r0, r4, #4
 8002ca2:	f7ff fd4f 	bl	8002744 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002ca6:	4607      	mov	r7, r0
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	f43f af69 	beq.w	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8002cae:	e768      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cb0:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8002cb4:	f47f af79 	bne.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb8:	2101      	movs	r1, #1
 8002cba:	1d20      	adds	r0, r4, #4
 8002cbc:	f7ff fd42 	bl	8002744 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	f43f af71 	beq.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002cc8:	e770      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cca:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8002cce:	d180      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	1d20      	adds	r0, r4, #4
 8002cd4:	f7ff fd36 	bl	8002744 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002cd8:	4605      	mov	r5, r0
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	f43f af79 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002ce0:	e778      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ce2:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8002ce6:	d01b      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8002ce8:	4628      	mov	r0, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	0411      	lsls	r1, r2, #16
 8002cee:	d508      	bpl.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cf0:	490e      	ldr	r1, [pc, #56]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf2:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 8002cf4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002cf8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cfc:	432b      	orrs	r3, r5
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d02:	03d3      	lsls	r3, r2, #15
 8002d04:	d509      	bpl.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d06:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d08:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002d0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002d10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d14:	430b      	orrs	r3, r1
 8002d16:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002d1a:	b002      	add	sp, #8
 8002d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d20:	2102      	movs	r1, #2
 8002d22:	f104 0020 	add.w	r0, r4, #32
 8002d26:	f7ff fd93 	bl	8002850 <RCCEx_PLLSAI2_Config>
 8002d2a:	e767      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d2c:	40021000 	.word	0x40021000

08002d30 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d32:	460e      	mov	r6, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d38:	f7fe f8b0 	bl	8000e9c <HAL_GetTick>
 8002d3c:	4434      	add	r4, r6
 8002d3e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002d40:	f7fe f8ac 	bl	8000e9c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d44:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002d4c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8002d4e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d50:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d52:	682a      	ldr	r2, [r5, #0]
 8002d54:	6890      	ldr	r0, [r2, #8]
 8002d56:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8002d5a:	d02d      	beq.n	8002db8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	1c73      	adds	r3, r6, #1
 8002d5e:	d0f9      	beq.n	8002d54 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d60:	f7fe f89c 	bl	8000e9c <HAL_GetTick>
 8002d64:	1bc0      	subs	r0, r0, r7
 8002d66:	42a0      	cmp	r0, r4
 8002d68:	d328      	bcc.n	8002dbc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d74:	686a      	ldr	r2, [r5, #4]
 8002d76:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002d7a:	d10a      	bne.n	8002d92 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8002d7c:	68aa      	ldr	r2, [r5, #8]
 8002d7e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002d82:	d002      	beq.n	8002d8a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d84:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002d88:	d103      	bne.n	8002d92 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d92:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002d94:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002d98:	d107      	bne.n	8002daa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002db0:	2300      	movs	r3, #0
 8002db2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002db6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8002db8:	b003      	add	sp, #12
 8002dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002dbc:	9a01      	ldr	r2, [sp, #4]
      count--;
 8002dbe:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8002dc0:	2a00      	cmp	r2, #0
      count--;
 8002dc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	bf08      	it	eq
 8002dca:	4614      	moveq	r4, r2
 8002dcc:	e7c1      	b.n	8002d52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000

08002dd4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002dda:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002ddc:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8002dde:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002de2:	4605      	mov	r5, r0
 8002de4:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002de6:	f7fe f859 	bl	8000e9c <HAL_GetTick>
 8002dea:	443c      	add	r4, r7
 8002dec:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002dee:	f7fe f855 	bl	8000e9c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002df2:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002df4:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2223      	movs	r2, #35	@ 0x23
 8002dfc:	4353      	muls	r3, r2
 8002dfe:	0d1b      	lsrs	r3, r3, #20
 8002e00:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8002e02:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e04:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e06:	682a      	ldr	r2, [r5, #0]
 8002e08:	6890      	ldr	r0, [r2, #8]
 8002e0a:	4030      	ands	r0, r6
 8002e0c:	d038      	beq.n	8002e80 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e0e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e12:	bf01      	itttt	eq
 8002e14:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8002e18:	b2db      	uxtbeq	r3, r3
 8002e1a:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e1e:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e22:	1c7b      	adds	r3, r7, #1
 8002e24:	d0f0      	beq.n	8002e08 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e26:	f7fe f839 	bl	8000e9c <HAL_GetTick>
 8002e2a:	eba0 0008 	sub.w	r0, r0, r8
 8002e2e:	42a0      	cmp	r0, r4
 8002e30:	d329      	bcc.n	8002e86 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3c:	686a      	ldr	r2, [r5, #4]
 8002e3e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002e42:	d10a      	bne.n	8002e5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8002e44:	68aa      	ldr	r2, [r5, #8]
 8002e46:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002e4a:	d002      	beq.n	8002e52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e4c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002e50:	d103      	bne.n	8002e5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e5a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002e5c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002e60:	d107      	bne.n	8002e72 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e7e:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8002e80:	b003      	add	sp, #12
 8002e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8002e86:	9a01      	ldr	r2, [sp, #4]
      count--;
 8002e88:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8002e8a:	2a00      	cmp	r2, #0
      count--;
 8002e8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	bf08      	it	eq
 8002e94:	4614      	moveq	r4, r2
 8002e96:	e7b6      	b.n	8002e06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8002e98:	20000000 	.word	0x20000000

08002e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e9e:	4613      	mov	r3, r2
{
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8002eaa:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eac:	f7ff ff92 	bl	8002dd4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002eb0:	b128      	cbz	r0, 8002ebe <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002eba:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f7ff ff34 	bl	8002d30 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d1f2      	bne.n	8002eb2 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ecc:	4633      	mov	r3, r6
 8002ece:	462a      	mov	r2, r5
 8002ed0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7ff ff7d 	bl	8002dd4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	d0ee      	beq.n	8002ebc <SPI_EndRxTxTransaction+0x20>
 8002ede:	e7e8      	b.n	8002eb2 <SPI_EndRxTxTransaction+0x16>

08002ee0 <HAL_SPI_Init>:
{
 8002ee0:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d063      	beq.n	8002fb0 <HAL_SPI_Init+0xd0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d159      	bne.n	8002fa2 <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eee:	6842      	ldr	r2, [r0, #4]
 8002ef0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002ef4:	d000      	beq.n	8002ef8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efc:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002f00:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002f04:	b923      	cbnz	r3, 8002f10 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8002f06:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7fd fe10 	bl	8000b30 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002f10:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f12:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f14:	2302      	movs	r3, #2
 8002f16:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002f1a:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8002f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f24:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	d93e      	bls.n	8002faa <HAL_SPI_Init+0xca>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f2c:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f2e:	f5b1 6f70 	cmp.w	r1, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f32:	bf18      	it	ne
 8002f34:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f36:	68a6      	ldr	r6, [r4, #8]
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	69a2      	ldr	r2, [r4, #24]
 8002f3c:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8002f40:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002f44:	4333      	orrs	r3, r6
 8002f46:	6926      	ldr	r6, [r4, #16]
 8002f48:	f006 0602 	and.w	r6, r6, #2
 8002f4c:	4333      	orrs	r3, r6
 8002f4e:	6966      	ldr	r6, [r4, #20]
 8002f50:	f006 0601 	and.w	r6, r6, #1
 8002f54:	4333      	orrs	r3, r6
 8002f56:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 8002f5a:	4333      	orrs	r3, r6
 8002f5c:	69e6      	ldr	r6, [r4, #28]
 8002f5e:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8002f62:	4333      	orrs	r3, r6
 8002f64:	6a26      	ldr	r6, [r4, #32]
 8002f66:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8002f6a:	4333      	orrs	r3, r6
 8002f6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002f6e:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8002f72:	4333      	orrs	r3, r6
 8002f74:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f76:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8002f78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f7a:	f006 0608 	and.w	r6, r6, #8
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	4333      	orrs	r3, r6
 8002f84:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8002f88:	0c12      	lsrs	r2, r2, #16
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	f002 0204 	and.w	r2, r2, #4
 8002f90:	4313      	orrs	r3, r2
 8002f92:	432b      	orrs	r3, r5
 8002f94:	6043      	str	r3, [r0, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f96:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002f98:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f9c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fa4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fa8:	e7a6      	b.n	8002ef8 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002faa:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8002fae:	e7c0      	b.n	8002f32 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	e7f5      	b.n	8002fa0 <HAL_SPI_Init+0xc0>

08002fb4 <HAL_SPI_Transmit>:
{
 8002fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fb8:	4604      	mov	r4, r0
 8002fba:	461f      	mov	r7, r3
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002fc0:	f7fd ff6c 	bl	8000e9c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002fc8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002fca:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002fcc:	b2d8      	uxtb	r0, r3
 8002fce:	f040 80b5 	bne.w	800313c <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	d076      	beq.n	80030c4 <HAL_SPI_Transmit+0x110>
 8002fd6:	f1b8 0f00 	cmp.w	r8, #0
 8002fda:	d073      	beq.n	80030c4 <HAL_SPI_Transmit+0x110>
  __HAL_LOCK(hspi);
 8002fdc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f000 80ab 	beq.w	800313c <HAL_SPI_Transmit+0x188>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8002ff0:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8002ff4:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ff8:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ffa:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ffe:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003002:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8003004:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hspi);
 8003006:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800300e:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003010:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003014:	d107      	bne.n	8003026 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8003016:	6833      	ldr	r3, [r6, #0]
 8003018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301c:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800301e:	6833      	ldr	r3, [r6, #0]
 8003020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003024:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003026:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003028:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800302c:	bf5e      	ittt	pl
 800302e:	6833      	ldrpl	r3, [r6, #0]
 8003030:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8003034:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003036:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303a:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800303c:	d945      	bls.n	80030ca <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303e:	b113      	cbz	r3, 8003046 <HAL_SPI_Transmit+0x92>
 8003040:	f1b8 0f01 	cmp.w	r8, #1
 8003044:	d107      	bne.n	8003056 <HAL_SPI_Transmit+0xa2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003046:	f835 3b02 	ldrh.w	r3, [r5], #2
 800304a:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800304c:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800304e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003050:	3b01      	subs	r3, #1
 8003052:	b29b      	uxth	r3, r3
 8003054:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8003056:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	b9d3      	cbnz	r3, 8003092 <HAL_SPI_Transmit+0xde>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305c:	464a      	mov	r2, r9
 800305e:	4639      	mov	r1, r7
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ff1b 	bl	8002e9c <SPI_EndRxTxTransaction>
 8003066:	2800      	cmp	r0, #0
 8003068:	d165      	bne.n	8003136 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	b933      	cbnz	r3, 800307c <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	9201      	str	r2, [sp, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800307c:	2301      	movs	r3, #1
 800307e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003082:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8003084:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003086:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 8003088:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800308c:	bf18      	it	ne
 800308e:	2001      	movne	r0, #1
 8003090:	e018      	b.n	80030c4 <HAL_SPI_Transmit+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	6893      	ldr	r3, [r2, #8]
 8003096:	079d      	lsls	r5, r3, #30
 8003098:	d505      	bpl.n	80030a6 <HAL_SPI_Transmit+0xf2>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800309a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800309c:	f833 1b02 	ldrh.w	r1, [r3], #2
 80030a0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80030a4:	e7d3      	b.n	800304e <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a6:	f7fd fef9 	bl	8000e9c <HAL_GetTick>
 80030aa:	eba0 0009 	sub.w	r0, r0, r9
 80030ae:	42b8      	cmp	r0, r7
 80030b0:	d3d1      	bcc.n	8003056 <HAL_SPI_Transmit+0xa2>
 80030b2:	1c78      	adds	r0, r7, #1
 80030b4:	d0cf      	beq.n	8003056 <HAL_SPI_Transmit+0xa2>
          hspi->State = HAL_SPI_STATE_READY;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030bc:	2300      	movs	r3, #0
 80030be:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030c2:	2003      	movs	r0, #3
}
 80030c4:	b003      	add	sp, #12
 80030c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	b113      	cbz	r3, 80030d2 <HAL_SPI_Transmit+0x11e>
 80030cc:	f1b8 0f01 	cmp.w	r8, #1
 80030d0:	d113      	bne.n	80030fa <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 80030d2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d906      	bls.n	80030e8 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030da:	f835 3b02 	ldrh.w	r3, [r5], #2
 80030de:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e0:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030e2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80030e4:	3b02      	subs	r3, #2
 80030e6:	e006      	b.n	80030f6 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030e8:	782b      	ldrb	r3, [r5, #0]
 80030ea:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80030ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030ee:	3301      	adds	r3, #1
 80030f0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80030f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80030fa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ac      	beq.n	800305c <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	6893      	ldr	r3, [r2, #8]
 8003106:	0799      	lsls	r1, r3, #30
 8003108:	d50c      	bpl.n	8003124 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 800310a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800310c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800310e:	b289      	uxth	r1, r1
 8003110:	2901      	cmp	r1, #1
 8003112:	d904      	bls.n	800311e <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003114:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003118:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800311a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800311c:	e7e1      	b.n	80030e2 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003122:	e7e3      	b.n	80030ec <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fd feba 	bl	8000e9c <HAL_GetTick>
 8003128:	eba0 0009 	sub.w	r0, r0, r9
 800312c:	42b8      	cmp	r0, r7
 800312e:	d3e4      	bcc.n	80030fa <HAL_SPI_Transmit+0x146>
 8003130:	1c7b      	adds	r3, r7, #1
 8003132:	d0e2      	beq.n	80030fa <HAL_SPI_Transmit+0x146>
 8003134:	e7bf      	b.n	80030b6 <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003136:	2320      	movs	r3, #32
 8003138:	6623      	str	r3, [r4, #96]	@ 0x60
 800313a:	e796      	b.n	800306a <HAL_SPI_Transmit+0xb6>
    return HAL_BUSY;
 800313c:	2002      	movs	r0, #2
 800313e:	e7c1      	b.n	80030c4 <HAL_SPI_Transmit+0x110>

08003140 <HAL_SPI_Transmit_DMA>:
{
 8003140:	b538      	push	{r3, r4, r5, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8003142:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8003146:	2b01      	cmp	r3, #1
{
 8003148:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800314a:	b2dd      	uxtb	r5, r3
 800314c:	d173      	bne.n	8003236 <HAL_SPI_Transmit_DMA+0xf6>
  if ((pData == NULL) || (Size == 0U))
 800314e:	2900      	cmp	r1, #0
 8003150:	d051      	beq.n	80031f6 <HAL_SPI_Transmit_DMA+0xb6>
 8003152:	2a00      	cmp	r2, #0
 8003154:	d04f      	beq.n	80031f6 <HAL_SPI_Transmit_DMA+0xb6>
  __HAL_LOCK(hspi);
 8003156:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d06b      	beq.n	8003236 <HAL_SPI_Transmit_DMA+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800315e:	2303      	movs	r3, #3
 8003160:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003164:	2300      	movs	r3, #0
 8003166:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8003168:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 800316c:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800316e:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003170:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003174:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003178:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 800317a:	8782      	strh	r2, [r0, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 8003180:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hspi);
 8003182:	f880 505c 	strb.w	r5, [r0, #92]	@ 0x5c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003186:	6381      	str	r1, [r0, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003188:	d107      	bne.n	800319a <HAL_SPI_Transmit_DMA+0x5a>
    __HAL_SPI_DISABLE(hspi);
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003190:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003198:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800319a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800319c:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_SPI_Transmit_DMA+0xfc>)
 800319e:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_SPI_Transmit_DMA+0x100>)
 80031a2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80031a4:	4b27      	ldr	r3, [pc, #156]	@ (8003244 <HAL_SPI_Transmit_DMA+0x104>)
 80031a6:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80031ac:	6853      	ldr	r3, [r2, #4]
 80031ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031b2:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80031b4:	68e3      	ldr	r3, [r4, #12]
 80031b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ba:	d80f      	bhi.n	80031dc <HAL_SPI_Transmit_DMA+0x9c>
 80031bc:	6983      	ldr	r3, [r0, #24]
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c2:	d10b      	bne.n	80031dc <HAL_SPI_Transmit_DMA+0x9c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80031c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80031c6:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80031ca:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80031cc:	d115      	bne.n	80031fa <HAL_SPI_Transmit_DMA+0xba>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80031ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031d2:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80031d4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80031d6:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80031da:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 80031dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80031de:	320c      	adds	r2, #12
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f7fe fd2d 	bl	8001c40 <HAL_DMA_Start_IT>
 80031e6:	b180      	cbz	r0, 800320a <HAL_SPI_Transmit_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80031e8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80031ea:	f043 0310 	orr.w	r3, r3, #16
 80031ee:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80031f0:	2300      	movs	r3, #0
 80031f2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80031f6:	4628      	mov	r0, r5
 80031f8:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031fe:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003200:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003202:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8003206:	3301      	adds	r3, #1
 8003208:	e7e7      	b.n	80031da <HAL_SPI_Transmit_DMA+0x9a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003210:	bf58      	it	pl
 8003212:	681a      	ldrpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003214:	f04f 0500 	mov.w	r5, #0
    __HAL_SPI_ENABLE(hspi);
 8003218:	bf5c      	itt	pl
 800321a:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 800321e:	601a      	strpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003220:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	f042 0202 	orr.w	r2, r2, #2
 8003232:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8003234:	e7df      	b.n	80031f6 <HAL_SPI_Transmit_DMA+0xb6>
    return HAL_BUSY;
 8003236:	2502      	movs	r5, #2
 8003238:	e7dd      	b.n	80031f6 <HAL_SPI_Transmit_DMA+0xb6>
 800323a:	bf00      	nop
 800323c:	0800324b 	.word	0x0800324b
 8003240:	08003279 	.word	0x08003279
 8003244:	08003257 	.word	0x08003257

08003248 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8003248:	4770      	bx	lr

0800324a <SPI_DMAHalfTransmitCplt>:
{
 800324a:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800324c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800324e:	f7ff fffb 	bl	8003248 <HAL_SPI_TxHalfCpltCallback>
}
 8003252:	bd08      	pop	{r3, pc}

08003254 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8003254:	4770      	bx	lr

08003256 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003256:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003258:	6802      	ldr	r2, [r0, #0]
{
 800325a:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800325c:	6853      	ldr	r3, [r2, #4]
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003264:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003266:	f043 0310 	orr.w	r3, r3, #16
 800326a:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800326c:	2301      	movs	r3, #1
 800326e:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8003272:	f7ff ffef 	bl	8003254 <HAL_SPI_ErrorCallback>
}
 8003276:	bd08      	pop	{r3, pc}

08003278 <SPI_DMATransmitCplt>:
{
 8003278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800327a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800327c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800327e:	f7fd fe0d 	bl	8000e9c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 8003288:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800328a:	d426      	bmi.n	80032da <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	f021 0120 	bic.w	r1, r1, #32
 8003294:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	f021 0102 	bic.w	r1, r1, #2
 800329c:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800329e:	4620      	mov	r0, r4
 80032a0:	2164      	movs	r1, #100	@ 0x64
 80032a2:	f7ff fdfb 	bl	8002e9c <SPI_EndRxTxTransaction>
 80032a6:	b118      	cbz	r0, 80032b0 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80032aa:	f043 0320 	orr.w	r3, r3, #32
 80032ae:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032b0:	68a3      	ldr	r3, [r4, #8]
 80032b2:	b933      	cbnz	r3, 80032c2 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	9201      	str	r2, [sp, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032cc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80032ce:	b123      	cbz	r3, 80032da <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ffbf 	bl	8003254 <HAL_SPI_ErrorCallback>
}
 80032d6:	b003      	add	sp, #12
 80032d8:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 80032da:	4620      	mov	r0, r4
 80032dc:	f7fd fb64 	bl	80009a8 <HAL_SPI_TxCpltCallback>
 80032e0:	e7f9      	b.n	80032d6 <SPI_DMATransmitCplt+0x5e>

080032e2 <HAL_SPI_GetState>:
  return hspi->State;
 80032e2:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 80032e6:	4770      	bx	lr

080032e8 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	e852 3f00 	ldrex	r3, [r2]
 80032ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80032f6:	6802      	ldr	r2, [r0, #0]
 80032f8:	2900      	cmp	r1, #0
 80032fa:	d1f5      	bne.n	80032e8 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	f102 0308 	add.w	r3, r2, #8
 8003300:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003304:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	f102 0c08 	add.w	ip, r2, #8
 800330c:	e84c 3100 	strex	r1, r3, [ip]
 8003310:	2900      	cmp	r1, #0
 8003312:	d1f3      	bne.n	80032fc <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	e842 3100 	strex	r1, r3, [r2]
 8003326:	2900      	cmp	r1, #0
 8003328:	d1f7      	bne.n	800331a <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800332a:	2320      	movs	r3, #32
 800332c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	2300      	movs	r3, #0
 8003332:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003334:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8003336:	4770      	bx	lr

08003338 <UART_SetConfig>:
{
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800333c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800333e:	6921      	ldr	r1, [r4, #16]
 8003340:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003342:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003344:	69c0      	ldr	r0, [r0, #28]
 8003346:	430a      	orrs	r2, r1
 8003348:	6961      	ldr	r1, [r4, #20]
 800334a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800334c:	497e      	ldr	r1, [pc, #504]	@ (8003548 <UART_SetConfig+0x210>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800334e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003350:	4029      	ands	r1, r5
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68e1      	ldr	r1, [r4, #12]
 800335a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003362:	4a7a      	ldr	r2, [pc, #488]	@ (800354c <UART_SetConfig+0x214>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003364:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003366:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003368:	bf1c      	itt	ne
 800336a:	6a22      	ldrne	r2, [r4, #32]
 800336c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003378:	4a75      	ldr	r2, [pc, #468]	@ (8003550 <UART_SetConfig+0x218>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d113      	bne.n	80033a6 <UART_SetConfig+0x6e>
 800337e:	4b75      	ldr	r3, [pc, #468]	@ (8003554 <UART_SetConfig+0x21c>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b02      	cmp	r3, #2
 800338a:	f000 80b8 	beq.w	80034fe <UART_SetConfig+0x1c6>
 800338e:	2b03      	cmp	r3, #3
 8003390:	d01e      	beq.n	80033d0 <UART_SetConfig+0x98>
 8003392:	2b01      	cmp	r3, #1
 8003394:	f040 80bb 	bne.w	800350e <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003398:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800339c:	f040 80a6 	bne.w	80034ec <UART_SetConfig+0x1b4>
        pclk = HAL_RCC_GetSysClockFreq();
 80033a0:	f7fe fe36 	bl	8002010 <HAL_RCC_GetSysClockFreq>
        break;
 80033a4:	e0b8      	b.n	8003518 <UART_SetConfig+0x1e0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003558 <UART_SetConfig+0x220>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d118      	bne.n	80033de <UART_SetConfig+0xa6>
 80033ac:	4b69      	ldr	r3, [pc, #420]	@ (8003554 <UART_SetConfig+0x21c>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	f000 80a1 	beq.w	80034fe <UART_SetConfig+0x1c6>
 80033bc:	d806      	bhi.n	80033cc <UART_SetConfig+0x94>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8097 	beq.w	80034f2 <UART_SetConfig+0x1ba>
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d0e7      	beq.n	8003398 <UART_SetConfig+0x60>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c8:	2001      	movs	r0, #1
 80033ca:	e053      	b.n	8003474 <UART_SetConfig+0x13c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d1fb      	bne.n	80033c8 <UART_SetConfig+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80033d4:	f000 80a2 	beq.w	800351c <UART_SetConfig+0x1e4>
        pclk = (uint32_t) LSE_VALUE;
 80033d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80033dc:	e077      	b.n	80034ce <UART_SetConfig+0x196>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033de:	4a5f      	ldr	r2, [pc, #380]	@ (800355c <UART_SetConfig+0x224>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10e      	bne.n	8003402 <UART_SetConfig+0xca>
 80033e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003554 <UART_SetConfig+0x21c>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	f000 8085 	beq.w	80034fe <UART_SetConfig+0x1c6>
 80033f4:	d803      	bhi.n	80033fe <UART_SetConfig+0xc6>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d07b      	beq.n	80034f2 <UART_SetConfig+0x1ba>
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	e7e3      	b.n	80033c6 <UART_SetConfig+0x8e>
 80033fe:	2b30      	cmp	r3, #48	@ 0x30
 8003400:	e7e5      	b.n	80033ce <UART_SetConfig+0x96>
 8003402:	4a57      	ldr	r2, [pc, #348]	@ (8003560 <UART_SetConfig+0x228>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10d      	bne.n	8003424 <UART_SetConfig+0xec>
 8003408:	4b52      	ldr	r3, [pc, #328]	@ (8003554 <UART_SetConfig+0x21c>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003412:	2b80      	cmp	r3, #128	@ 0x80
 8003414:	d073      	beq.n	80034fe <UART_SetConfig+0x1c6>
 8003416:	d803      	bhi.n	8003420 <UART_SetConfig+0xe8>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d06a      	beq.n	80034f2 <UART_SetConfig+0x1ba>
 800341c:	2b40      	cmp	r3, #64	@ 0x40
 800341e:	e7d2      	b.n	80033c6 <UART_SetConfig+0x8e>
 8003420:	2bc0      	cmp	r3, #192	@ 0xc0
 8003422:	e7d4      	b.n	80033ce <UART_SetConfig+0x96>
 8003424:	4a4f      	ldr	r2, [pc, #316]	@ (8003564 <UART_SetConfig+0x22c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d110      	bne.n	800344c <UART_SetConfig+0x114>
 800342a:	4b4a      	ldr	r3, [pc, #296]	@ (8003554 <UART_SetConfig+0x21c>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003438:	d061      	beq.n	80034fe <UART_SetConfig+0x1c6>
 800343a:	d804      	bhi.n	8003446 <UART_SetConfig+0x10e>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d058      	beq.n	80034f2 <UART_SetConfig+0x1ba>
 8003440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003444:	e7bf      	b.n	80033c6 <UART_SetConfig+0x8e>
 8003446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800344a:	e7c0      	b.n	80033ce <UART_SetConfig+0x96>
 800344c:	4a3f      	ldr	r2, [pc, #252]	@ (800354c <UART_SetConfig+0x214>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d1ba      	bne.n	80033c8 <UART_SetConfig+0x90>
 8003452:	4b40      	ldr	r3, [pc, #256]	@ (8003554 <UART_SetConfig+0x21c>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003460:	d015      	beq.n	800348e <UART_SetConfig+0x156>
 8003462:	d80b      	bhi.n	800347c <UART_SetConfig+0x144>
 8003464:	b183      	cbz	r3, 8003488 <UART_SetConfig+0x150>
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346a:	d1ad      	bne.n	80033c8 <UART_SetConfig+0x90>
        pclk = HAL_RCC_GetSysClockFreq();
 800346c:	f7fe fdd0 	bl	8002010 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003470:	b970      	cbnz	r0, 8003490 <UART_SetConfig+0x158>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003472:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003474:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003476:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 800347a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800347c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003480:	d1a2      	bne.n	80033c8 <UART_SetConfig+0x90>
 8003482:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003486:	e003      	b.n	8003490 <UART_SetConfig+0x158>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff f938 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
        break;
 800348c:	e7f0      	b.n	8003470 <UART_SetConfig+0x138>
        pclk = (uint32_t) HSI_VALUE;
 800348e:	4836      	ldr	r0, [pc, #216]	@ (8003568 <UART_SetConfig+0x230>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003490:	6862      	ldr	r2, [r4, #4]
 8003492:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003496:	4283      	cmp	r3, r0
 8003498:	d896      	bhi.n	80033c8 <UART_SetConfig+0x90>
 800349a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800349e:	d893      	bhi.n	80033c8 <UART_SetConfig+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034a0:	0851      	lsrs	r1, r2, #1
 80034a2:	2300      	movs	r3, #0
 80034a4:	468c      	mov	ip, r1
 80034a6:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80034aa:	4619      	mov	r1, r3
 80034ac:	fbe0 c105 	umlal	ip, r1, r0, r5
 80034b0:	4660      	mov	r0, ip
 80034b2:	f7fc fedd 	bl	8000270 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034b6:	4b2d      	ldr	r3, [pc, #180]	@ (800356c <UART_SetConfig+0x234>)
 80034b8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80034bc:	429a      	cmp	r2, r3
 80034be:	d883      	bhi.n	80033c8 <UART_SetConfig+0x90>
          huart->Instance->BRR = usartdiv;
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	60d8      	str	r0, [r3, #12]
 80034c4:	e7d5      	b.n	8003472 <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c6:	f7ff f919 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d0d1      	beq.n	8003472 <UART_SetConfig+0x13a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80034d4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80034dc:	f1a3 0110 	sub.w	r1, r3, #16
 80034e0:	4291      	cmp	r1, r2
 80034e2:	f63f af71 	bhi.w	80033c8 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	60d3      	str	r3, [r2, #12]
 80034ea:	e7c2      	b.n	8003472 <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetSysClockFreq();
 80034ec:	f7fe fd90 	bl	8002010 <HAL_RCC_GetSysClockFreq>
        break;
 80034f0:	e7eb      	b.n	80034ca <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80034f6:	d1e6      	bne.n	80034c6 <UART_SetConfig+0x18e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f8:	f7ff f900 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
        break;
 80034fc:	e00c      	b.n	8003518 <UART_SetConfig+0x1e0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003502:	4819      	ldr	r0, [pc, #100]	@ (8003568 <UART_SetConfig+0x230>)
 8003504:	d1e3      	bne.n	80034ce <UART_SetConfig+0x196>
 8003506:	e009      	b.n	800351c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff f90a 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
        break;
 800350c:	e7dd      	b.n	80034ca <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003512:	d1f9      	bne.n	8003508 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7ff f904 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003518:	2800      	cmp	r0, #0
 800351a:	d0aa      	beq.n	8003472 <UART_SetConfig+0x13a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800351c:	6862      	ldr	r2, [r4, #4]
 800351e:	0853      	lsrs	r3, r2, #1
 8003520:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003524:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003528:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800352c:	f1a3 0110 	sub.w	r1, r3, #16
 8003530:	4291      	cmp	r1, r2
 8003532:	f63f af49 	bhi.w	80033c8 <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003536:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800353a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800353c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800353e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003542:	4313      	orrs	r3, r2
 8003544:	60cb      	str	r3, [r1, #12]
 8003546:	e794      	b.n	8003472 <UART_SetConfig+0x13a>
 8003548:	efff69f3 	.word	0xefff69f3
 800354c:	40008000 	.word	0x40008000
 8003550:	40013800 	.word	0x40013800
 8003554:	40021000 	.word	0x40021000
 8003558:	40004400 	.word	0x40004400
 800355c:	40004800 	.word	0x40004800
 8003560:	40004c00 	.word	0x40004c00
 8003564:	40005000 	.word	0x40005000
 8003568:	00f42400 	.word	0x00f42400
 800356c:	000ffcff 	.word	0x000ffcff

08003570 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003570:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003572:	071a      	lsls	r2, r3, #28
{
 8003574:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003576:	d506      	bpl.n	8003586 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003578:	6801      	ldr	r1, [r0, #0]
 800357a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800357c:	684a      	ldr	r2, [r1, #4]
 800357e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003582:	4322      	orrs	r2, r4
 8003584:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003586:	07dc      	lsls	r4, r3, #31
 8003588:	d506      	bpl.n	8003598 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800358a:	6801      	ldr	r1, [r0, #0]
 800358c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800358e:	684a      	ldr	r2, [r1, #4]
 8003590:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003594:	4322      	orrs	r2, r4
 8003596:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003598:	0799      	lsls	r1, r3, #30
 800359a:	d506      	bpl.n	80035aa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800359c:	6801      	ldr	r1, [r0, #0]
 800359e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80035a0:	684a      	ldr	r2, [r1, #4]
 80035a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80035a6:	4322      	orrs	r2, r4
 80035a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035aa:	075a      	lsls	r2, r3, #29
 80035ac:	d506      	bpl.n	80035bc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ae:	6801      	ldr	r1, [r0, #0]
 80035b0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80035b2:	684a      	ldr	r2, [r1, #4]
 80035b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035b8:	4322      	orrs	r2, r4
 80035ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035bc:	06dc      	lsls	r4, r3, #27
 80035be:	d506      	bpl.n	80035ce <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80035c4:	688a      	ldr	r2, [r1, #8]
 80035c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ca:	4322      	orrs	r2, r4
 80035cc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ce:	0699      	lsls	r1, r3, #26
 80035d0:	d506      	bpl.n	80035e0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d2:	6801      	ldr	r1, [r0, #0]
 80035d4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80035d6:	688a      	ldr	r2, [r1, #8]
 80035d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035dc:	4322      	orrs	r2, r4
 80035de:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e0:	065a      	lsls	r2, r3, #25
 80035e2:	d50f      	bpl.n	8003604 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035e4:	6801      	ldr	r1, [r0, #0]
 80035e6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80035e8:	684a      	ldr	r2, [r1, #4]
 80035ea:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80035ee:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035f0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035f6:	d105      	bne.n	8003604 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f8:	684a      	ldr	r2, [r1, #4]
 80035fa:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80035fc:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8003600:	4322      	orrs	r2, r4
 8003602:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	d506      	bpl.n	8003616 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003608:	6802      	ldr	r2, [r0, #0]
 800360a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800360c:	6853      	ldr	r3, [r2, #4]
 800360e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003612:	430b      	orrs	r3, r1
 8003614:	6053      	str	r3, [r2, #4]
}
 8003616:	bd10      	pop	{r4, pc}

08003618 <UART_WaitOnFlagUntilTimeout>:
{
 8003618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800361c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003620:	4604      	mov	r4, r0
 8003622:	460d      	mov	r5, r1
 8003624:	4617      	mov	r7, r2
 8003626:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	69d3      	ldr	r3, [r2, #28]
 800362c:	ea35 0303 	bics.w	r3, r5, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	42bb      	cmp	r3, r7
 8003638:	d001      	beq.n	800363e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800363a:	2000      	movs	r0, #0
 800363c:	e022      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800363e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003642:	d0f2      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fd fc2a 	bl	8000e9c <HAL_GetTick>
 8003648:	eba0 0008 	sub.w	r0, r0, r8
 800364c:	4548      	cmp	r0, r9
 800364e:	d829      	bhi.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8003650:	f1b9 0f00 	cmp.w	r9, #0
 8003654:	d026      	beq.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003656:	6821      	ldr	r1, [r4, #0]
 8003658:	680b      	ldr	r3, [r1, #0]
 800365a:	075a      	lsls	r2, r3, #29
 800365c:	d5e4      	bpl.n	8003628 <UART_WaitOnFlagUntilTimeout+0x10>
 800365e:	2d80      	cmp	r5, #128	@ 0x80
 8003660:	d0e2      	beq.n	8003628 <UART_WaitOnFlagUntilTimeout+0x10>
 8003662:	2d40      	cmp	r5, #64	@ 0x40
 8003664:	d0e0      	beq.n	8003628 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003666:	69ce      	ldr	r6, [r1, #28]
 8003668:	f016 0608 	ands.w	r6, r6, #8
 800366c:	d00c      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800366e:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8003670:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003672:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003674:	f7ff fe38 	bl	80032e8 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003678:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800367a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800367e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
}
 8003684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003688:	69cb      	ldr	r3, [r1, #28]
 800368a:	051b      	lsls	r3, r3, #20
 800368c:	d5cc      	bpl.n	8003628 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800368e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003692:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003694:	4620      	mov	r0, r4
 8003696:	f7ff fe27 	bl	80032e8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369a:	2320      	movs	r3, #32
 800369c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80036a0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80036a4:	2003      	movs	r0, #3
 80036a6:	e7ed      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0x6c>

080036a8 <HAL_UART_Transmit>:
{
 80036a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036ac:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80036ae:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80036b0:	2b20      	cmp	r3, #32
{
 80036b2:	4604      	mov	r4, r0
 80036b4:	460e      	mov	r6, r1
 80036b6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80036b8:	d143      	bne.n	8003742 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 80036ba:	2900      	cmp	r1, #0
 80036bc:	d043      	beq.n	8003746 <HAL_UART_Transmit+0x9e>
 80036be:	2a00      	cmp	r2, #0
 80036c0:	d041      	beq.n	8003746 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	2500      	movs	r5, #0
 80036c6:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ca:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80036cc:	f7fd fbe6 	bl	8000e9c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80036d2:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80036da:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80036dc:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	d103      	bne.n	80036ea <HAL_UART_Transmit+0x42>
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	b90b      	cbnz	r3, 80036ea <HAL_UART_Transmit+0x42>
 80036e6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80036e8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80036ea:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80036f2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f4:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 80036f6:	b93a      	cbnz	r2, 8003708 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f8:	2140      	movs	r1, #64	@ 0x40
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff ff8c 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8003700:	2320      	movs	r3, #32
 8003702:	b940      	cbnz	r0, 8003716 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8003704:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8003706:	e008      	b.n	800371a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	4620      	mov	r0, r4
 800370e:	f7ff ff83 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8003712:	b128      	cbz	r0, 8003720 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8003714:	2320      	movs	r3, #32
 8003716:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8003718:	2003      	movs	r0, #3
}
 800371a:	b003      	add	sp, #12
 800371c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003720:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003722:	b95e      	cbnz	r6, 800373c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003724:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003728:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800372c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800372e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003732:	3a01      	subs	r2, #1
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800373a:	e7d6      	b.n	80036ea <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800373c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003740:	e7f4      	b.n	800372c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8003742:	2002      	movs	r0, #2
 8003744:	e7e9      	b.n	800371a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8003746:	2001      	movs	r0, #1
 8003748:	e7e7      	b.n	800371a <HAL_UART_Transmit+0x72>

0800374a <UART_CheckIdleState>:
{
 800374a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800374c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	2600      	movs	r6, #0
 8003750:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003754:	f7fd fba2 	bl	8000e9c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800375e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003760:	d51b      	bpl.n	800379a <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003762:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4632      	mov	r2, r6
 800376a:	4603      	mov	r3, r0
 800376c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003770:	4620      	mov	r0, r4
 8003772:	f7ff ff51 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8003776:	b180      	cbz	r0, 800379a <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003778:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	e852 3f00 	ldrex	r3, [r2]
 800377e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	e842 3100 	strex	r1, r3, [r2]
 8003786:	2900      	cmp	r1, #0
 8003788:	d1f6      	bne.n	8003778 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800378a:	2320      	movs	r3, #32
 800378c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800378e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003790:	2300      	movs	r3, #0
 8003792:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8003796:	b002      	add	sp, #8
 8003798:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	075b      	lsls	r3, r3, #29
 80037a0:	d524      	bpl.n	80037ec <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	462b      	mov	r3, r5
 80037ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7ff ff31 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80037b6:	b1c8      	cbz	r0, 80037ec <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	e852 3f00 	ldrex	r3, [r2]
 80037be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d1f5      	bne.n	80037b8 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	f102 0308 	add.w	r3, r2, #8
 80037d0:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	f102 0008 	add.w	r0, r2, #8
 80037dc:	e840 3100 	strex	r1, r3, [r0]
 80037e0:	2900      	cmp	r1, #0
 80037e2:	d1f3      	bne.n	80037cc <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 80037e4:	2320      	movs	r3, #32
 80037e6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80037ea:	e7d0      	b.n	800378e <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037f2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f8:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80037fa:	e7c9      	b.n	8003790 <UART_CheckIdleState+0x46>

080037fc <HAL_UART_Init>:
{
 80037fc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80037fe:	4604      	mov	r4, r0
 8003800:	b340      	cbz	r0, 8003854 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003802:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003804:	b91b      	cbnz	r3, 800380e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003806:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800380a:	f7fd fa99 	bl	8000d40 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800380e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	2324      	movs	r3, #36	@ 0x24
 8003812:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800381e:	b113      	cbz	r3, 8003826 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8003820:	4620      	mov	r0, r4
 8003822:	f7ff fea5 	bl	8003570 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003826:	4620      	mov	r0, r4
 8003828:	f7ff fd86 	bl	8003338 <UART_SetConfig>
 800382c:	2801      	cmp	r0, #1
 800382e:	d011      	beq.n	8003854 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003838:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003840:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003848:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800384a:	601a      	str	r2, [r3, #0]
}
 800384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003850:	f7ff bf7b 	b.w	800374a <UART_CheckIdleState>
}
 8003854:	2001      	movs	r0, #1
 8003856:	bd10      	pop	{r4, pc}

08003858 <clip_line>:

    return code;
}

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	b087      	sub	sp, #28
    if (x0 < window.x0) {
 800385e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8003862:	f8bd e040 	ldrh.w	lr, [sp, #64]	@ 0x40
 8003866:	f8bd 8042 	ldrh.w	r8, [sp, #66]	@ 0x42
 800386a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
 800386e:	f8bd c046 	ldrh.w	ip, [sp, #70]	@ 0x46
    uint8_t code0 = code(*x0, *y0, window);
 8003872:	f9b1 4000 	ldrsh.w	r4, [r1]
{
 8003876:	9301      	str	r3, [sp, #4]
    if (x0 < window.x0) {
 8003878:	4575      	cmp	r5, lr
 800387a:	db5a      	blt.n	8003932 <clip_line+0xda>
    } else if (x0 > window.x1) {
 800387c:	42bd      	cmp	r5, r7
 800387e:	bfd4      	ite	le
 8003880:	2500      	movle	r5, #0
 8003882:	2501      	movgt	r5, #1
 8003884:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8003886:	4544      	cmp	r4, r8
 8003888:	da55      	bge.n	8003936 <clip_line+0xde>
        code |= BOTTOM;
 800388a:	f045 0504 	orr.w	r5, r5, #4
    if (x0 < window.x0) {
 800388e:	f9b2 6000 	ldrsh.w	r6, [r2]
    uint8_t code1 = code(*x1, *y1, window);
 8003892:	9b01      	ldr	r3, [sp, #4]
    if (x0 < window.x0) {
 8003894:	4576      	cmp	r6, lr
    uint8_t code1 = code(*x1, *y1, window);
 8003896:	f9b3 4000 	ldrsh.w	r4, [r3]
    if (x0 < window.x0) {
 800389a:	db51      	blt.n	8003940 <clip_line+0xe8>
    } else if (x0 > window.x1) {
 800389c:	42be      	cmp	r6, r7
 800389e:	bfd4      	ite	le
 80038a0:	2600      	movle	r6, #0
 80038a2:	2601      	movgt	r6, #1
 80038a4:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 80038a6:	4544      	cmp	r4, r8
 80038a8:	da4c      	bge.n	8003944 <clip_line+0xec>
        code |= BOTTOM;
 80038aa:	f046 0604 	orr.w	r6, r6, #4
            } else if (code3 & BOTTOM) {
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
                y = window.y0;
            } else if (code3 & RIGHT) {
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
                x = window.x1;
 80038ae:	b23c      	sxth	r4, r7
 80038b0:	9403      	str	r4, [sp, #12]
                y = window.y0;
 80038b2:	fa0f f488 	sxth.w	r4, r8
 80038b6:	9404      	str	r4, [sp, #16]
                y = window.y1;
 80038b8:	fa0f f48c 	sxth.w	r4, ip
 80038bc:	9405      	str	r4, [sp, #20]
        if (!(code0 | code1)) {
 80038be:	ea55 0406 	orrs.w	r4, r5, r6
 80038c2:	f000 80bb 	beq.w	8003a3c <clip_line+0x1e4>
        } else if (code0 & code1) {
 80038c6:	4235      	tst	r5, r6
 80038c8:	f040 80bc 	bne.w	8003a44 <clip_line+0x1ec>
            uint8_t code3 = code0 ? code0 : code1;
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	bf14      	ite	ne
 80038d0:	462c      	movne	r4, r5
 80038d2:	4634      	moveq	r4, r6
 80038d4:	4623      	mov	r3, r4
            if (code3 & TOP) {
 80038d6:	0724      	lsls	r4, r4, #28
 80038d8:	d539      	bpl.n	800394e <clip_line+0xf6>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 80038da:	f9b0 9000 	ldrsh.w	r9, [r0]
 80038de:	f9b1 a000 	ldrsh.w	sl, [r1]
 80038e2:	f9b2 4000 	ldrsh.w	r4, [r2]
 80038e6:	ebac 0b0a 	sub.w	fp, ip, sl
 80038ea:	eba4 0409 	sub.w	r4, r4, r9
 80038ee:	fb0b f404 	mul.w	r4, fp, r4
 80038f2:	9402      	str	r4, [sp, #8]
 80038f4:	9c01      	ldr	r4, [sp, #4]
 80038f6:	f9b4 b000 	ldrsh.w	fp, [r4]
 80038fa:	9c02      	ldr	r4, [sp, #8]
 80038fc:	ebab 0b0a 	sub.w	fp, fp, sl
 8003900:	fb94 f4fb 	sdiv	r4, r4, fp
 8003904:	444c      	add	r4, r9
 8003906:	fa0f f984 	sxth.w	r9, r4
                y = window.y1;
 800390a:	9c05      	ldr	r4, [sp, #20]
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
                x = window.x0;
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800390c:	429d      	cmp	r5, r3
 800390e:	d17b      	bne.n	8003a08 <clip_line+0x1b0>
                *x0 = x;
 8003910:	f8a0 9000 	strh.w	r9, [r0]
                *y0 = y;
 8003914:	800c      	strh	r4, [r1, #0]
    if (x0 < window.x0) {
 8003916:	f9b0 5000 	ldrsh.w	r5, [r0]
 800391a:	45ae      	cmp	lr, r5
 800391c:	dc6c      	bgt.n	80039f8 <clip_line+0x1a0>
    } else if (x0 > window.x1) {
 800391e:	42bd      	cmp	r5, r7
 8003920:	bfd4      	ite	le
 8003922:	2500      	movle	r5, #0
 8003924:	2501      	movgt	r5, #1
 8003926:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8003928:	45a0      	cmp	r8, r4
 800392a:	dd67      	ble.n	80039fc <clip_line+0x1a4>
        code |= BOTTOM;
 800392c:	f045 0504 	orr.w	r5, r5, #4
 8003930:	e7c5      	b.n	80038be <clip_line+0x66>
        code |= LEFT;
 8003932:	2501      	movs	r5, #1
 8003934:	e7a7      	b.n	8003886 <clip_line+0x2e>
    } else if (y0 > window.y1) {
 8003936:	4564      	cmp	r4, ip
        code |= TOP;
 8003938:	bfc8      	it	gt
 800393a:	f045 0508 	orrgt.w	r5, r5, #8
 800393e:	e7a6      	b.n	800388e <clip_line+0x36>
        code |= LEFT;
 8003940:	2601      	movs	r6, #1
 8003942:	e7b0      	b.n	80038a6 <clip_line+0x4e>
    } else if (y0 > window.y1) {
 8003944:	4564      	cmp	r4, ip
        code |= TOP;
 8003946:	bfc8      	it	gt
 8003948:	f046 0608 	orrgt.w	r6, r6, #8
 800394c:	e7af      	b.n	80038ae <clip_line+0x56>
            } else if (code3 & BOTTOM) {
 800394e:	461c      	mov	r4, r3
 8003950:	0764      	lsls	r4, r4, #29
 8003952:	d519      	bpl.n	8003988 <clip_line+0x130>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8003954:	f9b0 9000 	ldrsh.w	r9, [r0]
 8003958:	f9b1 a000 	ldrsh.w	sl, [r1]
 800395c:	f9b2 4000 	ldrsh.w	r4, [r2]
 8003960:	eba8 0b0a 	sub.w	fp, r8, sl
 8003964:	eba4 0409 	sub.w	r4, r4, r9
 8003968:	fb0b f404 	mul.w	r4, fp, r4
 800396c:	9402      	str	r4, [sp, #8]
 800396e:	9c01      	ldr	r4, [sp, #4]
 8003970:	f9b4 b000 	ldrsh.w	fp, [r4]
 8003974:	9c02      	ldr	r4, [sp, #8]
 8003976:	ebab 0b0a 	sub.w	fp, fp, sl
 800397a:	fb94 f4fb 	sdiv	r4, r4, fp
 800397e:	444c      	add	r4, r9
 8003980:	fa0f f984 	sxth.w	r9, r4
                y = window.y0;
 8003984:	9c04      	ldr	r4, [sp, #16]
 8003986:	e7c1      	b.n	800390c <clip_line+0xb4>
            } else if (code3 & RIGHT) {
 8003988:	461c      	mov	r4, r3
 800398a:	07a4      	lsls	r4, r4, #30
 800398c:	d517      	bpl.n	80039be <clip_line+0x166>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800398e:	9c01      	ldr	r4, [sp, #4]
 8003990:	f9b1 9000 	ldrsh.w	r9, [r1]
 8003994:	f9b0 a000 	ldrsh.w	sl, [r0]
 8003998:	f9b4 4000 	ldrsh.w	r4, [r4]
 800399c:	eba7 0b0a 	sub.w	fp, r7, sl
 80039a0:	eba4 0409 	sub.w	r4, r4, r9
 80039a4:	fb0b f404 	mul.w	r4, fp, r4
 80039a8:	f9b2 b000 	ldrsh.w	fp, [r2]
 80039ac:	ebab 0b0a 	sub.w	fp, fp, sl
 80039b0:	fb94 f4fb 	sdiv	r4, r4, fp
 80039b4:	444c      	add	r4, r9
 80039b6:	b224      	sxth	r4, r4
                x = window.x1;
 80039b8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80039bc:	e7a6      	b.n	800390c <clip_line+0xb4>
            }  else if (code3 & LEFT) {
 80039be:	f013 0401 	ands.w	r4, r3, #1
 80039c2:	d017      	beq.n	80039f4 <clip_line+0x19c>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80039c4:	9c01      	ldr	r4, [sp, #4]
 80039c6:	f9b1 9000 	ldrsh.w	r9, [r1]
 80039ca:	f9b0 a000 	ldrsh.w	sl, [r0]
 80039ce:	f9b4 4000 	ldrsh.w	r4, [r4]
 80039d2:	ebae 0b0a 	sub.w	fp, lr, sl
 80039d6:	eba4 0409 	sub.w	r4, r4, r9
 80039da:	fb0b f404 	mul.w	r4, fp, r4
 80039de:	f9b2 b000 	ldrsh.w	fp, [r2]
 80039e2:	ebab 0b0a 	sub.w	fp, fp, sl
 80039e6:	fb94 f4fb 	sdiv	r4, r4, fp
 80039ea:	444c      	add	r4, r9
 80039ec:	b224      	sxth	r4, r4
                x = window.x0;
 80039ee:	fa0f f98e 	sxth.w	r9, lr
 80039f2:	e78b      	b.n	800390c <clip_line+0xb4>
            int16_t x = 0;
 80039f4:	46a1      	mov	r9, r4
 80039f6:	e789      	b.n	800390c <clip_line+0xb4>
        code |= LEFT;
 80039f8:	2501      	movs	r5, #1
 80039fa:	e795      	b.n	8003928 <clip_line+0xd0>
    } else if (y0 > window.y1) {
 80039fc:	4564      	cmp	r4, ip
 80039fe:	f77f af5e 	ble.w	80038be <clip_line+0x66>
        code |= TOP;
 8003a02:	f045 0508 	orr.w	r5, r5, #8
 8003a06:	e75a      	b.n	80038be <clip_line+0x66>
                code0 = code(*x0, *y0, window);
            } else {
                *x1 = x;
                *y1 = y;
 8003a08:	9b01      	ldr	r3, [sp, #4]
                *x1 = x;
 8003a0a:	f8a2 9000 	strh.w	r9, [r2]
                *y1 = y;
 8003a0e:	801c      	strh	r4, [r3, #0]
    if (x0 < window.x0) {
 8003a10:	f9b2 6000 	ldrsh.w	r6, [r2]
 8003a14:	45b6      	cmp	lr, r6
 8003a16:	dc09      	bgt.n	8003a2c <clip_line+0x1d4>
    } else if (x0 > window.x1) {
 8003a18:	42be      	cmp	r6, r7
 8003a1a:	bfd4      	ite	le
 8003a1c:	2600      	movle	r6, #0
 8003a1e:	2601      	movgt	r6, #1
 8003a20:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 8003a22:	45a0      	cmp	r8, r4
 8003a24:	dd04      	ble.n	8003a30 <clip_line+0x1d8>
        code |= BOTTOM;
 8003a26:	f046 0604 	orr.w	r6, r6, #4
 8003a2a:	e748      	b.n	80038be <clip_line+0x66>
        code |= LEFT;
 8003a2c:	2601      	movs	r6, #1
 8003a2e:	e7f8      	b.n	8003a22 <clip_line+0x1ca>
    } else if (y0 > window.y1) {
 8003a30:	4564      	cmp	r4, ip
 8003a32:	f77f af44 	ble.w	80038be <clip_line+0x66>
        code |= TOP;
 8003a36:	f046 0608 	orr.w	r6, r6, #8
 8003a3a:	e740      	b.n	80038be <clip_line+0x66>
            accept = true;
 8003a3c:	2001      	movs	r0, #1
            }
        }
    }

    return accept;
 8003a3e:	b007      	add	sp, #28
 8003a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool accept = false;
 8003a44:	2000      	movs	r0, #0
 8003a46:	e7fa      	b.n	8003a3e <clip_line+0x1e6>

08003a48 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8003a48:	b470      	push	{r4, r5, r6}
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8003a4a:	4c09      	ldr	r4, [pc, #36]	@ (8003a70 <hagl_put_pixel+0x28>)
 8003a4c:	8826      	ldrh	r6, [r4, #0]
 8003a4e:	42b0      	cmp	r0, r6
 8003a50:	db0b      	blt.n	8003a6a <hagl_put_pixel+0x22>
 8003a52:	8866      	ldrh	r6, [r4, #2]
 8003a54:	42b1      	cmp	r1, r6
 8003a56:	db08      	blt.n	8003a6a <hagl_put_pixel+0x22>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8003a58:	88a6      	ldrh	r6, [r4, #4]
 8003a5a:	42b0      	cmp	r0, r6
 8003a5c:	dc05      	bgt.n	8003a6a <hagl_put_pixel+0x22>
 8003a5e:	88e4      	ldrh	r4, [r4, #6]
 8003a60:	42a1      	cmp	r1, r4
 8003a62:	dc02      	bgt.n	8003a6a <hagl_put_pixel+0x22>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
}
 8003a64:	bc70      	pop	{r4, r5, r6}
    hagl_hal_put_pixel(x0, y0, color);
 8003a66:	f7fc bf3d 	b.w	80008e4 <lcd_put_pixel>
}
 8003a6a:	bc70      	pop	{r4, r5, r6}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000000c 	.word	0x2000000c

08003a74 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8003a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	f8ad 200a 	strh.w	r2, [sp, #10]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8003a7e:	4a37      	ldr	r2, [pc, #220]	@ (8003b5c <hagl_draw_line+0xe8>)
{
 8003a80:	f8ad 000e 	strh.w	r0, [sp, #14]
 8003a84:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8003a88:	6810      	ldr	r0, [r2, #0]
 8003a8a:	6851      	ldr	r1, [r2, #4]
{
 8003a8c:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8003a90:	466b      	mov	r3, sp
{
 8003a92:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8003a96:	f10d 020a 	add.w	r2, sp, #10
 8003a9a:	c303      	stmia	r3!, {r0, r1}
 8003a9c:	a903      	add	r1, sp, #12
 8003a9e:	f10d 000e 	add.w	r0, sp, #14
 8003aa2:	f7ff fed9 	bl	8003858 <clip_line>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d055      	beq.n	8003b56 <hagl_draw_line+0xe2>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8003aaa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003aae:	f9bd 900a 	ldrsh.w	r9, [sp, #10]
    sx = x0 < x1 ? 1 : -1;
    dy = ABS(y1 - y0);
 8003ab2:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
    dx = ABS(x1 - x0);
 8003ab6:	eba9 0703 	sub.w	r7, r9, r3
 8003aba:	2f00      	cmp	r7, #0
 8003abc:	bfb8      	it	lt
 8003abe:	427f      	neglt	r7, r7
    sx = x0 < x1 ? 1 : -1;
 8003ac0:	4599      	cmp	r9, r3
 8003ac2:	bfd4      	ite	le
 8003ac4:	f04f 39ff 	movle.w	r9, #4294967295
 8003ac8:	f04f 0901 	movgt.w	r9, #1
    dy = ABS(y1 - y0);
 8003acc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003ad0:	eba6 0803 	sub.w	r8, r6, r3
 8003ad4:	f1b8 0f00 	cmp.w	r8, #0
 8003ad8:	bfb8      	it	lt
 8003ada:	f1c8 0800 	rsblt	r8, r8, #0
    dx = ABS(x1 - x0);
 8003ade:	b23d      	sxth	r5, r7
    dy = ABS(y1 - y0);
 8003ae0:	fa0f fb88 	sxth.w	fp, r8
    sy = y0 < y1 ? 1 : -1;
 8003ae4:	429e      	cmp	r6, r3
 8003ae6:	bfd4      	ite	le
 8003ae8:	f04f 36ff 	movle.w	r6, #4294967295
 8003aec:	2601      	movgt	r6, #1
    err = (dx > dy ? dx : -dy) / 2;
 8003aee:	455d      	cmp	r5, fp
 8003af0:	dd2b      	ble.n	8003b4a <hagl_draw_line+0xd6>
 8003af2:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 8003af6:	1064      	asrs	r4, r4, #1
            break;
        };

        e2 = err + err;

        if (e2 > -dx) {
 8003af8:	426d      	negs	r5, r5
        hagl_put_pixel(x0, y0, color);
 8003afa:	4652      	mov	r2, sl
 8003afc:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8003b00:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8003b04:	f7ff ffa0 	bl	8003a48 <hagl_put_pixel>
        if (x0 == x1 && y0 == y1) {
 8003b08:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8003b0c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d105      	bne.n	8003b20 <hagl_draw_line+0xac>
 8003b14:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8003b18:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d01a      	beq.n	8003b56 <hagl_draw_line+0xe2>
        e2 = err + err;
 8003b20:	b2a1      	uxth	r1, r4
 8003b22:	004b      	lsls	r3, r1, #1
 8003b24:	b21b      	sxth	r3, r3
        if (e2 > -dx) {
 8003b26:	42ab      	cmp	r3, r5
            err -= dy;
 8003b28:	bfc1      	itttt	gt
 8003b2a:	eba1 0108 	subgt.w	r1, r1, r8
            x0 += sx;
 8003b2e:	444a      	addgt	r2, r9
            err -= dy;
 8003b30:	b20c      	sxthgt	r4, r1
            x0 += sx;
 8003b32:	f8ad 200e 	strhgt.w	r2, [sp, #14]
        }

        if (e2 < dy) {
 8003b36:	459b      	cmp	fp, r3
 8003b38:	dddf      	ble.n	8003afa <hagl_draw_line+0x86>
            err += dx;
            y0 += sy;
 8003b3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            err += dx;
 8003b3e:	443c      	add	r4, r7
            y0 += sy;
 8003b40:	4433      	add	r3, r6
            err += dx;
 8003b42:	b224      	sxth	r4, r4
            y0 += sy;
 8003b44:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003b48:	e7d7      	b.n	8003afa <hagl_draw_line+0x86>
    err = (dx > dy ? dx : -dy) / 2;
 8003b4a:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8003b4e:	1064      	asrs	r4, r4, #1
 8003b50:	4264      	negs	r4, r4
 8003b52:	b224      	sxth	r4, r4
 8003b54:	e7d0      	b.n	8003af8 <hagl_draw_line+0x84>
        }
    }
}
 8003b56:	b005      	add	sp, #20
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5c:	2000000c 	.word	0x2000000c

08003b60 <hagl_draw_hline>:
void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8003b60:	b507      	push	{r0, r1, r2, lr}
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8003b62:	4402      	add	r2, r0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	b212      	sxth	r2, r2
 8003b68:	460b      	mov	r3, r1
 8003b6a:	f7ff ff83 	bl	8003a74 <hagl_draw_line>
}
 8003b6e:	b003      	add	sp, #12
 8003b70:	f85d fb04 	ldr.w	pc, [sp], #4

08003b74 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8003b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8003b78:	4290      	cmp	r0, r2
        y1 = y0 - y1;
        y0 = y0 - y1;
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8003b7a:	4e1f      	ldr	r6, [pc, #124]	@ (8003bf8 <hagl_fill_rectangle+0x84>)
{
 8003b7c:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8003b80:	8834      	ldrh	r4, [r6, #0]
{
 8003b82:	460d      	mov	r5, r1
    if (x0 > x1) {
 8003b84:	bfc2      	ittt	gt
 8003b86:	4601      	movgt	r1, r0
 8003b88:	4610      	movgt	r0, r2
 8003b8a:	460a      	movgt	r2, r1
    if (y0 > y1) {
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	bfc2      	ittt	gt
 8003b90:	4629      	movgt	r1, r5
 8003b92:	461d      	movgt	r5, r3
 8003b94:	460b      	movgt	r3, r1
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8003b96:	42a2      	cmp	r2, r4
 8003b98:	db22      	blt.n	8003be0 <hagl_fill_rectangle+0x6c>
 8003b9a:	8871      	ldrh	r1, [r6, #2]
 8003b9c:	428b      	cmp	r3, r1
 8003b9e:	db1f      	blt.n	8003be0 <hagl_fill_rectangle+0x6c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8003ba0:	f8b6 e004 	ldrh.w	lr, [r6, #4]
 8003ba4:	4570      	cmp	r0, lr
 8003ba6:	dc1b      	bgt.n	8003be0 <hagl_fill_rectangle+0x6c>
 8003ba8:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 8003bac:	4565      	cmp	r5, ip
 8003bae:	dc17      	bgt.n	8003be0 <hagl_fill_rectangle+0x6c>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8003bb0:	42a0      	cmp	r0, r4
 8003bb2:	bfb8      	it	lt
 8003bb4:	4620      	movlt	r0, r4
    y0 = max(y0, clip_window.y0);
    x1 = min(x1, clip_window.x1);
    y1 = min(y1, clip_window.y1);

    uint16_t width = x1 - x0 + 1;
 8003bb6:	4572      	cmp	r2, lr
 8003bb8:	bfa8      	it	ge
 8003bba:	4672      	movge	r2, lr
    uint16_t height = y1 - y0 + 1;
 8003bbc:	42a9      	cmp	r1, r5
 8003bbe:	bfb8      	it	lt
 8003bc0:	4629      	movlt	r1, r5
 8003bc2:	4563      	cmp	r3, ip
 8003bc4:	bfa8      	it	ge
 8003bc6:	4663      	movge	r3, ip
 8003bc8:	fa13 f581 	uxtah	r5, r3, r1
    uint16_t width = x1 - x0 + 1;
 8003bcc:	1c54      	adds	r4, r2, #1
    uint16_t height = y1 - y0 + 1;
 8003bce:	b28e      	uxth	r6, r1
 8003bd0:	3501      	adds	r5, #1
    uint16_t width = x1 - x0 + 1;
 8003bd2:	1a24      	subs	r4, r4, r0
 8003bd4:	1bad      	subs	r5, r5, r6
    x0 = max(x0, clip_window.x0);
 8003bd6:	b207      	sxth	r7, r0
    uint16_t width = x1 - x0 + 1;
 8003bd8:	b2a4      	uxth	r4, r4

    for (uint16_t i = 0; i < height; i++) {
 8003bda:	b2ad      	uxth	r5, r5
 8003bdc:	42ae      	cmp	r6, r5
 8003bde:	d101      	bne.n	8003be4 <hagl_fill_rectangle+0x70>
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
#endif
    }
}
 8003be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hagl_draw_hline(x0, y0 + i, width, color);
 8003be4:	b231      	sxth	r1, r6
 8003be6:	4643      	mov	r3, r8
 8003be8:	4622      	mov	r2, r4
 8003bea:	4638      	mov	r0, r7
 8003bec:	3601      	adds	r6, #1
 8003bee:	f7ff ffb7 	bl	8003b60 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8003bf2:	b2b6      	uxth	r6, r6
 8003bf4:	e7f2      	b.n	8003bdc <hagl_fill_rectangle+0x68>
 8003bf6:	bf00      	nop
 8003bf8:	2000000c 	.word	0x2000000c

08003bfc <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8003bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8003c00:	4c0c      	ldr	r4, [pc, #48]	@ (8003c34 <hagl_clear_screen+0x38>)
    clip_window.x0 = x0;
 8003c02:	2100      	movs	r1, #0
    clip_window.x1 = x1;
 8003c04:	229f      	movs	r2, #159	@ 0x9f
    clip_window.y1 = y1;
 8003c06:	237f      	movs	r3, #127	@ 0x7f
    uint16_t x0 = clip_window.x0;
 8003c08:	f8b4 8000 	ldrh.w	r8, [r4]
    uint16_t y0 = clip_window.y0;
 8003c0c:	8867      	ldrh	r7, [r4, #2]
    uint16_t x1 = clip_window.x1;
 8003c0e:	88a6      	ldrh	r6, [r4, #4]
    uint16_t y1 = clip_window.y1;
 8003c10:	88e5      	ldrh	r5, [r4, #6]
    clip_window.x0 = x0;
 8003c12:	8021      	strh	r1, [r4, #0]
    clip_window.y0 = y0;
 8003c14:	8061      	strh	r1, [r4, #2]
    clip_window.x1 = x1;
 8003c16:	80a2      	strh	r2, [r4, #4]
    clip_window.y1 = y1;
 8003c18:	80e3      	strh	r3, [r4, #6]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	9100      	str	r1, [sp, #0]
 8003c1e:	f7ff ffa9 	bl	8003b74 <hagl_fill_rectangle>
    clip_window.x0 = x0;
 8003c22:	f8a4 8000 	strh.w	r8, [r4]
    clip_window.y0 = y0;
 8003c26:	8067      	strh	r7, [r4, #2]
    clip_window.x1 = x1;
 8003c28:	80a6      	strh	r6, [r4, #4]
    clip_window.y1 = y1;
 8003c2a:	80e5      	strh	r5, [r4, #6]
    hagl_set_clip_window(x0, y0, x1, y1);
#endif
}
 8003c2c:	b002      	add	sp, #8
 8003c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c32:	bf00      	nop
 8003c34:	2000000c 	.word	0x2000000c

08003c38 <hagl_fill_circle>:
        hagl_put_pixel(xc + y, yc - x, color);
        hagl_put_pixel(xc - y, yc - x, color);
    }
}

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8003c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t x = 0;
    int16_t y = r;
    int16_t d = 3 - 2 * r;
 8003c3c:	0056      	lsls	r6, r2, #1
 8003c3e:	f1c6 0603 	rsb	r6, r6, #3
void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8003c42:	4615      	mov	r5, r2
 8003c44:	461f      	mov	r7, r3
    int16_t d = 3 - 2 * r;
 8003c46:	b236      	sxth	r6, r6
    int16_t x = 0;
 8003c48:	2400      	movs	r4, #0

    while (y >= x) {
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8003c4a:	fa1f fa80 	uxth.w	sl, r0
 8003c4e:	fa1f f881 	uxth.w	r8, r1
    while (y >= x) {
 8003c52:	42ac      	cmp	r4, r5
 8003c54:	dd02      	ble.n	8003c5c <hagl_fill_circle+0x24>
            d = d + 4 * (x - y) + 10;
        } else {
            d = d + 4 * x + 6;
        }
    }
}
 8003c56:	b003      	add	sp, #12
 8003c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8003c5c:	b2a4      	uxth	r4, r4
 8003c5e:	ebaa 0b04 	sub.w	fp, sl, r4
 8003c62:	fa0f fb8b 	sxth.w	fp, fp
 8003c66:	0062      	lsls	r2, r4, #1
 8003c68:	fa18 f185 	uxtah	r1, r8, r5
 8003c6c:	fa1f f985 	uxth.w	r9, r5
 8003c70:	b292      	uxth	r2, r2
 8003c72:	4658      	mov	r0, fp
 8003c74:	463b      	mov	r3, r7
 8003c76:	b209      	sxth	r1, r1
 8003c78:	9201      	str	r2, [sp, #4]
 8003c7a:	f7ff ff71 	bl	8003b60 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8003c7e:	eba8 0109 	sub.w	r1, r8, r9
 8003c82:	4658      	mov	r0, fp
 8003c84:	9a01      	ldr	r2, [sp, #4]
 8003c86:	463b      	mov	r3, r7
 8003c88:	b209      	sxth	r1, r1
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8003c8a:	ebaa 0b09 	sub.w	fp, sl, r9
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8003c8e:	f7ff ff67 	bl	8003b60 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8003c92:	fa0f fb8b 	sxth.w	fp, fp
 8003c96:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8003c9a:	eb08 0104 	add.w	r1, r8, r4
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	b209      	sxth	r1, r1
 8003ca4:	4658      	mov	r0, fp
 8003ca6:	9201      	str	r2, [sp, #4]
 8003ca8:	f7ff ff5a 	bl	8003b60 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8003cac:	eba8 0104 	sub.w	r1, r8, r4
 8003cb0:	9a01      	ldr	r2, [sp, #4]
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	b209      	sxth	r1, r1
 8003cb6:	4658      	mov	r0, fp
 8003cb8:	f7ff ff52 	bl	8003b60 <hagl_draw_hline>
        if (d > 0) {
 8003cbc:	2e00      	cmp	r6, #0
 8003cbe:	f104 0401 	add.w	r4, r4, #1
            y--;
 8003cc2:	bfc8      	it	gt
 8003cc4:	f109 39ff 	addgt.w	r9, r9, #4294967295
            d = d + 4 * (x - y) + 10;
 8003cc8:	b2b3      	uxth	r3, r6
 8003cca:	b2a2      	uxth	r2, r4
            y--;
 8003ccc:	bfc8      	it	gt
 8003cce:	fa0f f589 	sxthgt.w	r5, r9
        x++;
 8003cd2:	b224      	sxth	r4, r4
            d = d + 4 * (x - y) + 10;
 8003cd4:	bfc6      	itte	gt
 8003cd6:	1b62      	subgt	r2, r4, r5
 8003cd8:	330a      	addgt	r3, #10
            d = d + 4 * x + 6;
 8003cda:	3306      	addle	r3, #6
 8003cdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003ce0:	b21e      	sxth	r6, r3
 8003ce2:	e7b6      	b.n	8003c52 <hagl_fill_circle+0x1a>

08003ce4 <sbrk_aligned>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8003d24 <sbrk_aligned+0x40>)
 8003ce8:	460c      	mov	r4, r1
 8003cea:	6831      	ldr	r1, [r6, #0]
 8003cec:	4605      	mov	r5, r0
 8003cee:	b911      	cbnz	r1, 8003cf6 <sbrk_aligned+0x12>
 8003cf0:	f000 faa6 	bl	8004240 <_sbrk_r>
 8003cf4:	6030      	str	r0, [r6, #0]
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 faa1 	bl	8004240 <_sbrk_r>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d103      	bne.n	8003d0a <sbrk_aligned+0x26>
 8003d02:	f04f 34ff 	mov.w	r4, #4294967295
 8003d06:	4620      	mov	r0, r4
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d0f8      	beq.n	8003d06 <sbrk_aligned+0x22>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 fa92 	bl	8004240 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d1f2      	bne.n	8003d06 <sbrk_aligned+0x22>
 8003d20:	e7ef      	b.n	8003d02 <sbrk_aligned+0x1e>
 8003d22:	bf00      	nop
 8003d24:	2000a27c 	.word	0x2000a27c

08003d28 <_malloc_r>:
 8003d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d2c:	1ccd      	adds	r5, r1, #3
 8003d2e:	f025 0503 	bic.w	r5, r5, #3
 8003d32:	3508      	adds	r5, #8
 8003d34:	2d0c      	cmp	r5, #12
 8003d36:	bf38      	it	cc
 8003d38:	250c      	movcc	r5, #12
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	db01      	blt.n	8003d44 <_malloc_r+0x1c>
 8003d40:	42a9      	cmp	r1, r5
 8003d42:	d904      	bls.n	8003d4e <_malloc_r+0x26>
 8003d44:	230c      	movs	r3, #12
 8003d46:	6033      	str	r3, [r6, #0]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e24 <_malloc_r+0xfc>
 8003d52:	f000 f869 	bl	8003e28 <__malloc_lock>
 8003d56:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	bb44      	cbnz	r4, 8003db0 <_malloc_r+0x88>
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7ff ffbf 	bl	8003ce4 <sbrk_aligned>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	4604      	mov	r4, r0
 8003d6a:	d158      	bne.n	8003e1e <_malloc_r+0xf6>
 8003d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d70:	4627      	mov	r7, r4
 8003d72:	2f00      	cmp	r7, #0
 8003d74:	d143      	bne.n	8003dfe <_malloc_r+0xd6>
 8003d76:	2c00      	cmp	r4, #0
 8003d78:	d04b      	beq.n	8003e12 <_malloc_r+0xea>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	4630      	mov	r0, r6
 8003d80:	eb04 0903 	add.w	r9, r4, r3
 8003d84:	f000 fa5c 	bl	8004240 <_sbrk_r>
 8003d88:	4581      	cmp	r9, r0
 8003d8a:	d142      	bne.n	8003e12 <_malloc_r+0xea>
 8003d8c:	6821      	ldr	r1, [r4, #0]
 8003d8e:	1a6d      	subs	r5, r5, r1
 8003d90:	4629      	mov	r1, r5
 8003d92:	4630      	mov	r0, r6
 8003d94:	f7ff ffa6 	bl	8003ce4 <sbrk_aligned>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d03a      	beq.n	8003e12 <_malloc_r+0xea>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	442b      	add	r3, r5
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	f8d8 3000 	ldr.w	r3, [r8]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	bb62      	cbnz	r2, 8003e04 <_malloc_r+0xdc>
 8003daa:	f8c8 7000 	str.w	r7, [r8]
 8003dae:	e00f      	b.n	8003dd0 <_malloc_r+0xa8>
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	1b52      	subs	r2, r2, r5
 8003db4:	d420      	bmi.n	8003df8 <_malloc_r+0xd0>
 8003db6:	2a0b      	cmp	r2, #11
 8003db8:	d917      	bls.n	8003dea <_malloc_r+0xc2>
 8003dba:	1961      	adds	r1, r4, r5
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	bf18      	it	ne
 8003dc2:	6059      	strne	r1, [r3, #4]
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	bf08      	it	eq
 8003dc8:	f8c8 1000 	streq.w	r1, [r8]
 8003dcc:	5162      	str	r2, [r4, r5]
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 f82f 	bl	8003e34 <__malloc_unlock>
 8003dd6:	f104 000b 	add.w	r0, r4, #11
 8003dda:	1d23      	adds	r3, r4, #4
 8003ddc:	f020 0007 	bic.w	r0, r0, #7
 8003de0:	1ac2      	subs	r2, r0, r3
 8003de2:	bf1c      	itt	ne
 8003de4:	1a1b      	subne	r3, r3, r0
 8003de6:	50a3      	strne	r3, [r4, r2]
 8003de8:	e7af      	b.n	8003d4a <_malloc_r+0x22>
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	bf0c      	ite	eq
 8003df0:	f8c8 2000 	streq.w	r2, [r8]
 8003df4:	605a      	strne	r2, [r3, #4]
 8003df6:	e7eb      	b.n	8003dd0 <_malloc_r+0xa8>
 8003df8:	4623      	mov	r3, r4
 8003dfa:	6864      	ldr	r4, [r4, #4]
 8003dfc:	e7ae      	b.n	8003d5c <_malloc_r+0x34>
 8003dfe:	463c      	mov	r4, r7
 8003e00:	687f      	ldr	r7, [r7, #4]
 8003e02:	e7b6      	b.n	8003d72 <_malloc_r+0x4a>
 8003e04:	461a      	mov	r2, r3
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d1fb      	bne.n	8003e04 <_malloc_r+0xdc>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6053      	str	r3, [r2, #4]
 8003e10:	e7de      	b.n	8003dd0 <_malloc_r+0xa8>
 8003e12:	230c      	movs	r3, #12
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 f80c 	bl	8003e34 <__malloc_unlock>
 8003e1c:	e794      	b.n	8003d48 <_malloc_r+0x20>
 8003e1e:	6005      	str	r5, [r0, #0]
 8003e20:	e7d6      	b.n	8003dd0 <_malloc_r+0xa8>
 8003e22:	bf00      	nop
 8003e24:	2000a280 	.word	0x2000a280

08003e28 <__malloc_lock>:
 8003e28:	4801      	ldr	r0, [pc, #4]	@ (8003e30 <__malloc_lock+0x8>)
 8003e2a:	f000 ba56 	b.w	80042da <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	2000a3c4 	.word	0x2000a3c4

08003e34 <__malloc_unlock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	@ (8003e3c <__malloc_unlock+0x8>)
 8003e36:	f000 ba51 	b.w	80042dc <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	2000a3c4 	.word	0x2000a3c4

08003e40 <__sflush_r>:
 8003e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	0716      	lsls	r6, r2, #28
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	d454      	bmi.n	8003efa <__sflush_r+0xba>
 8003e50:	684b      	ldr	r3, [r1, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	dc02      	bgt.n	8003e5c <__sflush_r+0x1c>
 8003e56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	dd48      	ble.n	8003eee <__sflush_r+0xae>
 8003e5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e5e:	2e00      	cmp	r6, #0
 8003e60:	d045      	beq.n	8003eee <__sflush_r+0xae>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e68:	682f      	ldr	r7, [r5, #0]
 8003e6a:	6a21      	ldr	r1, [r4, #32]
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	d030      	beq.n	8003ed2 <__sflush_r+0x92>
 8003e70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	0759      	lsls	r1, r3, #29
 8003e76:	d505      	bpl.n	8003e84 <__sflush_r+0x44>
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e7e:	b10b      	cbz	r3, 8003e84 <__sflush_r+0x44>
 8003e80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e82:	1ad2      	subs	r2, r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e88:	6a21      	ldr	r1, [r4, #32]
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	47b0      	blx	r6
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	d106      	bne.n	8003ea2 <__sflush_r+0x62>
 8003e94:	6829      	ldr	r1, [r5, #0]
 8003e96:	291d      	cmp	r1, #29
 8003e98:	d82b      	bhi.n	8003ef2 <__sflush_r+0xb2>
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f44 <__sflush_r+0x104>)
 8003e9c:	410a      	asrs	r2, r1
 8003e9e:	07d6      	lsls	r6, r2, #31
 8003ea0:	d427      	bmi.n	8003ef2 <__sflush_r+0xb2>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	6062      	str	r2, [r4, #4]
 8003ea6:	04d9      	lsls	r1, r3, #19
 8003ea8:	6922      	ldr	r2, [r4, #16]
 8003eaa:	6022      	str	r2, [r4, #0]
 8003eac:	d504      	bpl.n	8003eb8 <__sflush_r+0x78>
 8003eae:	1c42      	adds	r2, r0, #1
 8003eb0:	d101      	bne.n	8003eb6 <__sflush_r+0x76>
 8003eb2:	682b      	ldr	r3, [r5, #0]
 8003eb4:	b903      	cbnz	r3, 8003eb8 <__sflush_r+0x78>
 8003eb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eba:	602f      	str	r7, [r5, #0]
 8003ebc:	b1b9      	cbz	r1, 8003eee <__sflush_r+0xae>
 8003ebe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ec2:	4299      	cmp	r1, r3
 8003ec4:	d002      	beq.n	8003ecc <__sflush_r+0x8c>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fa0a 	bl	80042e0 <_free_r>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ed0:	e00d      	b.n	8003eee <__sflush_r+0xae>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	47b0      	blx	r6
 8003ed8:	4602      	mov	r2, r0
 8003eda:	1c50      	adds	r0, r2, #1
 8003edc:	d1c9      	bne.n	8003e72 <__sflush_r+0x32>
 8003ede:	682b      	ldr	r3, [r5, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0c6      	beq.n	8003e72 <__sflush_r+0x32>
 8003ee4:	2b1d      	cmp	r3, #29
 8003ee6:	d001      	beq.n	8003eec <__sflush_r+0xac>
 8003ee8:	2b16      	cmp	r3, #22
 8003eea:	d11e      	bne.n	8003f2a <__sflush_r+0xea>
 8003eec:	602f      	str	r7, [r5, #0]
 8003eee:	2000      	movs	r0, #0
 8003ef0:	e022      	b.n	8003f38 <__sflush_r+0xf8>
 8003ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	e01b      	b.n	8003f32 <__sflush_r+0xf2>
 8003efa:	690f      	ldr	r7, [r1, #16]
 8003efc:	2f00      	cmp	r7, #0
 8003efe:	d0f6      	beq.n	8003eee <__sflush_r+0xae>
 8003f00:	0793      	lsls	r3, r2, #30
 8003f02:	680e      	ldr	r6, [r1, #0]
 8003f04:	bf08      	it	eq
 8003f06:	694b      	ldreq	r3, [r1, #20]
 8003f08:	600f      	str	r7, [r1, #0]
 8003f0a:	bf18      	it	ne
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	eba6 0807 	sub.w	r8, r6, r7
 8003f12:	608b      	str	r3, [r1, #8]
 8003f14:	f1b8 0f00 	cmp.w	r8, #0
 8003f18:	dde9      	ble.n	8003eee <__sflush_r+0xae>
 8003f1a:	6a21      	ldr	r1, [r4, #32]
 8003f1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f1e:	4643      	mov	r3, r8
 8003f20:	463a      	mov	r2, r7
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b0      	blx	r6
 8003f26:	2800      	cmp	r0, #0
 8003f28:	dc08      	bgt.n	8003f3c <__sflush_r+0xfc>
 8003f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	4407      	add	r7, r0
 8003f3e:	eba8 0800 	sub.w	r8, r8, r0
 8003f42:	e7e7      	b.n	8003f14 <__sflush_r+0xd4>
 8003f44:	dfbffffe 	.word	0xdfbffffe

08003f48 <_fflush_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	b913      	cbnz	r3, 8003f58 <_fflush_r+0x10>
 8003f52:	2500      	movs	r5, #0
 8003f54:	4628      	mov	r0, r5
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	b118      	cbz	r0, 8003f62 <_fflush_r+0x1a>
 8003f5a:	6a03      	ldr	r3, [r0, #32]
 8003f5c:	b90b      	cbnz	r3, 8003f62 <_fflush_r+0x1a>
 8003f5e:	f000 f8a7 	bl	80040b0 <__sinit>
 8003f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f3      	beq.n	8003f52 <_fflush_r+0xa>
 8003f6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f6c:	07d0      	lsls	r0, r2, #31
 8003f6e:	d404      	bmi.n	8003f7a <_fflush_r+0x32>
 8003f70:	0599      	lsls	r1, r3, #22
 8003f72:	d402      	bmi.n	8003f7a <_fflush_r+0x32>
 8003f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f76:	f000 f9b0 	bl	80042da <__retarget_lock_acquire_recursive>
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	f7ff ff5f 	bl	8003e40 <__sflush_r>
 8003f82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f84:	07da      	lsls	r2, r3, #31
 8003f86:	4605      	mov	r5, r0
 8003f88:	d4e4      	bmi.n	8003f54 <_fflush_r+0xc>
 8003f8a:	89a3      	ldrh	r3, [r4, #12]
 8003f8c:	059b      	lsls	r3, r3, #22
 8003f8e:	d4e1      	bmi.n	8003f54 <_fflush_r+0xc>
 8003f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f92:	f000 f9a3 	bl	80042dc <__retarget_lock_release_recursive>
 8003f96:	e7dd      	b.n	8003f54 <_fflush_r+0xc>

08003f98 <std>:
 8003f98:	2300      	movs	r3, #0
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fa6:	6083      	str	r3, [r0, #8]
 8003fa8:	8181      	strh	r1, [r0, #12]
 8003faa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fac:	81c2      	strh	r2, [r0, #14]
 8003fae:	6183      	str	r3, [r0, #24]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	305c      	adds	r0, #92	@ 0x5c
 8003fb6:	f000 f906 	bl	80041c6 <memset>
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <std+0x58>)
 8003fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <std+0x5c>)
 8003fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <std+0x60>)
 8003fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <std+0x64>)
 8003fc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <std+0x68>)
 8003fcc:	6224      	str	r4, [r4, #32]
 8003fce:	429c      	cmp	r4, r3
 8003fd0:	d006      	beq.n	8003fe0 <std+0x48>
 8003fd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fd6:	4294      	cmp	r4, r2
 8003fd8:	d002      	beq.n	8003fe0 <std+0x48>
 8003fda:	33d0      	adds	r3, #208	@ 0xd0
 8003fdc:	429c      	cmp	r4, r3
 8003fde:	d105      	bne.n	8003fec <std+0x54>
 8003fe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe8:	f000 b976 	b.w	80042d8 <__retarget_lock_init_recursive>
 8003fec:	bd10      	pop	{r4, pc}
 8003fee:	bf00      	nop
 8003ff0:	08004141 	.word	0x08004141
 8003ff4:	08004163 	.word	0x08004163
 8003ff8:	0800419b 	.word	0x0800419b
 8003ffc:	080041bf 	.word	0x080041bf
 8004000:	2000a284 	.word	0x2000a284

08004004 <stdio_exit_handler>:
 8004004:	4a02      	ldr	r2, [pc, #8]	@ (8004010 <stdio_exit_handler+0xc>)
 8004006:	4903      	ldr	r1, [pc, #12]	@ (8004014 <stdio_exit_handler+0x10>)
 8004008:	4803      	ldr	r0, [pc, #12]	@ (8004018 <stdio_exit_handler+0x14>)
 800400a:	f000 b869 	b.w	80040e0 <_fwalk_sglue>
 800400e:	bf00      	nop
 8004010:	20000014 	.word	0x20000014
 8004014:	08003f49 	.word	0x08003f49
 8004018:	20000024 	.word	0x20000024

0800401c <cleanup_stdio>:
 800401c:	6841      	ldr	r1, [r0, #4]
 800401e:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <cleanup_stdio+0x34>)
 8004020:	4299      	cmp	r1, r3
 8004022:	b510      	push	{r4, lr}
 8004024:	4604      	mov	r4, r0
 8004026:	d001      	beq.n	800402c <cleanup_stdio+0x10>
 8004028:	f7ff ff8e 	bl	8003f48 <_fflush_r>
 800402c:	68a1      	ldr	r1, [r4, #8]
 800402e:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <cleanup_stdio+0x38>)
 8004030:	4299      	cmp	r1, r3
 8004032:	d002      	beq.n	800403a <cleanup_stdio+0x1e>
 8004034:	4620      	mov	r0, r4
 8004036:	f7ff ff87 	bl	8003f48 <_fflush_r>
 800403a:	68e1      	ldr	r1, [r4, #12]
 800403c:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <cleanup_stdio+0x3c>)
 800403e:	4299      	cmp	r1, r3
 8004040:	d004      	beq.n	800404c <cleanup_stdio+0x30>
 8004042:	4620      	mov	r0, r4
 8004044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004048:	f7ff bf7e 	b.w	8003f48 <_fflush_r>
 800404c:	bd10      	pop	{r4, pc}
 800404e:	bf00      	nop
 8004050:	2000a284 	.word	0x2000a284
 8004054:	2000a2ec 	.word	0x2000a2ec
 8004058:	2000a354 	.word	0x2000a354

0800405c <global_stdio_init.part.0>:
 800405c:	b510      	push	{r4, lr}
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <global_stdio_init.part.0+0x30>)
 8004060:	4c0b      	ldr	r4, [pc, #44]	@ (8004090 <global_stdio_init.part.0+0x34>)
 8004062:	4a0c      	ldr	r2, [pc, #48]	@ (8004094 <global_stdio_init.part.0+0x38>)
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4620      	mov	r0, r4
 8004068:	2200      	movs	r2, #0
 800406a:	2104      	movs	r1, #4
 800406c:	f7ff ff94 	bl	8003f98 <std>
 8004070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004074:	2201      	movs	r2, #1
 8004076:	2109      	movs	r1, #9
 8004078:	f7ff ff8e 	bl	8003f98 <std>
 800407c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004080:	2202      	movs	r2, #2
 8004082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004086:	2112      	movs	r1, #18
 8004088:	f7ff bf86 	b.w	8003f98 <std>
 800408c:	2000a3bc 	.word	0x2000a3bc
 8004090:	2000a284 	.word	0x2000a284
 8004094:	08004005 	.word	0x08004005

08004098 <__sfp_lock_acquire>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__sfp_lock_acquire+0x8>)
 800409a:	f000 b91e 	b.w	80042da <__retarget_lock_acquire_recursive>
 800409e:	bf00      	nop
 80040a0:	2000a3c5 	.word	0x2000a3c5

080040a4 <__sfp_lock_release>:
 80040a4:	4801      	ldr	r0, [pc, #4]	@ (80040ac <__sfp_lock_release+0x8>)
 80040a6:	f000 b919 	b.w	80042dc <__retarget_lock_release_recursive>
 80040aa:	bf00      	nop
 80040ac:	2000a3c5 	.word	0x2000a3c5

080040b0 <__sinit>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	f7ff fff0 	bl	8004098 <__sfp_lock_acquire>
 80040b8:	6a23      	ldr	r3, [r4, #32]
 80040ba:	b11b      	cbz	r3, 80040c4 <__sinit+0x14>
 80040bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c0:	f7ff bff0 	b.w	80040a4 <__sfp_lock_release>
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <__sinit+0x28>)
 80040c6:	6223      	str	r3, [r4, #32]
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <__sinit+0x2c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f5      	bne.n	80040bc <__sinit+0xc>
 80040d0:	f7ff ffc4 	bl	800405c <global_stdio_init.part.0>
 80040d4:	e7f2      	b.n	80040bc <__sinit+0xc>
 80040d6:	bf00      	nop
 80040d8:	0800401d 	.word	0x0800401d
 80040dc:	2000a3bc 	.word	0x2000a3bc

080040e0 <_fwalk_sglue>:
 80040e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e4:	4607      	mov	r7, r0
 80040e6:	4688      	mov	r8, r1
 80040e8:	4614      	mov	r4, r2
 80040ea:	2600      	movs	r6, #0
 80040ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040f0:	f1b9 0901 	subs.w	r9, r9, #1
 80040f4:	d505      	bpl.n	8004102 <_fwalk_sglue+0x22>
 80040f6:	6824      	ldr	r4, [r4, #0]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d1f7      	bne.n	80040ec <_fwalk_sglue+0xc>
 80040fc:	4630      	mov	r0, r6
 80040fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d907      	bls.n	8004118 <_fwalk_sglue+0x38>
 8004108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800410c:	3301      	adds	r3, #1
 800410e:	d003      	beq.n	8004118 <_fwalk_sglue+0x38>
 8004110:	4629      	mov	r1, r5
 8004112:	4638      	mov	r0, r7
 8004114:	47c0      	blx	r8
 8004116:	4306      	orrs	r6, r0
 8004118:	3568      	adds	r5, #104	@ 0x68
 800411a:	e7e9      	b.n	80040f0 <_fwalk_sglue+0x10>

0800411c <iprintf>:
 800411c:	b40f      	push	{r0, r1, r2, r3}
 800411e:	b507      	push	{r0, r1, r2, lr}
 8004120:	4906      	ldr	r1, [pc, #24]	@ (800413c <iprintf+0x20>)
 8004122:	ab04      	add	r3, sp, #16
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	f853 2b04 	ldr.w	r2, [r3], #4
 800412a:	6881      	ldr	r1, [r0, #8]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	f000 f94b 	bl	80043c8 <_vfiprintf_r>
 8004132:	b003      	add	sp, #12
 8004134:	f85d eb04 	ldr.w	lr, [sp], #4
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr
 800413c:	20000020 	.word	0x20000020

08004140 <__sread>:
 8004140:	b510      	push	{r4, lr}
 8004142:	460c      	mov	r4, r1
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	f000 f868 	bl	800421c <_read_r>
 800414c:	2800      	cmp	r0, #0
 800414e:	bfab      	itete	ge
 8004150:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004152:	89a3      	ldrhlt	r3, [r4, #12]
 8004154:	181b      	addge	r3, r3, r0
 8004156:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800415a:	bfac      	ite	ge
 800415c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800415e:	81a3      	strhlt	r3, [r4, #12]
 8004160:	bd10      	pop	{r4, pc}

08004162 <__swrite>:
 8004162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	461f      	mov	r7, r3
 8004168:	898b      	ldrh	r3, [r1, #12]
 800416a:	05db      	lsls	r3, r3, #23
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4616      	mov	r6, r2
 8004172:	d505      	bpl.n	8004180 <__swrite+0x1e>
 8004174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004178:	2302      	movs	r3, #2
 800417a:	2200      	movs	r2, #0
 800417c:	f000 f83c 	bl	80041f8 <_lseek_r>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004186:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	4632      	mov	r2, r6
 800418e:	463b      	mov	r3, r7
 8004190:	4628      	mov	r0, r5
 8004192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004196:	f000 b863 	b.w	8004260 <_write_r>

0800419a <__sseek>:
 800419a:	b510      	push	{r4, lr}
 800419c:	460c      	mov	r4, r1
 800419e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a2:	f000 f829 	bl	80041f8 <_lseek_r>
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	bf15      	itete	ne
 80041ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041b6:	81a3      	strheq	r3, [r4, #12]
 80041b8:	bf18      	it	ne
 80041ba:	81a3      	strhne	r3, [r4, #12]
 80041bc:	bd10      	pop	{r4, pc}

080041be <__sclose>:
 80041be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c2:	f000 b809 	b.w	80041d8 <_close_r>

080041c6 <memset>:
 80041c6:	4402      	add	r2, r0
 80041c8:	4603      	mov	r3, r0
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d100      	bne.n	80041d0 <memset+0xa>
 80041ce:	4770      	bx	lr
 80041d0:	f803 1b01 	strb.w	r1, [r3], #1
 80041d4:	e7f9      	b.n	80041ca <memset+0x4>
	...

080041d8 <_close_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d06      	ldr	r5, [pc, #24]	@ (80041f4 <_close_r+0x1c>)
 80041dc:	2300      	movs	r3, #0
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f7fc fd58 	bl	8000c98 <_close>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_close_r+0x1a>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_close_r+0x1a>
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	2000a3c0 	.word	0x2000a3c0

080041f8 <_lseek_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d07      	ldr	r5, [pc, #28]	@ (8004218 <_lseek_r+0x20>)
 80041fc:	4604      	mov	r4, r0
 80041fe:	4608      	mov	r0, r1
 8004200:	4611      	mov	r1, r2
 8004202:	2200      	movs	r2, #0
 8004204:	602a      	str	r2, [r5, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	f7fc fd50 	bl	8000cac <_lseek>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_lseek_r+0x1e>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_lseek_r+0x1e>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	2000a3c0 	.word	0x2000a3c0

0800421c <_read_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4d07      	ldr	r5, [pc, #28]	@ (800423c <_read_r+0x20>)
 8004220:	4604      	mov	r4, r0
 8004222:	4608      	mov	r0, r1
 8004224:	4611      	mov	r1, r2
 8004226:	2200      	movs	r2, #0
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f7fc fd18 	bl	8000c60 <_read>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_read_r+0x1e>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_read_r+0x1e>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	2000a3c0 	.word	0x2000a3c0

08004240 <_sbrk_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4d06      	ldr	r5, [pc, #24]	@ (800425c <_sbrk_r+0x1c>)
 8004244:	2300      	movs	r3, #0
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f7fc fd30 	bl	8000cb0 <_sbrk>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_sbrk_r+0x1a>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	b103      	cbz	r3, 800425a <_sbrk_r+0x1a>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	2000a3c0 	.word	0x2000a3c0

08004260 <_write_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4d07      	ldr	r5, [pc, #28]	@ (8004280 <_write_r+0x20>)
 8004264:	4604      	mov	r4, r0
 8004266:	4608      	mov	r0, r1
 8004268:	4611      	mov	r1, r2
 800426a:	2200      	movs	r2, #0
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f7fc fd04 	bl	8000c7c <_write>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_write_r+0x1e>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_write_r+0x1e>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	2000a3c0 	.word	0x2000a3c0

08004284 <__errno>:
 8004284:	4b01      	ldr	r3, [pc, #4]	@ (800428c <__errno+0x8>)
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000020 	.word	0x20000020

08004290 <__libc_init_array>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	4d0d      	ldr	r5, [pc, #52]	@ (80042c8 <__libc_init_array+0x38>)
 8004294:	4c0d      	ldr	r4, [pc, #52]	@ (80042cc <__libc_init_array+0x3c>)
 8004296:	1b64      	subs	r4, r4, r5
 8004298:	10a4      	asrs	r4, r4, #2
 800429a:	2600      	movs	r6, #0
 800429c:	42a6      	cmp	r6, r4
 800429e:	d109      	bne.n	80042b4 <__libc_init_array+0x24>
 80042a0:	4d0b      	ldr	r5, [pc, #44]	@ (80042d0 <__libc_init_array+0x40>)
 80042a2:	4c0c      	ldr	r4, [pc, #48]	@ (80042d4 <__libc_init_array+0x44>)
 80042a4:	f000 fc4e 	bl	8004b44 <_init>
 80042a8:	1b64      	subs	r4, r4, r5
 80042aa:	10a4      	asrs	r4, r4, #2
 80042ac:	2600      	movs	r6, #0
 80042ae:	42a6      	cmp	r6, r4
 80042b0:	d105      	bne.n	80042be <__libc_init_array+0x2e>
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b8:	4798      	blx	r3
 80042ba:	3601      	adds	r6, #1
 80042bc:	e7ee      	b.n	800429c <__libc_init_array+0xc>
 80042be:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c2:	4798      	blx	r3
 80042c4:	3601      	adds	r6, #1
 80042c6:	e7f2      	b.n	80042ae <__libc_init_array+0x1e>
 80042c8:	08004cd8 	.word	0x08004cd8
 80042cc:	08004cd8 	.word	0x08004cd8
 80042d0:	08004cd8 	.word	0x08004cd8
 80042d4:	08004cdc 	.word	0x08004cdc

080042d8 <__retarget_lock_init_recursive>:
 80042d8:	4770      	bx	lr

080042da <__retarget_lock_acquire_recursive>:
 80042da:	4770      	bx	lr

080042dc <__retarget_lock_release_recursive>:
 80042dc:	4770      	bx	lr
	...

080042e0 <_free_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	4605      	mov	r5, r0
 80042e4:	2900      	cmp	r1, #0
 80042e6:	d041      	beq.n	800436c <_free_r+0x8c>
 80042e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ec:	1f0c      	subs	r4, r1, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bfb8      	it	lt
 80042f2:	18e4      	addlt	r4, r4, r3
 80042f4:	f7ff fd98 	bl	8003e28 <__malloc_lock>
 80042f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <_free_r+0x90>)
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	b933      	cbnz	r3, 800430c <_free_r+0x2c>
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	6014      	str	r4, [r2, #0]
 8004302:	4628      	mov	r0, r5
 8004304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004308:	f7ff bd94 	b.w	8003e34 <__malloc_unlock>
 800430c:	42a3      	cmp	r3, r4
 800430e:	d908      	bls.n	8004322 <_free_r+0x42>
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	1821      	adds	r1, r4, r0
 8004314:	428b      	cmp	r3, r1
 8004316:	bf01      	itttt	eq
 8004318:	6819      	ldreq	r1, [r3, #0]
 800431a:	685b      	ldreq	r3, [r3, #4]
 800431c:	1809      	addeq	r1, r1, r0
 800431e:	6021      	streq	r1, [r4, #0]
 8004320:	e7ed      	b.n	80042fe <_free_r+0x1e>
 8004322:	461a      	mov	r2, r3
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b10b      	cbz	r3, 800432c <_free_r+0x4c>
 8004328:	42a3      	cmp	r3, r4
 800432a:	d9fa      	bls.n	8004322 <_free_r+0x42>
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	1850      	adds	r0, r2, r1
 8004330:	42a0      	cmp	r0, r4
 8004332:	d10b      	bne.n	800434c <_free_r+0x6c>
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	4401      	add	r1, r0
 8004338:	1850      	adds	r0, r2, r1
 800433a:	4283      	cmp	r3, r0
 800433c:	6011      	str	r1, [r2, #0]
 800433e:	d1e0      	bne.n	8004302 <_free_r+0x22>
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	6053      	str	r3, [r2, #4]
 8004346:	4408      	add	r0, r1
 8004348:	6010      	str	r0, [r2, #0]
 800434a:	e7da      	b.n	8004302 <_free_r+0x22>
 800434c:	d902      	bls.n	8004354 <_free_r+0x74>
 800434e:	230c      	movs	r3, #12
 8004350:	602b      	str	r3, [r5, #0]
 8004352:	e7d6      	b.n	8004302 <_free_r+0x22>
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	1821      	adds	r1, r4, r0
 8004358:	428b      	cmp	r3, r1
 800435a:	bf04      	itt	eq
 800435c:	6819      	ldreq	r1, [r3, #0]
 800435e:	685b      	ldreq	r3, [r3, #4]
 8004360:	6063      	str	r3, [r4, #4]
 8004362:	bf04      	itt	eq
 8004364:	1809      	addeq	r1, r1, r0
 8004366:	6021      	streq	r1, [r4, #0]
 8004368:	6054      	str	r4, [r2, #4]
 800436a:	e7ca      	b.n	8004302 <_free_r+0x22>
 800436c:	bd38      	pop	{r3, r4, r5, pc}
 800436e:	bf00      	nop
 8004370:	2000a280 	.word	0x2000a280

08004374 <__sfputc_r>:
 8004374:	6893      	ldr	r3, [r2, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	b410      	push	{r4}
 800437c:	6093      	str	r3, [r2, #8]
 800437e:	da08      	bge.n	8004392 <__sfputc_r+0x1e>
 8004380:	6994      	ldr	r4, [r2, #24]
 8004382:	42a3      	cmp	r3, r4
 8004384:	db01      	blt.n	800438a <__sfputc_r+0x16>
 8004386:	290a      	cmp	r1, #10
 8004388:	d103      	bne.n	8004392 <__sfputc_r+0x1e>
 800438a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800438e:	f000 bb23 	b.w	80049d8 <__swbuf_r>
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	1c58      	adds	r0, r3, #1
 8004396:	6010      	str	r0, [r2, #0]
 8004398:	7019      	strb	r1, [r3, #0]
 800439a:	4608      	mov	r0, r1
 800439c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <__sfputs_r>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	18d5      	adds	r5, r2, r3
 80043ac:	42ac      	cmp	r4, r5
 80043ae:	d101      	bne.n	80043b4 <__sfputs_r+0x12>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e007      	b.n	80043c4 <__sfputs_r+0x22>
 80043b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b8:	463a      	mov	r2, r7
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff ffda 	bl	8004374 <__sfputc_r>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d1f3      	bne.n	80043ac <__sfputs_r+0xa>
 80043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043c8 <_vfiprintf_r>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	460d      	mov	r5, r1
 80043ce:	b09d      	sub	sp, #116	@ 0x74
 80043d0:	4614      	mov	r4, r2
 80043d2:	4698      	mov	r8, r3
 80043d4:	4606      	mov	r6, r0
 80043d6:	b118      	cbz	r0, 80043e0 <_vfiprintf_r+0x18>
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	b90b      	cbnz	r3, 80043e0 <_vfiprintf_r+0x18>
 80043dc:	f7ff fe68 	bl	80040b0 <__sinit>
 80043e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_vfiprintf_r+0x2a>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	059a      	lsls	r2, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_vfiprintf_r+0x2a>
 80043ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ee:	f7ff ff74 	bl	80042da <__retarget_lock_acquire_recursive>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	d501      	bpl.n	80043fc <_vfiprintf_r+0x34>
 80043f8:	692b      	ldr	r3, [r5, #16]
 80043fa:	b99b      	cbnz	r3, 8004424 <_vfiprintf_r+0x5c>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f000 fb28 	bl	8004a54 <__swsetup_r>
 8004404:	b170      	cbz	r0, 8004424 <_vfiprintf_r+0x5c>
 8004406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004408:	07dc      	lsls	r4, r3, #31
 800440a:	d504      	bpl.n	8004416 <_vfiprintf_r+0x4e>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	b01d      	add	sp, #116	@ 0x74
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d4f7      	bmi.n	800440c <_vfiprintf_r+0x44>
 800441c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800441e:	f7ff ff5d 	bl	80042dc <__retarget_lock_release_recursive>
 8004422:	e7f3      	b.n	800440c <_vfiprintf_r+0x44>
 8004424:	2300      	movs	r3, #0
 8004426:	9309      	str	r3, [sp, #36]	@ 0x24
 8004428:	2320      	movs	r3, #32
 800442a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	2330      	movs	r3, #48	@ 0x30
 8004434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045e4 <_vfiprintf_r+0x21c>
 8004438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800443c:	f04f 0901 	mov.w	r9, #1
 8004440:	4623      	mov	r3, r4
 8004442:	469a      	mov	sl, r3
 8004444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004448:	b10a      	cbz	r2, 800444e <_vfiprintf_r+0x86>
 800444a:	2a25      	cmp	r2, #37	@ 0x25
 800444c:	d1f9      	bne.n	8004442 <_vfiprintf_r+0x7a>
 800444e:	ebba 0b04 	subs.w	fp, sl, r4
 8004452:	d00b      	beq.n	800446c <_vfiprintf_r+0xa4>
 8004454:	465b      	mov	r3, fp
 8004456:	4622      	mov	r2, r4
 8004458:	4629      	mov	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ffa1 	bl	80043a2 <__sfputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	f000 80a7 	beq.w	80045b4 <_vfiprintf_r+0x1ec>
 8004466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004468:	445a      	add	r2, fp
 800446a:	9209      	str	r2, [sp, #36]	@ 0x24
 800446c:	f89a 3000 	ldrb.w	r3, [sl]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 809f 	beq.w	80045b4 <_vfiprintf_r+0x1ec>
 8004476:	2300      	movs	r3, #0
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800448c:	931a      	str	r3, [sp, #104]	@ 0x68
 800448e:	4654      	mov	r4, sl
 8004490:	2205      	movs	r2, #5
 8004492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004496:	4853      	ldr	r0, [pc, #332]	@ (80045e4 <_vfiprintf_r+0x21c>)
 8004498:	f7fb fe9a 	bl	80001d0 <memchr>
 800449c:	9a04      	ldr	r2, [sp, #16]
 800449e:	b9d8      	cbnz	r0, 80044d8 <_vfiprintf_r+0x110>
 80044a0:	06d1      	lsls	r1, r2, #27
 80044a2:	bf44      	itt	mi
 80044a4:	2320      	movmi	r3, #32
 80044a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	bf44      	itt	mi
 80044ae:	232b      	movmi	r3, #43	@ 0x2b
 80044b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ba:	d015      	beq.n	80044e8 <_vfiprintf_r+0x120>
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044cc:	3b30      	subs	r3, #48	@ 0x30
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d94b      	bls.n	800456a <_vfiprintf_r+0x1a2>
 80044d2:	b1b0      	cbz	r0, 8004502 <_vfiprintf_r+0x13a>
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	e014      	b.n	8004502 <_vfiprintf_r+0x13a>
 80044d8:	eba0 0308 	sub.w	r3, r0, r8
 80044dc:	fa09 f303 	lsl.w	r3, r9, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	46a2      	mov	sl, r4
 80044e6:	e7d2      	b.n	800448e <_vfiprintf_r+0xc6>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1d19      	adds	r1, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbb      	ittet	lt
 80044f4:	425b      	neglt	r3, r3
 80044f6:	f042 0202 	orrlt.w	r2, r2, #2
 80044fa:	9307      	strge	r3, [sp, #28]
 80044fc:	9307      	strlt	r3, [sp, #28]
 80044fe:	bfb8      	it	lt
 8004500:	9204      	strlt	r2, [sp, #16]
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b2e      	cmp	r3, #46	@ 0x2e
 8004506:	d10a      	bne.n	800451e <_vfiprintf_r+0x156>
 8004508:	7863      	ldrb	r3, [r4, #1]
 800450a:	2b2a      	cmp	r3, #42	@ 0x2a
 800450c:	d132      	bne.n	8004574 <_vfiprintf_r+0x1ac>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800451a:	3402      	adds	r4, #2
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045f4 <_vfiprintf_r+0x22c>
 8004522:	7821      	ldrb	r1, [r4, #0]
 8004524:	2203      	movs	r2, #3
 8004526:	4650      	mov	r0, sl
 8004528:	f7fb fe52 	bl	80001d0 <memchr>
 800452c:	b138      	cbz	r0, 800453e <_vfiprintf_r+0x176>
 800452e:	9b04      	ldr	r3, [sp, #16]
 8004530:	eba0 000a 	sub.w	r0, r0, sl
 8004534:	2240      	movs	r2, #64	@ 0x40
 8004536:	4082      	lsls	r2, r0
 8004538:	4313      	orrs	r3, r2
 800453a:	3401      	adds	r4, #1
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004542:	4829      	ldr	r0, [pc, #164]	@ (80045e8 <_vfiprintf_r+0x220>)
 8004544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004548:	2206      	movs	r2, #6
 800454a:	f7fb fe41 	bl	80001d0 <memchr>
 800454e:	2800      	cmp	r0, #0
 8004550:	d03f      	beq.n	80045d2 <_vfiprintf_r+0x20a>
 8004552:	4b26      	ldr	r3, [pc, #152]	@ (80045ec <_vfiprintf_r+0x224>)
 8004554:	bb1b      	cbnz	r3, 800459e <_vfiprintf_r+0x1d6>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	3307      	adds	r3, #7
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	3308      	adds	r3, #8
 8004560:	9303      	str	r3, [sp, #12]
 8004562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004564:	443b      	add	r3, r7
 8004566:	9309      	str	r3, [sp, #36]	@ 0x24
 8004568:	e76a      	b.n	8004440 <_vfiprintf_r+0x78>
 800456a:	fb0c 3202 	mla	r2, ip, r2, r3
 800456e:	460c      	mov	r4, r1
 8004570:	2001      	movs	r0, #1
 8004572:	e7a8      	b.n	80044c6 <_vfiprintf_r+0xfe>
 8004574:	2300      	movs	r3, #0
 8004576:	3401      	adds	r4, #1
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4620      	mov	r0, r4
 8004582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004586:	3a30      	subs	r2, #48	@ 0x30
 8004588:	2a09      	cmp	r2, #9
 800458a:	d903      	bls.n	8004594 <_vfiprintf_r+0x1cc>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0c6      	beq.n	800451e <_vfiprintf_r+0x156>
 8004590:	9105      	str	r1, [sp, #20]
 8004592:	e7c4      	b.n	800451e <_vfiprintf_r+0x156>
 8004594:	fb0c 2101 	mla	r1, ip, r1, r2
 8004598:	4604      	mov	r4, r0
 800459a:	2301      	movs	r3, #1
 800459c:	e7f0      	b.n	8004580 <_vfiprintf_r+0x1b8>
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <_vfiprintf_r+0x228>)
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	4630      	mov	r0, r6
 80045aa:	f3af 8000 	nop.w
 80045ae:	4607      	mov	r7, r0
 80045b0:	1c78      	adds	r0, r7, #1
 80045b2:	d1d6      	bne.n	8004562 <_vfiprintf_r+0x19a>
 80045b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045b6:	07d9      	lsls	r1, r3, #31
 80045b8:	d405      	bmi.n	80045c6 <_vfiprintf_r+0x1fe>
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	059a      	lsls	r2, r3, #22
 80045be:	d402      	bmi.n	80045c6 <_vfiprintf_r+0x1fe>
 80045c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045c2:	f7ff fe8b 	bl	80042dc <__retarget_lock_release_recursive>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	065b      	lsls	r3, r3, #25
 80045ca:	f53f af1f 	bmi.w	800440c <_vfiprintf_r+0x44>
 80045ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045d0:	e71e      	b.n	8004410 <_vfiprintf_r+0x48>
 80045d2:	ab03      	add	r3, sp, #12
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	462a      	mov	r2, r5
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <_vfiprintf_r+0x228>)
 80045da:	a904      	add	r1, sp, #16
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f879 	bl	80046d4 <_printf_i>
 80045e2:	e7e4      	b.n	80045ae <_vfiprintf_r+0x1e6>
 80045e4:	08004c9c 	.word	0x08004c9c
 80045e8:	08004ca6 	.word	0x08004ca6
 80045ec:	00000000 	.word	0x00000000
 80045f0:	080043a3 	.word	0x080043a3
 80045f4:	08004ca2 	.word	0x08004ca2

080045f8 <_printf_common>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	4616      	mov	r6, r2
 80045fe:	4698      	mov	r8, r3
 8004600:	688a      	ldr	r2, [r1, #8]
 8004602:	690b      	ldr	r3, [r1, #16]
 8004604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004608:	4293      	cmp	r3, r2
 800460a:	bfb8      	it	lt
 800460c:	4613      	movlt	r3, r2
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004614:	4607      	mov	r7, r0
 8004616:	460c      	mov	r4, r1
 8004618:	b10a      	cbz	r2, 800461e <_printf_common+0x26>
 800461a:	3301      	adds	r3, #1
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0699      	lsls	r1, r3, #26
 8004622:	bf42      	ittt	mi
 8004624:	6833      	ldrmi	r3, [r6, #0]
 8004626:	3302      	addmi	r3, #2
 8004628:	6033      	strmi	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	f015 0506 	ands.w	r5, r5, #6
 8004630:	d106      	bne.n	8004640 <_printf_common+0x48>
 8004632:	f104 0a19 	add.w	sl, r4, #25
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	6832      	ldr	r2, [r6, #0]
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	42ab      	cmp	r3, r5
 800463e:	dc26      	bgt.n	800468e <_printf_common+0x96>
 8004640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	3b00      	subs	r3, #0
 8004648:	bf18      	it	ne
 800464a:	2301      	movne	r3, #1
 800464c:	0692      	lsls	r2, r2, #26
 800464e:	d42b      	bmi.n	80046a8 <_printf_common+0xb0>
 8004650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004654:	4641      	mov	r1, r8
 8004656:	4638      	mov	r0, r7
 8004658:	47c8      	blx	r9
 800465a:	3001      	adds	r0, #1
 800465c:	d01e      	beq.n	800469c <_printf_common+0xa4>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	6922      	ldr	r2, [r4, #16]
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	2b04      	cmp	r3, #4
 8004668:	bf02      	ittt	eq
 800466a:	68e5      	ldreq	r5, [r4, #12]
 800466c:	6833      	ldreq	r3, [r6, #0]
 800466e:	1aed      	subeq	r5, r5, r3
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	bf0c      	ite	eq
 8004674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004678:	2500      	movne	r5, #0
 800467a:	4293      	cmp	r3, r2
 800467c:	bfc4      	itt	gt
 800467e:	1a9b      	subgt	r3, r3, r2
 8004680:	18ed      	addgt	r5, r5, r3
 8004682:	2600      	movs	r6, #0
 8004684:	341a      	adds	r4, #26
 8004686:	42b5      	cmp	r5, r6
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xc8>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xa8>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4641      	mov	r1, r8
 8004694:	4638      	mov	r0, r7
 8004696:	47c8      	blx	r9
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xac>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c6      	b.n	8004636 <_printf_common+0x3e>
 80046a8:	18e1      	adds	r1, r4, r3
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	2030      	movs	r0, #48	@ 0x30
 80046ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046b2:	4422      	add	r2, r4
 80046b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046bc:	3302      	adds	r3, #2
 80046be:	e7c7      	b.n	8004650 <_printf_common+0x58>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4641      	mov	r1, r8
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c8      	blx	r9
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xa4>
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7d9      	b.n	8004686 <_printf_common+0x8e>
	...

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	7e0f      	ldrb	r7, [r1, #24]
 80046da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046dc:	2f78      	cmp	r7, #120	@ 0x78
 80046de:	4691      	mov	r9, r2
 80046e0:	4680      	mov	r8, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	469a      	mov	sl, r3
 80046e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	@ 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d2 	beq.w	800489a <_printf_i+0x1c6>
 80046f6:	2f58      	cmp	r7, #88	@ 0x58
 80046f8:	f000 80b9 	beq.w	800486e <_printf_i+0x19a>
 80046fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a101      	add	r1, pc, #4	@ (adr r1, 8004714 <_printf_i+0x40>)
 8004710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	08004881 	.word	0x08004881
 8004744:	080047ab 	.word	0x080047ab
 8004748:	0800483b 	.word	0x0800483b
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048a3 	.word	0x080048a3
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047ab 	.word	0x080047ab
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004843 	.word	0x08004843
 800476c:	6833      	ldr	r3, [r6, #0]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6032      	str	r2, [r6, #0]
 8004774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e09d      	b.n	80048bc <_printf_i+0x1e8>
 8004780:	6833      	ldr	r3, [r6, #0]
 8004782:	6820      	ldr	r0, [r4, #0]
 8004784:	1d19      	adds	r1, r3, #4
 8004786:	6031      	str	r1, [r6, #0]
 8004788:	0606      	lsls	r6, r0, #24
 800478a:	d501      	bpl.n	8004790 <_printf_i+0xbc>
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	e003      	b.n	8004798 <_printf_i+0xc4>
 8004790:	0645      	lsls	r5, r0, #25
 8004792:	d5fb      	bpl.n	800478c <_printf_i+0xb8>
 8004794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004798:	2d00      	cmp	r5, #0
 800479a:	da03      	bge.n	80047a4 <_printf_i+0xd0>
 800479c:	232d      	movs	r3, #45	@ 0x2d
 800479e:	426d      	negs	r5, r5
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a4:	4859      	ldr	r0, [pc, #356]	@ (800490c <_printf_i+0x238>)
 80047a6:	230a      	movs	r3, #10
 80047a8:	e011      	b.n	80047ce <_printf_i+0xfa>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	0608      	lsls	r0, r1, #24
 80047b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047b4:	d402      	bmi.n	80047bc <_printf_i+0xe8>
 80047b6:	0649      	lsls	r1, r1, #25
 80047b8:	bf48      	it	mi
 80047ba:	b2ad      	uxthmi	r5, r5
 80047bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047be:	4853      	ldr	r0, [pc, #332]	@ (800490c <_printf_i+0x238>)
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	bf14      	ite	ne
 80047c4:	230a      	movne	r3, #10
 80047c6:	2308      	moveq	r3, #8
 80047c8:	2100      	movs	r1, #0
 80047ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ce:	6866      	ldr	r6, [r4, #4]
 80047d0:	60a6      	str	r6, [r4, #8]
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	bfa2      	ittt	ge
 80047d6:	6821      	ldrge	r1, [r4, #0]
 80047d8:	f021 0104 	bicge.w	r1, r1, #4
 80047dc:	6021      	strge	r1, [r4, #0]
 80047de:	b90d      	cbnz	r5, 80047e4 <_printf_i+0x110>
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d04b      	beq.n	800487c <_printf_i+0x1a8>
 80047e4:	4616      	mov	r6, r2
 80047e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ea:	fb03 5711 	mls	r7, r3, r1, r5
 80047ee:	5dc7      	ldrb	r7, [r0, r7]
 80047f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047f4:	462f      	mov	r7, r5
 80047f6:	42bb      	cmp	r3, r7
 80047f8:	460d      	mov	r5, r1
 80047fa:	d9f4      	bls.n	80047e6 <_printf_i+0x112>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <_printf_i+0x144>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07df      	lsls	r7, r3, #31
 8004804:	d508      	bpl.n	8004818 <_printf_i+0x144>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	6861      	ldr	r1, [r4, #4]
 800480a:	4299      	cmp	r1, r3
 800480c:	bfde      	ittt	le
 800480e:	2330      	movle	r3, #48	@ 0x30
 8004810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004818:	1b92      	subs	r2, r2, r6
 800481a:	6122      	str	r2, [r4, #16]
 800481c:	f8cd a000 	str.w	sl, [sp]
 8004820:	464b      	mov	r3, r9
 8004822:	aa03      	add	r2, sp, #12
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f7ff fee6 	bl	80045f8 <_printf_common>
 800482c:	3001      	adds	r0, #1
 800482e:	d14a      	bne.n	80048c6 <_printf_i+0x1f2>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b004      	add	sp, #16
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	4833      	ldr	r0, [pc, #204]	@ (8004910 <_printf_i+0x23c>)
 8004844:	2778      	movs	r7, #120	@ 0x78
 8004846:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	6831      	ldr	r1, [r6, #0]
 800484e:	061f      	lsls	r7, r3, #24
 8004850:	f851 5b04 	ldr.w	r5, [r1], #4
 8004854:	d402      	bmi.n	800485c <_printf_i+0x188>
 8004856:	065f      	lsls	r7, r3, #25
 8004858:	bf48      	it	mi
 800485a:	b2ad      	uxthmi	r5, r5
 800485c:	6031      	str	r1, [r6, #0]
 800485e:	07d9      	lsls	r1, r3, #31
 8004860:	bf44      	itt	mi
 8004862:	f043 0320 	orrmi.w	r3, r3, #32
 8004866:	6023      	strmi	r3, [r4, #0]
 8004868:	b11d      	cbz	r5, 8004872 <_printf_i+0x19e>
 800486a:	2310      	movs	r3, #16
 800486c:	e7ac      	b.n	80047c8 <_printf_i+0xf4>
 800486e:	4827      	ldr	r0, [pc, #156]	@ (800490c <_printf_i+0x238>)
 8004870:	e7e9      	b.n	8004846 <_printf_i+0x172>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f023 0320 	bic.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	e7f6      	b.n	800486a <_printf_i+0x196>
 800487c:	4616      	mov	r6, r2
 800487e:	e7bd      	b.n	80047fc <_printf_i+0x128>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6030      	str	r0, [r6, #0]
 800488a:	062e      	lsls	r6, r5, #24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	d501      	bpl.n	8004894 <_printf_i+0x1c0>
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0x1c6>
 8004894:	0668      	lsls	r0, r5, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0x1bc>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4616      	mov	r6, r2
 80048a0:	e7bc      	b.n	800481c <_printf_i+0x148>
 80048a2:	6833      	ldr	r3, [r6, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	6032      	str	r2, [r6, #0]
 80048a8:	681e      	ldr	r6, [r3, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7fb fc8e 	bl	80001d0 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1e6>
 80048b6:	1b80      	subs	r0, r0, r6
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c4:	e7aa      	b.n	800481c <_printf_i+0x148>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0ad      	beq.n	8004830 <_printf_i+0x15c>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d413      	bmi.n	8004902 <_printf_i+0x22e>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e7a6      	b.n	8004834 <_printf_i+0x160>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d09d      	beq.n	8004830 <_printf_i+0x15c>
 80048f4:	3501      	adds	r5, #1
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	9903      	ldr	r1, [sp, #12]
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dcf2      	bgt.n	80048e6 <_printf_i+0x212>
 8004900:	e7eb      	b.n	80048da <_printf_i+0x206>
 8004902:	2500      	movs	r5, #0
 8004904:	f104 0619 	add.w	r6, r4, #25
 8004908:	e7f5      	b.n	80048f6 <_printf_i+0x222>
 800490a:	bf00      	nop
 800490c:	08004cad 	.word	0x08004cad
 8004910:	08004cbe 	.word	0x08004cbe

08004914 <__swhatbuf_r>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491c:	2900      	cmp	r1, #0
 800491e:	b096      	sub	sp, #88	@ 0x58
 8004920:	4615      	mov	r5, r2
 8004922:	461e      	mov	r6, r3
 8004924:	da0d      	bge.n	8004942 <__swhatbuf_r+0x2e>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	bf14      	ite	ne
 8004932:	2340      	movne	r3, #64	@ 0x40
 8004934:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004938:	2000      	movs	r0, #0
 800493a:	6031      	str	r1, [r6, #0]
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	b016      	add	sp, #88	@ 0x58
 8004940:	bd70      	pop	{r4, r5, r6, pc}
 8004942:	466a      	mov	r2, sp
 8004944:	f000 f8dc 	bl	8004b00 <_fstat_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	dbec      	blt.n	8004926 <__swhatbuf_r+0x12>
 800494c:	9901      	ldr	r1, [sp, #4]
 800494e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004952:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004956:	4259      	negs	r1, r3
 8004958:	4159      	adcs	r1, r3
 800495a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800495e:	e7eb      	b.n	8004938 <__swhatbuf_r+0x24>

08004960 <__smakebuf_r>:
 8004960:	898b      	ldrh	r3, [r1, #12]
 8004962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004964:	079d      	lsls	r5, r3, #30
 8004966:	4606      	mov	r6, r0
 8004968:	460c      	mov	r4, r1
 800496a:	d507      	bpl.n	800497c <__smakebuf_r+0x1c>
 800496c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	2301      	movs	r3, #1
 8004976:	6163      	str	r3, [r4, #20]
 8004978:	b003      	add	sp, #12
 800497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497c:	ab01      	add	r3, sp, #4
 800497e:	466a      	mov	r2, sp
 8004980:	f7ff ffc8 	bl	8004914 <__swhatbuf_r>
 8004984:	9f00      	ldr	r7, [sp, #0]
 8004986:	4605      	mov	r5, r0
 8004988:	4639      	mov	r1, r7
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff f9cc 	bl	8003d28 <_malloc_r>
 8004990:	b948      	cbnz	r0, 80049a6 <__smakebuf_r+0x46>
 8004992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004996:	059a      	lsls	r2, r3, #22
 8004998:	d4ee      	bmi.n	8004978 <__smakebuf_r+0x18>
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	e7e2      	b.n	800496c <__smakebuf_r+0xc>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	6020      	str	r0, [r4, #0]
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049b6:	b15b      	cbz	r3, 80049d0 <__smakebuf_r+0x70>
 80049b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f8b1 	bl	8004b24 <_isatty_r>
 80049c2:	b128      	cbz	r0, 80049d0 <__smakebuf_r+0x70>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	431d      	orrs	r5, r3
 80049d4:	81a5      	strh	r5, [r4, #12]
 80049d6:	e7cf      	b.n	8004978 <__smakebuf_r+0x18>

080049d8 <__swbuf_r>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	460e      	mov	r6, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	4605      	mov	r5, r0
 80049e0:	b118      	cbz	r0, 80049ea <__swbuf_r+0x12>
 80049e2:	6a03      	ldr	r3, [r0, #32]
 80049e4:	b90b      	cbnz	r3, 80049ea <__swbuf_r+0x12>
 80049e6:	f7ff fb63 	bl	80040b0 <__sinit>
 80049ea:	69a3      	ldr	r3, [r4, #24]
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	071a      	lsls	r2, r3, #28
 80049f2:	d501      	bpl.n	80049f8 <__swbuf_r+0x20>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	b943      	cbnz	r3, 8004a0a <__swbuf_r+0x32>
 80049f8:	4621      	mov	r1, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 f82a 	bl	8004a54 <__swsetup_r>
 8004a00:	b118      	cbz	r0, 8004a0a <__swbuf_r+0x32>
 8004a02:	f04f 37ff 	mov.w	r7, #4294967295
 8004a06:	4638      	mov	r0, r7
 8004a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	6922      	ldr	r2, [r4, #16]
 8004a0e:	1a98      	subs	r0, r3, r2
 8004a10:	6963      	ldr	r3, [r4, #20]
 8004a12:	b2f6      	uxtb	r6, r6
 8004a14:	4283      	cmp	r3, r0
 8004a16:	4637      	mov	r7, r6
 8004a18:	dc05      	bgt.n	8004a26 <__swbuf_r+0x4e>
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7ff fa93 	bl	8003f48 <_fflush_r>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d1ed      	bne.n	8004a02 <__swbuf_r+0x2a>
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	60a3      	str	r3, [r4, #8]
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	701e      	strb	r6, [r3, #0]
 8004a34:	6962      	ldr	r2, [r4, #20]
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d004      	beq.n	8004a46 <__swbuf_r+0x6e>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	07db      	lsls	r3, r3, #31
 8004a40:	d5e1      	bpl.n	8004a06 <__swbuf_r+0x2e>
 8004a42:	2e0a      	cmp	r6, #10
 8004a44:	d1df      	bne.n	8004a06 <__swbuf_r+0x2e>
 8004a46:	4621      	mov	r1, r4
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7ff fa7d 	bl	8003f48 <_fflush_r>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0d9      	beq.n	8004a06 <__swbuf_r+0x2e>
 8004a52:	e7d6      	b.n	8004a02 <__swbuf_r+0x2a>

08004a54 <__swsetup_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <__swsetup_r+0xa8>)
 8004a58:	4605      	mov	r5, r0
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	b118      	cbz	r0, 8004a68 <__swsetup_r+0x14>
 8004a60:	6a03      	ldr	r3, [r0, #32]
 8004a62:	b90b      	cbnz	r3, 8004a68 <__swsetup_r+0x14>
 8004a64:	f7ff fb24 	bl	80040b0 <__sinit>
 8004a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6c:	0719      	lsls	r1, r3, #28
 8004a6e:	d422      	bmi.n	8004ab6 <__swsetup_r+0x62>
 8004a70:	06da      	lsls	r2, r3, #27
 8004a72:	d407      	bmi.n	8004a84 <__swsetup_r+0x30>
 8004a74:	2209      	movs	r2, #9
 8004a76:	602a      	str	r2, [r5, #0]
 8004a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a82:	e033      	b.n	8004aec <__swsetup_r+0x98>
 8004a84:	0758      	lsls	r0, r3, #29
 8004a86:	d512      	bpl.n	8004aae <__swsetup_r+0x5a>
 8004a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a8a:	b141      	cbz	r1, 8004a9e <__swsetup_r+0x4a>
 8004a8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a90:	4299      	cmp	r1, r3
 8004a92:	d002      	beq.n	8004a9a <__swsetup_r+0x46>
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7ff fc23 	bl	80042e0 <_free_r>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004aa4:	81a3      	strh	r3, [r4, #12]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f043 0308 	orr.w	r3, r3, #8
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	b94b      	cbnz	r3, 8004ace <__swsetup_r+0x7a>
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac4:	d003      	beq.n	8004ace <__swsetup_r+0x7a>
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f7ff ff49 	bl	8004960 <__smakebuf_r>
 8004ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad2:	f013 0201 	ands.w	r2, r3, #1
 8004ad6:	d00a      	beq.n	8004aee <__swsetup_r+0x9a>
 8004ad8:	2200      	movs	r2, #0
 8004ada:	60a2      	str	r2, [r4, #8]
 8004adc:	6962      	ldr	r2, [r4, #20]
 8004ade:	4252      	negs	r2, r2
 8004ae0:	61a2      	str	r2, [r4, #24]
 8004ae2:	6922      	ldr	r2, [r4, #16]
 8004ae4:	b942      	cbnz	r2, 8004af8 <__swsetup_r+0xa4>
 8004ae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004aea:	d1c5      	bne.n	8004a78 <__swsetup_r+0x24>
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
 8004aee:	0799      	lsls	r1, r3, #30
 8004af0:	bf58      	it	pl
 8004af2:	6962      	ldrpl	r2, [r4, #20]
 8004af4:	60a2      	str	r2, [r4, #8]
 8004af6:	e7f4      	b.n	8004ae2 <__swsetup_r+0x8e>
 8004af8:	2000      	movs	r0, #0
 8004afa:	e7f7      	b.n	8004aec <__swsetup_r+0x98>
 8004afc:	20000020 	.word	0x20000020

08004b00 <_fstat_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d07      	ldr	r5, [pc, #28]	@ (8004b20 <_fstat_r+0x20>)
 8004b04:	2300      	movs	r3, #0
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	602b      	str	r3, [r5, #0]
 8004b0e:	f7fc f8c6 	bl	8000c9e <_fstat>
 8004b12:	1c43      	adds	r3, r0, #1
 8004b14:	d102      	bne.n	8004b1c <_fstat_r+0x1c>
 8004b16:	682b      	ldr	r3, [r5, #0]
 8004b18:	b103      	cbz	r3, 8004b1c <_fstat_r+0x1c>
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}
 8004b1e:	bf00      	nop
 8004b20:	2000a3c0 	.word	0x2000a3c0

08004b24 <_isatty_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4d06      	ldr	r5, [pc, #24]	@ (8004b40 <_isatty_r+0x1c>)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f7fc f8ba 	bl	8000ca8 <_isatty>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_isatty_r+0x1a>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_isatty_r+0x1a>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	2000a3c0 	.word	0x2000a3c0

08004b44 <_init>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr

08004b50 <_fini>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr
