
OSZCZEDZANIE_ENERGII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d4  080025d4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d4  080025d4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d4  080025d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d4  080025d4  000035d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025d8  080025d8  000035d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  080025e8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080025e8  00004050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c59  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b02  00000000  00000000  0000cc95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000e798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fb  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002528c  00000000  00000000  0000f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3b0  00000000  00000000  00034a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51b8  00000000  00000000  0003ee2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000246c  00000000  00000000  0012402c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00126498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800257c 	.word	0x0800257c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800257c 	.word	0x0800257c

080001c8 <start_measure>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_measure(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2120      	movs	r1, #32
 80001d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001d4:	f000 fd1e 	bl	8000c14 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}

080001dc <stop_measure>:
void stop_measure(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2120      	movs	r1, #32
 80001e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001e8:	f000 fd14 	bl	8000c14 <HAL_GPIO_WritePin>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <HAL_Delay>:
void HAL_Delay(uint32_t Delay)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80001f8:	f000 fa44 	bl	8000684 <HAL_GetTick>
 80001fc:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	60fb      	str	r3, [r7, #12]

	if(wait < HAL_MAX_DELAY)
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000208:	d007      	beq.n	800021a <HAL_Delay+0x2a>
	{
		wait += (uint32_t)uwTickFreq;
 800020a:	4b0a      	ldr	r3, [pc, #40]	@ (8000234 <HAL_Delay+0x44>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	461a      	mov	r2, r3
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4413      	add	r3, r2
 8000214:	60fb      	str	r3, [r7, #12]
	}
	while((HAL_GetTick() - tickstart) < wait)
 8000216:	e000      	b.n	800021a <HAL_Delay+0x2a>
	{
		__WFI();
 8000218:	bf30      	wfi
	while((HAL_GetTick() - tickstart) < wait)
 800021a:	f000 fa33 	bl	8000684 <HAL_GetTick>
 800021e:	4602      	mov	r2, r0
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	1ad3      	subs	r3, r2, r3
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	429a      	cmp	r2, r3
 8000228:	d8f6      	bhi.n	8000218 <HAL_Delay+0x28>
	}
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000008 	.word	0x20000008

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 f9b9 	bl	80005b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f810 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f88e 	bl	8000364 <MX_GPIO_Init>
  MX_RTC_Init();
 8000248:	f000 f864 	bl	8000314 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  start_measure();
 800024c:	f7ff ffbc 	bl	80001c8 <start_measure>
	  HAL_Delay(50);
 8000250:	2032      	movs	r0, #50	@ 0x32
 8000252:	f7ff ffcd 	bl	80001f0 <HAL_Delay>
	  stop_measure();
 8000256:	f7ff ffc1 	bl	80001dc <stop_measure>
	  HAL_PWR_EnterSTANDBYMode(); // przechodzi w uspienie
 800025a:	f000 fd03 	bl	8000c64 <HAL_PWR_EnterSTANDBYMode>
	  start_measure();
 800025e:	bf00      	nop
 8000260:	e7f4      	b.n	800024c <main+0x14>
	...

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	@ 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	@ 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 f956 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000286:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800028a:	f000 fd13 	bl	8000cb4 <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000294:	f000 f8b4 	bl	8000400 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000298:	f000 fcd4 	bl	8000c44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800029c:	4b1c      	ldr	r3, [pc, #112]	@ (8000310 <SystemClock_Config+0xac>)
 800029e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80002a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000310 <SystemClock_Config+0xac>)
 80002a4:	f023 0318 	bic.w	r3, r3, #24
 80002a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80002ac:	231c      	movs	r3, #28
 80002ae:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002c0:	2360      	movs	r3, #96	@ 0x60
 80002c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fd47 	bl	8000d60 <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002d8:	f000 f892 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002e0:	2300      	movs	r3, #0
 80002e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f0:	463b      	mov	r3, r7
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 f90f 	bl	8001518 <HAL_RCC_ClockConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000300:	f000 f87e 	bl	8000400 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000304:	f001 fdde 	bl	8001ec4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000308:	bf00      	nop
 800030a:	3758      	adds	r7, #88	@ 0x58
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000

08000314 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_RTC_Init+0x48>)
 800031a:	4a11      	ldr	r2, [pc, #68]	@ (8000360 <MX_RTC_Init+0x4c>)
 800031c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800031e:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_RTC_Init+0x48>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000324:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <MX_RTC_Init+0x48>)
 8000326:	227f      	movs	r2, #127	@ 0x7f
 8000328:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800032a:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_RTC_Init+0x48>)
 800032c:	22ff      	movs	r2, #255	@ 0xff
 800032e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <MX_RTC_Init+0x48>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_RTC_Init+0x48>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <MX_RTC_Init+0x48>)
 800033e:	2200      	movs	r2, #0
 8000340:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_RTC_Init+0x48>)
 8000344:	2200      	movs	r2, #0
 8000346:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <MX_RTC_Init+0x48>)
 800034a:	f001 ff9d 	bl	8002288 <HAL_RTC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000354:	f000 f854 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000028 	.word	0x20000028
 8000360:	40002800 	.word	0x40002800

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037a:	4b1f      	ldr	r3, [pc, #124]	@ (80003f8 <MX_GPIO_Init+0x94>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037e:	4a1e      	ldr	r2, [pc, #120]	@ (80003f8 <MX_GPIO_Init+0x94>)
 8000380:	f043 0304 	orr.w	r3, r3, #4
 8000384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000386:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <MX_GPIO_Init+0x94>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	f003 0304 	and.w	r3, r3, #4
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b19      	ldr	r3, [pc, #100]	@ (80003f8 <MX_GPIO_Init+0x94>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	4a18      	ldr	r2, [pc, #96]	@ (80003f8 <MX_GPIO_Init+0x94>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800039e:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <MX_GPIO_Init+0x94>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2120      	movs	r1, #32
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b2:	f000 fc2f 	bl	8000c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4619      	mov	r1, r3
 80003ca:	480c      	ldr	r0, [pc, #48]	@ (80003fc <MX_GPIO_Init+0x98>)
 80003cc:	f000 fa78 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d0:	2320      	movs	r3, #32
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	4619      	mov	r1, r3
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ea:	f000 fa69 	bl	80008c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	48000800 	.word	0x48000800

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <Error_Handler+0x8>

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <HAL_MspInit+0x44>)
 8000414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_MspInit+0x44>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6613      	str	r3, [r2, #96]	@ 0x60
 800041e:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <HAL_MspInit+0x44>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <HAL_MspInit+0x44>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800042e:	4a08      	ldr	r2, [pc, #32]	@ (8000450 <HAL_MspInit+0x44>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000434:	6593      	str	r3, [r2, #88]	@ 0x58
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <HAL_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800043a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b0a4      	sub	sp, #144	@ 0x90
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	2288      	movs	r2, #136	@ 0x88
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f002 f85d 	bl	8002524 <memset>
  if(hrtc->Instance==RTC)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <HAL_RTC_MspInit+0x6c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d120      	bne.n	80004b6 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000474:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000478:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800047a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800047e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fa32 	bl	80018f0 <HAL_RCCEx_PeriphCLKConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000492:	f7ff ffb5 	bl	8000400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000496:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <HAL_RTC_MspInit+0x70>)
 8000498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800049c:	4a09      	ldr	r2, [pc, #36]	@ (80004c4 <HAL_RTC_MspInit+0x70>)
 800049e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2003      	movs	r0, #3
 80004ac:	f000 f9d1 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 f9ea 	bl	800088a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80004b6:	bf00      	nop
 80004b8:	3790      	adds	r7, #144	@ 0x90
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40002800 	.word	0x40002800
 80004c4:	40021000 	.word	0x40021000

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <NMI_Handler+0x4>

080004d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <MemManage_Handler+0x4>

080004e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <UsageFault_Handler+0x4>

080004f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 f89d 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <RTC_WKUP_IRQHandler+0x10>)
 800052e:	f001 ffc9 	bl	80024c4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <SystemInit+0x20>)
 8000542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000546:	4a05      	ldr	r2, [pc, #20]	@ (800055c <SystemInit+0x20>)
 8000548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800054c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000564:	f7ff ffea 	bl	800053c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	@ (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	@ (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058e:	f001 ffd1 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000592:	f7ff fe51 	bl	8000238 <main>

08000596 <LoopForever>:

LoopForever:
    b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000598:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a4:	080025dc 	.word	0x080025dc
  ldr r2, =_sbss
 80005a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005ac:	20000050 	.word	0x20000050

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>

080005b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f93d 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 f80e 	bl	80005e4 <HAL_InitTick>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	e001      	b.n	80005d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d4:	f7ff ff1a 	bl	800040c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <HAL_InitTick+0x6c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d023      	beq.n	8000640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <HAL_InitTick+0x70>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f949 	bl	80008a6 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10f      	bne.n	800063a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d809      	bhi.n	8000634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f913 	bl	8000852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800062c:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <HAL_InitTick+0x74>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e007      	b.n	8000644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e004      	b.n	8000644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e001      	b.n	8000644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008
 8000654:	20000000 	.word	0x20000000
 8000658:	20000004 	.word	0x20000004

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000008 	.word	0x20000008
 8000680:	2000004c 	.word	0x2000004c

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000004c 	.word	0x2000004c

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4907      	ldr	r1, [pc, #28]	@ (8000738 <__NVIC_EnableIRQ+0x38>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	@ (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	@ (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	@ 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	@ 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff29 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff3e 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff31 	bl	8000700 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ce:	e17f      	b.n	8000bd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f000 8171 	beq.w	8000bca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d005      	beq.n	8000900 <HAL_GPIO_Init+0x40>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d130      	bne.n	8000962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000936:	2201      	movs	r2, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	091b      	lsrs	r3, r3, #4
 800094c:	f003 0201 	and.w	r2, r3, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b03      	cmp	r3, #3
 800096c:	d118      	bne.n	80009a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000974:	2201      	movs	r2, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	f003 0201 	and.w	r2, r3, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d017      	beq.n	80009dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d123      	bne.n	8000a30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	08da      	lsrs	r2, r3, #3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3208      	adds	r2, #8
 80009f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	6939      	ldr	r1, [r7, #16]
 8000a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0203 	and.w	r2, r3, #3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 80ac 	beq.w	8000bca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b5f      	ldr	r3, [pc, #380]	@ (8000bf0 <HAL_GPIO_Init+0x330>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	4a5e      	ldr	r2, [pc, #376]	@ (8000bf0 <HAL_GPIO_Init+0x330>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf0 <HAL_GPIO_Init+0x330>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000bf4 <HAL_GPIO_Init+0x334>)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ab4:	d025      	beq.n	8000b02 <HAL_GPIO_Init+0x242>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4f      	ldr	r2, [pc, #316]	@ (8000bf8 <HAL_GPIO_Init+0x338>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d01f      	beq.n	8000afe <HAL_GPIO_Init+0x23e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8000bfc <HAL_GPIO_Init+0x33c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d019      	beq.n	8000afa <HAL_GPIO_Init+0x23a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4d      	ldr	r2, [pc, #308]	@ (8000c00 <HAL_GPIO_Init+0x340>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d013      	beq.n	8000af6 <HAL_GPIO_Init+0x236>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4c      	ldr	r2, [pc, #304]	@ (8000c04 <HAL_GPIO_Init+0x344>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d00d      	beq.n	8000af2 <HAL_GPIO_Init+0x232>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4b      	ldr	r2, [pc, #300]	@ (8000c08 <HAL_GPIO_Init+0x348>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d007      	beq.n	8000aee <HAL_GPIO_Init+0x22e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8000c0c <HAL_GPIO_Init+0x34c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_GPIO_Init+0x22a>
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	e00c      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000aea:	2307      	movs	r3, #7
 8000aec:	e00a      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000aee:	2305      	movs	r3, #5
 8000af0:	e008      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000af2:	2304      	movs	r3, #4
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000af6:	2303      	movs	r3, #3
 8000af8:	e004      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e002      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000b02:	2300      	movs	r3, #0
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	f002 0203 	and.w	r2, r2, #3
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	4093      	lsls	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b14:	4937      	ldr	r1, [pc, #220]	@ (8000bf4 <HAL_GPIO_Init+0x334>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b22:	4b3b      	ldr	r3, [pc, #236]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b46:	4a32      	ldr	r2, [pc, #200]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b4c:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b70:	4a27      	ldr	r2, [pc, #156]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b76:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bc4:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <HAL_GPIO_Init+0x350>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f47f ae78 	bne.w	80008d0 <HAL_GPIO_Init+0x10>
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000c00 	.word	0x48000c00
 8000c04:	48001000 	.word	0x48001000
 8000c08:	48001400 	.word	0x48001400
 8000c0c:	48001800 	.word	0x48001800
 8000c10:	40010400 	.word	0x40010400

08000c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
 8000c20:	4613      	mov	r3, r2
 8000c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c24:	787b      	ldrb	r3, [r7, #1]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c30:	e002      	b.n	8000c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40007000 	.word	0x40007000

08000c64 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 0307 	bic.w	r3, r3, #7
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000c72:	f043 0303 	orr.w	r3, r3, #3
 8000c76:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000c84:	bf30      	wfi
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40007000 	.word	0x40007000
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cc2:	d130      	bne.n	8000d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cd0:	d038      	beq.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd2:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2232      	movs	r2, #50	@ 0x32
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf8:	e002      	b.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d0c:	d102      	bne.n	8000d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f2      	bne.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d20:	d110      	bne.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e00f      	b.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d32:	d007      	beq.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d3c:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40007000 	.word	0x40007000
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	431bde83 	.word	0x431bde83

08000d60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e3ca      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d72:	4b97      	ldr	r3, [pc, #604]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d7c:	4b94      	ldr	r3, [pc, #592]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 80e4 	beq.w	8000f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <HAL_RCC_OscConfig+0x4a>
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b0c      	cmp	r3, #12
 8000d9e:	f040 808b 	bne.w	8000eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f040 8087 	bne.w	8000eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000daa:	4b89      	ldr	r3, [pc, #548]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x62>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e3a2      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	4b82      	ldr	r3, [pc, #520]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <HAL_RCC_OscConfig+0x7c>
 8000dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dda:	e005      	b.n	8000de8 <HAL_RCC_OscConfig+0x88>
 8000ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d223      	bcs.n	8000e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fd1d 	bl	8001830 <RCC_SetFlashLatencyFromMSIRange>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e383      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e00:	4b73      	ldr	r3, [pc, #460]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a72      	ldr	r2, [pc, #456]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b70      	ldr	r3, [pc, #448]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	496d      	ldr	r1, [pc, #436]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	4968      	ldr	r1, [pc, #416]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	604b      	str	r3, [r1, #4]
 8000e32:	e025      	b.n	8000e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e34:	4b66      	ldr	r3, [pc, #408]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a65      	ldr	r2, [pc, #404]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b63      	ldr	r3, [pc, #396]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4960      	ldr	r1, [pc, #384]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e52:	4b5f      	ldr	r3, [pc, #380]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	495b      	ldr	r1, [pc, #364]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d109      	bne.n	8000e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fcdd 	bl	8001830 <RCC_SetFlashLatencyFromMSIRange>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e343      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e80:	f000 fc4a 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b52      	ldr	r3, [pc, #328]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	4950      	ldr	r1, [pc, #320]	@ (8000fd4 <HAL_RCC_OscConfig+0x274>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd8 <HAL_RCC_OscConfig+0x278>)
 8000e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8000fdc <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb9d 	bl	80005e4 <HAL_InitTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d052      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	e327      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d032      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ec0:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a42      	ldr	r2, [pc, #264]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fbda 	bl	8000684 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fbd6 	bl	8000684 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e310      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef2:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a36      	ldr	r2, [pc, #216]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4931      	ldr	r1, [pc, #196]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	492c      	ldr	r1, [pc, #176]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
 8000f24:	e01a      	b.n	8000f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f26:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a29      	ldr	r2, [pc, #164]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fba7 	bl	8000684 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fba3 	bl	8000684 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e2dd      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x1da>
 8000f58:	e000      	b.n	8000f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d074      	beq.n	8001052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d005      	beq.n	8000f7a <HAL_RCC_OscConfig+0x21a>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	d10e      	bne.n	8000f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d10b      	bne.n	8000f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d064      	beq.n	8001050 <HAL_RCC_OscConfig+0x2f0>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d160      	bne.n	8001050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e2ba      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x24a>
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e026      	b.n	8000ff8 <HAL_RCC_OscConfig+0x298>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fb2:	d115      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x280>
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a02      	ldr	r2, [pc, #8]	@ (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x298>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	08002594 	.word	0x08002594
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	4ba0      	ldr	r3, [pc, #640]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a9f      	ldr	r2, [pc, #636]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b9d      	ldr	r3, [pc, #628]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a9c      	ldr	r2, [pc, #624]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d013      	beq.n	8001028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb40 	bl	8000684 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fb3c 	bl	8000684 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	@ 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e276      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101a:	4b92      	ldr	r3, [pc, #584]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x2a8>
 8001026:	e014      	b.n	8001052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001028:	f7ff fb2c 	bl	8000684 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fb28 	bl	8000684 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e262      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001042:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x2d0>
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d060      	beq.n	8001120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x310>
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2b0c      	cmp	r3, #12
 8001068:	d119      	bne.n	800109e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d116      	bne.n	800109e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001070:	4b7c      	ldr	r3, [pc, #496]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x328>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e23f      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b76      	ldr	r3, [pc, #472]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	4973      	ldr	r1, [pc, #460]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	e040      	b.n	8001120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d023      	beq.n	80010ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fae7 	bl	8000684 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fae3 	bl	8000684 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e21d      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010cc:	4b65      	ldr	r3, [pc, #404]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b62      	ldr	r3, [pc, #392]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	061b      	lsls	r3, r3, #24
 80010e6:	495f      	ldr	r1, [pc, #380]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
 80010ec:	e018      	b.n	8001120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80010f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff fac3 	bl	8000684 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fabf 	bl	8000684 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1f9      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001114:	4b53      	ldr	r3, [pc, #332]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d03c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01c      	beq.n	800116e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001134:	4b4b      	ldr	r3, [pc, #300]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800113a:	4a4a      	ldr	r2, [pc, #296]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001144:	f7ff fa9e 	bl	8000684 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fa9a 	bl	8000684 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1d4      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800115e:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0ef      	beq.n	800114c <HAL_RCC_OscConfig+0x3ec>
 800116c:	e01b      	b.n	80011a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b3d      	ldr	r3, [pc, #244]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001174:	4a3b      	ldr	r2, [pc, #236]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117e:	f7ff fa81 	bl	8000684 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fa7d 	bl	8000684 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1b7      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001198:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 800119a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1ef      	bne.n	8001186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80a6 	beq.w	8001300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10d      	bne.n	80011e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011dc:	2301      	movs	r3, #1
 80011de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_RCC_OscConfig+0x508>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d118      	bne.n	800121e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <HAL_RCC_OscConfig+0x508>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_RCC_OscConfig+0x508>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fa44 	bl	8000684 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001200:	f7ff fa40 	bl	8000684 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e17a      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_RCC_OscConfig+0x508>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d8>
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001236:	e029      	b.n	800128c <HAL_RCC_OscConfig+0x52c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d115      	bne.n	800126c <HAL_RCC_OscConfig+0x50c>
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001246:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001256:	4a03      	ldr	r2, [pc, #12]	@ (8001264 <HAL_RCC_OscConfig+0x504>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001260:	e014      	b.n	800128c <HAL_RCC_OscConfig+0x52c>
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	40007000 	.word	0x40007000
 800126c:	4b9c      	ldr	r3, [pc, #624]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001272:	4a9b      	ldr	r2, [pc, #620]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800127c:	4b98      	ldr	r3, [pc, #608]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 800127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001282:	4a97      	ldr	r2, [pc, #604]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d016      	beq.n	80012c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff f9f6 	bl	8000684 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff f9f2 	bl	8000684 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e12a      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b2:	4b8b      	ldr	r3, [pc, #556]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0ed      	beq.n	800129c <HAL_RCC_OscConfig+0x53c>
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff f9df 	bl	8000684 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff f9db 	bl	8000684 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e113      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e0:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ed      	bne.n	80012ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b7a      	ldr	r3, [pc, #488]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	4a79      	ldr	r2, [pc, #484]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80fe 	beq.w	8001506 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	2b02      	cmp	r3, #2
 8001310:	f040 80d0 	bne.w	80014b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001314:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	429a      	cmp	r2, r3
 8001326:	d130      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	3b01      	subs	r3, #1
 8001334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d127      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d11f      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001354:	2a07      	cmp	r2, #7
 8001356:	bf14      	ite	ne
 8001358:	2201      	movne	r2, #1
 800135a:	2200      	moveq	r2, #0
 800135c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135e:	4293      	cmp	r3, r2
 8001360:	d113      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	3b01      	subs	r3, #1
 8001370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d109      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	3b01      	subs	r3, #1
 8001384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d06e      	beq.n	8001468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d069      	beq.n	8001464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001390:	4b53      	ldr	r3, [pc, #332]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800139c:	4b50      	ldr	r3, [pc, #320]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0ad      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013ac:	4b4c      	ldr	r3, [pc, #304]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a4b      	ldr	r2, [pc, #300]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013b8:	f7ff f964 	bl	8000684 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff f960 	bl	8000684 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e09a      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d2:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013de:	4b40      	ldr	r3, [pc, #256]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <HAL_RCC_OscConfig+0x784>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013ee:	3a01      	subs	r2, #1
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	4311      	orrs	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013f8:	0212      	lsls	r2, r2, #8
 80013fa:	4311      	orrs	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001400:	0852      	lsrs	r2, r2, #1
 8001402:	3a01      	subs	r2, #1
 8001404:	0552      	lsls	r2, r2, #21
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800140c:	0852      	lsrs	r2, r2, #1
 800140e:	3a01      	subs	r2, #1
 8001410:	0652      	lsls	r2, r2, #25
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001418:	0912      	lsrs	r2, r2, #4
 800141a:	0452      	lsls	r2, r2, #17
 800141c:	430a      	orrs	r2, r1
 800141e:	4930      	ldr	r1, [pc, #192]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001424:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a2d      	ldr	r2, [pc, #180]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001430:	4b2b      	ldr	r3, [pc, #172]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a2a      	ldr	r2, [pc, #168]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800143c:	f7ff f922 	bl	8000684 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f91e 	bl	8000684 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e058      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001462:	e050      	b.n	8001506 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e04f      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d148      	bne.n	8001506 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a16      	ldr	r2, [pc, #88]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800148a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800148c:	f7ff f8fa 	bl	8000684 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f8f6 	bl	8000684 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e030      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x734>
 80014b2:	e028      	b.n	8001506 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d023      	beq.n	8001502 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <HAL_RCC_OscConfig+0x780>)
 80014c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff f8dd 	bl	8000684 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014cc:	e00c      	b.n	80014e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f8d9 	bl	8000684 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d905      	bls.n	80014e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
 80014e0:	40021000 	.word	0x40021000
 80014e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_RCC_OscConfig+0x7b0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ec      	bne.n	80014ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_RCC_OscConfig+0x7b0>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4905      	ldr	r1, [pc, #20]	@ (8001510 <HAL_RCC_OscConfig+0x7b0>)
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_RCC_OscConfig+0x7b4>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
 8001500:	e001      	b.n	8001506 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	feeefffc 	.word	0xfeeefffc

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0e7      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b75      	ldr	r3, [pc, #468]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d910      	bls.n	800155c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b72      	ldr	r3, [pc, #456]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	4970      	ldr	r1, [pc, #448]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b6e      	ldr	r3, [pc, #440]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0cf      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d010      	beq.n	800158a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4b66      	ldr	r3, [pc, #408]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001574:	429a      	cmp	r2, r3
 8001576:	d908      	bls.n	800158a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4960      	ldr	r1, [pc, #384]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04c      	beq.n	8001630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b5a      	ldr	r3, [pc, #360]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d121      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0a6      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	4b54      	ldr	r3, [pc, #336]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d115      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e09a      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e08e      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015de:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e086      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 0203 	bic.w	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4943      	ldr	r1, [pc, #268]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001600:	f7ff f840 	bl	8000684 <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff f83c 	bl	8000684 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e06e      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d1eb      	bne.n	8001608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d010      	beq.n	800165e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001648:	429a      	cmp	r2, r3
 800164a:	d208      	bcs.n	800165e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	492b      	ldr	r1, [pc, #172]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165e:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d210      	bcs.n	800168e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 0207 	bic.w	r2, r3, #7
 8001674:	4923      	ldr	r1, [pc, #140]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e036      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4918      	ldr	r1, [pc, #96]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4910      	ldr	r1, [pc, #64]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016cc:	f000 f824 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	490b      	ldr	r1, [pc, #44]	@ (800170c <HAL_RCC_ClockConfig+0x1f4>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80016ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1fc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff77 	bl	80005e4 <HAL_InitTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80016fa:	7afb      	ldrb	r3, [r7, #11]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40022000 	.word	0x40022000
 8001708:	40021000 	.word	0x40021000
 800170c:	08002594 	.word	0x08002594
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b3e      	ldr	r3, [pc, #248]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d121      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11e      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800174c:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001758:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e005      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001774:	4a2b      	ldr	r2, [pc, #172]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d102      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001790:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x110>)
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	e004      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800179c:	4b23      	ldr	r3, [pc, #140]	@ (800182c <HAL_RCC_GetSysClockFreq+0x114>)
 800179e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d134      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0xa6>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d003      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0xac>
 80017bc:	e005      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x110>)
 80017c0:	617b      	str	r3, [r7, #20]
      break;
 80017c2:	e005      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_RCC_GetSysClockFreq+0x114>)
 80017c6:	617b      	str	r3, [r7, #20]
      break;
 80017c8:	e002      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	617b      	str	r3, [r7, #20]
      break;
 80017ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	fb03 f202 	mul.w	r2, r3, r2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	0e5b      	lsrs	r3, r3, #25
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	3301      	adds	r3, #1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001810:	69bb      	ldr	r3, [r7, #24]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	@ 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	080025a4 	.word	0x080025a4
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200

08001830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001848:	f7ff fa26 	bl	8000c98 <HAL_PWREx_GetVoltageRange>
 800184c:	6178      	str	r0, [r7, #20]
 800184e:	e014      	b.n	800187a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	4a24      	ldr	r2, [pc, #144]	@ (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	@ 0x58
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001868:	f7ff fa16 	bl	8000c98 <HAL_PWREx_GetVoltageRange>
 800186c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	4a1d      	ldr	r2, [pc, #116]	@ (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001880:	d10b      	bne.n	800189a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b80      	cmp	r3, #128	@ 0x80
 8001886:	d919      	bls.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2ba0      	cmp	r3, #160	@ 0xa0
 800188c:	d902      	bls.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800188e:	2302      	movs	r3, #2
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e013      	b.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001894:	2301      	movs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e010      	b.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b80      	cmp	r3, #128	@ 0x80
 800189e:	d902      	bls.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018a0:	2303      	movs	r3, #3
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e00a      	b.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b80      	cmp	r3, #128	@ 0x80
 80018aa:	d102      	bne.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018ac:	2302      	movs	r3, #2
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e004      	b.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b70      	cmp	r3, #112	@ 0x70
 80018b6:	d101      	bne.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018b8:	2301      	movs	r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 0207 	bic.w	r2, r3, #7
 80018c4:	4909      	ldr	r1, [pc, #36]	@ (80018ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018cc:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80018f8:	2300      	movs	r3, #0
 80018fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018fc:	2300      	movs	r3, #0
 80018fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001908:	2b00      	cmp	r3, #0
 800190a:	d041      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001910:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001914:	d02a      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001916:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800191a:	d824      	bhi.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800191c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001920:	d008      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001926:	d81e      	bhi.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00a      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800192c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001930:	d010      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001932:	e018      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001934:	4b86      	ldr	r3, [pc, #536]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a85      	ldr	r2, [pc, #532]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001940:	e015      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f000 facb 	bl	8001ee4 <RCCEx_PLLSAI1_Config>
 800194e:	4603      	mov	r3, r0
 8001950:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001952:	e00c      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3320      	adds	r3, #32
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fbb6 	bl	80020cc <RCCEx_PLLSAI2_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001964:	e003      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	74fb      	strb	r3, [r7, #19]
      break;
 800196a:	e000      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800196c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10b      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001974:	4b76      	ldr	r3, [pc, #472]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001982:	4973      	ldr	r1, [pc, #460]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001984:	4313      	orrs	r3, r2
 8001986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800198a:	e001      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d041      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80019a4:	d02a      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80019a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80019aa:	d824      	bhi.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019b0:	d008      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80019b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019b6:	d81e      	bhi.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00a      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c0:	d010      	beq.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019c2:	e018      	b.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019c4:	4b62      	ldr	r3, [pc, #392]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a61      	ldr	r2, [pc, #388]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019d0:	e015      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fa83 	bl	8001ee4 <RCCEx_PLLSAI1_Config>
 80019de:	4603      	mov	r3, r0
 80019e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019e2:	e00c      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3320      	adds	r3, #32
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fb6e 	bl	80020cc <RCCEx_PLLSAI2_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019f4:	e003      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	74fb      	strb	r3, [r7, #19]
      break;
 80019fa:	e000      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80019fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019fe:	7cfb      	ldrb	r3, [r7, #19]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10b      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a04:	4b52      	ldr	r3, [pc, #328]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a12:	494f      	ldr	r1, [pc, #316]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001a1a:	e001      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a0 	beq.w	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a32:	4b47      	ldr	r3, [pc, #284]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001a42:	2300      	movs	r3, #0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	4b41      	ldr	r3, [pc, #260]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	4a40      	ldr	r2, [pc, #256]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a54:	4b3e      	ldr	r3, [pc, #248]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a64:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a3a      	ldr	r2, [pc, #232]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a70:	f7fe fe08 	bl	8000684 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a76:	e009      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a78:	f7fe fe04 	bl	8000684 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d902      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	74fb      	strb	r3, [r7, #19]
        break;
 8001a8a:	e005      	b.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ef      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001a98:	7cfb      	ldrb	r3, [r7, #19]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d15c      	bne.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01f      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d019      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ac6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ac8:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ace:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ae8:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7fe fdc3 	bl	8000684 <HAL_GetTick>
 8001afe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b00:	e00b      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7fe fdbf 	bl	8000684 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d902      	bls.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	74fb      	strb	r3, [r7, #19]
            break;
 8001b18:	e006      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ec      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001b28:	7cfb      	ldrb	r3, [r7, #19]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b3e:	4904      	ldr	r1, [pc, #16]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001b46:	e009      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b48:	7cfb      	ldrb	r3, [r7, #19]
 8001b4a:	74bb      	strb	r3, [r7, #18]
 8001b4c:	e006      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b58:	7cfb      	ldrb	r3, [r7, #19]
 8001b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5c:	7c7b      	ldrb	r3, [r7, #17]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d105      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b9e      	ldr	r3, [pc, #632]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	4a9d      	ldr	r2, [pc, #628]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b7a:	4b98      	ldr	r3, [pc, #608]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b80:	f023 0203 	bic.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	4994      	ldr	r1, [pc, #592]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	f023 020c 	bic.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001baa:	498c      	ldr	r1, [pc, #560]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bbe:	4b87      	ldr	r3, [pc, #540]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4983      	ldr	r1, [pc, #524]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001be0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	497b      	ldr	r1, [pc, #492]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c02:	4b76      	ldr	r3, [pc, #472]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c10:	4972      	ldr	r1, [pc, #456]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c24:	4b6d      	ldr	r3, [pc, #436]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	496a      	ldr	r1, [pc, #424]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c46:	4b65      	ldr	r3, [pc, #404]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	4961      	ldr	r1, [pc, #388]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c68:	4b5c      	ldr	r3, [pc, #368]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	4959      	ldr	r1, [pc, #356]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c98:	4950      	ldr	r1, [pc, #320]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cac:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cba:	4948      	ldr	r1, [pc, #288]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cce:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	493f      	ldr	r1, [pc, #252]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d028      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cfe:	4937      	ldr	r1, [pc, #220]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d10:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a31      	ldr	r2, [pc, #196]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d1a:	60d3      	str	r3, [r2, #12]
 8001d1c:	e011      	b.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f8d8 	bl	8001ee4 <RCCEx_PLLSAI1_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001d3e:	7cfb      	ldrb	r3, [r7, #19]
 8001d40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d028      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d4e:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5c:	491f      	ldr	r1, [pc, #124]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d78:	60d3      	str	r3, [r2, #12]
 8001d7a:	e011      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f8a9 	bl	8001ee4 <RCCEx_PLLSAI1_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02b      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dca:	d109      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a02      	ldr	r2, [pc, #8]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	60d3      	str	r3, [r2, #12]
 8001dd8:	e014      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f877 	bl	8001ee4 <RCCEx_PLLSAI1_Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001e00:	7cfb      	ldrb	r3, [r7, #19]
 8001e02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d02f      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e1e:	4928      	ldr	r1, [pc, #160]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	2102      	movs	r1, #2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f854 	bl	8001ee4 <RCCEx_PLLSAI1_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d014      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	74bb      	strb	r3, [r7, #18]
 8001e4a:	e011      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3320      	adds	r3, #32
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f935 	bl	80020cc <RCCEx_PLLSAI2_Config>
 8001e62:	4603      	mov	r3, r0
 8001e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e8a:	490d      	ldr	r1, [pc, #52]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eae:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001eb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ef2:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d018      	beq.n	8001f30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001efe:	4b72      	ldr	r3, [pc, #456]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0203 	and.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d10d      	bne.n	8001f2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
       ||
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f16:	4b6c      	ldr	r3, [pc, #432]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
       ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d047      	beq.n	8001fba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e044      	b.n	8001fba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d018      	beq.n	8001f6a <RCCEx_PLLSAI1_Config+0x86>
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d825      	bhi.n	8001f88 <RCCEx_PLLSAI1_Config+0xa4>
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d002      	beq.n	8001f46 <RCCEx_PLLSAI1_Config+0x62>
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d009      	beq.n	8001f58 <RCCEx_PLLSAI1_Config+0x74>
 8001f44:	e020      	b.n	8001f88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f46:	4b60      	ldr	r3, [pc, #384]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d11d      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f56:	e01a      	b.n	8001f8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f58:	4b5b      	ldr	r3, [pc, #364]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d116      	bne.n	8001f92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f68:	e013      	b.n	8001f92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f6a:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f86:	e006      	b.n	8001f96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8c:	e004      	b.n	8001f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e002      	b.n	8001f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f92:	bf00      	nop
 8001f94:	e000      	b.n	8001f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f96:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	4944      	ldr	r1, [pc, #272]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d17d      	bne.n	80020bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001fc0:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a40      	ldr	r2, [pc, #256]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fb5a 	bl	8000684 <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fd2:	e009      	b.n	8001fe8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fd4:	f7fe fb56 	bl	8000684 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d902      	bls.n	8001fe8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8001fe6:	e005      	b.n	8001ff4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fe8:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ef      	bne.n	8001fd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d160      	bne.n	80020bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002000:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6892      	ldr	r2, [r2, #8]
 8002010:	0211      	lsls	r1, r2, #8
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	0912      	lsrs	r2, r2, #4
 8002018:	0452      	lsls	r2, r2, #17
 800201a:	430a      	orrs	r2, r1
 800201c:	492a      	ldr	r1, [pc, #168]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	610b      	str	r3, [r1, #16]
 8002022:	e027      	b.n	8002074 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d112      	bne.n	8002050 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800202a:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002032:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6892      	ldr	r2, [r2, #8]
 800203a:	0211      	lsls	r1, r2, #8
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6912      	ldr	r2, [r2, #16]
 8002040:	0852      	lsrs	r2, r2, #1
 8002042:	3a01      	subs	r2, #1
 8002044:	0552      	lsls	r2, r2, #21
 8002046:	430a      	orrs	r2, r1
 8002048:	491f      	ldr	r1, [pc, #124]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	610b      	str	r3, [r1, #16]
 800204e:	e011      	b.n	8002074 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002058:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6892      	ldr	r2, [r2, #8]
 8002060:	0211      	lsls	r1, r2, #8
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6952      	ldr	r2, [r2, #20]
 8002066:	0852      	lsrs	r2, r2, #1
 8002068:	3a01      	subs	r2, #1
 800206a:	0652      	lsls	r2, r2, #25
 800206c:	430a      	orrs	r2, r1
 800206e:	4916      	ldr	r1, [pc, #88]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a13      	ldr	r2, [pc, #76]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800207a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800207e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe fb00 	bl	8000684 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002086:	e009      	b.n	800209c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002088:	f7fe fafc 	bl	8000684 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d902      	bls.n	800209c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	73fb      	strb	r3, [r7, #15]
          break;
 800209a:	e005      	b.n	80020a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	4904      	ldr	r1, [pc, #16]	@ (80020c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020da:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d018      	beq.n	8002118 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10d      	bne.n	8002112 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
       ||
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
       ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d047      	beq.n	80021a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e044      	b.n	80021a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d018      	beq.n	8002152 <RCCEx_PLLSAI2_Config+0x86>
 8002120:	2b03      	cmp	r3, #3
 8002122:	d825      	bhi.n	8002170 <RCCEx_PLLSAI2_Config+0xa4>
 8002124:	2b01      	cmp	r3, #1
 8002126:	d002      	beq.n	800212e <RCCEx_PLLSAI2_Config+0x62>
 8002128:	2b02      	cmp	r3, #2
 800212a:	d009      	beq.n	8002140 <RCCEx_PLLSAI2_Config+0x74>
 800212c:	e020      	b.n	8002170 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800212e:	4b55      	ldr	r3, [pc, #340]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11d      	bne.n	8002176 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213e:	e01a      	b.n	8002176 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002140:	4b50      	ldr	r3, [pc, #320]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d116      	bne.n	800217a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e013      	b.n	800217a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002152:	4b4c      	ldr	r3, [pc, #304]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10f      	bne.n	800217e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800215e:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800216e:	e006      	b.n	800217e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e004      	b.n	8002180 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002176:	bf00      	nop
 8002178:	e002      	b.n	8002180 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800217e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002186:	4b3f      	ldr	r3, [pc, #252]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	430b      	orrs	r3, r1
 800219c:	4939      	ldr	r1, [pc, #228]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d167      	bne.n	8002278 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a35      	ldr	r2, [pc, #212]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b4:	f7fe fa66 	bl	8000684 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021ba:	e009      	b.n	80021d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021bc:	f7fe fa62 	bl	8000684 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	73fb      	strb	r3, [r7, #15]
        break;
 80021ce:	e005      	b.n	80021dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ef      	bne.n	80021bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d14a      	bne.n	8002278 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021e8:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80021f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6892      	ldr	r2, [r2, #8]
 80021f8:	0211      	lsls	r1, r2, #8
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68d2      	ldr	r2, [r2, #12]
 80021fe:	0912      	lsrs	r2, r2, #4
 8002200:	0452      	lsls	r2, r2, #17
 8002202:	430a      	orrs	r2, r1
 8002204:	491f      	ldr	r1, [pc, #124]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002206:	4313      	orrs	r3, r2
 8002208:	614b      	str	r3, [r1, #20]
 800220a:	e011      	b.n	8002230 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002214:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6892      	ldr	r2, [r2, #8]
 800221c:	0211      	lsls	r1, r2, #8
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6912      	ldr	r2, [r2, #16]
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	3a01      	subs	r2, #1
 8002226:	0652      	lsls	r2, r2, #25
 8002228:	430a      	orrs	r2, r1
 800222a:	4916      	ldr	r1, [pc, #88]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a13      	ldr	r2, [pc, #76]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7fe fa22 	bl	8000684 <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002242:	e009      	b.n	8002258 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002244:	f7fe fa1e 	bl	8000684 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d902      	bls.n	8002258 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	73fb      	strb	r3, [r7, #15]
          break;
 8002256:	e005      	b.n	8002264 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ef      	beq.n	8002244 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4904      	ldr	r1, [pc, #16]	@ (8002284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002274:	4313      	orrs	r3, r2
 8002276:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d079      	beq.n	800238e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe f8d0 	bl	8000454 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d058      	beq.n	800237c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	22ca      	movs	r2, #202	@ 0xca
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2253      	movs	r2, #83	@ 0x53
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f880 	bl	80023e0 <RTC_EnterInitMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d127      	bne.n	800233a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80022f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022fc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68d2      	ldr	r2, [r2, #12]
 8002324:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6919      	ldr	r1, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f884 	bl	8002448 <RTC_ExitInitMode>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d113      	bne.n	8002372 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0203 	bic.w	r2, r2, #3
 8002358:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24
 800237a:	e001      	b.n	8002380 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_RTC_WaitForSynchro+0x44>)
 80023a6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80023a8:	f7fe f96c 	bl	8000684 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023ae:	e009      	b.n	80023c4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023b0:	f7fe f968 	bl	8000684 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023be:	d901      	bls.n	80023c4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e007      	b.n	80023d4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ee      	beq.n	80023b0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0003ff5f 	.word	0x0003ff5f

080023e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d120      	bne.n	800243c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002402:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002404:	f7fe f93e 	bl	8000684 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800240a:	e00d      	b.n	8002428 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800240c:	f7fe f93a 	bl	8000684 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800241a:	d905      	bls.n	8002428 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2203      	movs	r2, #3
 8002424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <RTC_EnterInitMode+0x5c>
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d1e7      	bne.n	800240c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002454:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a19      	ldr	r2, [pc, #100]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 800245a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800245e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002460:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10c      	bne.n	8002486 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff93 	bl	8002398 <HAL_RTC_WaitForSynchro>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01e      	beq.n	80024b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e017      	b.n	80024b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 800248c:	f023 0320 	bic.w	r3, r3, #32
 8002490:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff80 	bl	8002398 <HAL_RTC_WaitForSynchro>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024aa:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <RTC_ExitInitMode+0x78>)
 80024b0:	f043 0320 	orr.w	r3, r3, #32
 80024b4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40002800 	.word	0x40002800

080024c4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80024ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024d2:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024f2:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f80b 	bl	8002510 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <memset>:
 8002524:	4402      	add	r2, r0
 8002526:	4603      	mov	r3, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4d0d      	ldr	r5, [pc, #52]	@ (800256c <__libc_init_array+0x38>)
 8002538:	4c0d      	ldr	r4, [pc, #52]	@ (8002570 <__libc_init_array+0x3c>)
 800253a:	1b64      	subs	r4, r4, r5
 800253c:	10a4      	asrs	r4, r4, #2
 800253e:	2600      	movs	r6, #0
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	4d0b      	ldr	r5, [pc, #44]	@ (8002574 <__libc_init_array+0x40>)
 8002546:	4c0c      	ldr	r4, [pc, #48]	@ (8002578 <__libc_init_array+0x44>)
 8002548:	f000 f818 	bl	800257c <_init>
 800254c:	1b64      	subs	r4, r4, r5
 800254e:	10a4      	asrs	r4, r4, #2
 8002550:	2600      	movs	r6, #0
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080025d4 	.word	0x080025d4
 8002570:	080025d4 	.word	0x080025d4
 8002574:	080025d4 	.word	0x080025d4
 8002578:	080025d8 	.word	0x080025d8

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
