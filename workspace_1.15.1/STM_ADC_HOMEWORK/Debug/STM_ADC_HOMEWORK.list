
STM_ADC_HOMEWORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800ad08  0800ad08  0000bd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0c0  0800b0c0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0c0  0800b0c0  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0c8  0800b0c8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0c8  0800b0c8  0000c0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0cc  0800b0cc  0000c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b0d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d4  0800b2a4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800b2a4  0000d558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185c9  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c9  00000000  00000000  000257cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00028998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116b  00000000  00000000  0002a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a86d  00000000  00000000  0002b173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198a5  00000000  00000000  000559e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c041  00000000  00000000  0006f285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b2c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007004  00000000  00000000  0017b30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00182310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acf0 	.word	0x0800acf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800acf0 	.word	0x0800acf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <__io_putchar>:
/* USER CODE BEGIN 0 */

volatile uint32_t adc_value = 0;

int __io_putchar(int ch)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d102      	bne.n	8000eac <__io_putchar+0x14>
	{
		__io_putchar('\r');
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff fff6 	bl	8000e98 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1 , HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <__io_putchar+0x2c>)
 8000eb6:	f006 f9d1 	bl	800725c <HAL_UART_Transmit>
	return 1;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000374 	.word	0x20000374

08000ec8 <HAL_ADC_ConvCpltCallback>:


volatile uint32_t adc_value_pot = 0;
volatile uint32_t adc_value_ldr = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x94>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d13c      	bne.n	8000f54 <HAL_ADC_ConvCpltCallback+0x8c>
		adc_value_pot = HAL_ADC_GetValue(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f001 fcf4 	bl	80028c8 <HAL_ADC_GetValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x98>)
 8000ee4:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc1);
 8000ee6:	481f      	ldr	r0, [pc, #124]	@ (8000f64 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000ee8:	f001 fa2e 	bl	8002348 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK);
 8000eec:	bf00      	nop
 8000eee:	2164      	movs	r1, #100	@ 0x64
 8000ef0:	481c      	ldr	r0, [pc, #112]	@ (8000f64 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000ef2:	f001 fae3 	bl	80024bc <HAL_ADC_PollForConversion>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f8      	bne.n	8000eee <HAL_ADC_ConvCpltCallback+0x26>
		adc_value_ldr = HAL_ADC_GetValue(hadc);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f001 fce3 	bl	80028c8 <HAL_ADC_GetValue>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f06:	6013      	str	r3, [r2, #0]

		uint32_t frequency = 100 + (adc_value_pot * 4000 / 4096);
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	0b1b      	lsrs	r3, r3, #12
 8000f16:	3364      	adds	r3, #100	@ 0x64
 8000f18:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, frequency);
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	60d3      	str	r3, [r2, #12]

		uint32_t pwm_value = (adc_value_ldr * 1000) / 4095;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f30:	fb03 f202 	mul.w	r2, r3, r2
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000f36:	fba3 1302 	umull	r1, r3, r3, r2
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	0852      	lsrs	r2, r2, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	0adb      	lsrs	r3, r3, #11
 8000f42:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_value);
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_value);
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	50040000 	.word	0x50040000
 8000f60:	200003fc 	.word	0x200003fc
 8000f64:	200001f0 	.word	0x200001f0
 8000f68:	20000400 	.word	0x20000400
 8000f6c:	20000328 	.word	0x20000328
 8000f70:	00100101 	.word	0x00100101

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 fe07 	bl	8001b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f822 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fa3e 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f84:	f000 fa1e 	bl	80013c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f88:	f000 f86e 	bl	8001068 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 f9ea 	bl	8001364 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f90:	f000 f940 	bl	8001214 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f94:	f000 f98c 	bl	80012b0 <MX_TIM3_Init>
  MX_COMP1_Init();
 8000f98:	f000 f8de 	bl	8001158 <MX_COMP1_Init>
  MX_DAC1_Init();
 8000f9c:	f000 f908 	bl	80011b0 <MX_DAC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_IT(&hadc1);
 8000fa0:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <main+0x48>)
 8000fa2:	f001 fb63 	bl	800266c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <main+0x4c>)
 8000faa:	f005 f809 	bl	8005fc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <main+0x4c>)
 8000fb2:	f005 f805 	bl	8005fc0 <HAL_TIM_PWM_Start>
  while (1)
 8000fb6:	bf00      	nop
 8000fb8:	e7fd      	b.n	8000fb6 <main+0x42>
 8000fba:	bf00      	nop
 8000fbc:	200001f0 	.word	0x200001f0
 8000fc0:	20000328 	.word	0x20000328

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	@ 0x58
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2244      	movs	r2, #68	@ 0x44
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f007 ff6b 	bl	8008eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fea:	f003 fc29 	bl	8004840 <HAL_PWREx_ControlVoltageScaling>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff4:	f000 fa34 	bl	8001460 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800100c:	2301      	movs	r3, #1
 800100e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001014:	2328      	movs	r3, #40	@ 0x28
 8001016:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001018:	2307      	movs	r3, #7
 800101a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fc5f 	bl	80048ec <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001034:	f000 fa14 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2303      	movs	r3, #3
 800103e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	2104      	movs	r1, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f827 	bl	80050a4 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800105c:	f000 fa00 	bl	8001460 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3758      	adds	r7, #88	@ 0x58
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108a:	4b30      	ldr	r3, [pc, #192]	@ (800114c <MX_ADC1_Init+0xe4>)
 800108c:	4a30      	ldr	r2, [pc, #192]	@ (8001150 <MX_ADC1_Init+0xe8>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001090:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <MX_ADC1_Init+0xe4>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <MX_ADC1_Init+0xe4>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <MX_ADC1_Init+0xe4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a8:	4b28      	ldr	r3, [pc, #160]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ec:	4817      	ldr	r0, [pc, #92]	@ (800114c <MX_ADC1_Init+0xe4>)
 80010ee:	f000 ffdb 	bl	80020a8 <HAL_ADC_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010f8:	f000 f9b2 	bl	8001460 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4811      	ldr	r0, [pc, #68]	@ (800114c <MX_ADC1_Init+0xe4>)
 8001108:	f002 faea 	bl	80036e0 <HAL_ADCEx_MultiModeConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001112:	f000 f9a5 	bl	8001460 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_ADC1_Init+0xec>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111a:	2306      	movs	r3, #6
 800111c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800111e:	2307      	movs	r3, #7
 8001120:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001122:	237f      	movs	r3, #127	@ 0x7f
 8001124:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001126:	2304      	movs	r3, #4
 8001128:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <MX_ADC1_Init+0xe4>)
 8001134:	f001 fe04 	bl	8002d40 <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800113e:	f000 f98f 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f0 	.word	0x200001f0
 8001150:	50040000 	.word	0x50040000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_COMP1_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_COMP1_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_COMP1_Init+0x50>)
 8001164:	2240      	movs	r2, #64	@ 0x40
 8001166:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_COMP1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_COMP1_Init+0x50>)
 8001170:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001174:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_COMP1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_COMP1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_COMP1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_COMP1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_COMP1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_COMP1_Init+0x50>)
 8001196:	f002 fbfb 	bl	8003990 <HAL_COMP_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 f95e 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000029c 	.word	0x2000029c
 80011ac:	40010200 	.word	0x40010200

080011b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2224      	movs	r2, #36	@ 0x24
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fe76 	bl	8008eae <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_DAC1_Init+0x5c>)
 80011c4:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_DAC1_Init+0x60>)
 80011c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011c8:	4810      	ldr	r0, [pc, #64]	@ (800120c <MX_DAC1_Init+0x5c>)
 80011ca:	f002 fde4 	bl	8003d96 <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011d4:	f000 f944 	bl	8001460 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_DAC1_Init+0x5c>)
 80011f4:	f002 fe55 	bl	8003ea2 <HAL_DAC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 f92f 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	@ 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002c8 	.word	0x200002c8
 8001210:	40007400 	.word	0x40007400

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_TIM2_Init+0x98>)
 8001234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_TIM2_Init+0x98>)
 800123c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_TIM2_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_TIM2_Init+0x98>)
 800124a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800124e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_TIM2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_TIM2_Init+0x98>)
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125c:	4813      	ldr	r0, [pc, #76]	@ (80012ac <MX_TIM2_Init+0x98>)
 800125e:	f004 fe01 	bl	8005e64 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 f8fa 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	@ (80012ac <MX_TIM2_Init+0x98>)
 800127a:	f005 f9c3 	bl	8006604 <HAL_TIM_ConfigClockSource>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001284:	f000 f8ec 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_TIM2_Init+0x98>)
 8001296:	f005 feed 	bl	8007074 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012a0:	f000 f8de 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200002dc 	.word	0x200002dc

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <MX_TIM3_Init+0xac>)
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <MX_TIM3_Init+0xb0>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_TIM3_Init+0xac>)
 80012dc:	224f      	movs	r2, #79	@ 0x4f
 80012de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_TIM3_Init+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM3_Init+0xac>)
 80012e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_TIM3_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_TIM3_Init+0xac>)
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fa:	4818      	ldr	r0, [pc, #96]	@ (800135c <MX_TIM3_Init+0xac>)
 80012fc:	f004 fe09 	bl	8005f12 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001306:	f000 f8ab 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4810      	ldr	r0, [pc, #64]	@ (800135c <MX_TIM3_Init+0xac>)
 800131a:	f005 feab 	bl	8007074 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001324:	f000 f89c 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	@ 0x60
 800132a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	@ (800135c <MX_TIM3_Init+0xac>)
 8001340:	f005 f84c 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800134a:	f000 f889 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <MX_TIM3_Init+0xac>)
 8001350:	f000 fa12 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	@ 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000328 	.word	0x20000328
 8001360:	40000400 	.word	0x40000400

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800136a:	4a15      	ldr	r2, [pc, #84]	@ (80013c0 <MX_USART2_UART_Init+0x5c>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 80013a8:	f005 ff0a 	bl	80071c0 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013b2:	f000 f855 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000374 	.word	0x20000374
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_DMA_Init+0x38>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ce:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <MX_DMA_Init+0x38>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_DMA_Init+0x38>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	200b      	movs	r0, #11
 80013e8:	f002 fc9f 	bl	8003d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013ec:	200b      	movs	r0, #11
 80013ee:	f002 fcb8 	bl	8003d62 <HAL_NVIC_EnableIRQ>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_GPIO_Init+0x5c>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a14      	ldr	r2, [pc, #80]	@ (800145c <MX_GPIO_Init+0x5c>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_GPIO_Init+0x5c>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_GPIO_Init+0x5c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <MX_GPIO_Init+0x5c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_GPIO_Init+0x5c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_GPIO_Init+0x5c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <MX_GPIO_Init+0x5c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_GPIO_Init+0x5c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_MspInit+0x44>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	@ 0x60
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_MspInit+0x44>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ac      	sub	sp, #176	@ 0xb0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2288      	movs	r2, #136	@ 0x88
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f007 fcea 	bl	8008eae <memset>
  if(hadc->Instance==ADC1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a40      	ldr	r2, [pc, #256]	@ (80015e0 <HAL_ADC_MspInit+0x12c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d179      	bne.n	80015d8 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80014fa:	2310      	movs	r3, #16
 80014fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014fe:	2307      	movs	r3, #7
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800150a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f003 ffe9 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001520:	f7ff ff9e 	bl	8001460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001524:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_ADC_MspInit+0x130>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a2e      	ldr	r2, [pc, #184]	@ (80015e4 <HAL_ADC_MspInit+0x130>)
 800152a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <HAL_ADC_MspInit+0x130>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <HAL_ADC_MspInit+0x130>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	4a28      	ldr	r2, [pc, #160]	@ (80015e4 <HAL_ADC_MspInit+0x130>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_ADC_MspInit+0x130>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001554:	2303      	movs	r3, #3
 8001556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800155a:	230b      	movs	r3, #11
 800155c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800156a:	4619      	mov	r1, r3
 800156c:	481e      	ldr	r0, [pc, #120]	@ (80015e8 <HAL_ADC_MspInit+0x134>)
 800156e:	f002 ffaf 	bl	80044d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 8001574:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 8001576:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 8001592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001596:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 800159a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 80015a2:	2220      	movs	r2, #32
 80015a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 80015ae:	f002 fda9 	bl	8004104 <HAL_DMA_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80015b8:	f7ff ff52 	bl	8001460 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a0b      	ldr	r2, [pc, #44]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 80015c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2103      	movs	r1, #3
 80015cc:	2012      	movs	r0, #18
 80015ce:	f002 fbac 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015d2:	2012      	movs	r0, #18
 80015d4:	f002 fbc5 	bl	8003d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	37b0      	adds	r7, #176	@ 0xb0
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	50040000 	.word	0x50040000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000800 	.word	0x48000800
 80015ec:	20000254 	.word	0x20000254
 80015f0:	40020008 	.word	0x40020008

080015f4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <HAL_COMP_MspInit+0x94>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d133      	bne.n	800167e <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_COMP_MspInit+0x98>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	4a1c      	ldr	r2, [pc, #112]	@ (800168c <HAL_COMP_MspInit+0x98>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_COMP_MspInit+0x98>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_COMP_MspInit+0x98>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	4a16      	ldr	r2, [pc, #88]	@ (800168c <HAL_COMP_MspInit+0x98>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_COMP_MspInit+0x98>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PC5     ------> COMP1_INP
    PB0     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001646:	2320      	movs	r3, #32
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480d      	ldr	r0, [pc, #52]	@ (8001690 <HAL_COMP_MspInit+0x9c>)
 800165a:	f002 ff39 	bl	80044d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COMP1_OUT_Pin;
 800165e:	2301      	movs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP1;
 800166e:	230c      	movs	r3, #12
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(COMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4806      	ldr	r0, [pc, #24]	@ (8001694 <HAL_COMP_MspInit+0xa0>)
 800167a:	f002 ff29 	bl	80044d0 <HAL_GPIO_Init>

  /* USER CODE END COMP1_MspInit 1 */

  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	@ 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40010200 	.word	0x40010200
 800168c:	40021000 	.word	0x40021000
 8001690:	48000800 	.word	0x48000800
 8001694:	48000400 	.word	0x48000400

08001698 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_DAC_MspInit+0x44>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <HAL_DAC_MspInit+0x48>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <HAL_DAC_MspInit+0x48>)
 80016b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b6:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <HAL_DAC_MspInit+0x48>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2102      	movs	r1, #2
 80016c6:	2036      	movs	r0, #54	@ 0x36
 80016c8:	f002 fb2f 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016cc:	2036      	movs	r0, #54	@ 0x36
 80016ce:	f002 fb48 	bl	8003d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40007400 	.word	0x40007400
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2107      	movs	r1, #7
 8001712:	201c      	movs	r0, #28
 8001714:	f002 fb09 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001718:	201c      	movs	r0, #28
 800171a:	f002 fb22 	bl	8003d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <HAL_TIM_PWM_MspInit+0x44>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d113      	bne.n	8001766 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_TIM_PWM_MspInit+0x48>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <HAL_TIM_PWM_MspInit+0x48>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_TIM_PWM_MspInit+0x48>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2107      	movs	r1, #7
 800175a:	201d      	movs	r0, #29
 800175c:	f002 fae5 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001760:	201d      	movs	r0, #29
 8001762:	f002 fafe 	bl	8003d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40000400 	.word	0x40000400
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <HAL_TIM_MspPostInit+0x64>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11b      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b2:	2340      	movs	r3, #64	@ 0x40
 80017b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <HAL_TIM_MspPostInit+0x6c>)
 80017ce:	f002 fe7f 	bl	80044d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40000400 	.word	0x40000400
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000800 	.word	0x48000800

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ac      	sub	sp, #176	@ 0xb0
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2288      	movs	r2, #136	@ 0x88
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f007 fb50 	bl	8008eae <memset>
  if(huart->Instance==USART2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a25      	ldr	r2, [pc, #148]	@ (80018a8 <HAL_UART_MspInit+0xc0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d143      	bne.n	80018a0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001818:	2302      	movs	r3, #2
 800181a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800181c:	2300      	movs	r3, #0
 800181e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f003 fe61 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001830:	f7ff fe16 	bl	8001460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_UART_MspInit+0xc4>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <HAL_UART_MspInit+0xc4>)
 800183a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001840:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_UART_MspInit+0xc4>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_UART_MspInit+0xc4>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <HAL_UART_MspInit+0xc4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_UART_MspInit+0xc4>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001864:	230c      	movs	r3, #12
 8001866:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800187c:	2307      	movs	r3, #7
 800187e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188c:	f002 fe20 	bl	80044d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	210a      	movs	r1, #10
 8001894:	2026      	movs	r0, #38	@ 0x26
 8001896:	f002 fa48 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800189a:	2026      	movs	r0, #38	@ 0x26
 800189c:	f002 fa61 	bl	8003d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80018a0:	bf00      	nop
 80018a2:	37b0      	adds	r7, #176	@ 0xb0
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40004400 	.word	0x40004400
 80018ac:	40021000 	.word	0x40021000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <NMI_Handler+0x4>

080018b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <MemManage_Handler+0x4>

080018c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 f995 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <DMA1_Channel1_IRQHandler+0x10>)
 8001916:	f002 fd2c 	bl	8004372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000254 	.word	0x20000254

08001924 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <ADC1_2_IRQHandler+0x10>)
 800192a:	f000 ffdb 	bl	80028e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001f0 	.word	0x200001f0

08001938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <TIM2_IRQHandler+0x10>)
 800193e:	f004 fc45 	bl	80061cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002dc 	.word	0x200002dc

0800194c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <TIM3_IRQHandler+0x10>)
 8001952:	f004 fc3b 	bl	80061cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000328 	.word	0x20000328

08001960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <USART2_IRQHandler+0x10>)
 8001966:	f005 fd03 	bl	8007370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000374 	.word	0x20000374

08001974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <TIM6_DAC_IRQHandler+0x10>)
 800197a:	f002 fa2e 	bl	8003dda <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002c8 	.word	0x200002c8

08001988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_kill>:

int _kill(int pid, int sig)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a2:	f007 fad7 	bl	8008f54 <__errno>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2216      	movs	r2, #22
 80019aa:	601a      	str	r2, [r3, #0]
  return -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_exit>:

void _exit (int status)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffe7 	bl	8001998 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <_exit+0x12>

080019ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e00a      	b.n	80019f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e0:	f3af 8000 	nop.w
 80019e4:	4601      	mov	r1, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	60ba      	str	r2, [r7, #8]
 80019ec:	b2ca      	uxtb	r2, r1
 80019ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbf0      	blt.n	80019e0 <_read+0x12>
  }

  return len;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e009      	b.n	8001a2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	60ba      	str	r2, [r7, #8]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa38 	bl	8000e98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf1      	blt.n	8001a1a <_write+0x12>
  }
  return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_close>:

int _close(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a68:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_isatty>:

int _isatty(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f007 fa3c 	bl	8008f54 <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20018000 	.word	0x20018000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	20000404 	.word	0x20000404
 8001b10:	20000558 	.word	0x20000558

08001b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b3c:	f7ff ffea 	bl	8001b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	@ (8001b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <LoopForever+0xe>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	@ (8001b84 <LoopForever+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b66:	f007 f9fb 	bl	8008f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6a:	f7ff fa03 	bl	8000f74 <main>

08001b6e <LoopForever>:

LoopForever:
    b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b7c:	0800b0d0 	.word	0x0800b0d0
  ldr r2, =_sbss
 8001b80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b84:	20000558 	.word	0x20000558

08001b88 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC3_IRQHandler>

08001b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f002 f8bd 	bl	8003d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f80e 	bl	8001bbc <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	e001      	b.n	8001bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bac:	f7ff fc5e 	bl	800146c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_InitTick+0x70>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_InitTick+0x6c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 f8c9 	bl	8003d7e <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d809      	bhi.n	8001c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f002 f893 	bl	8003d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <HAL_InitTick+0x74>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e004      	b.n	8001c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e001      	b.n	8001c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000408 	.word	0x20000408

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000408 	.word	0x20000408

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3360      	adds	r3, #96	@ 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <LL_ADC_SetOffset+0x44>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	03fff000 	.word	0x03fff000

08001d6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3360      	adds	r3, #96	@ 0x60
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3360      	adds	r3, #96	@ 0x60
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3330      	adds	r3, #48	@ 0x30
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	211f      	movs	r1, #31
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	f003 011f 	and.w	r1, r3, #31
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b087      	sub	sp, #28
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3314      	adds	r3, #20
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	0e5b      	lsrs	r3, r3, #25
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0d1b      	lsrs	r3, r3, #20
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2107      	movs	r1, #7
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0d1b      	lsrs	r3, r3, #20
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0007ffff 	.word	0x0007ffff

08001f10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6093      	str	r3, [r2, #8]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f80:	d101      	bne.n	8001f86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <LL_ADC_IsEnabled+0x18>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_ADC_IsEnabled+0x1a>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002042:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002046:	f043 0204 	orr.w	r2, r3, #4
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d101      	bne.n	8002072 <LL_ADC_REG_IsConversionOngoing+0x18>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b08      	cmp	r3, #8
 8002092:	d101      	bne.n	8002098 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e130      	b.n	8002324 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff f9ef 	bl	80014b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff3f 	bl	8001f6c <LL_ADC_IsDeepPowerDownEnabled>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff25 	bl	8001f48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff5a 	bl	8001fbc <LL_ADC_IsInternalRegulatorEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff3e 	bl	8001f94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002118:	4b84      	ldr	r3, [pc, #528]	@ (800232c <HAL_ADC_Init+0x284>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	4a84      	ldr	r2, [pc, #528]	@ (8002330 <HAL_ADC_Init+0x288>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	3301      	adds	r3, #1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800212c:	e002      	b.n	8002134 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3b01      	subs	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff3c 	bl	8001fbc <LL_ADC_IsInternalRegulatorEnabled>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10d      	bne.n	8002166 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	f043 0210 	orr.w	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff75 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 8002170:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 80c9 	bne.w	8002312 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80c5 	bne.w	8002312 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002190:	f043 0202 	orr.w	r2, r3, #2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff35 	bl	800200c <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d115      	bne.n	80021d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a8:	4862      	ldr	r0, [pc, #392]	@ (8002334 <HAL_ADC_Init+0x28c>)
 80021aa:	f7ff ff2f 	bl	800200c <LL_ADC_IsEnabled>
 80021ae:	4604      	mov	r4, r0
 80021b0:	4861      	ldr	r0, [pc, #388]	@ (8002338 <HAL_ADC_Init+0x290>)
 80021b2:	f7ff ff2b 	bl	800200c <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	431c      	orrs	r4, r3
 80021ba:	4860      	ldr	r0, [pc, #384]	@ (800233c <HAL_ADC_Init+0x294>)
 80021bc:	f7ff ff26 	bl	800200c <LL_ADC_IsEnabled>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4323      	orrs	r3, r4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4619      	mov	r1, r3
 80021ce:	485c      	ldr	r0, [pc, #368]	@ (8002340 <HAL_ADC_Init+0x298>)
 80021d0:	f7ff fd74 	bl	8001cbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e5b      	ldrb	r3, [r3, #25]
 80021d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d106      	bne.n	8002210 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	3b01      	subs	r3, #1
 8002208:	045b      	lsls	r3, r3, #17
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4b44      	ldr	r3, [pc, #272]	@ (8002344 <HAL_ADC_Init+0x29c>)
 8002234:	4013      	ands	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	430b      	orrs	r3, r1
 800223e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff1b 	bl	8002080 <LL_ADC_INJ_IsConversionOngoing>
 800224a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13d      	bne.n	80022ce <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d13a      	bne.n	80022ce <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800225c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002264:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	69b9      	ldr	r1, [r7, #24]
 800227e:	430b      	orrs	r3, r1
 8002280:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002288:	2b01      	cmp	r3, #1
 800228a:	d118      	bne.n	80022be <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022ae:	430a      	orrs	r2, r1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	e007      	b.n	80022ce <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10c      	bne.n	80022f0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	f023 010f 	bic.w	r1, r3, #15
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ee:	e007      	b.n	8002300 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 020f 	bic.w	r2, r2, #15
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f023 0303 	bic.w	r3, r3, #3
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002310:	e007      	b.n	8002322 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002322:	7ffb      	ldrb	r3, [r7, #31]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3724      	adds	r7, #36	@ 0x24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}
 800232c:	20000000 	.word	0x20000000
 8002330:	053e2d63 	.word	0x053e2d63
 8002334:	50040000 	.word	0x50040000
 8002338:	50040100 	.word	0x50040100
 800233c:	50040200 	.word	0x50040200
 8002340:	50040300 	.word	0x50040300
 8002344:	fff0c007 	.word	0xfff0c007

08002348 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002350:	4857      	ldr	r0, [pc, #348]	@ (80024b0 <HAL_ADC_Start+0x168>)
 8002352:	f7ff fddd 	bl	8001f10 <LL_ADC_GetMultimode>
 8002356:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe7c 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 809c 	bne.w	80024a2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_ADC_Start+0x30>
 8002374:	2302      	movs	r3, #2
 8002376:	e097      	b.n	80024a8 <HAL_ADC_Start+0x160>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f001 f8cf 	bl	8003524 <ADC_Enable>
 8002386:	4603      	mov	r3, r0
 8002388:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 8083 	bne.w	8002498 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a42      	ldr	r2, [pc, #264]	@ (80024b4 <HAL_ADC_Start+0x16c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_Start+0x6e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_Start+0x70>
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <HAL_ADC_Start+0x170>)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d002      	beq.n	80023c6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023de:	d106      	bne.n	80023ee <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	f023 0206 	bic.w	r2, r3, #6
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	221c      	movs	r2, #28
 80023fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <HAL_ADC_Start+0x16c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d002      	beq.n	8002414 <HAL_ADC_Start+0xcc>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e000      	b.n	8002416 <HAL_ADC_Start+0xce>
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_ADC_Start+0x170>)
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4293      	cmp	r3, r2
 800241c:	d008      	beq.n	8002430 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d002      	beq.n	8002430 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d114      	bne.n	800245a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002446:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fded 	bl	8002032 <LL_ADC_REG_StartConversion>
 8002458:	e025      	b.n	80024a6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_ADC_Start+0x16c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d002      	beq.n	8002476 <HAL_ADC_Start+0x12e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e000      	b.n	8002478 <HAL_ADC_Start+0x130>
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_ADC_Start+0x170>)
 8002478:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00f      	beq.n	80024a6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800248e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
 8002496:	e006      	b.n	80024a6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024a0:	e001      	b.n	80024a6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	50040300 	.word	0x50040300
 80024b4:	50040100 	.word	0x50040100
 80024b8:	50040000 	.word	0x50040000

080024bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c6:	4866      	ldr	r0, [pc, #408]	@ (8002660 <HAL_ADC_PollForConversion+0x1a4>)
 80024c8:	f7ff fd22 	bl	8001f10 <LL_ADC_GetMultimode>
 80024cc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d102      	bne.n	80024dc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024d6:	2308      	movs	r3, #8
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e02a      	b.n	8002532 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d002      	beq.n	80024ee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d111      	bne.n	8002512 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0a4      	b.n	8002656 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800250c:	2304      	movs	r3, #4
 800250e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002510:	e00f      	b.n	8002532 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002512:	4853      	ldr	r0, [pc, #332]	@ (8002660 <HAL_ADC_PollForConversion+0x1a4>)
 8002514:	f7ff fd0a 	bl	8001f2c <LL_ADC_GetMultiDMATransfer>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e093      	b.n	8002656 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800252e:	2304      	movs	r3, #4
 8002530:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002532:	f7ff fb93 	bl	8001c5c <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002538:	e021      	b.n	800257e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d01d      	beq.n	800257e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002542:	f7ff fb8b 	bl	8001c5c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <HAL_ADC_PollForConversion+0x9c>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d112      	bne.n	800257e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f043 0204 	orr.w	r2, r3, #4
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e06b      	b.n	8002656 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0d6      	beq.n	800253a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fc16 	bl	8001dce <LL_ADC_REG_IsTriggerSourceSWStart>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01c      	beq.n	80025e2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7e5b      	ldrb	r3, [r3, #25]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d118      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d111      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002664 <HAL_ADC_PollForConversion+0x1a8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d002      	beq.n	80025f2 <HAL_ADC_PollForConversion+0x136>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e000      	b.n	80025f4 <HAL_ADC_PollForConversion+0x138>
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_ADC_PollForConversion+0x1ac>)
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d008      	beq.n	800260e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d002      	beq.n	800260e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b09      	cmp	r3, #9
 800260c:	d104      	bne.n	8002618 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e00c      	b.n	8002632 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a11      	ldr	r2, [pc, #68]	@ (8002664 <HAL_ADC_PollForConversion+0x1a8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d002      	beq.n	8002628 <HAL_ADC_PollForConversion+0x16c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	e000      	b.n	800262a <HAL_ADC_PollForConversion+0x16e>
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <HAL_ADC_PollForConversion+0x1ac>)
 800262a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d104      	bne.n	8002642 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2208      	movs	r2, #8
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e008      	b.n	8002654 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	220c      	movs	r2, #12
 8002652:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	50040300 	.word	0x50040300
 8002664:	50040100 	.word	0x50040100
 8002668:	50040000 	.word	0x50040000

0800266c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002674:	4891      	ldr	r0, [pc, #580]	@ (80028bc <HAL_ADC_Start_IT+0x250>)
 8002676:	f7ff fc4b 	bl	8001f10 <LL_ADC_GetMultimode>
 800267a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fcea 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 8110 	bne.w	80028ae <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ADC_Start_IT+0x30>
 8002698:	2302      	movs	r3, #2
 800269a:	e10b      	b.n	80028b4 <HAL_ADC_Start_IT+0x248>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 ff3d 	bl	8003524 <ADC_Enable>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 80f7 	bne.w	80028a4 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7c      	ldr	r2, [pc, #496]	@ (80028c0 <HAL_ADC_Start_IT+0x254>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d002      	beq.n	80026da <HAL_ADC_Start_IT+0x6e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e000      	b.n	80026dc <HAL_ADC_Start_IT+0x70>
 80026da:	4b7a      	ldr	r3, [pc, #488]	@ (80028c4 <HAL_ADC_Start_IT+0x258>)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d002      	beq.n	80026ea <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f023 0206 	bic.w	r2, r3, #6
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	659a      	str	r2, [r3, #88]	@ 0x58
 800270e:	e002      	b.n	8002716 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	221c      	movs	r2, #28
 800271c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 021c 	bic.w	r2, r2, #28
 8002734:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d108      	bne.n	8002750 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0208 	orr.w	r2, r2, #8
 800274c:	605a      	str	r2, [r3, #4]
          break;
 800274e:	e008      	b.n	8002762 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0204 	orr.w	r2, r2, #4
 800275e:	605a      	str	r2, [r3, #4]
          break;
 8002760:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0210 	orr.w	r2, r2, #16
 8002778:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a50      	ldr	r2, [pc, #320]	@ (80028c0 <HAL_ADC_Start_IT+0x254>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d002      	beq.n	800278a <HAL_ADC_Start_IT+0x11e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e000      	b.n	800278c <HAL_ADC_Start_IT+0x120>
 800278a:	4b4e      	ldr	r3, [pc, #312]	@ (80028c4 <HAL_ADC_Start_IT+0x258>)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4293      	cmp	r3, r2
 8002792:	d008      	beq.n	80027a6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	d13a      	bne.n	800281c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02d      	beq.n	8002810 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d110      	bne.n	80027ee <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0220 	bic.w	r2, r2, #32
 80027da:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ea:	605a      	str	r2, [r3, #4]
              break;
 80027ec:	e010      	b.n	8002810 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027fc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0220 	orr.w	r2, r2, #32
 800280c:	605a      	str	r2, [r3, #4]
              break;
 800280e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fc0c 	bl	8002032 <LL_ADC_REG_StartConversion>
 800281a:	e04a      	b.n	80028b2 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002820:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a24      	ldr	r2, [pc, #144]	@ (80028c0 <HAL_ADC_Start_IT+0x254>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d002      	beq.n	8002838 <HAL_ADC_Start_IT+0x1cc>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e000      	b.n	800283a <HAL_ADC_Start_IT+0x1ce>
 8002838:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_ADC_Start_IT+0x258>)
 800283a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d034      	beq.n	80028b2 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002850:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d110      	bne.n	8002882 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0220 	bic.w	r2, r2, #32
 800286e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800287e:	605a      	str	r2, [r3, #4]
              break;
 8002880:	e017      	b.n	80028b2 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002890:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	605a      	str	r2, [r3, #4]
              break;
 80028a2:	e006      	b.n	80028b2 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028ac:	e001      	b.n	80028b2 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	50040300 	.word	0x50040300
 80028c0:	50040100 	.word	0x50040100
 80028c4:	50040000 	.word	0x50040000

080028c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002900:	4882      	ldr	r0, [pc, #520]	@ (8002b0c <HAL_ADC_IRQHandler+0x228>)
 8002902:	f7ff fb05 	bl	8001f10 <LL_ADC_GetMultimode>
 8002906:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_ADC_IRQHandler+0x5e>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fec9 	bl	80036cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_ADC_IRQHandler+0x72>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8083 	beq.w	8002a68 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d07d      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fa20 	bl	8001dce <LL_ADC_REG_IsTriggerSourceSWStart>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d062      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5d      	ldr	r2, [pc, #372]	@ (8002b10 <HAL_ADC_IRQHandler+0x22c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d002      	beq.n	80029a4 <HAL_ADC_IRQHandler+0xc0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_IRQHandler+0xc2>
 80029a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <HAL_ADC_IRQHandler+0x230>)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d008      	beq.n	80029c0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d002      	beq.n	80029c0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	d104      	bne.n	80029ca <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	e00c      	b.n	80029e4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a50      	ldr	r2, [pc, #320]	@ (8002b10 <HAL_ADC_IRQHandler+0x22c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d002      	beq.n	80029da <HAL_ADC_IRQHandler+0xf6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e000      	b.n	80029dc <HAL_ADC_IRQHandler+0xf8>
 80029da:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <HAL_ADC_IRQHandler+0x230>)
 80029dc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d135      	bne.n	8002a5a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d12e      	bne.n	8002a5a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fb2a 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11a      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 020c 	bic.w	r2, r2, #12
 8002a1a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d112      	bne.n	8002a5a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a40:	e00b      	b.n	8002a5a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fa34 	bl	8000ec8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	220c      	movs	r2, #12
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x198>
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 809f 	beq.w	8002bc6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8099 	beq.w	8002bc6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f9cb 	bl	8001e4c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ab6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f986 	bl	8001dce <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <HAL_ADC_IRQHandler+0x22c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d002      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x1f0>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e000      	b.n	8002ad6 <HAL_ADC_IRQHandler+0x1f2>
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_ADC_IRQHandler+0x230>)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d008      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d002      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b07      	cmp	r3, #7
 8002aee:	d104      	bne.n	8002afa <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	e013      	b.n	8002b22 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <HAL_ADC_IRQHandler+0x22c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x234>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e007      	b.n	8002b1a <HAL_ADC_IRQHandler+0x236>
 8002b0a:	bf00      	nop
 8002b0c:	50040300 	.word	0x50040300
 8002b10:	50040100 	.word	0x50040100
 8002b14:	50040000 	.word	0x50040000
 8002b18:	4b7d      	ldr	r3, [pc, #500]	@ (8002d10 <HAL_ADC_IRQHandler+0x42c>)
 8002b1a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d047      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x25e>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03f      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13a      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d133      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d12e      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fa8e 	bl	8002080 <LL_ADC_INJ_IsConversionOngoing>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11a      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d112      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b9e:	e00b      	b.n	8002bb8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fd5f 	bl	800367c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2260      	movs	r2, #96	@ 0x60
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d011      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x310>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f896 	bl	8002d18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x340>
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fd45 	bl	80036a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x370>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fd37 	bl	80036b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d036      	beq.n	8002ccc <HAL_ADC_IRQHandler+0x3e8>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d031      	beq.n	8002ccc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002c70:	2301      	movs	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e014      	b.n	8002ca0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c7c:	4825      	ldr	r0, [pc, #148]	@ (8002d14 <HAL_ADC_IRQHandler+0x430>)
 8002c7e:	f7ff f955 	bl	8001f2c <LL_ADC_GetMultiDMATransfer>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8c:	e008      	b.n	8002ca0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f834 	bl	8002d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d018      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x424>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f043 0208 	orr.w	r2, r3, #8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d00:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fcc4 	bl	8003690 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	@ 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	50040000 	.word	0x50040000
 8002d14:	50040300 	.word	0x50040300

08002d18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b0b6      	sub	sp, #216	@ 0xd8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x22>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e3c9      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x7b6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f973 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 83aa 	bne.w	80034d0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d824      	bhi.n	8002dd6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	3b02      	subs	r3, #2
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d81b      	bhi.n	8002dce <HAL_ADC_ConfigChannel+0x8e>
 8002d96:	a201      	add	r2, pc, #4	@ (adr r2, 8002d9c <HAL_ADC_ConfigChannel+0x5c>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db5 	.word	0x08002db5
 8002da4:	08002dbd 	.word	0x08002dbd
 8002da8:	08002dc5 	.word	0x08002dc5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002dac:	230c      	movs	r3, #12
 8002dae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002db2:	e010      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002db4:	2312      	movs	r3, #18
 8002db6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dba:	e00c      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002dbc:	2318      	movs	r3, #24
 8002dbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dc2:	e008      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dcc:	e003      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002dce:	2306      	movs	r3, #6
 8002dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dd4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002de4:	f7ff f806 	bl	8001df4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff f934 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 8002df2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f940 	bl	8002080 <LL_ADC_INJ_IsConversionOngoing>
 8002e00:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 81a4 	bne.w	8003156 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 819f 	bne.w	8003156 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f7ff f824 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	08db      	lsrs	r3, r3, #3
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d00a      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6919      	ldr	r1, [r3, #16]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e5c:	f7fe ff62 	bl	8001d24 <LL_ADC_SetOffset>
 8002e60:	e179      	b.n	8003156 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe ff7f 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x14e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe ff74 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	e01e      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x18c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ff69 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e004      	b.n	8002eca <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1a4>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	e018      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1d6>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e004      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d106      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe ff38 	bl	8001d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe ff1c 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x214>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe ff11 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	e01e      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x252>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe ff06 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e004      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x26a>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	e018      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x29c>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d106      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fed5 	bl	8001d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe feb9 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x2da>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2102      	movs	r1, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe feae 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	e01e      	b.n	8003058 <HAL_ADC_ConfigChannel+0x318>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fea3 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e004      	b.n	8003056 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x330>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	e014      	b.n	800309a <HAL_ADC_ConfigChannel+0x35a>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800307e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e004      	b.n	800309a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800309a:	429a      	cmp	r2, r3
 800309c:	d106      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2102      	movs	r1, #2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe76 	bl	8001d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2103      	movs	r1, #3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fe5a 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x398>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2103      	movs	r1, #3
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fe4f 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	e017      	b.n	8003108 <HAL_ADC_ConfigChannel+0x3c8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2103      	movs	r1, #3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fe44 	bl	8001d6c <LL_ADC_GetOffsetChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e003      	b.n	8003106 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x3e0>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	e011      	b.n	8003144 <HAL_ADC_ConfigChannel+0x404>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800312e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003130:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003132:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003138:	2320      	movs	r3, #32
 800313a:	e003      	b.n	8003144 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800313c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003144:	429a      	cmp	r2, r3
 8003146:	d106      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2200      	movs	r2, #0
 800314e:	2103      	movs	r1, #3
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe fe21 	bl	8001d98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe ff56 	bl	800200c <LL_ADC_IsEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 8140 	bne.w	80033e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	461a      	mov	r2, r3
 8003176:	f7fe fea7 	bl	8001ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a8f      	ldr	r2, [pc, #572]	@ (80033bc <HAL_ADC_ConfigChannel+0x67c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	f040 8131 	bne.w	80033e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x46e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	bf94      	ite	ls
 80031a6:	2301      	movls	r3, #1
 80031a8:	2300      	movhi	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e019      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x4a2>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031c6:	2320      	movs	r3, #32
 80031c8:	e003      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2b09      	cmp	r3, #9
 80031da:	bf94      	ite	ls
 80031dc:	2301      	movls	r3, #1
 80031de:	2300      	movhi	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d079      	beq.n	80032da <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x4c2>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	3301      	adds	r3, #1
 80031fa:	069b      	lsls	r3, r3, #26
 80031fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003200:	e015      	b.n	800322e <HAL_ADC_ConfigChannel+0x4ee>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003212:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e003      	b.n	8003226 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800321e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	069b      	lsls	r3, r3, #26
 800322a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_ADC_ConfigChannel+0x50e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	3301      	adds	r3, #1
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	e017      	b.n	800327e <HAL_ADC_ConfigChannel+0x53e>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800325c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800326a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	ea42 0103 	orr.w	r1, r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x564>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	3301      	adds	r3, #1
 8003296:	f003 021f 	and.w	r2, r3, #31
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	051b      	lsls	r3, r3, #20
 80032a2:	e018      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x596>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e003      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	f003 021f 	and.w	r2, r3, #31
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d6:	430b      	orrs	r3, r1
 80032d8:	e081      	b.n	80033de <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x5b6>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	3301      	adds	r3, #1
 80032ee:	069b      	lsls	r3, r3, #26
 80032f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f4:	e015      	b.n	8003322 <HAL_ADC_ConfigChannel+0x5e2>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e003      	b.n	800331a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	069b      	lsls	r3, r3, #26
 800331e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x602>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	3301      	adds	r3, #1
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	e017      	b.n	8003372 <HAL_ADC_ConfigChannel+0x632>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	61bb      	str	r3, [r7, #24]
  return result;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	ea42 0103 	orr.w	r1, r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_ADC_ConfigChannel+0x65e>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	3301      	adds	r3, #1
 800338a:	f003 021f 	and.w	r2, r3, #31
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	3b1e      	subs	r3, #30
 8003396:	051b      	lsls	r3, r3, #20
 8003398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800339c:	e01e      	b.n	80033dc <HAL_ADC_ConfigChannel+0x69c>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	60fb      	str	r3, [r7, #12]
  return result;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e006      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x688>
 80033ba:	bf00      	nop
 80033bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f003 021f 	and.w	r2, r3, #31
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	3b1e      	subs	r3, #30
 80033d6:	051b      	lsls	r3, r3, #20
 80033d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7fe fd45 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b44      	ldr	r3, [pc, #272]	@ (8003500 <HAL_ADC_ConfigChannel+0x7c0>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d07a      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f4:	4843      	ldr	r0, [pc, #268]	@ (8003504 <HAL_ADC_ConfigChannel+0x7c4>)
 80033f6:	f7fe fc87 	bl	8001d08 <LL_ADC_GetCommonPathInternalCh>
 80033fa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a41      	ldr	r2, [pc, #260]	@ (8003508 <HAL_ADC_ConfigChannel+0x7c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d12c      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800340c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d126      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_ADC_ConfigChannel+0x7cc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_ADC_ConfigChannel+0x6e8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3b      	ldr	r2, [pc, #236]	@ (8003510 <HAL_ADC_ConfigChannel+0x7d0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d15d      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800342c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003430:	4619      	mov	r1, r3
 8003432:	4834      	ldr	r0, [pc, #208]	@ (8003504 <HAL_ADC_ConfigChannel+0x7c4>)
 8003434:	f7fe fc55 	bl	8001ce2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003438:	4b36      	ldr	r3, [pc, #216]	@ (8003514 <HAL_ADC_ConfigChannel+0x7d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	4a36      	ldr	r2, [pc, #216]	@ (8003518 <HAL_ADC_ConfigChannel+0x7d8>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003452:	e002      	b.n	800345a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3b01      	subs	r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f9      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003460:	e040      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2d      	ldr	r2, [pc, #180]	@ (800351c <HAL_ADC_ConfigChannel+0x7dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d118      	bne.n	800349e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800346c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d112      	bne.n	800349e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a23      	ldr	r2, [pc, #140]	@ (800350c <HAL_ADC_ConfigChannel+0x7cc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_ADC_ConfigChannel+0x74c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a22      	ldr	r2, [pc, #136]	@ (8003510 <HAL_ADC_ConfigChannel+0x7d0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d12d      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800348c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003490:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003494:	4619      	mov	r1, r3
 8003496:	481b      	ldr	r0, [pc, #108]	@ (8003504 <HAL_ADC_ConfigChannel+0x7c4>)
 8003498:	f7fe fc23 	bl	8001ce2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800349c:	e024      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <HAL_ADC_ConfigChannel+0x7e0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d120      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11a      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a14      	ldr	r2, [pc, #80]	@ (800350c <HAL_ADC_ConfigChannel+0x7cc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d115      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034c6:	4619      	mov	r1, r3
 80034c8:	480e      	ldr	r0, [pc, #56]	@ (8003504 <HAL_ADC_ConfigChannel+0x7c4>)
 80034ca:	f7fe fc0a 	bl	8001ce2 <LL_ADC_SetCommonPathInternalCh>
 80034ce:	e00c      	b.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034e2:	e002      	b.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	37d8      	adds	r7, #216	@ 0xd8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	80080000 	.word	0x80080000
 8003504:	50040300 	.word	0x50040300
 8003508:	c7520000 	.word	0xc7520000
 800350c:	50040000 	.word	0x50040000
 8003510:	50040200 	.word	0x50040200
 8003514:	20000000 	.word	0x20000000
 8003518:	053e2d63 	.word	0x053e2d63
 800351c:	cb840000 	.word	0xcb840000
 8003520:	80000001 	.word	0x80000001

08003524 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fd69 	bl	800200c <LL_ADC_IsEnabled>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d169      	bne.n	8003614 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4b36      	ldr	r3, [pc, #216]	@ (8003620 <ADC_Enable+0xfc>)
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e055      	b.n	8003616 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fd38 	bl	8001fe4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003574:	482b      	ldr	r0, [pc, #172]	@ (8003624 <ADC_Enable+0x100>)
 8003576:	f7fe fbc7 	bl	8001d08 <LL_ADC_GetCommonPathInternalCh>
 800357a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800357c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <ADC_Enable+0x104>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	4a28      	ldr	r2, [pc, #160]	@ (800362c <ADC_Enable+0x108>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800359e:	e002      	b.n	80035a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f9      	bne.n	80035a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035ac:	f7fe fb56 	bl	8001c5c <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b2:	e028      	b.n	8003606 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fd27 	bl	800200c <LL_ADC_IsEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fd0b 	bl	8001fe4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035ce:	f7fe fb45 	bl	8001c5c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d914      	bls.n	8003606 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d00d      	beq.n	8003606 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e007      	b.n	8003616 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d1cf      	bne.n	80035b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	8000003f 	.word	0x8000003f
 8003624:	50040300 	.word	0x50040300
 8003628:	20000000 	.word	0x20000000
 800362c:	053e2d63 	.word	0x053e2d63

08003630 <LL_ADC_IsEnabled>:
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <LL_ADC_IsEnabled+0x18>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <LL_ADC_IsEnabled+0x1a>
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_ADC_REG_IsConversionOngoing>:
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b04      	cmp	r3, #4
 8003668:	d101      	bne.n	800366e <LL_ADC_REG_IsConversionOngoing+0x18>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b09f      	sub	sp, #124	@ 0x7c
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e093      	b.n	8003826 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003706:	2300      	movs	r3, #0
 8003708:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800370a:	2300      	movs	r3, #0
 800370c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a47      	ldr	r2, [pc, #284]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d102      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003718:	4b46      	ldr	r3, [pc, #280]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e001      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e072      	b.n	8003826 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff87 	bl	8003656 <LL_ADC_REG_IsConversionOngoing>
 8003748:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ff81 	bl	8003656 <LL_ADC_REG_IsConversionOngoing>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d154      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800375a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800375c:	2b00      	cmp	r3, #0
 800375e:	d151      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003760:	4b35      	ldr	r3, [pc, #212]	@ (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003762:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02c      	beq.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800376c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800377e:	035b      	lsls	r3, r3, #13
 8003780:	430b      	orrs	r3, r1
 8003782:	431a      	orrs	r2, r3
 8003784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003786:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003788:	4829      	ldr	r0, [pc, #164]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800378a:	f7ff ff51 	bl	8003630 <LL_ADC_IsEnabled>
 800378e:	4604      	mov	r4, r0
 8003790:	4828      	ldr	r0, [pc, #160]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003792:	f7ff ff4d 	bl	8003630 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	431c      	orrs	r4, r3
 800379a:	4828      	ldr	r0, [pc, #160]	@ (800383c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800379c:	f7ff ff48 	bl	8003630 <LL_ADC_IsEnabled>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4323      	orrs	r3, r4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d137      	bne.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037b0:	f023 030f 	bic.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	6811      	ldr	r1, [r2, #0]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	430a      	orrs	r2, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037c4:	e028      	b.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037d2:	4817      	ldr	r0, [pc, #92]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037d4:	f7ff ff2c 	bl	8003630 <LL_ADC_IsEnabled>
 80037d8:	4604      	mov	r4, r0
 80037da:	4816      	ldr	r0, [pc, #88]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037dc:	f7ff ff28 	bl	8003630 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	431c      	orrs	r4, r3
 80037e4:	4815      	ldr	r0, [pc, #84]	@ (800383c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037e6:	f7ff ff23 	bl	8003630 <LL_ADC_IsEnabled>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4323      	orrs	r3, r4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d112      	bne.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037fa:	f023 030f 	bic.w	r3, r3, #15
 80037fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003800:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003802:	e009      	b.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003816:	e000      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003818:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003822:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003826:	4618      	mov	r0, r3
 8003828:	377c      	adds	r7, #124	@ 0x7c
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	50040000 	.word	0x50040000
 8003834:	50040100 	.word	0x50040100
 8003838:	50040300 	.word	0x50040300
 800383c:	50040200 	.word	0x50040200

08003840 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <LL_EXTI_EnableIT_0_31+0x20>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4904      	ldr	r1, [pc, #16]	@ (8003860 <LL_EXTI_EnableIT_0_31+0x20>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40010400 	.word	0x40010400

08003864 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <LL_EXTI_DisableIT_0_31+0x24>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	43db      	mvns	r3, r3
 8003874:	4904      	ldr	r1, [pc, #16]	@ (8003888 <LL_EXTI_DisableIT_0_31+0x24>)
 8003876:	4013      	ands	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40010400 	.word	0x40010400

0800388c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4904      	ldr	r1, [pc, #16]	@ (80038ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]

}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40010400 	.word	0x40010400

080038b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	43db      	mvns	r3, r3
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010400 	.word	0x40010400

080038d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4904      	ldr	r1, [pc, #16]	@ (80038f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010400 	.word	0x40010400

080038fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	43db      	mvns	r3, r3
 800390c:	4904      	ldr	r1, [pc, #16]	@ (8003920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800390e:	4013      	ands	r3, r2
 8003910:	608b      	str	r3, [r1, #8]

}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010400 	.word	0x40010400

08003924 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4904      	ldr	r1, [pc, #16]	@ (8003944 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4313      	orrs	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40010400 	.word	0x40010400

08003948 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	43db      	mvns	r3, r3
 8003958:	4904      	ldr	r1, [pc, #16]	@ (800396c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800395a:	4013      	ands	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010400 	.word	0x40010400

08003970 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003978:	4a04      	ldr	r2, [pc, #16]	@ (800398c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6153      	str	r3, [r2, #20]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010400 	.word	0x40010400

08003990 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e0d1      	b.n	8003b50 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039ba:	d102      	bne.n	80039c2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e0c6      	b.n	8003b50 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039dc:	4b5f      	ldr	r3, [pc, #380]	@ (8003b5c <HAL_COMP_Init+0x1cc>)
 80039de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b5c <HAL_COMP_Init+0x1cc>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80039e8:	4b5c      	ldr	r3, [pc, #368]	@ (8003b5c <HAL_COMP_Init+0x1cc>)
 80039ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fd fdfd 	bl	80015f4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a04:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b4b      	ldr	r3, [pc, #300]	@ (8003b60 <HAL_COMP_Init+0x1d0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	6979      	ldr	r1, [r7, #20]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a46:	d106      	bne.n	8003a56 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003a48:	4b46      	ldr	r3, [pc, #280]	@ (8003b64 <HAL_COMP_Init+0x1d4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a45      	ldr	r2, [pc, #276]	@ (8003b64 <HAL_COMP_Init+0x1d4>)
 8003a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e005      	b.n	8003a62 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003a56:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_COMP_Init+0x1d4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <HAL_COMP_Init+0x1d4>)
 8003a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a60:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d016      	beq.n	8003a9e <HAL_COMP_Init+0x10e>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d113      	bne.n	8003a9e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a76:	4b3c      	ldr	r3, [pc, #240]	@ (8003b68 <HAL_COMP_Init+0x1d8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b6c <HAL_COMP_Init+0x1dc>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003a90:	e002      	b.n	8003a98 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f9      	bne.n	8003a92 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a33      	ldr	r2, [pc, #204]	@ (8003b70 <HAL_COMP_Init+0x1e0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d102      	bne.n	8003aae <HAL_COMP_Init+0x11e>
 8003aa8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003aac:	e001      	b.n	8003ab2 <HAL_COMP_Init+0x122>
 8003aae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ab2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d037      	beq.n	8003b30 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003acc:	6938      	ldr	r0, [r7, #16]
 8003ace:	f7ff ff03 	bl	80038d8 <LL_EXTI_EnableRisingTrig_0_31>
 8003ad2:	e002      	b.n	8003ada <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003ad4:	6938      	ldr	r0, [r7, #16]
 8003ad6:	f7ff ff11 	bl	80038fc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003ae6:	6938      	ldr	r0, [r7, #16]
 8003ae8:	f7ff ff1c 	bl	8003924 <LL_EXTI_EnableFallingTrig_0_31>
 8003aec:	e002      	b.n	8003af4 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003aee:	6938      	ldr	r0, [r7, #16]
 8003af0:	f7ff ff2a 	bl	8003948 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003af4:	6938      	ldr	r0, [r7, #16]
 8003af6:	f7ff ff3b 	bl	8003970 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003b06:	6938      	ldr	r0, [r7, #16]
 8003b08:	f7ff fec0 	bl	800388c <LL_EXTI_EnableEvent_0_31>
 8003b0c:	e002      	b.n	8003b14 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003b0e:	6938      	ldr	r0, [r7, #16]
 8003b10:	f7ff fece 	bl	80038b0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003b20:	6938      	ldr	r0, [r7, #16]
 8003b22:	f7ff fe8d 	bl	8003840 <LL_EXTI_EnableIT_0_31>
 8003b26:	e009      	b.n	8003b3c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003b28:	6938      	ldr	r0, [r7, #16]
 8003b2a:	f7ff fe9b 	bl	8003864 <LL_EXTI_DisableIT_0_31>
 8003b2e:	e005      	b.n	8003b3c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003b30:	6938      	ldr	r0, [r7, #16]
 8003b32:	f7ff febd 	bl	80038b0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003b36:	6938      	ldr	r0, [r7, #16]
 8003b38:	f7ff fe94 	bl	8003864 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8003b50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	ff207d03 	.word	0xff207d03
 8003b64:	40010204 	.word	0x40010204
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	053e2d63 	.word	0x053e2d63
 8003b70:	40010200 	.word	0x40010200

08003b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba6:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60d3      	str	r3, [r2, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	@ (8003c10 <__NVIC_EnableIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	@ (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	@ (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	@ 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce0:	d301      	bcc.n	8003ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00f      	b.n	8003d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <SysTick_Config+0x40>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cee:	210f      	movs	r1, #15
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f7ff ff8e 	bl	8003c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <SysTick_Config+0x40>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfe:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <SysTick_Config+0x40>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010

08003d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff29 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3c:	f7ff ff3e 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff ff8e 	bl	8003c68 <NVIC_EncodePriority>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff5d 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff31 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ffa2 	bl	8003cd0 <SysTick_Config>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e014      	b.n	8003dd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	791b      	ldrb	r3, [r3, #4]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d105      	bne.n	8003dbe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd fc6d 	bl	8001698 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df0:	d120      	bne.n	8003e34 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e00:	d118      	bne.n	8003e34 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2204      	movs	r2, #4
 8003e06:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f82d 	bl	8003e8e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e42:	d120      	bne.n	8003e86 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e52:	d118      	bne.n	8003e86 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2204      	movs	r2, #4
 8003e58:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f043 0202 	orr.w	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f935 	bl	80040f0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	795b      	ldrb	r3, [r3, #5]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_DAC_ConfigChannel+0x1c>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e114      	b.n	80040e8 <HAL_DAC_ConfigChannel+0x246>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	f040 8081 	bne.w	8003fd6 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fec2 	bl	8001c5c <HAL_GetTick>
 8003ed8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d140      	bne.n	8003f62 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ee0:	e018      	b.n	8003f14 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ee2:	f7fd febb 	bl	8001c5c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d911      	bls.n	8003f14 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f043 0208 	orr.w	r2, r3, #8
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0e9      	b.n	80040e8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1df      	bne.n	8003ee2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7fd fea6 	bl	8001c74 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	6992      	ldr	r2, [r2, #24]
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f32:	e023      	b.n	8003f7c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f34:	f7fd fe92 	bl	8001c5c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d90f      	bls.n	8003f62 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da0a      	bge.n	8003f62 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f043 0208 	orr.w	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0c2      	b.n	80040e8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	dbe3      	blt.n	8003f34 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7fd fe81 	bl	8001c74 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	6992      	ldr	r2, [r2, #24]
 8003f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	ea02 0103 	and.w	r1, r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	21ff      	movs	r1, #255	@ 0xff
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	ea02 0103 	and.w	r1, r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d11d      	bne.n	800401a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	221f      	movs	r2, #31
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2207      	movs	r2, #7
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	431a      	orrs	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6819      	ldr	r1, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	22c0      	movs	r2, #192	@ 0xc0
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	400a      	ands	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e098      	b.n	8004248 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	4b4d      	ldr	r3, [pc, #308]	@ (8004254 <HAL_DMA_Init+0x150>)
 800411e:	429a      	cmp	r2, r3
 8004120:	d80f      	bhi.n	8004142 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	4b4b      	ldr	r3, [pc, #300]	@ (8004258 <HAL_DMA_Init+0x154>)
 800412a:	4413      	add	r3, r2
 800412c:	4a4b      	ldr	r2, [pc, #300]	@ (800425c <HAL_DMA_Init+0x158>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	009a      	lsls	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a48      	ldr	r2, [pc, #288]	@ (8004260 <HAL_DMA_Init+0x15c>)
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004140:	e00e      	b.n	8004160 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	4b46      	ldr	r3, [pc, #280]	@ (8004264 <HAL_DMA_Init+0x160>)
 800414a:	4413      	add	r3, r2
 800414c:	4a43      	ldr	r2, [pc, #268]	@ (800425c <HAL_DMA_Init+0x158>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	009a      	lsls	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a42      	ldr	r2, [pc, #264]	@ (8004268 <HAL_DMA_Init+0x164>)
 800415e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ba:	d039      	beq.n	8004230 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	4a27      	ldr	r2, [pc, #156]	@ (8004260 <HAL_DMA_Init+0x15c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d11a      	bne.n	80041fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041c6:	4b29      	ldr	r3, [pc, #164]	@ (800426c <HAL_DMA_Init+0x168>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f003 031c 	and.w	r3, r3, #28
 80041d2:	210f      	movs	r1, #15
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	4924      	ldr	r1, [pc, #144]	@ (800426c <HAL_DMA_Init+0x168>)
 80041dc:	4013      	ands	r3, r2
 80041de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041e0:	4b22      	ldr	r3, [pc, #136]	@ (800426c <HAL_DMA_Init+0x168>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	f003 031c 	and.w	r3, r3, #28
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	491d      	ldr	r1, [pc, #116]	@ (800426c <HAL_DMA_Init+0x168>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
 80041fa:	e019      	b.n	8004230 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <HAL_DMA_Init+0x16c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004204:	f003 031c 	and.w	r3, r3, #28
 8004208:	210f      	movs	r1, #15
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	4917      	ldr	r1, [pc, #92]	@ (8004270 <HAL_DMA_Init+0x16c>)
 8004212:	4013      	ands	r3, r2
 8004214:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004216:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <HAL_DMA_Init+0x16c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f003 031c 	and.w	r3, r3, #28
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	4911      	ldr	r1, [pc, #68]	@ (8004270 <HAL_DMA_Init+0x16c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40020407 	.word	0x40020407
 8004258:	bffdfff8 	.word	0xbffdfff8
 800425c:	cccccccd 	.word	0xcccccccd
 8004260:	40020000 	.word	0x40020000
 8004264:	bffdfbf8 	.word	0xbffdfbf8
 8004268:	40020400 	.word	0x40020400
 800426c:	400200a8 	.word	0x400200a8
 8004270:	400204a8 	.word	0x400204a8

08004274 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d008      	beq.n	800429e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2204      	movs	r2, #4
 8004290:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e022      	b.n	80042e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 020e 	bic.w	r2, r2, #14
 80042ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	f003 021c 	and.w	r2, r3, #28
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d005      	beq.n	8004314 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	e029      	b.n	8004368 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 020e 	bic.w	r2, r2, #14
 8004322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	f003 021c 	and.w	r2, r3, #28
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	2101      	movs	r1, #1
 8004342:	fa01 f202 	lsl.w	r2, r1, r2
 8004346:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
    }
  }
  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f003 031c 	and.w	r3, r3, #28
 8004392:	2204      	movs	r2, #4
 8004394:	409a      	lsls	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d026      	beq.n	80043ec <HAL_DMA_IRQHandler+0x7a>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d021      	beq.n	80043ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d107      	bne.n	80043c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0204 	bic.w	r2, r2, #4
 80043c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f003 021c 	and.w	r2, r3, #28
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	2104      	movs	r1, #4
 80043d4:	fa01 f202 	lsl.w	r2, r1, r2
 80043d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d071      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043ea:	e06c      	b.n	80044c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f0:	f003 031c 	and.w	r3, r3, #28
 80043f4:	2202      	movs	r2, #2
 80043f6:	409a      	lsls	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02e      	beq.n	800445e <HAL_DMA_IRQHandler+0xec>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d029      	beq.n	800445e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10b      	bne.n	8004430 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 020a 	bic.w	r2, r2, #10
 8004426:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004434:	f003 021c 	and.w	r2, r3, #28
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	2102      	movs	r1, #2
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d038      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800445c:	e033      	b.n	80044c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	f003 031c 	and.w	r3, r3, #28
 8004466:	2208      	movs	r2, #8
 8004468:	409a      	lsls	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02a      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x156>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d025      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 020e 	bic.w	r2, r2, #14
 800448a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004490:	f003 021c 	and.w	r2, r3, #28
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f202 	lsl.w	r2, r1, r2
 800449e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
}
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044de:	e17f      	b.n	80047e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2101      	movs	r1, #1
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8171 	beq.w	80047da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d005      	beq.n	8004510 <HAL_GPIO_Init+0x40>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d130      	bne.n	8004572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	2203      	movs	r2, #3
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004546:	2201      	movs	r2, #1
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 0201 	and.w	r2, r3, #1
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b03      	cmp	r3, #3
 800457c:	d118      	bne.n	80045b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004584:	2201      	movs	r2, #1
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	f003 0201 	and.w	r2, r3, #1
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d017      	beq.n	80045ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d123      	bne.n	8004640 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	08da      	lsrs	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3208      	adds	r2, #8
 8004600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	220f      	movs	r2, #15
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	08da      	lsrs	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3208      	adds	r2, #8
 800463a:	6939      	ldr	r1, [r7, #16]
 800463c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	2203      	movs	r2, #3
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0203 	and.w	r2, r3, #3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80ac 	beq.w	80047da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004682:	4b5f      	ldr	r3, [pc, #380]	@ (8004800 <HAL_GPIO_Init+0x330>)
 8004684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004686:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <HAL_GPIO_Init+0x330>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6613      	str	r3, [r2, #96]	@ 0x60
 800468e:	4b5c      	ldr	r3, [pc, #368]	@ (8004800 <HAL_GPIO_Init+0x330>)
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800469a:	4a5a      	ldr	r2, [pc, #360]	@ (8004804 <HAL_GPIO_Init+0x334>)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3302      	adds	r3, #2
 80046a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046c4:	d025      	beq.n	8004712 <HAL_GPIO_Init+0x242>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004808 <HAL_GPIO_Init+0x338>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <HAL_GPIO_Init+0x23e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4e      	ldr	r2, [pc, #312]	@ (800480c <HAL_GPIO_Init+0x33c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d019      	beq.n	800470a <HAL_GPIO_Init+0x23a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004810 <HAL_GPIO_Init+0x340>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0x236>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004814 <HAL_GPIO_Init+0x344>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00d      	beq.n	8004702 <HAL_GPIO_Init+0x232>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004818 <HAL_GPIO_Init+0x348>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x22e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4a      	ldr	r2, [pc, #296]	@ (800481c <HAL_GPIO_Init+0x34c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_GPIO_Init+0x22a>
 80046f6:	2306      	movs	r3, #6
 80046f8:	e00c      	b.n	8004714 <HAL_GPIO_Init+0x244>
 80046fa:	2307      	movs	r3, #7
 80046fc:	e00a      	b.n	8004714 <HAL_GPIO_Init+0x244>
 80046fe:	2305      	movs	r3, #5
 8004700:	e008      	b.n	8004714 <HAL_GPIO_Init+0x244>
 8004702:	2304      	movs	r3, #4
 8004704:	e006      	b.n	8004714 <HAL_GPIO_Init+0x244>
 8004706:	2303      	movs	r3, #3
 8004708:	e004      	b.n	8004714 <HAL_GPIO_Init+0x244>
 800470a:	2302      	movs	r3, #2
 800470c:	e002      	b.n	8004714 <HAL_GPIO_Init+0x244>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_GPIO_Init+0x244>
 8004712:	2300      	movs	r3, #0
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	f002 0203 	and.w	r2, r2, #3
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	4093      	lsls	r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004724:	4937      	ldr	r1, [pc, #220]	@ (8004804 <HAL_GPIO_Init+0x334>)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	3302      	adds	r3, #2
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004732:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_GPIO_Init+0x350>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004756:	4a32      	ldr	r2, [pc, #200]	@ (8004820 <HAL_GPIO_Init+0x350>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800475c:	4b30      	ldr	r3, [pc, #192]	@ (8004820 <HAL_GPIO_Init+0x350>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004780:	4a27      	ldr	r2, [pc, #156]	@ (8004820 <HAL_GPIO_Init+0x350>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004786:	4b26      	ldr	r3, [pc, #152]	@ (8004820 <HAL_GPIO_Init+0x350>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004820 <HAL_GPIO_Init+0x350>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <HAL_GPIO_Init+0x350>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4013      	ands	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047d4:	4a12      	ldr	r2, [pc, #72]	@ (8004820 <HAL_GPIO_Init+0x350>)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3301      	adds	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f47f ae78 	bne.w	80044e0 <HAL_GPIO_Init+0x10>
  }
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	40010000 	.word	0x40010000
 8004808:	48000400 	.word	0x48000400
 800480c:	48000800 	.word	0x48000800
 8004810:	48000c00 	.word	0x48000c00
 8004814:	48001000 	.word	0x48001000
 8004818:	48001400 	.word	0x48001400
 800481c:	48001800 	.word	0x48001800
 8004820:	40010400 	.word	0x40010400

08004824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <HAL_PWREx_GetVoltageRange+0x18>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40007000 	.word	0x40007000

08004840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800484e:	d130      	bne.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004850:	4b23      	ldr	r3, [pc, #140]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d038      	beq.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004866:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2232      	movs	r2, #50	@ 0x32
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	0c9b      	lsrs	r3, r3, #18
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004884:	e002      	b.n	800488c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004898:	d102      	bne.n	80048a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f2      	bne.n	8004886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a0:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ac:	d110      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e00f      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048b2:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	d007      	beq.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c0:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048c8:	4a05      	ldr	r2, [pc, #20]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40007000 	.word	0x40007000
 80048e4:	20000000 	.word	0x20000000
 80048e8:	431bde83 	.word	0x431bde83

080048ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e3ca      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fe:	4b97      	ldr	r3, [pc, #604]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004908:	4b94      	ldr	r3, [pc, #592]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80e4 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_RCC_OscConfig+0x4a>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	f040 808b 	bne.w	8004a44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 8087 	bne.w	8004a44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004936:	4b89      	ldr	r3, [pc, #548]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_RCC_OscConfig+0x62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e3a2      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	4b82      	ldr	r3, [pc, #520]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_RCC_OscConfig+0x7c>
 800495e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004966:	e005      	b.n	8004974 <HAL_RCC_OscConfig+0x88>
 8004968:	4b7c      	ldr	r3, [pc, #496]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004974:	4293      	cmp	r3, r2
 8004976:	d223      	bcs.n	80049c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fd55 	bl	800542c <RCC_SetFlashLatencyFromMSIRange>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e383      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498c:	4b73      	ldr	r3, [pc, #460]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a72      	ldr	r2, [pc, #456]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004992:	f043 0308 	orr.w	r3, r3, #8
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b70      	ldr	r3, [pc, #448]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	496d      	ldr	r1, [pc, #436]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049aa:	4b6c      	ldr	r3, [pc, #432]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	4968      	ldr	r1, [pc, #416]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
 80049be:	e025      	b.n	8004a0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c0:	4b66      	ldr	r3, [pc, #408]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a65      	ldr	r2, [pc, #404]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b63      	ldr	r3, [pc, #396]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4960      	ldr	r1, [pc, #384]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049de:	4b5f      	ldr	r3, [pc, #380]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	495b      	ldr	r1, [pc, #364]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fd15 	bl	800542c <RCC_SetFlashLatencyFromMSIRange>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e343      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0c:	f000 fc4a 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b52      	ldr	r3, [pc, #328]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	4950      	ldr	r1, [pc, #320]	@ (8004b60 <HAL_RCC_OscConfig+0x274>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	4a4e      	ldr	r2, [pc, #312]	@ (8004b64 <HAL_RCC_OscConfig+0x278>)
 8004a2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004b68 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fd f8c3 	bl	8001bbc <HAL_InitTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d052      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	e327      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d032      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a4c:	4b43      	ldr	r3, [pc, #268]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a42      	ldr	r2, [pc, #264]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a58:	f7fd f900 	bl	8001c5c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a60:	f7fd f8fc 	bl	8001c5c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e310      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a72:	4b3a      	ldr	r3, [pc, #232]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a7e:	4b37      	ldr	r3, [pc, #220]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a36      	ldr	r2, [pc, #216]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a84:	f043 0308 	orr.w	r3, r3, #8
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4931      	ldr	r1, [pc, #196]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	492c      	ldr	r1, [pc, #176]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
 8004ab0:	e01a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004abe:	f7fd f8cd 	bl	8001c5c <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac6:	f7fd f8c9 	bl	8001c5c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e2dd      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ad8:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x1da>
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ae6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d074      	beq.n	8004bde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x21a>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d10e      	bne.n	8004b1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d10b      	bne.n	8004b1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d064      	beq.n	8004bdc <HAL_RCC_OscConfig+0x2f0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d160      	bne.n	8004bdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e2ba      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b26:	d106      	bne.n	8004b36 <HAL_RCC_OscConfig+0x24a>
 8004b28:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e026      	b.n	8004b84 <HAL_RCC_OscConfig+0x298>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCC_OscConfig+0x280>
 8004b40:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a05      	ldr	r2, [pc, #20]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b03      	ldr	r3, [pc, #12]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a02      	ldr	r2, [pc, #8]	@ (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e014      	b.n	8004b84 <HAL_RCC_OscConfig+0x298>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800ad08 	.word	0x0800ad08
 8004b64:	20000000 	.word	0x20000000
 8004b68:	20000004 	.word	0x20000004
 8004b6c:	4ba0      	ldr	r3, [pc, #640]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a9f      	ldr	r2, [pc, #636]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b9d      	ldr	r3, [pc, #628]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a9c      	ldr	r2, [pc, #624]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fd f866 	bl	8001c5c <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fd f862 	bl	8001c5c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e276      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba6:	4b92      	ldr	r3, [pc, #584]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x2a8>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd f852 	bl	8001c5c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fd f84e 	bl	8001c5c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e262      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bce:	4b88      	ldr	r3, [pc, #544]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2d0>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d060      	beq.n	8004cac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x310>
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d119      	bne.n	8004c2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d116      	bne.n	8004c2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x328>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e23f      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4b76      	ldr	r3, [pc, #472]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	061b      	lsls	r3, r3, #24
 8004c22:	4973      	ldr	r1, [pc, #460]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c28:	e040      	b.n	8004cac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d023      	beq.n	8004c7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c32:	4b6f      	ldr	r3, [pc, #444]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6e      	ldr	r2, [pc, #440]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fd f80d 	bl	8001c5c <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fd f809 	bl	8001c5c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e21d      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c58:	4b65      	ldr	r3, [pc, #404]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b62      	ldr	r3, [pc, #392]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	495f      	ldr	r1, [pc, #380]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
 8004c78:	e018      	b.n	8004cac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fc ffe9 	bl	8001c5c <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7fc ffe5 	bl	8001c5c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e1f9      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca0:	4b53      	ldr	r3, [pc, #332]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fc ffc4 	bl	8001c5c <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd8:	f7fc ffc0 	bl	8001c5c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1d4      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cea:	4b41      	ldr	r3, [pc, #260]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ef      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x3ec>
 8004cf8:	e01b      	b.n	8004d32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d00:	4a3b      	ldr	r2, [pc, #236]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fc ffa7 	bl	8001c5c <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fc ffa3 	bl	8001c5c <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e1b7      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d24:	4b32      	ldr	r3, [pc, #200]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ef      	bne.n	8004d12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a6 	beq.w	8004e8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d40:	2300      	movs	r3, #0
 8004d42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d44:	4b2a      	ldr	r3, [pc, #168]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d50:	4b27      	ldr	r3, [pc, #156]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d54:	4a26      	ldr	r2, [pc, #152]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d5c:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6c:	4b21      	ldr	r3, [pc, #132]	@ (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d118      	bne.n	8004daa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d78:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d84:	f7fc ff6a 	bl	8001c5c <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8c:	f7fc ff66 	bl	8001c5c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e17a      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d108      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4d8>
 8004db2:	4b0f      	ldr	r3, [pc, #60]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db8:	4a0d      	ldr	r2, [pc, #52]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dc2:	e029      	b.n	8004e18 <HAL_RCC_OscConfig+0x52c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d115      	bne.n	8004df8 <HAL_RCC_OscConfig+0x50c>
 8004dcc:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	4a07      	ldr	r2, [pc, #28]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ddc:	4b04      	ldr	r3, [pc, #16]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de2:	4a03      	ldr	r2, [pc, #12]	@ (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dec:	e014      	b.n	8004e18 <HAL_RCC_OscConfig+0x52c>
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	4b9c      	ldr	r3, [pc, #624]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	4a9b      	ldr	r2, [pc, #620]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e08:	4b98      	ldr	r3, [pc, #608]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	4a97      	ldr	r2, [pc, #604]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d016      	beq.n	8004e4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fc ff1c 	bl	8001c5c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fc ff18 	bl	8001c5c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e12a      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ed      	beq.n	8004e28 <HAL_RCC_OscConfig+0x53c>
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fc ff05 	bl	8001c5c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fc ff01 	bl	8001c5c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e113      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e6c:	4b7f      	ldr	r3, [pc, #508]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ed      	bne.n	8004e56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e7a:	7ffb      	ldrb	r3, [r7, #31]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e80:	4b7a      	ldr	r3, [pc, #488]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	4a79      	ldr	r2, [pc, #484]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80fe 	beq.w	8005092 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	f040 80d0 	bne.w	8005040 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ea0:	4b72      	ldr	r3, [pc, #456]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d130      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d127      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d11f      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ee0:	2a07      	cmp	r2, #7
 8004ee2:	bf14      	ite	ne
 8004ee4:	2201      	movne	r2, #1
 8004ee6:	2200      	moveq	r2, #0
 8004ee8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d113      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d06e      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d069      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f1c:	4b53      	ldr	r3, [pc, #332]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f28:	4b50      	ldr	r3, [pc, #320]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0ad      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f38:	4b4c      	ldr	r3, [pc, #304]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f44:	f7fc fe8a 	bl	8001c5c <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc fe86 	bl	8001c5c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e09a      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	4b43      	ldr	r3, [pc, #268]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6a:	4b40      	ldr	r3, [pc, #256]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	4b40      	ldr	r3, [pc, #256]	@ (8005070 <HAL_RCC_OscConfig+0x784>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	0112      	lsls	r2, r2, #4
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f84:	0212      	lsls	r2, r2, #8
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f8c:	0852      	lsrs	r2, r2, #1
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	0552      	lsls	r2, r2, #21
 8004f92:	4311      	orrs	r1, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f98:	0852      	lsrs	r2, r2, #1
 8004f9a:	3a01      	subs	r2, #1
 8004f9c:	0652      	lsls	r2, r2, #25
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fa4:	0912      	lsrs	r2, r2, #4
 8004fa6:	0452      	lsls	r2, r2, #17
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	4930      	ldr	r1, [pc, #192]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fc8:	f7fc fe48 	bl	8001c5c <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fc fe44 	bl	8001c5c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e058      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	4b22      	ldr	r3, [pc, #136]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fee:	e050      	b.n	8005092 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e04f      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d148      	bne.n	8005092 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005000:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a19      	ldr	r2, [pc, #100]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800500c:	4b17      	ldr	r3, [pc, #92]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4a16      	ldr	r2, [pc, #88]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8005012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005016:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005018:	f7fc fe20 	bl	8001c5c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fc fe1c 	bl	8001c5c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e030      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x734>
 800503e:	e028      	b.n	8005092 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d023      	beq.n	800508e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005046:	4b09      	ldr	r3, [pc, #36]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a08      	ldr	r2, [pc, #32]	@ (800506c <HAL_RCC_OscConfig+0x780>)
 800504c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fc fe03 	bl	8001c5c <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005058:	e00c      	b.n	8005074 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505a:	f7fc fdff 	bl	8001c5c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d905      	bls.n	8005074 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e013      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
 800506c:	40021000 	.word	0x40021000
 8005070:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005074:	4b09      	ldr	r3, [pc, #36]	@ (800509c <HAL_RCC_OscConfig+0x7b0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ec      	bne.n	800505a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <HAL_RCC_OscConfig+0x7b0>)
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	4905      	ldr	r1, [pc, #20]	@ (800509c <HAL_RCC_OscConfig+0x7b0>)
 8005086:	4b06      	ldr	r3, [pc, #24]	@ (80050a0 <HAL_RCC_OscConfig+0x7b4>)
 8005088:	4013      	ands	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
 800508c:	e001      	b.n	8005092 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000
 80050a0:	feeefffc 	.word	0xfeeefffc

080050a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0e7      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b75      	ldr	r3, [pc, #468]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d910      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b72      	ldr	r3, [pc, #456]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 0207 	bic.w	r2, r3, #7
 80050ce:	4970      	ldr	r1, [pc, #448]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b6e      	ldr	r3, [pc, #440]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0cf      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005100:	429a      	cmp	r2, r3
 8005102:	d908      	bls.n	8005116 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b63      	ldr	r3, [pc, #396]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4960      	ldr	r1, [pc, #384]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04c      	beq.n	80051bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512a:	4b5a      	ldr	r3, [pc, #360]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d121      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0a6      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	4b54      	ldr	r3, [pc, #336]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d115      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e09a      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800515a:	4b4e      	ldr	r3, [pc, #312]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e08e      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800516a:	4b4a      	ldr	r3, [pc, #296]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e086      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b46      	ldr	r3, [pc, #280]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4943      	ldr	r1, [pc, #268]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518c:	f7fc fd66 	bl	8001c5c <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fc fd62 	bl	8001c5c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e06e      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d010      	beq.n	80051ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	4b31      	ldr	r3, [pc, #196]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d208      	bcs.n	80051ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	492b      	ldr	r1, [pc, #172]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ea:	4b29      	ldr	r3, [pc, #164]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d210      	bcs.n	800521a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f8:	4b25      	ldr	r3, [pc, #148]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 0207 	bic.w	r2, r3, #7
 8005200:	4923      	ldr	r1, [pc, #140]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005208:	4b21      	ldr	r3, [pc, #132]	@ (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e036      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005226:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4918      	ldr	r1, [pc, #96]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d009      	beq.n	8005258 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005244:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4910      	ldr	r1, [pc, #64]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005258:	f000 f824 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	490b      	ldr	r1, [pc, #44]	@ (8005298 <HAL_RCC_ClockConfig+0x1f4>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
 8005274:	4a09      	ldr	r2, [pc, #36]	@ (800529c <HAL_RCC_ClockConfig+0x1f8>)
 8005276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <HAL_RCC_ClockConfig+0x1fc>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7fc fc9d 	bl	8001bbc <HAL_InitTick>
 8005282:	4603      	mov	r3, r0
 8005284:	72fb      	strb	r3, [r7, #11]

  return status;
 8005286:	7afb      	ldrb	r3, [r7, #11]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40022000 	.word	0x40022000
 8005294:	40021000 	.word	0x40021000
 8005298:	0800ad08 	.word	0x0800ad08
 800529c:	20000000 	.word	0x20000000
 80052a0:	20000004 	.word	0x20000004

080052a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	@ 0x24
 80052a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b2:	4b3e      	ldr	r3, [pc, #248]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052bc:	4b3b      	ldr	r3, [pc, #236]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x34>
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d121      	bne.n	8005316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d11e      	bne.n	8005316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052d8:	4b34      	ldr	r3, [pc, #208]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052e4:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e005      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052f4:	4b2d      	ldr	r3, [pc, #180]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005300:	4a2b      	ldr	r2, [pc, #172]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005314:	e00a      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d102      	bne.n	8005322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800531c:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e004      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d101      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005328:	4b23      	ldr	r3, [pc, #140]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800532a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d134      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005332:	4b1e      	ldr	r3, [pc, #120]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d003      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0xa6>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d003      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xac>
 8005348:	e005      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800534a:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800534c:	617b      	str	r3, [r7, #20]
      break;
 800534e:	e005      	b.n	800535c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005350:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005352:	617b      	str	r3, [r7, #20]
      break;
 8005354:	e002      	b.n	800535c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	617b      	str	r3, [r7, #20]
      break;
 800535a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800535c:	4b13      	ldr	r3, [pc, #76]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	3301      	adds	r3, #1
 8005368:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800536a:	4b10      	ldr	r3, [pc, #64]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	fb03 f202 	mul.w	r2, r3, r2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	0e5b      	lsrs	r3, r3, #25
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	3301      	adds	r3, #1
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800539c:	69bb      	ldr	r3, [r7, #24]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3724      	adds	r7, #36	@ 0x24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	0800ad20 	.word	0x0800ad20
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	007a1200 	.word	0x007a1200

080053bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000000 	.word	0x20000000

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d8:	f7ff fff0 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4904      	ldr	r1, [pc, #16]	@ (80053fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800ad18 	.word	0x0800ad18

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005404:	f7ff ffda 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0adb      	lsrs	r3, r3, #11
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4904      	ldr	r1, [pc, #16]	@ (8005428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000
 8005428:	0800ad18 	.word	0x0800ad18

0800542c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005438:	4b2a      	ldr	r3, [pc, #168]	@ (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005444:	f7ff f9ee 	bl	8004824 <HAL_PWREx_GetVoltageRange>
 8005448:	6178      	str	r0, [r7, #20]
 800544a:	e014      	b.n	8005476 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800544c:	4b25      	ldr	r3, [pc, #148]	@ (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005450:	4a24      	ldr	r2, [pc, #144]	@ (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005456:	6593      	str	r3, [r2, #88]	@ 0x58
 8005458:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005464:	f7ff f9de 	bl	8004824 <HAL_PWREx_GetVoltageRange>
 8005468:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800546a:	4b1e      	ldr	r3, [pc, #120]	@ (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005474:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800547c:	d10b      	bne.n	8005496 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b80      	cmp	r3, #128	@ 0x80
 8005482:	d919      	bls.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2ba0      	cmp	r3, #160	@ 0xa0
 8005488:	d902      	bls.n	8005490 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800548a:	2302      	movs	r3, #2
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e013      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005490:	2301      	movs	r3, #1
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	e010      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b80      	cmp	r3, #128	@ 0x80
 800549a:	d902      	bls.n	80054a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800549c:	2303      	movs	r3, #3
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	e00a      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b80      	cmp	r3, #128	@ 0x80
 80054a6:	d102      	bne.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054a8:	2302      	movs	r3, #2
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	e004      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b70      	cmp	r3, #112	@ 0x70
 80054b2:	d101      	bne.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054b4:	2301      	movs	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 0207 	bic.w	r2, r3, #7
 80054c0:	4909      	ldr	r1, [pc, #36]	@ (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054c8:	4b07      	ldr	r3, [pc, #28]	@ (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d001      	beq.n	80054da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40022000 	.word	0x40022000

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f4:	2300      	movs	r3, #0
 80054f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f8:	2300      	movs	r3, #0
 80054fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005504:	2b00      	cmp	r3, #0
 8005506:	d041      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800550c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005510:	d02a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005512:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005516:	d824      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005518:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800551c:	d008      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800551e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005522:	d81e      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800552c:	d010      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800552e:	e018      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005530:	4b86      	ldr	r3, [pc, #536]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a85      	ldr	r2, [pc, #532]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800553a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800553c:	e015      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fabb 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800554e:	e00c      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3320      	adds	r3, #32
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fba6 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	74fb      	strb	r3, [r7, #19]
      break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005570:	4b76      	ldr	r3, [pc, #472]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800557e:	4973      	ldr	r1, [pc, #460]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005586:	e001      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d041      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800559c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055a0:	d02a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80055a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055a6:	d824      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055ac:	d008      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055b2:	d81e      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80055b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055bc:	d010      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055be:	e018      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055c0:	4b62      	ldr	r3, [pc, #392]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a61      	ldr	r2, [pc, #388]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055cc:	e015      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fa73 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055de:	e00c      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3320      	adds	r3, #32
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fb5e 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	74fb      	strb	r3, [r7, #19]
      break;
 80055f6:	e000      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80055f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005600:	4b52      	ldr	r3, [pc, #328]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800560e:	494f      	ldr	r1, [pc, #316]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005616:	e001      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80a0 	beq.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800562e:	4b47      	ldr	r3, [pc, #284]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005644:	4b41      	ldr	r3, [pc, #260]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005648:	4a40      	ldr	r2, [pc, #256]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800564e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005650:	4b3e      	ldr	r3, [pc, #248]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565c:	2301      	movs	r3, #1
 800565e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005660:	4b3b      	ldr	r3, [pc, #236]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a3a      	ldr	r2, [pc, #232]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800566a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800566c:	f7fc faf6 	bl	8001c5c <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005672:	e009      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005674:	f7fc faf2 	bl	8001c5c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d902      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	74fb      	strb	r3, [r7, #19]
        break;
 8005686:	e005      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005688:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ef      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d15c      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800569a:	4b2c      	ldr	r3, [pc, #176]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d019      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056b8:	4b24      	ldr	r3, [pc, #144]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056c4:	4b21      	ldr	r3, [pc, #132]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ca:	4a20      	ldr	r2, [pc, #128]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056d4:	4b1d      	ldr	r3, [pc, #116]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056da:	4a1c      	ldr	r2, [pc, #112]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056e4:	4a19      	ldr	r2, [pc, #100]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fc fab1 	bl	8001c5c <HAL_GetTick>
 80056fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fc:	e00b      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fc faad 	bl	8001c5c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d902      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	74fb      	strb	r3, [r7, #19]
            break;
 8005714:	e006      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005716:	4b0d      	ldr	r3, [pc, #52]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ec      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005724:	7cfb      	ldrb	r3, [r7, #19]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800572a:	4b08      	ldr	r3, [pc, #32]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573a:	4904      	ldr	r1, [pc, #16]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005742:	e009      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005744:	7cfb      	ldrb	r3, [r7, #19]
 8005746:	74bb      	strb	r3, [r7, #18]
 8005748:	e006      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005758:	7c7b      	ldrb	r3, [r7, #17]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d105      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575e:	4b9e      	ldr	r3, [pc, #632]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	4a9d      	ldr	r2, [pc, #628]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005768:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005776:	4b98      	ldr	r3, [pc, #608]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f023 0203 	bic.w	r2, r3, #3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	4994      	ldr	r1, [pc, #592]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005798:	4b8f      	ldr	r3, [pc, #572]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f023 020c 	bic.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	498c      	ldr	r1, [pc, #560]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ba:	4b87      	ldr	r3, [pc, #540]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	4983      	ldr	r1, [pc, #524]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057dc:	4b7e      	ldr	r3, [pc, #504]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	497b      	ldr	r1, [pc, #492]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057fe:	4b76      	ldr	r3, [pc, #472]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800580c:	4972      	ldr	r1, [pc, #456]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005820:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582e:	496a      	ldr	r1, [pc, #424]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005842:	4b65      	ldr	r3, [pc, #404]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005850:	4961      	ldr	r1, [pc, #388]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005864:	4b5c      	ldr	r3, [pc, #368]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005872:	4959      	ldr	r1, [pc, #356]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005886:	4b54      	ldr	r3, [pc, #336]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005894:	4950      	ldr	r1, [pc, #320]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058a8:	4b4b      	ldr	r3, [pc, #300]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	4948      	ldr	r1, [pc, #288]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ca:	4b43      	ldr	r3, [pc, #268]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	493f      	ldr	r1, [pc, #252]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d028      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ec:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fa:	4937      	ldr	r1, [pc, #220]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590a:	d106      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b32      	ldr	r3, [pc, #200]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a31      	ldr	r2, [pc, #196]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
 8005918:	e011      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f8c8 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d028      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800594a:	4b23      	ldr	r3, [pc, #140]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	491f      	ldr	r1, [pc, #124]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005968:	d106      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596a:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4a1a      	ldr	r2, [pc, #104]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005970:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005974:	60d3      	str	r3, [r2, #12]
 8005976:	e011      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005980:	d10c      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	2101      	movs	r1, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f899 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02b      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b6:	4908      	ldr	r1, [pc, #32]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c6:	d109      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c8:	4b03      	ldr	r3, [pc, #12]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a02      	ldr	r2, [pc, #8]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d2:	60d3      	str	r3, [r2, #12]
 80059d4:	e014      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f867 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02f      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a1a:	4928      	ldr	r1, [pc, #160]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a2a:	d10d      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	2102      	movs	r1, #2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f844 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d014      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	74bb      	strb	r3, [r7, #18]
 8005a46:	e011      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3320      	adds	r3, #32
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 f925 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a78:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a86:	490d      	ldr	r1, [pc, #52]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a9a:	4b08      	ldr	r3, [pc, #32]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aaa:	4904      	ldr	r1, [pc, #16]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ab2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000

08005ac0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ace:	4b75      	ldr	r3, [pc, #468]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d018      	beq.n	8005b0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ada:	4b72      	ldr	r3, [pc, #456]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0203 	and.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10d      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
       ||
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005af2:	4b6c      	ldr	r3, [pc, #432]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
       ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d047      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	e044      	b.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d018      	beq.n	8005b46 <RCCEx_PLLSAI1_Config+0x86>
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d825      	bhi.n	8005b64 <RCCEx_PLLSAI1_Config+0xa4>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d002      	beq.n	8005b22 <RCCEx_PLLSAI1_Config+0x62>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d009      	beq.n	8005b34 <RCCEx_PLLSAI1_Config+0x74>
 8005b20:	e020      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b22:	4b60      	ldr	r3, [pc, #384]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11d      	bne.n	8005b6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b32:	e01a      	b.n	8005b6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b34:	4b5b      	ldr	r3, [pc, #364]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d116      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b44:	e013      	b.n	8005b6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b46:	4b57      	ldr	r3, [pc, #348]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b52:	4b54      	ldr	r3, [pc, #336]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b62:	e006      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
      break;
 8005b68:	e004      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b72:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	4944      	ldr	r1, [pc, #272]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d17d      	bne.n	8005c98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b9c:	4b41      	ldr	r3, [pc, #260]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a40      	ldr	r2, [pc, #256]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba8:	f7fc f858 	bl	8001c5c <HAL_GetTick>
 8005bac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bae:	e009      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb0:	f7fc f854 	bl	8001c5c <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d902      	bls.n	8005bc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc2:	e005      	b.n	8005bd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bc4:	4b37      	ldr	r3, [pc, #220]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ef      	bne.n	8005bb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d160      	bne.n	8005c98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d111      	bne.n	8005c00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bdc:	4b31      	ldr	r3, [pc, #196]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6892      	ldr	r2, [r2, #8]
 8005bec:	0211      	lsls	r1, r2, #8
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	0912      	lsrs	r2, r2, #4
 8005bf4:	0452      	lsls	r2, r2, #17
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	492a      	ldr	r1, [pc, #168]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	610b      	str	r3, [r1, #16]
 8005bfe:	e027      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d112      	bne.n	8005c2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c06:	4b27      	ldr	r3, [pc, #156]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6892      	ldr	r2, [r2, #8]
 8005c16:	0211      	lsls	r1, r2, #8
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6912      	ldr	r2, [r2, #16]
 8005c1c:	0852      	lsrs	r2, r2, #1
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	0552      	lsls	r2, r2, #21
 8005c22:	430a      	orrs	r2, r1
 8005c24:	491f      	ldr	r1, [pc, #124]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]
 8005c2a:	e011      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6892      	ldr	r2, [r2, #8]
 8005c3c:	0211      	lsls	r1, r2, #8
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6952      	ldr	r2, [r2, #20]
 8005c42:	0852      	lsrs	r2, r2, #1
 8005c44:	3a01      	subs	r2, #1
 8005c46:	0652      	lsls	r2, r2, #25
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	4916      	ldr	r1, [pc, #88]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c50:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a13      	ldr	r2, [pc, #76]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5c:	f7fb fffe 	bl	8001c5c <HAL_GetTick>
 8005c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c62:	e009      	b.n	8005c78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c64:	f7fb fffa 	bl	8001c5c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d902      	bls.n	8005c78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	73fb      	strb	r3, [r7, #15]
          break;
 8005c76:	e005      	b.n	8005c84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0ef      	beq.n	8005c64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	4904      	ldr	r1, [pc, #16]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0203 	and.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d10d      	bne.n	8005cee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005cda:	4b61      	ldr	r3, [pc, #388]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
       ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d047      	beq.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	e044      	b.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d018      	beq.n	8005d2e <RCCEx_PLLSAI2_Config+0x86>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d825      	bhi.n	8005d4c <RCCEx_PLLSAI2_Config+0xa4>
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d002      	beq.n	8005d0a <RCCEx_PLLSAI2_Config+0x62>
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d009      	beq.n	8005d1c <RCCEx_PLLSAI2_Config+0x74>
 8005d08:	e020      	b.n	8005d4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d0a:	4b55      	ldr	r3, [pc, #340]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11d      	bne.n	8005d52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1a:	e01a      	b.n	8005d52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d1c:	4b50      	ldr	r3, [pc, #320]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d116      	bne.n	8005d56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2c:	e013      	b.n	8005d56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d3a:	4b49      	ldr	r3, [pc, #292]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d4a:	e006      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e004      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d62:	4b3f      	ldr	r3, [pc, #252]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	430b      	orrs	r3, r1
 8005d78:	4939      	ldr	r1, [pc, #228]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d167      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d84:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a35      	ldr	r2, [pc, #212]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d90:	f7fb ff64 	bl	8001c5c <HAL_GetTick>
 8005d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d96:	e009      	b.n	8005dac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d98:	f7fb ff60 	bl	8001c5c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d902      	bls.n	8005dac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	73fb      	strb	r3, [r7, #15]
        break;
 8005daa:	e005      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dac:	4b2c      	ldr	r3, [pc, #176]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ef      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d14a      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d111      	bne.n	8005de8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dc4:	4b26      	ldr	r3, [pc, #152]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	0211      	lsls	r1, r2, #8
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68d2      	ldr	r2, [r2, #12]
 8005dda:	0912      	lsrs	r2, r2, #4
 8005ddc:	0452      	lsls	r2, r2, #17
 8005dde:	430a      	orrs	r2, r1
 8005de0:	491f      	ldr	r1, [pc, #124]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	614b      	str	r3, [r1, #20]
 8005de6:	e011      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005de8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005df0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6892      	ldr	r2, [r2, #8]
 8005df8:	0211      	lsls	r1, r2, #8
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6912      	ldr	r2, [r2, #16]
 8005dfe:	0852      	lsrs	r2, r2, #1
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0652      	lsls	r2, r2, #25
 8005e04:	430a      	orrs	r2, r1
 8005e06:	4916      	ldr	r1, [pc, #88]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e0c:	4b14      	ldr	r3, [pc, #80]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a13      	ldr	r2, [pc, #76]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fb ff20 	bl	8001c5c <HAL_GetTick>
 8005e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e1e:	e009      	b.n	8005e34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e20:	f7fb ff1c 	bl	8001c5c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d902      	bls.n	8005e34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	73fb      	strb	r3, [r7, #15]
          break;
 8005e32:	e005      	b.n	8005e40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e34:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ef      	beq.n	8005e20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e46:	4b06      	ldr	r3, [pc, #24]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	4904      	ldr	r1, [pc, #16]	@ (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000

08005e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e049      	b.n	8005f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fb fc2a 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f000 fcaa 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e049      	b.n	8005fb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fb fbf7 	bl	800172c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f000 fc53 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_TIM_PWM_Start+0x24>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e03c      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d109      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x3e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e02f      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d109      	bne.n	8006018 <HAL_TIM_PWM_Start+0x58>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	e022      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b0c      	cmp	r3, #12
 800601c:	d109      	bne.n	8006032 <HAL_TIM_PWM_Start+0x72>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	bf14      	ite	ne
 800602a:	2301      	movne	r3, #1
 800602c:	2300      	moveq	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	e015      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b10      	cmp	r3, #16
 8006036:	d109      	bne.n	800604c <HAL_TIM_PWM_Start+0x8c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	e008      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e09c      	b.n	80061a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xb6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006074:	e023      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xc6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006084:	e01b      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xd6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006094:	e013      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Start+0xe6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060a4:	e00b      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0xf6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060b4:	e003      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 ffae 	bl	8007028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a35      	ldr	r2, [pc, #212]	@ (80061a8 <HAL_TIM_PWM_Start+0x1e8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a34      	ldr	r2, [pc, #208]	@ (80061ac <HAL_TIM_PWM_Start+0x1ec>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a32      	ldr	r2, [pc, #200]	@ (80061b0 <HAL_TIM_PWM_Start+0x1f0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a31      	ldr	r2, [pc, #196]	@ (80061b4 <HAL_TIM_PWM_Start+0x1f4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2f      	ldr	r2, [pc, #188]	@ (80061b8 <HAL_TIM_PWM_Start+0x1f8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_PWM_Start+0x142>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_TIM_PWM_Start+0x144>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a22      	ldr	r2, [pc, #136]	@ (80061a8 <HAL_TIM_PWM_Start+0x1e8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_TIM_PWM_Start+0x19e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612a:	d018      	beq.n	800615e <HAL_TIM_PWM_Start+0x19e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a22      	ldr	r2, [pc, #136]	@ (80061bc <HAL_TIM_PWM_Start+0x1fc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_TIM_PWM_Start+0x19e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a21      	ldr	r2, [pc, #132]	@ (80061c0 <HAL_TIM_PWM_Start+0x200>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_TIM_PWM_Start+0x19e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1f      	ldr	r2, [pc, #124]	@ (80061c4 <HAL_TIM_PWM_Start+0x204>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_TIM_PWM_Start+0x19e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a17      	ldr	r2, [pc, #92]	@ (80061ac <HAL_TIM_PWM_Start+0x1ec>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIM_PWM_Start+0x19e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a15      	ldr	r2, [pc, #84]	@ (80061b0 <HAL_TIM_PWM_Start+0x1f0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d115      	bne.n	800618a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	4b18      	ldr	r3, [pc, #96]	@ (80061c8 <HAL_TIM_PWM_Start+0x208>)
 8006166:	4013      	ands	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d015      	beq.n	800619c <HAL_TIM_PWM_Start+0x1dc>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006176:	d011      	beq.n	800619c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006188:	e008      	b.n	800619c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0201 	orr.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e000      	b.n	800619e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40013400 	.word	0x40013400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	00010007 	.word	0x00010007

080061cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d020      	beq.n	8006230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0202 	mvn.w	r2, #2
 8006200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fad1 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 800621c:	e005      	b.n	800622a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fac3 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fad4 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0204 	mvn.w	r2, #4
 800624c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 faab 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa9d 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 faae 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0208 	mvn.w	r2, #8
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa85 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa77 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa88 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0210 	mvn.w	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2208      	movs	r2, #8
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa5f 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa51 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa62 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0201 	mvn.w	r2, #1
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa2f 	bl	8006796 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800635e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 ff19 	bl	8007198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 ff11 	bl	80071ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fa1c 	bl	80067e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f06f 0220 	mvn.w	r2, #32
 80063ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fed9 	bl	8007184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0ff      	b.n	80065fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b14      	cmp	r3, #20
 8006406:	f200 80f0 	bhi.w	80065ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006465 	.word	0x08006465
 8006414:	080065eb 	.word	0x080065eb
 8006418:	080065eb 	.word	0x080065eb
 800641c:	080065eb 	.word	0x080065eb
 8006420:	080064a5 	.word	0x080064a5
 8006424:	080065eb 	.word	0x080065eb
 8006428:	080065eb 	.word	0x080065eb
 800642c:	080065eb 	.word	0x080065eb
 8006430:	080064e7 	.word	0x080064e7
 8006434:	080065eb 	.word	0x080065eb
 8006438:	080065eb 	.word	0x080065eb
 800643c:	080065eb 	.word	0x080065eb
 8006440:	08006527 	.word	0x08006527
 8006444:	080065eb 	.word	0x080065eb
 8006448:	080065eb 	.word	0x080065eb
 800644c:	080065eb 	.word	0x080065eb
 8006450:	08006569 	.word	0x08006569
 8006454:	080065eb 	.word	0x080065eb
 8006458:	080065eb 	.word	0x080065eb
 800645c:	080065eb 	.word	0x080065eb
 8006460:	080065a9 	.word	0x080065a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fa6c 	bl	8006948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0208 	orr.w	r2, r2, #8
 800647e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0204 	bic.w	r2, r2, #4
 800648e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	619a      	str	r2, [r3, #24]
      break;
 80064a2:	e0a5      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fadc 	bl	8006a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6999      	ldr	r1, [r3, #24]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	619a      	str	r2, [r3, #24]
      break;
 80064e4:	e084      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fb45 	bl	8006b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0208 	orr.w	r2, r2, #8
 8006500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0204 	bic.w	r2, r2, #4
 8006510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	61da      	str	r2, [r3, #28]
      break;
 8006524:	e064      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fbad 	bl	8006c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69d9      	ldr	r1, [r3, #28]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	021a      	lsls	r2, r3, #8
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	61da      	str	r2, [r3, #28]
      break;
 8006566:	e043      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fbf6 	bl	8006d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0208 	orr.w	r2, r2, #8
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0204 	bic.w	r2, r2, #4
 8006592:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065a6:	e023      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fc3a 	bl	8006e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	021a      	lsls	r2, r3, #8
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065e8:	e002      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
      break;
 80065ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop

08006604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIM_ConfigClockSource+0x1c>
 800661c:	2302      	movs	r3, #2
 800661e:	e0b6      	b.n	800678e <HAL_TIM_ConfigClockSource+0x18a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800663e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800664a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800665c:	d03e      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0xd8>
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006662:	f200 8087 	bhi.w	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666a:	f000 8086 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x176>
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006672:	d87f      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006674:	2b70      	cmp	r3, #112	@ 0x70
 8006676:	d01a      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xaa>
 8006678:	2b70      	cmp	r3, #112	@ 0x70
 800667a:	d87b      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 800667c:	2b60      	cmp	r3, #96	@ 0x60
 800667e:	d050      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0x11e>
 8006680:	2b60      	cmp	r3, #96	@ 0x60
 8006682:	d877      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006684:	2b50      	cmp	r3, #80	@ 0x50
 8006686:	d03c      	beq.n	8006702 <HAL_TIM_ConfigClockSource+0xfe>
 8006688:	2b50      	cmp	r3, #80	@ 0x50
 800668a:	d873      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 800668c:	2b40      	cmp	r3, #64	@ 0x40
 800668e:	d058      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x13e>
 8006690:	2b40      	cmp	r3, #64	@ 0x40
 8006692:	d86f      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006694:	2b30      	cmp	r3, #48	@ 0x30
 8006696:	d064      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 8006698:	2b30      	cmp	r3, #48	@ 0x30
 800669a:	d86b      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 800669c:	2b20      	cmp	r3, #32
 800669e:	d060      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d867      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d05c      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d05a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 80066ac:	e062      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	f000 fc93 	bl	8006fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	609a      	str	r2, [r3, #8]
      break;
 80066da:	e04f      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	f000 fc7c 	bl	8006fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066fe:	609a      	str	r2, [r3, #8]
      break;
 8006700:	e03c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800670e:	461a      	mov	r2, r3
 8006710:	f000 fbf0 	bl	8006ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2150      	movs	r1, #80	@ 0x50
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fc49 	bl	8006fb2 <TIM_ITRx_SetConfig>
      break;
 8006720:	e02c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800672e:	461a      	mov	r2, r3
 8006730:	f000 fc0f 	bl	8006f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2160      	movs	r1, #96	@ 0x60
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fc39 	bl	8006fb2 <TIM_ITRx_SetConfig>
      break;
 8006740:	e01c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800674e:	461a      	mov	r2, r3
 8006750:	f000 fbd0 	bl	8006ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2140      	movs	r1, #64	@ 0x40
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fc29 	bl	8006fb2 <TIM_ITRx_SetConfig>
      break;
 8006760:	e00c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fc20 	bl	8006fb2 <TIM_ITRx_SetConfig>
      break;
 8006772:	e003      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      break;
 8006778:	e000      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800677a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a46      	ldr	r2, [pc, #280]	@ (8006928 <TIM_Base_SetConfig+0x12c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800681a:	d00f      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a43      	ldr	r2, [pc, #268]	@ (800692c <TIM_Base_SetConfig+0x130>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a42      	ldr	r2, [pc, #264]	@ (8006930 <TIM_Base_SetConfig+0x134>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a41      	ldr	r2, [pc, #260]	@ (8006934 <TIM_Base_SetConfig+0x138>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a40      	ldr	r2, [pc, #256]	@ (8006938 <TIM_Base_SetConfig+0x13c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a35      	ldr	r2, [pc, #212]	@ (8006928 <TIM_Base_SetConfig+0x12c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01f      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685c:	d01b      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a32      	ldr	r2, [pc, #200]	@ (800692c <TIM_Base_SetConfig+0x130>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d017      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a31      	ldr	r2, [pc, #196]	@ (8006930 <TIM_Base_SetConfig+0x134>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a30      	ldr	r2, [pc, #192]	@ (8006934 <TIM_Base_SetConfig+0x138>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00f      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a2f      	ldr	r2, [pc, #188]	@ (8006938 <TIM_Base_SetConfig+0x13c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2e      	ldr	r2, [pc, #184]	@ (800693c <TIM_Base_SetConfig+0x140>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a2d      	ldr	r2, [pc, #180]	@ (8006940 <TIM_Base_SetConfig+0x144>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_Base_SetConfig+0x9a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2c      	ldr	r2, [pc, #176]	@ (8006944 <TIM_Base_SetConfig+0x148>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <TIM_Base_SetConfig+0x12c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00f      	beq.n	80068f4 <TIM_Base_SetConfig+0xf8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <TIM_Base_SetConfig+0x13c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00b      	beq.n	80068f4 <TIM_Base_SetConfig+0xf8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a17      	ldr	r2, [pc, #92]	@ (800693c <TIM_Base_SetConfig+0x140>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d007      	beq.n	80068f4 <TIM_Base_SetConfig+0xf8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <TIM_Base_SetConfig+0x144>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_Base_SetConfig+0xf8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <TIM_Base_SetConfig+0x148>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d103      	bne.n	80068fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d105      	bne.n	800691a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]
  }
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40013400 	.word	0x40013400
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800

08006948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f023 0201 	bic.w	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 0302 	bic.w	r3, r3, #2
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006a54 <TIM_OC1_SetConfig+0x10c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_OC1_SetConfig+0x80>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006a58 <TIM_OC1_SetConfig+0x110>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_OC1_SetConfig+0x80>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <TIM_OC1_SetConfig+0x114>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_OC1_SetConfig+0x80>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a29      	ldr	r2, [pc, #164]	@ (8006a60 <TIM_OC1_SetConfig+0x118>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC1_SetConfig+0x80>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a28      	ldr	r2, [pc, #160]	@ (8006a64 <TIM_OC1_SetConfig+0x11c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10c      	bne.n	80069e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0308 	bic.w	r3, r3, #8
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 0304 	bic.w	r3, r3, #4
 80069e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a54 <TIM_OC1_SetConfig+0x10c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00f      	beq.n	8006a0a <TIM_OC1_SetConfig+0xc2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006a58 <TIM_OC1_SetConfig+0x110>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00b      	beq.n	8006a0a <TIM_OC1_SetConfig+0xc2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a19      	ldr	r2, [pc, #100]	@ (8006a5c <TIM_OC1_SetConfig+0x114>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d007      	beq.n	8006a0a <TIM_OC1_SetConfig+0xc2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a18      	ldr	r2, [pc, #96]	@ (8006a60 <TIM_OC1_SetConfig+0x118>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d003      	beq.n	8006a0a <TIM_OC1_SetConfig+0xc2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <TIM_OC1_SetConfig+0x11c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d111      	bne.n	8006a2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800

08006a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f023 0210 	bic.w	r2, r3, #16
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0320 	bic.w	r3, r3, #32
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a28      	ldr	r2, [pc, #160]	@ (8006b68 <TIM_OC2_SetConfig+0x100>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_OC2_SetConfig+0x6c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a27      	ldr	r2, [pc, #156]	@ (8006b6c <TIM_OC2_SetConfig+0x104>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10d      	bne.n	8006af0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b68 <TIM_OC2_SetConfig+0x100>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00f      	beq.n	8006b18 <TIM_OC2_SetConfig+0xb0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	@ (8006b6c <TIM_OC2_SetConfig+0x104>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00b      	beq.n	8006b18 <TIM_OC2_SetConfig+0xb0>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1b      	ldr	r2, [pc, #108]	@ (8006b70 <TIM_OC2_SetConfig+0x108>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <TIM_OC2_SetConfig+0xb0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b74 <TIM_OC2_SetConfig+0x10c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_OC2_SetConfig+0xb0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a19      	ldr	r2, [pc, #100]	@ (8006b78 <TIM_OC2_SetConfig+0x110>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d113      	bne.n	8006b40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a27      	ldr	r2, [pc, #156]	@ (8006c78 <TIM_OC3_SetConfig+0xfc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d003      	beq.n	8006be6 <TIM_OC3_SetConfig+0x6a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a26      	ldr	r2, [pc, #152]	@ (8006c7c <TIM_OC3_SetConfig+0x100>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d10d      	bne.n	8006c02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1c      	ldr	r2, [pc, #112]	@ (8006c78 <TIM_OC3_SetConfig+0xfc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_OC3_SetConfig+0xae>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c7c <TIM_OC3_SetConfig+0x100>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_OC3_SetConfig+0xae>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1a      	ldr	r2, [pc, #104]	@ (8006c80 <TIM_OC3_SetConfig+0x104>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_OC3_SetConfig+0xae>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	@ (8006c84 <TIM_OC3_SetConfig+0x108>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC3_SetConfig+0xae>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a18      	ldr	r2, [pc, #96]	@ (8006c88 <TIM_OC3_SetConfig+0x10c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d113      	bne.n	8006c52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	621a      	str	r2, [r3, #32]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a18      	ldr	r2, [pc, #96]	@ (8006d4c <TIM_OC4_SetConfig+0xc0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00f      	beq.n	8006d10 <TIM_OC4_SetConfig+0x84>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	@ (8006d50 <TIM_OC4_SetConfig+0xc4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <TIM_OC4_SetConfig+0x84>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	@ (8006d54 <TIM_OC4_SetConfig+0xc8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <TIM_OC4_SetConfig+0x84>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a15      	ldr	r2, [pc, #84]	@ (8006d58 <TIM_OC4_SetConfig+0xcc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_OC4_SetConfig+0x84>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a14      	ldr	r2, [pc, #80]	@ (8006d5c <TIM_OC4_SetConfig+0xd0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d109      	bne.n	8006d24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	019b      	lsls	r3, r3, #6
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	40013400 	.word	0x40013400
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40014400 	.word	0x40014400
 8006d5c:	40014800 	.word	0x40014800

08006d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a17      	ldr	r2, [pc, #92]	@ (8006e14 <TIM_OC5_SetConfig+0xb4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <TIM_OC5_SetConfig+0x7a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a16      	ldr	r2, [pc, #88]	@ (8006e18 <TIM_OC5_SetConfig+0xb8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00b      	beq.n	8006dda <TIM_OC5_SetConfig+0x7a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	@ (8006e1c <TIM_OC5_SetConfig+0xbc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <TIM_OC5_SetConfig+0x7a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a14      	ldr	r2, [pc, #80]	@ (8006e20 <TIM_OC5_SetConfig+0xc0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d003      	beq.n	8006dda <TIM_OC5_SetConfig+0x7a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a13      	ldr	r2, [pc, #76]	@ (8006e24 <TIM_OC5_SetConfig+0xc4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d109      	bne.n	8006dee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	621a      	str	r2, [r3, #32]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800

08006e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	051b      	lsls	r3, r3, #20
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	@ (8006ee0 <TIM_OC6_SetConfig+0xb8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00f      	beq.n	8006ea4 <TIM_OC6_SetConfig+0x7c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	@ (8006ee4 <TIM_OC6_SetConfig+0xbc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00b      	beq.n	8006ea4 <TIM_OC6_SetConfig+0x7c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ee8 <TIM_OC6_SetConfig+0xc0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_OC6_SetConfig+0x7c>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a15      	ldr	r2, [pc, #84]	@ (8006eec <TIM_OC6_SetConfig+0xc4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC6_SetConfig+0x7c>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a14      	ldr	r2, [pc, #80]	@ (8006ef0 <TIM_OC6_SetConfig+0xc8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d109      	bne.n	8006eb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	029b      	lsls	r3, r3, #10
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40014400 	.word	0x40014400
 8006ef0:	40014800 	.word	0x40014800

08006ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f023 0201 	bic.w	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f023 030a 	bic.w	r3, r3, #10
 8006f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b087      	sub	sp, #28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f023 0210 	bic.w	r2, r3, #16
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	031b      	lsls	r3, r3, #12
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f043 0307 	orr.w	r3, r3, #7
 8006fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	021a      	lsls	r2, r3, #8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	431a      	orrs	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4313      	orrs	r3, r2
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	609a      	str	r2, [r3, #8]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	2201      	movs	r2, #1
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	43db      	mvns	r3, r3
 800704a:	401a      	ands	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	fa01 f303 	lsl.w	r3, r1, r3
 8007060:	431a      	orrs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007088:	2302      	movs	r3, #2
 800708a:	e068      	b.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2e      	ldr	r2, [pc, #184]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d108      	bne.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1e      	ldr	r2, [pc, #120]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01d      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070fe:	d018      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1b      	ldr	r2, [pc, #108]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1a      	ldr	r2, [pc, #104]	@ (8007178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a18      	ldr	r2, [pc, #96]	@ (800717c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a13      	ldr	r2, [pc, #76]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a14      	ldr	r2, [pc, #80]	@ (8007180 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10c      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4313      	orrs	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40013400 	.word	0x40013400
 8007174:	40000400 	.word	0x40000400
 8007178:	40000800 	.word	0x40000800
 800717c:	40000c00 	.word	0x40000c00
 8007180:	40014000 	.word	0x40014000

08007184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e040      	b.n	8007254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fa fb00 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	@ 0x24
 80071ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fe90 	bl	8007f2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fbd5 	bl	80079bc <UART_SetConfig>
 8007212:	4603      	mov	r3, r0
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e01b      	b.n	8007254 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800722a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800723a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 ff0f 	bl	8008070 <UART_CheckIdleState>
 8007252:	4603      	mov	r3, r0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	@ 0x28
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007270:	2b20      	cmp	r3, #32
 8007272:	d177      	bne.n	8007364 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_UART_Transmit+0x24>
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e070      	b.n	8007366 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2221      	movs	r2, #33	@ 0x21
 8007290:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007292:	f7fa fce3 	bl	8001c5c <HAL_GetTick>
 8007296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b0:	d108      	bne.n	80072c4 <HAL_UART_Transmit+0x68>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e003      	b.n	80072cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072cc:	e02f      	b.n	800732e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2200      	movs	r2, #0
 80072d6:	2180      	movs	r1, #128	@ 0x80
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 ff71 	bl	80081c0 <UART_WaitOnFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e03b      	b.n	8007366 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	881a      	ldrh	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007300:	b292      	uxth	r2, r2
 8007302:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	3302      	adds	r3, #2
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	e007      	b.n	800731c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3301      	adds	r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1c9      	bne.n	80072ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2200      	movs	r2, #0
 8007342:	2140      	movs	r1, #64	@ 0x40
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 ff3b 	bl	80081c0 <UART_WaitOnFlagUntilTimeout>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e005      	b.n	8007366 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	e000      	b.n	8007366 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007364:	2302      	movs	r3, #2
  }
}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b0ba      	sub	sp, #232	@ 0xe8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007396:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800739a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800739e:	4013      	ands	r3, r2
 80073a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80073a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d115      	bne.n	80073d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00f      	beq.n	80073d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 82ca 	beq.w	8007962 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
      }
      return;
 80073d6:	e2c4      	b.n	8007962 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80073d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8117 	beq.w	8007610 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073f2:	4b85      	ldr	r3, [pc, #532]	@ (8007608 <HAL_UART_IRQHandler+0x298>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 810a 	beq.w	8007610 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d011      	beq.n	800742c <HAL_UART_IRQHandler+0xbc>
 8007408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2201      	movs	r2, #1
 800741a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007422:	f043 0201 	orr.w	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800742c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d011      	beq.n	800745c <HAL_UART_IRQHandler+0xec>
 8007438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2202      	movs	r2, #2
 800744a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007452:	f043 0204 	orr.w	r2, r3, #4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d011      	beq.n	800748c <HAL_UART_IRQHandler+0x11c>
 8007468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2204      	movs	r2, #4
 800747a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800748c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d017      	beq.n	80074c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2208      	movs	r2, #8
 80074b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074be:	f043 0208 	orr.w	r2, r3, #8
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d012      	beq.n	80074fa <HAL_UART_IRQHandler+0x18a>
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00c      	beq.n	80074fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f0:	f043 0220 	orr.w	r2, r3, #32
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8230 	beq.w	8007966 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d005      	beq.n	8007552 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800754e:	2b00      	cmp	r3, #0
 8007550:	d04f      	beq.n	80075f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fea1 	bl	800829a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d141      	bne.n	80075ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800757c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3308      	adds	r3, #8
 800758e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007592:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800759e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1d9      	bne.n	8007566 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d013      	beq.n	80075e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075be:	4a13      	ldr	r2, [pc, #76]	@ (800760c <HAL_UART_IRQHandler+0x29c>)
 80075c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fc fe92 	bl	80042f0 <HAL_DMA_Abort_IT>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d017      	beq.n	8007602 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	e00f      	b.n	8007602 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9d4 	bl	8007990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00b      	b.n	8007602 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9d0 	bl	8007990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e007      	b.n	8007602 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9cc 	bl	8007990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007600:	e1b1      	b.n	8007966 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007602:	bf00      	nop
    return;
 8007604:	e1af      	b.n	8007966 <HAL_UART_IRQHandler+0x5f6>
 8007606:	bf00      	nop
 8007608:	04000120 	.word	0x04000120
 800760c:	08008363 	.word	0x08008363

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007614:	2b01      	cmp	r3, #1
 8007616:	f040 816a 	bne.w	80078ee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8163 	beq.w	80078ee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 815c 	beq.w	80078ee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2210      	movs	r2, #16
 800763c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	f040 80d4 	bne.w	80077f6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800765a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80ad 	beq.w	80077be <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800766a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800766e:	429a      	cmp	r2, r3
 8007670:	f080 80a5 	bcs.w	80077be <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800767a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 8086 	bne.w	800779c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1da      	bne.n	8007690 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076ec:	f023 0301 	bic.w	r3, r3, #1
 80076f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007702:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007706:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e1      	bne.n	80076da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3308      	adds	r3, #8
 800771c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800772c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3308      	adds	r3, #8
 8007736:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800773a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800773c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007740:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e3      	bne.n	8007716 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800776a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800776c:	f023 0310 	bic.w	r3, r3, #16
 8007770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800777e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007780:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007784:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800778c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e4      	bne.n	800775c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007796:	4618      	mov	r0, r3
 8007798:	f7fc fd6c 	bl	8004274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f8f4 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80077bc:	e0d5      	b.n	800796a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077c8:	429a      	cmp	r2, r3
 80077ca:	f040 80ce 	bne.w	800796a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 80c5 	bne.w	800796a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8d8 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
      return;
 80077f4:	e0b9      	b.n	800796a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007802:	b29b      	uxth	r3, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80ab 	beq.w	800796e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80a6 	beq.w	800796e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007844:	647b      	str	r3, [r7, #68]	@ 0x44
 8007846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800784a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e4      	bne.n	8007822 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	623b      	str	r3, [r7, #32]
   return(result);
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800787c:	633a      	str	r2, [r7, #48]	@ 0x30
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800788a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e3      	bne.n	8007858 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f023 0310 	bic.w	r3, r3, #16
 80078b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	69b9      	ldr	r1, [r7, #24]
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	617b      	str	r3, [r7, #20]
   return(result);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e4      	bne.n	80078a4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f85c 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078ec:	e03f      	b.n	800796e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <HAL_UART_IRQHandler+0x5a8>
 80078fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d008      	beq.n	8007918 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800790e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd66 	bl	80083e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007916:	e02d      	b.n	8007974 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00e      	beq.n	8007942 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01c      	beq.n	8007972 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
    }
    return;
 8007940:	e017      	b.n	8007972 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d012      	beq.n	8007974 <HAL_UART_IRQHandler+0x604>
 800794e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00c      	beq.n	8007974 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fd17 	bl	800838e <UART_EndTransmit_IT>
    return;
 8007960:	e008      	b.n	8007974 <HAL_UART_IRQHandler+0x604>
      return;
 8007962:	bf00      	nop
 8007964:	e006      	b.n	8007974 <HAL_UART_IRQHandler+0x604>
    return;
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <HAL_UART_IRQHandler+0x604>
      return;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_UART_IRQHandler+0x604>
      return;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_UART_IRQHandler+0x604>
    return;
 8007972:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007974:	37e8      	adds	r7, #232	@ 0xe8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079c0:	b08a      	sub	sp, #40	@ 0x28
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	431a      	orrs	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4ba4      	ldr	r3, [pc, #656]	@ (8007c7c <UART_SetConfig+0x2c0>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a99      	ldr	r2, [pc, #612]	@ (8007c80 <UART_SetConfig+0x2c4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a24:	4313      	orrs	r3, r2
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a90      	ldr	r2, [pc, #576]	@ (8007c84 <UART_SetConfig+0x2c8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d126      	bne.n	8007a94 <UART_SetConfig+0xd8>
 8007a46:	4b90      	ldr	r3, [pc, #576]	@ (8007c88 <UART_SetConfig+0x2cc>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d81b      	bhi.n	8007a8c <UART_SetConfig+0xd0>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <UART_SetConfig+0xa0>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a85 	.word	0x08007a85
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a72:	e116      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007a74:	2302      	movs	r3, #2
 8007a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a7a:	e112      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a82:	e10e      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a8a:	e10a      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a92:	e106      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a7c      	ldr	r2, [pc, #496]	@ (8007c8c <UART_SetConfig+0x2d0>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d138      	bne.n	8007b10 <UART_SetConfig+0x154>
 8007a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8007c88 <UART_SetConfig+0x2cc>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa4:	f003 030c 	and.w	r3, r3, #12
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	d82d      	bhi.n	8007b08 <UART_SetConfig+0x14c>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <UART_SetConfig+0xf8>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007ae9 	.word	0x08007ae9
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007b09 	.word	0x08007b09
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007af1 	.word	0x08007af1
 8007ad8:	08007b09 	.word	0x08007b09
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aee:	e0d8      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007af0:	2302      	movs	r3, #2
 8007af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af6:	e0d4      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007af8:	2304      	movs	r3, #4
 8007afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007afe:	e0d0      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b00:	2308      	movs	r3, #8
 8007b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b06:	e0cc      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b0e:	e0c8      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a5e      	ldr	r2, [pc, #376]	@ (8007c90 <UART_SetConfig+0x2d4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d125      	bne.n	8007b66 <UART_SetConfig+0x1aa>
 8007b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8007c88 <UART_SetConfig+0x2cc>)
 8007b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b24:	2b30      	cmp	r3, #48	@ 0x30
 8007b26:	d016      	beq.n	8007b56 <UART_SetConfig+0x19a>
 8007b28:	2b30      	cmp	r3, #48	@ 0x30
 8007b2a:	d818      	bhi.n	8007b5e <UART_SetConfig+0x1a2>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d00a      	beq.n	8007b46 <UART_SetConfig+0x18a>
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d814      	bhi.n	8007b5e <UART_SetConfig+0x1a2>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <UART_SetConfig+0x182>
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d008      	beq.n	8007b4e <UART_SetConfig+0x192>
 8007b3c:	e00f      	b.n	8007b5e <UART_SetConfig+0x1a2>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b44:	e0ad      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b46:	2302      	movs	r3, #2
 8007b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4c:	e0a9      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b4e:	2304      	movs	r3, #4
 8007b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b54:	e0a5      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b56:	2308      	movs	r3, #8
 8007b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5c:	e0a1      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b5e:	2310      	movs	r3, #16
 8007b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b64:	e09d      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8007c94 <UART_SetConfig+0x2d8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d125      	bne.n	8007bbc <UART_SetConfig+0x200>
 8007b70:	4b45      	ldr	r3, [pc, #276]	@ (8007c88 <UART_SetConfig+0x2cc>)
 8007b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b7c:	d016      	beq.n	8007bac <UART_SetConfig+0x1f0>
 8007b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b80:	d818      	bhi.n	8007bb4 <UART_SetConfig+0x1f8>
 8007b82:	2b80      	cmp	r3, #128	@ 0x80
 8007b84:	d00a      	beq.n	8007b9c <UART_SetConfig+0x1e0>
 8007b86:	2b80      	cmp	r3, #128	@ 0x80
 8007b88:	d814      	bhi.n	8007bb4 <UART_SetConfig+0x1f8>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <UART_SetConfig+0x1d8>
 8007b8e:	2b40      	cmp	r3, #64	@ 0x40
 8007b90:	d008      	beq.n	8007ba4 <UART_SetConfig+0x1e8>
 8007b92:	e00f      	b.n	8007bb4 <UART_SetConfig+0x1f8>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b9a:	e082      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ba2:	e07e      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007baa:	e07a      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007bac:	2308      	movs	r3, #8
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb2:	e076      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bba:	e072      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a35      	ldr	r2, [pc, #212]	@ (8007c98 <UART_SetConfig+0x2dc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d12a      	bne.n	8007c1c <UART_SetConfig+0x260>
 8007bc6:	4b30      	ldr	r3, [pc, #192]	@ (8007c88 <UART_SetConfig+0x2cc>)
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bd4:	d01a      	beq.n	8007c0c <UART_SetConfig+0x250>
 8007bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bda:	d81b      	bhi.n	8007c14 <UART_SetConfig+0x258>
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be0:	d00c      	beq.n	8007bfc <UART_SetConfig+0x240>
 8007be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be6:	d815      	bhi.n	8007c14 <UART_SetConfig+0x258>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <UART_SetConfig+0x238>
 8007bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bf0:	d008      	beq.n	8007c04 <UART_SetConfig+0x248>
 8007bf2:	e00f      	b.n	8007c14 <UART_SetConfig+0x258>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bfa:	e052      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c02:	e04e      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c0a:	e04a      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c12:	e046      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c1a:	e042      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a17      	ldr	r2, [pc, #92]	@ (8007c80 <UART_SetConfig+0x2c4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d13a      	bne.n	8007c9c <UART_SetConfig+0x2e0>
 8007c26:	4b18      	ldr	r3, [pc, #96]	@ (8007c88 <UART_SetConfig+0x2cc>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c34:	d01a      	beq.n	8007c6c <UART_SetConfig+0x2b0>
 8007c36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c3a:	d81b      	bhi.n	8007c74 <UART_SetConfig+0x2b8>
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c40:	d00c      	beq.n	8007c5c <UART_SetConfig+0x2a0>
 8007c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c46:	d815      	bhi.n	8007c74 <UART_SetConfig+0x2b8>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <UART_SetConfig+0x298>
 8007c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c50:	d008      	beq.n	8007c64 <UART_SetConfig+0x2a8>
 8007c52:	e00f      	b.n	8007c74 <UART_SetConfig+0x2b8>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c5a:	e022      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c62:	e01e      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c64:	2304      	movs	r3, #4
 8007c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6a:	e01a      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c72:	e016      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c7a:	e012      	b.n	8007ca2 <UART_SetConfig+0x2e6>
 8007c7c:	efff69f3 	.word	0xefff69f3
 8007c80:	40008000 	.word	0x40008000
 8007c84:	40013800 	.word	0x40013800
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40004400 	.word	0x40004400
 8007c90:	40004800 	.word	0x40004800
 8007c94:	40004c00 	.word	0x40004c00
 8007c98:	40005000 	.word	0x40005000
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a9f      	ldr	r2, [pc, #636]	@ (8007f24 <UART_SetConfig+0x568>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d17a      	bne.n	8007da2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d824      	bhi.n	8007cfe <UART_SetConfig+0x342>
 8007cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cbc <UART_SetConfig+0x300>)
 8007cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cba:	bf00      	nop
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007cff 	.word	0x08007cff
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cff 	.word	0x08007cff
 8007ccc:	08007cef 	.word	0x08007cef
 8007cd0:	08007cff 	.word	0x08007cff
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007cff 	.word	0x08007cff
 8007cdc:	08007cf7 	.word	0x08007cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fd fb78 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8007ce4:	61f8      	str	r0, [r7, #28]
        break;
 8007ce6:	e010      	b.n	8007d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b8f      	ldr	r3, [pc, #572]	@ (8007f28 <UART_SetConfig+0x56c>)
 8007cea:	61fb      	str	r3, [r7, #28]
        break;
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fd fad9 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8007cf2:	61f8      	str	r0, [r7, #28]
        break;
 8007cf4:	e009      	b.n	8007d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cfa:	61fb      	str	r3, [r7, #28]
        break;
 8007cfc:	e005      	b.n	8007d0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80fb 	beq.w	8007f08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	4413      	add	r3, r2
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d305      	bcc.n	8007d2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d903      	bls.n	8007d36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d34:	e0e8      	b.n	8007f08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	461c      	mov	r4, r3
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	022b      	lsls	r3, r5, #8
 8007d48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d4c:	0222      	lsls	r2, r4, #8
 8007d4e:	68f9      	ldr	r1, [r7, #12]
 8007d50:	6849      	ldr	r1, [r1, #4]
 8007d52:	0849      	lsrs	r1, r1, #1
 8007d54:	2000      	movs	r0, #0
 8007d56:	4688      	mov	r8, r1
 8007d58:	4681      	mov	r9, r0
 8007d5a:	eb12 0a08 	adds.w	sl, r2, r8
 8007d5e:	eb43 0b09 	adc.w	fp, r3, r9
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d70:	4650      	mov	r0, sl
 8007d72:	4659      	mov	r1, fp
 8007d74:	f7f8 ff18 	bl	8000ba8 <__aeabi_uldivmod>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d86:	d308      	bcc.n	8007d9a <UART_SetConfig+0x3de>
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8e:	d204      	bcs.n	8007d9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	60da      	str	r2, [r3, #12]
 8007d98:	e0b6      	b.n	8007f08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007da0:	e0b2      	b.n	8007f08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007daa:	d15e      	bne.n	8007e6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007dac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d828      	bhi.n	8007e06 <UART_SetConfig+0x44a>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <UART_SetConfig+0x400>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007de1 	.word	0x08007de1
 8007dc0:	08007de9 	.word	0x08007de9
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	08007e07 	.word	0x08007e07
 8007dcc:	08007df7 	.word	0x08007df7
 8007dd0:	08007e07 	.word	0x08007e07
 8007dd4:	08007e07 	.word	0x08007e07
 8007dd8:	08007e07 	.word	0x08007e07
 8007ddc:	08007dff 	.word	0x08007dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007de0:	f7fd faf8 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8007de4:	61f8      	str	r0, [r7, #28]
        break;
 8007de6:	e014      	b.n	8007e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de8:	f7fd fb0a 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8007dec:	61f8      	str	r0, [r7, #28]
        break;
 8007dee:	e010      	b.n	8007e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007df0:	4b4d      	ldr	r3, [pc, #308]	@ (8007f28 <UART_SetConfig+0x56c>)
 8007df2:	61fb      	str	r3, [r7, #28]
        break;
 8007df4:	e00d      	b.n	8007e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007df6:	f7fd fa55 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8007dfa:	61f8      	str	r0, [r7, #28]
        break;
 8007dfc:	e009      	b.n	8007e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e02:	61fb      	str	r3, [r7, #28]
        break;
 8007e04:	e005      	b.n	8007e12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d077      	beq.n	8007f08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	005a      	lsls	r2, r3, #1
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	085b      	lsrs	r3, r3, #1
 8007e22:	441a      	add	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b0f      	cmp	r3, #15
 8007e32:	d916      	bls.n	8007e62 <UART_SetConfig+0x4a6>
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e3a:	d212      	bcs.n	8007e62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f023 030f 	bic.w	r3, r3, #15
 8007e44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	8afb      	ldrh	r3, [r7, #22]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	8afa      	ldrh	r2, [r7, #22]
 8007e5e:	60da      	str	r2, [r3, #12]
 8007e60:	e052      	b.n	8007f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e68:	e04e      	b.n	8007f08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	d827      	bhi.n	8007ec2 <UART_SetConfig+0x506>
 8007e72:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <UART_SetConfig+0x4bc>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007ead 	.word	0x08007ead
 8007e84:	08007ec3 	.word	0x08007ec3
 8007e88:	08007eb3 	.word	0x08007eb3
 8007e8c:	08007ec3 	.word	0x08007ec3
 8007e90:	08007ec3 	.word	0x08007ec3
 8007e94:	08007ec3 	.word	0x08007ec3
 8007e98:	08007ebb 	.word	0x08007ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fd fa9a 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	61f8      	str	r0, [r7, #28]
        break;
 8007ea2:	e014      	b.n	8007ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fd faac 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	61f8      	str	r0, [r7, #28]
        break;
 8007eaa:	e010      	b.n	8007ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eac:	4b1e      	ldr	r3, [pc, #120]	@ (8007f28 <UART_SetConfig+0x56c>)
 8007eae:	61fb      	str	r3, [r7, #28]
        break;
 8007eb0:	e00d      	b.n	8007ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb2:	f7fd f9f7 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8007eb6:	61f8      	str	r0, [r7, #28]
        break;
 8007eb8:	e009      	b.n	8007ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ebe:	61fb      	str	r3, [r7, #28]
        break;
 8007ec0:	e005      	b.n	8007ece <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	085a      	lsrs	r2, r3, #1
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	441a      	add	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d909      	bls.n	8007f02 <UART_SetConfig+0x546>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef4:	d205      	bcs.n	8007f02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	e002      	b.n	8007f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3728      	adds	r7, #40	@ 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f22:	bf00      	nop
 8007f24:	40008000 	.word	0x40008000
 8007f28:	00f42400 	.word	0x00f42400

08007f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	f003 0308 	and.w	r3, r3, #8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00a      	beq.n	8007fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01a      	beq.n	8008042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800802a:	d10a      	bne.n	8008042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	605a      	str	r2, [r3, #4]
  }
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b098      	sub	sp, #96	@ 0x60
 8008074:	af02      	add	r7, sp, #8
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008080:	f7f9 fdec 	bl	8001c5c <HAL_GetTick>
 8008084:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b08      	cmp	r3, #8
 8008092:	d12e      	bne.n	80080f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800809c:	2200      	movs	r2, #0
 800809e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f88c 	bl	80081c0 <UART_WaitOnFlagUntilTimeout>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d021      	beq.n	80080f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e6      	bne.n	80080ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e062      	b.n	80081b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d149      	bne.n	8008194 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f856 	bl	80081c0 <UART_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d03c      	beq.n	8008194 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	623b      	str	r3, [r7, #32]
   return(result);
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800812e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30
 800813a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800813e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e6      	bne.n	800811a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	60fb      	str	r3, [r7, #12]
   return(result);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3308      	adds	r3, #8
 800816a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800816c:	61fa      	str	r2, [r7, #28]
 800816e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	69b9      	ldr	r1, [r7, #24]
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	617b      	str	r3, [r7, #20]
   return(result);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e5      	bne.n	800814c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2220      	movs	r2, #32
 8008184:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e011      	b.n	80081b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3758      	adds	r7, #88	@ 0x58
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	4613      	mov	r3, r2
 80081ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d0:	e04f      	b.n	8008272 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d8:	d04b      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7f9 fd3f 	bl	8001c5c <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e04e      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d037      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b80      	cmp	r3, #128	@ 0x80
 8008206:	d034      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b40      	cmp	r3, #64	@ 0x40
 800820c:	d031      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b08      	cmp	r3, #8
 800821a:	d110      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2208      	movs	r2, #8
 8008222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f838 	bl	800829a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2208      	movs	r2, #8
 800822e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e029      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800824c:	d111      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f81e 	bl	800829a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2220      	movs	r2, #32
 8008262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e00f      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4013      	ands	r3, r2
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	429a      	cmp	r2, r3
 800828e:	d0a0      	beq.n	80081d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800829a:	b480      	push	{r7}
 800829c:	b095      	sub	sp, #84	@ 0x54
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80082c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e6      	bne.n	80082a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3308      	adds	r3, #8
 80082da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f023 0301 	bic.w	r3, r3, #1
 80082ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3308      	adds	r3, #8
 80082f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e5      	bne.n	80082d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830c:	2b01      	cmp	r3, #1
 800830e:	d118      	bne.n	8008342 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	60bb      	str	r3, [r7, #8]
   return(result);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f023 0310 	bic.w	r3, r3, #16
 8008324:	647b      	str	r3, [r7, #68]	@ 0x44
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6979      	ldr	r1, [r7, #20]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	613b      	str	r3, [r7, #16]
   return(result);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008356:	bf00      	nop
 8008358:	3754      	adds	r7, #84	@ 0x54
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f7ff fb05 	bl	8007990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b088      	sub	sp, #32
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6979      	ldr	r1, [r7, #20]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	613b      	str	r3, [r7, #16]
   return(result);
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fad1 	bl	800797c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083da:	bf00      	nop
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <__cvt>:
 80083f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083fa:	ec57 6b10 	vmov	r6, r7, d0
 80083fe:	2f00      	cmp	r7, #0
 8008400:	460c      	mov	r4, r1
 8008402:	4619      	mov	r1, r3
 8008404:	463b      	mov	r3, r7
 8008406:	bfbb      	ittet	lt
 8008408:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800840c:	461f      	movlt	r7, r3
 800840e:	2300      	movge	r3, #0
 8008410:	232d      	movlt	r3, #45	@ 0x2d
 8008412:	700b      	strb	r3, [r1, #0]
 8008414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008416:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800841a:	4691      	mov	r9, r2
 800841c:	f023 0820 	bic.w	r8, r3, #32
 8008420:	bfbc      	itt	lt
 8008422:	4632      	movlt	r2, r6
 8008424:	4616      	movlt	r6, r2
 8008426:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800842a:	d005      	beq.n	8008438 <__cvt+0x42>
 800842c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008430:	d100      	bne.n	8008434 <__cvt+0x3e>
 8008432:	3401      	adds	r4, #1
 8008434:	2102      	movs	r1, #2
 8008436:	e000      	b.n	800843a <__cvt+0x44>
 8008438:	2103      	movs	r1, #3
 800843a:	ab03      	add	r3, sp, #12
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	ab02      	add	r3, sp, #8
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	ec47 6b10 	vmov	d0, r6, r7
 8008446:	4653      	mov	r3, sl
 8008448:	4622      	mov	r2, r4
 800844a:	f000 fe39 	bl	80090c0 <_dtoa_r>
 800844e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008452:	4605      	mov	r5, r0
 8008454:	d119      	bne.n	800848a <__cvt+0x94>
 8008456:	f019 0f01 	tst.w	r9, #1
 800845a:	d00e      	beq.n	800847a <__cvt+0x84>
 800845c:	eb00 0904 	add.w	r9, r0, r4
 8008460:	2200      	movs	r2, #0
 8008462:	2300      	movs	r3, #0
 8008464:	4630      	mov	r0, r6
 8008466:	4639      	mov	r1, r7
 8008468:	f7f8 fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800846c:	b108      	cbz	r0, 8008472 <__cvt+0x7c>
 800846e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008472:	2230      	movs	r2, #48	@ 0x30
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	454b      	cmp	r3, r9
 8008478:	d31e      	bcc.n	80084b8 <__cvt+0xc2>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800847e:	1b5b      	subs	r3, r3, r5
 8008480:	4628      	mov	r0, r5
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	b004      	add	sp, #16
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800848e:	eb00 0904 	add.w	r9, r0, r4
 8008492:	d1e5      	bne.n	8008460 <__cvt+0x6a>
 8008494:	7803      	ldrb	r3, [r0, #0]
 8008496:	2b30      	cmp	r3, #48	@ 0x30
 8008498:	d10a      	bne.n	80084b0 <__cvt+0xba>
 800849a:	2200      	movs	r2, #0
 800849c:	2300      	movs	r3, #0
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f8 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a6:	b918      	cbnz	r0, 80084b0 <__cvt+0xba>
 80084a8:	f1c4 0401 	rsb	r4, r4, #1
 80084ac:	f8ca 4000 	str.w	r4, [sl]
 80084b0:	f8da 3000 	ldr.w	r3, [sl]
 80084b4:	4499      	add	r9, r3
 80084b6:	e7d3      	b.n	8008460 <__cvt+0x6a>
 80084b8:	1c59      	adds	r1, r3, #1
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e7d9      	b.n	8008474 <__cvt+0x7e>

080084c0 <__exponent>:
 80084c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084c2:	2900      	cmp	r1, #0
 80084c4:	bfba      	itte	lt
 80084c6:	4249      	neglt	r1, r1
 80084c8:	232d      	movlt	r3, #45	@ 0x2d
 80084ca:	232b      	movge	r3, #43	@ 0x2b
 80084cc:	2909      	cmp	r1, #9
 80084ce:	7002      	strb	r2, [r0, #0]
 80084d0:	7043      	strb	r3, [r0, #1]
 80084d2:	dd29      	ble.n	8008528 <__exponent+0x68>
 80084d4:	f10d 0307 	add.w	r3, sp, #7
 80084d8:	461d      	mov	r5, r3
 80084da:	270a      	movs	r7, #10
 80084dc:	461a      	mov	r2, r3
 80084de:	fbb1 f6f7 	udiv	r6, r1, r7
 80084e2:	fb07 1416 	mls	r4, r7, r6, r1
 80084e6:	3430      	adds	r4, #48	@ 0x30
 80084e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084ec:	460c      	mov	r4, r1
 80084ee:	2c63      	cmp	r4, #99	@ 0x63
 80084f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80084f4:	4631      	mov	r1, r6
 80084f6:	dcf1      	bgt.n	80084dc <__exponent+0x1c>
 80084f8:	3130      	adds	r1, #48	@ 0x30
 80084fa:	1e94      	subs	r4, r2, #2
 80084fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008500:	1c41      	adds	r1, r0, #1
 8008502:	4623      	mov	r3, r4
 8008504:	42ab      	cmp	r3, r5
 8008506:	d30a      	bcc.n	800851e <__exponent+0x5e>
 8008508:	f10d 0309 	add.w	r3, sp, #9
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	42ac      	cmp	r4, r5
 8008510:	bf88      	it	hi
 8008512:	2300      	movhi	r3, #0
 8008514:	3302      	adds	r3, #2
 8008516:	4403      	add	r3, r0
 8008518:	1a18      	subs	r0, r3, r0
 800851a:	b003      	add	sp, #12
 800851c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008522:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008526:	e7ed      	b.n	8008504 <__exponent+0x44>
 8008528:	2330      	movs	r3, #48	@ 0x30
 800852a:	3130      	adds	r1, #48	@ 0x30
 800852c:	7083      	strb	r3, [r0, #2]
 800852e:	70c1      	strb	r1, [r0, #3]
 8008530:	1d03      	adds	r3, r0, #4
 8008532:	e7f1      	b.n	8008518 <__exponent+0x58>

08008534 <_printf_float>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	b08d      	sub	sp, #52	@ 0x34
 800853a:	460c      	mov	r4, r1
 800853c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008540:	4616      	mov	r6, r2
 8008542:	461f      	mov	r7, r3
 8008544:	4605      	mov	r5, r0
 8008546:	f000 fcbb 	bl	8008ec0 <_localeconv_r>
 800854a:	6803      	ldr	r3, [r0, #0]
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	4618      	mov	r0, r3
 8008550:	f7f7 fe8e 	bl	8000270 <strlen>
 8008554:	2300      	movs	r3, #0
 8008556:	930a      	str	r3, [sp, #40]	@ 0x28
 8008558:	f8d8 3000 	ldr.w	r3, [r8]
 800855c:	9005      	str	r0, [sp, #20]
 800855e:	3307      	adds	r3, #7
 8008560:	f023 0307 	bic.w	r3, r3, #7
 8008564:	f103 0208 	add.w	r2, r3, #8
 8008568:	f894 a018 	ldrb.w	sl, [r4, #24]
 800856c:	f8d4 b000 	ldr.w	fp, [r4]
 8008570:	f8c8 2000 	str.w	r2, [r8]
 8008574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008578:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800857c:	9307      	str	r3, [sp, #28]
 800857e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008582:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858a:	4b9c      	ldr	r3, [pc, #624]	@ (80087fc <_printf_float+0x2c8>)
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	f7f8 facc 	bl	8000b2c <__aeabi_dcmpun>
 8008594:	bb70      	cbnz	r0, 80085f4 <_printf_float+0xc0>
 8008596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859a:	4b98      	ldr	r3, [pc, #608]	@ (80087fc <_printf_float+0x2c8>)
 800859c:	f04f 32ff 	mov.w	r2, #4294967295
 80085a0:	f7f8 faa6 	bl	8000af0 <__aeabi_dcmple>
 80085a4:	bb30      	cbnz	r0, 80085f4 <_printf_float+0xc0>
 80085a6:	2200      	movs	r2, #0
 80085a8:	2300      	movs	r3, #0
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f8 fa95 	bl	8000adc <__aeabi_dcmplt>
 80085b2:	b110      	cbz	r0, 80085ba <_printf_float+0x86>
 80085b4:	232d      	movs	r3, #45	@ 0x2d
 80085b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ba:	4a91      	ldr	r2, [pc, #580]	@ (8008800 <_printf_float+0x2cc>)
 80085bc:	4b91      	ldr	r3, [pc, #580]	@ (8008804 <_printf_float+0x2d0>)
 80085be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085c2:	bf94      	ite	ls
 80085c4:	4690      	movls	r8, r2
 80085c6:	4698      	movhi	r8, r3
 80085c8:	2303      	movs	r3, #3
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	f02b 0304 	bic.w	r3, fp, #4
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	f04f 0900 	mov.w	r9, #0
 80085d6:	9700      	str	r7, [sp, #0]
 80085d8:	4633      	mov	r3, r6
 80085da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085dc:	4621      	mov	r1, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	f000 f9d2 	bl	8008988 <_printf_common>
 80085e4:	3001      	adds	r0, #1
 80085e6:	f040 808d 	bne.w	8008704 <_printf_float+0x1d0>
 80085ea:	f04f 30ff 	mov.w	r0, #4294967295
 80085ee:	b00d      	add	sp, #52	@ 0x34
 80085f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	4640      	mov	r0, r8
 80085fa:	4649      	mov	r1, r9
 80085fc:	f7f8 fa96 	bl	8000b2c <__aeabi_dcmpun>
 8008600:	b140      	cbz	r0, 8008614 <_printf_float+0xe0>
 8008602:	464b      	mov	r3, r9
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbc      	itt	lt
 8008608:	232d      	movlt	r3, #45	@ 0x2d
 800860a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800860e:	4a7e      	ldr	r2, [pc, #504]	@ (8008808 <_printf_float+0x2d4>)
 8008610:	4b7e      	ldr	r3, [pc, #504]	@ (800880c <_printf_float+0x2d8>)
 8008612:	e7d4      	b.n	80085be <_printf_float+0x8a>
 8008614:	6863      	ldr	r3, [r4, #4]
 8008616:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800861a:	9206      	str	r2, [sp, #24]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	d13b      	bne.n	8008698 <_printf_float+0x164>
 8008620:	2306      	movs	r3, #6
 8008622:	6063      	str	r3, [r4, #4]
 8008624:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008628:	2300      	movs	r3, #0
 800862a:	6022      	str	r2, [r4, #0]
 800862c:	9303      	str	r3, [sp, #12]
 800862e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008630:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008634:	ab09      	add	r3, sp, #36	@ 0x24
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	6861      	ldr	r1, [r4, #4]
 800863a:	ec49 8b10 	vmov	d0, r8, r9
 800863e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008642:	4628      	mov	r0, r5
 8008644:	f7ff fed7 	bl	80083f6 <__cvt>
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800864c:	2b47      	cmp	r3, #71	@ 0x47
 800864e:	4680      	mov	r8, r0
 8008650:	d129      	bne.n	80086a6 <_printf_float+0x172>
 8008652:	1cc8      	adds	r0, r1, #3
 8008654:	db02      	blt.n	800865c <_printf_float+0x128>
 8008656:	6863      	ldr	r3, [r4, #4]
 8008658:	4299      	cmp	r1, r3
 800865a:	dd41      	ble.n	80086e0 <_printf_float+0x1ac>
 800865c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008660:	fa5f fa8a 	uxtb.w	sl, sl
 8008664:	3901      	subs	r1, #1
 8008666:	4652      	mov	r2, sl
 8008668:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800866c:	9109      	str	r1, [sp, #36]	@ 0x24
 800866e:	f7ff ff27 	bl	80084c0 <__exponent>
 8008672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008674:	1813      	adds	r3, r2, r0
 8008676:	2a01      	cmp	r2, #1
 8008678:	4681      	mov	r9, r0
 800867a:	6123      	str	r3, [r4, #16]
 800867c:	dc02      	bgt.n	8008684 <_printf_float+0x150>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	07d2      	lsls	r2, r2, #31
 8008682:	d501      	bpl.n	8008688 <_printf_float+0x154>
 8008684:	3301      	adds	r3, #1
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0a2      	beq.n	80085d6 <_printf_float+0xa2>
 8008690:	232d      	movs	r3, #45	@ 0x2d
 8008692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008696:	e79e      	b.n	80085d6 <_printf_float+0xa2>
 8008698:	9a06      	ldr	r2, [sp, #24]
 800869a:	2a47      	cmp	r2, #71	@ 0x47
 800869c:	d1c2      	bne.n	8008624 <_printf_float+0xf0>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1c0      	bne.n	8008624 <_printf_float+0xf0>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7bd      	b.n	8008622 <_printf_float+0xee>
 80086a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086aa:	d9db      	bls.n	8008664 <_printf_float+0x130>
 80086ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086b0:	d118      	bne.n	80086e4 <_printf_float+0x1b0>
 80086b2:	2900      	cmp	r1, #0
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	dd0b      	ble.n	80086d0 <_printf_float+0x19c>
 80086b8:	6121      	str	r1, [r4, #16]
 80086ba:	b913      	cbnz	r3, 80086c2 <_printf_float+0x18e>
 80086bc:	6822      	ldr	r2, [r4, #0]
 80086be:	07d0      	lsls	r0, r2, #31
 80086c0:	d502      	bpl.n	80086c8 <_printf_float+0x194>
 80086c2:	3301      	adds	r3, #1
 80086c4:	440b      	add	r3, r1
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	e7db      	b.n	8008688 <_printf_float+0x154>
 80086d0:	b913      	cbnz	r3, 80086d8 <_printf_float+0x1a4>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	07d2      	lsls	r2, r2, #31
 80086d6:	d501      	bpl.n	80086dc <_printf_float+0x1a8>
 80086d8:	3302      	adds	r3, #2
 80086da:	e7f4      	b.n	80086c6 <_printf_float+0x192>
 80086dc:	2301      	movs	r3, #1
 80086de:	e7f2      	b.n	80086c6 <_printf_float+0x192>
 80086e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086e6:	4299      	cmp	r1, r3
 80086e8:	db05      	blt.n	80086f6 <_printf_float+0x1c2>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	6121      	str	r1, [r4, #16]
 80086ee:	07d8      	lsls	r0, r3, #31
 80086f0:	d5ea      	bpl.n	80086c8 <_printf_float+0x194>
 80086f2:	1c4b      	adds	r3, r1, #1
 80086f4:	e7e7      	b.n	80086c6 <_printf_float+0x192>
 80086f6:	2900      	cmp	r1, #0
 80086f8:	bfd4      	ite	le
 80086fa:	f1c1 0202 	rsble	r2, r1, #2
 80086fe:	2201      	movgt	r2, #1
 8008700:	4413      	add	r3, r2
 8008702:	e7e0      	b.n	80086c6 <_printf_float+0x192>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	055a      	lsls	r2, r3, #21
 8008708:	d407      	bmi.n	800871a <_printf_float+0x1e6>
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	4642      	mov	r2, r8
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	d12b      	bne.n	8008770 <_printf_float+0x23c>
 8008718:	e767      	b.n	80085ea <_printf_float+0xb6>
 800871a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800871e:	f240 80dd 	bls.w	80088dc <_printf_float+0x3a8>
 8008722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008726:	2200      	movs	r2, #0
 8008728:	2300      	movs	r3, #0
 800872a:	f7f8 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800872e:	2800      	cmp	r0, #0
 8008730:	d033      	beq.n	800879a <_printf_float+0x266>
 8008732:	4a37      	ldr	r2, [pc, #220]	@ (8008810 <_printf_float+0x2dc>)
 8008734:	2301      	movs	r3, #1
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f af54 	beq.w	80085ea <_printf_float+0xb6>
 8008742:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008746:	4543      	cmp	r3, r8
 8008748:	db02      	blt.n	8008750 <_printf_float+0x21c>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	07d8      	lsls	r0, r3, #31
 800874e:	d50f      	bpl.n	8008770 <_printf_float+0x23c>
 8008750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008754:	4631      	mov	r1, r6
 8008756:	4628      	mov	r0, r5
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	f43f af45 	beq.w	80085ea <_printf_float+0xb6>
 8008760:	f04f 0900 	mov.w	r9, #0
 8008764:	f108 38ff 	add.w	r8, r8, #4294967295
 8008768:	f104 0a1a 	add.w	sl, r4, #26
 800876c:	45c8      	cmp	r8, r9
 800876e:	dc09      	bgt.n	8008784 <_printf_float+0x250>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	079b      	lsls	r3, r3, #30
 8008774:	f100 8103 	bmi.w	800897e <_printf_float+0x44a>
 8008778:	68e0      	ldr	r0, [r4, #12]
 800877a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800877c:	4298      	cmp	r0, r3
 800877e:	bfb8      	it	lt
 8008780:	4618      	movlt	r0, r3
 8008782:	e734      	b.n	80085ee <_printf_float+0xba>
 8008784:	2301      	movs	r3, #1
 8008786:	4652      	mov	r2, sl
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	f43f af2b 	beq.w	80085ea <_printf_float+0xb6>
 8008794:	f109 0901 	add.w	r9, r9, #1
 8008798:	e7e8      	b.n	800876c <_printf_float+0x238>
 800879a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	dc39      	bgt.n	8008814 <_printf_float+0x2e0>
 80087a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008810 <_printf_float+0x2dc>)
 80087a2:	2301      	movs	r3, #1
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f af1d 	beq.w	80085ea <_printf_float+0xb6>
 80087b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087b4:	ea59 0303 	orrs.w	r3, r9, r3
 80087b8:	d102      	bne.n	80087c0 <_printf_float+0x28c>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	07d9      	lsls	r1, r3, #31
 80087be:	d5d7      	bpl.n	8008770 <_printf_float+0x23c>
 80087c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f af0d 	beq.w	80085ea <_printf_float+0xb6>
 80087d0:	f04f 0a00 	mov.w	sl, #0
 80087d4:	f104 0b1a 	add.w	fp, r4, #26
 80087d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087da:	425b      	negs	r3, r3
 80087dc:	4553      	cmp	r3, sl
 80087de:	dc01      	bgt.n	80087e4 <_printf_float+0x2b0>
 80087e0:	464b      	mov	r3, r9
 80087e2:	e793      	b.n	800870c <_printf_float+0x1d8>
 80087e4:	2301      	movs	r3, #1
 80087e6:	465a      	mov	r2, fp
 80087e8:	4631      	mov	r1, r6
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b8      	blx	r7
 80087ee:	3001      	adds	r0, #1
 80087f0:	f43f aefb 	beq.w	80085ea <_printf_float+0xb6>
 80087f4:	f10a 0a01 	add.w	sl, sl, #1
 80087f8:	e7ee      	b.n	80087d8 <_printf_float+0x2a4>
 80087fa:	bf00      	nop
 80087fc:	7fefffff 	.word	0x7fefffff
 8008800:	0800ad50 	.word	0x0800ad50
 8008804:	0800ad54 	.word	0x0800ad54
 8008808:	0800ad58 	.word	0x0800ad58
 800880c:	0800ad5c 	.word	0x0800ad5c
 8008810:	0800ad60 	.word	0x0800ad60
 8008814:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008816:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800881a:	4553      	cmp	r3, sl
 800881c:	bfa8      	it	ge
 800881e:	4653      	movge	r3, sl
 8008820:	2b00      	cmp	r3, #0
 8008822:	4699      	mov	r9, r3
 8008824:	dc36      	bgt.n	8008894 <_printf_float+0x360>
 8008826:	f04f 0b00 	mov.w	fp, #0
 800882a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800882e:	f104 021a 	add.w	r2, r4, #26
 8008832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008834:	9306      	str	r3, [sp, #24]
 8008836:	eba3 0309 	sub.w	r3, r3, r9
 800883a:	455b      	cmp	r3, fp
 800883c:	dc31      	bgt.n	80088a2 <_printf_float+0x36e>
 800883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008840:	459a      	cmp	sl, r3
 8008842:	dc3a      	bgt.n	80088ba <_printf_float+0x386>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	07da      	lsls	r2, r3, #31
 8008848:	d437      	bmi.n	80088ba <_printf_float+0x386>
 800884a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884c:	ebaa 0903 	sub.w	r9, sl, r3
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	ebaa 0303 	sub.w	r3, sl, r3
 8008856:	4599      	cmp	r9, r3
 8008858:	bfa8      	it	ge
 800885a:	4699      	movge	r9, r3
 800885c:	f1b9 0f00 	cmp.w	r9, #0
 8008860:	dc33      	bgt.n	80088ca <_printf_float+0x396>
 8008862:	f04f 0800 	mov.w	r8, #0
 8008866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800886a:	f104 0b1a 	add.w	fp, r4, #26
 800886e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008870:	ebaa 0303 	sub.w	r3, sl, r3
 8008874:	eba3 0309 	sub.w	r3, r3, r9
 8008878:	4543      	cmp	r3, r8
 800887a:	f77f af79 	ble.w	8008770 <_printf_float+0x23c>
 800887e:	2301      	movs	r3, #1
 8008880:	465a      	mov	r2, fp
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	47b8      	blx	r7
 8008888:	3001      	adds	r0, #1
 800888a:	f43f aeae 	beq.w	80085ea <_printf_float+0xb6>
 800888e:	f108 0801 	add.w	r8, r8, #1
 8008892:	e7ec      	b.n	800886e <_printf_float+0x33a>
 8008894:	4642      	mov	r2, r8
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	d1c2      	bne.n	8008826 <_printf_float+0x2f2>
 80088a0:	e6a3      	b.n	80085ea <_printf_float+0xb6>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4631      	mov	r1, r6
 80088a6:	4628      	mov	r0, r5
 80088a8:	9206      	str	r2, [sp, #24]
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	f43f ae9c 	beq.w	80085ea <_printf_float+0xb6>
 80088b2:	9a06      	ldr	r2, [sp, #24]
 80088b4:	f10b 0b01 	add.w	fp, fp, #1
 80088b8:	e7bb      	b.n	8008832 <_printf_float+0x2fe>
 80088ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	d1c0      	bne.n	800884a <_printf_float+0x316>
 80088c8:	e68f      	b.n	80085ea <_printf_float+0xb6>
 80088ca:	9a06      	ldr	r2, [sp, #24]
 80088cc:	464b      	mov	r3, r9
 80088ce:	4442      	add	r2, r8
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	d1c3      	bne.n	8008862 <_printf_float+0x32e>
 80088da:	e686      	b.n	80085ea <_printf_float+0xb6>
 80088dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088e0:	f1ba 0f01 	cmp.w	sl, #1
 80088e4:	dc01      	bgt.n	80088ea <_printf_float+0x3b6>
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d536      	bpl.n	8008958 <_printf_float+0x424>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4642      	mov	r2, r8
 80088ee:	4631      	mov	r1, r6
 80088f0:	4628      	mov	r0, r5
 80088f2:	47b8      	blx	r7
 80088f4:	3001      	adds	r0, #1
 80088f6:	f43f ae78 	beq.w	80085ea <_printf_float+0xb6>
 80088fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	f43f ae70 	beq.w	80085ea <_printf_float+0xb6>
 800890a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008916:	f7f8 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800891a:	b9c0      	cbnz	r0, 800894e <_printf_float+0x41a>
 800891c:	4653      	mov	r3, sl
 800891e:	f108 0201 	add.w	r2, r8, #1
 8008922:	4631      	mov	r1, r6
 8008924:	4628      	mov	r0, r5
 8008926:	47b8      	blx	r7
 8008928:	3001      	adds	r0, #1
 800892a:	d10c      	bne.n	8008946 <_printf_float+0x412>
 800892c:	e65d      	b.n	80085ea <_printf_float+0xb6>
 800892e:	2301      	movs	r3, #1
 8008930:	465a      	mov	r2, fp
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	f43f ae56 	beq.w	80085ea <_printf_float+0xb6>
 800893e:	f108 0801 	add.w	r8, r8, #1
 8008942:	45d0      	cmp	r8, sl
 8008944:	dbf3      	blt.n	800892e <_printf_float+0x3fa>
 8008946:	464b      	mov	r3, r9
 8008948:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800894c:	e6df      	b.n	800870e <_printf_float+0x1da>
 800894e:	f04f 0800 	mov.w	r8, #0
 8008952:	f104 0b1a 	add.w	fp, r4, #26
 8008956:	e7f4      	b.n	8008942 <_printf_float+0x40e>
 8008958:	2301      	movs	r3, #1
 800895a:	4642      	mov	r2, r8
 800895c:	e7e1      	b.n	8008922 <_printf_float+0x3ee>
 800895e:	2301      	movs	r3, #1
 8008960:	464a      	mov	r2, r9
 8008962:	4631      	mov	r1, r6
 8008964:	4628      	mov	r0, r5
 8008966:	47b8      	blx	r7
 8008968:	3001      	adds	r0, #1
 800896a:	f43f ae3e 	beq.w	80085ea <_printf_float+0xb6>
 800896e:	f108 0801 	add.w	r8, r8, #1
 8008972:	68e3      	ldr	r3, [r4, #12]
 8008974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008976:	1a5b      	subs	r3, r3, r1
 8008978:	4543      	cmp	r3, r8
 800897a:	dcf0      	bgt.n	800895e <_printf_float+0x42a>
 800897c:	e6fc      	b.n	8008778 <_printf_float+0x244>
 800897e:	f04f 0800 	mov.w	r8, #0
 8008982:	f104 0919 	add.w	r9, r4, #25
 8008986:	e7f4      	b.n	8008972 <_printf_float+0x43e>

08008988 <_printf_common>:
 8008988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	4616      	mov	r6, r2
 800898e:	4698      	mov	r8, r3
 8008990:	688a      	ldr	r2, [r1, #8]
 8008992:	690b      	ldr	r3, [r1, #16]
 8008994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008998:	4293      	cmp	r3, r2
 800899a:	bfb8      	it	lt
 800899c:	4613      	movlt	r3, r2
 800899e:	6033      	str	r3, [r6, #0]
 80089a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089a4:	4607      	mov	r7, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	b10a      	cbz	r2, 80089ae <_printf_common+0x26>
 80089aa:	3301      	adds	r3, #1
 80089ac:	6033      	str	r3, [r6, #0]
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	0699      	lsls	r1, r3, #26
 80089b2:	bf42      	ittt	mi
 80089b4:	6833      	ldrmi	r3, [r6, #0]
 80089b6:	3302      	addmi	r3, #2
 80089b8:	6033      	strmi	r3, [r6, #0]
 80089ba:	6825      	ldr	r5, [r4, #0]
 80089bc:	f015 0506 	ands.w	r5, r5, #6
 80089c0:	d106      	bne.n	80089d0 <_printf_common+0x48>
 80089c2:	f104 0a19 	add.w	sl, r4, #25
 80089c6:	68e3      	ldr	r3, [r4, #12]
 80089c8:	6832      	ldr	r2, [r6, #0]
 80089ca:	1a9b      	subs	r3, r3, r2
 80089cc:	42ab      	cmp	r3, r5
 80089ce:	dc26      	bgt.n	8008a1e <_printf_common+0x96>
 80089d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	3b00      	subs	r3, #0
 80089d8:	bf18      	it	ne
 80089da:	2301      	movne	r3, #1
 80089dc:	0692      	lsls	r2, r2, #26
 80089de:	d42b      	bmi.n	8008a38 <_printf_common+0xb0>
 80089e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089e4:	4641      	mov	r1, r8
 80089e6:	4638      	mov	r0, r7
 80089e8:	47c8      	blx	r9
 80089ea:	3001      	adds	r0, #1
 80089ec:	d01e      	beq.n	8008a2c <_printf_common+0xa4>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	6922      	ldr	r2, [r4, #16]
 80089f2:	f003 0306 	and.w	r3, r3, #6
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	bf02      	ittt	eq
 80089fa:	68e5      	ldreq	r5, [r4, #12]
 80089fc:	6833      	ldreq	r3, [r6, #0]
 80089fe:	1aed      	subeq	r5, r5, r3
 8008a00:	68a3      	ldr	r3, [r4, #8]
 8008a02:	bf0c      	ite	eq
 8008a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a08:	2500      	movne	r5, #0
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	bfc4      	itt	gt
 8008a0e:	1a9b      	subgt	r3, r3, r2
 8008a10:	18ed      	addgt	r5, r5, r3
 8008a12:	2600      	movs	r6, #0
 8008a14:	341a      	adds	r4, #26
 8008a16:	42b5      	cmp	r5, r6
 8008a18:	d11a      	bne.n	8008a50 <_printf_common+0xc8>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e008      	b.n	8008a30 <_printf_common+0xa8>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4641      	mov	r1, r8
 8008a24:	4638      	mov	r0, r7
 8008a26:	47c8      	blx	r9
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d103      	bne.n	8008a34 <_printf_common+0xac>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a34:	3501      	adds	r5, #1
 8008a36:	e7c6      	b.n	80089c6 <_printf_common+0x3e>
 8008a38:	18e1      	adds	r1, r4, r3
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	2030      	movs	r0, #48	@ 0x30
 8008a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a42:	4422      	add	r2, r4
 8008a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	e7c7      	b.n	80089e0 <_printf_common+0x58>
 8008a50:	2301      	movs	r3, #1
 8008a52:	4622      	mov	r2, r4
 8008a54:	4641      	mov	r1, r8
 8008a56:	4638      	mov	r0, r7
 8008a58:	47c8      	blx	r9
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d0e6      	beq.n	8008a2c <_printf_common+0xa4>
 8008a5e:	3601      	adds	r6, #1
 8008a60:	e7d9      	b.n	8008a16 <_printf_common+0x8e>
	...

08008a64 <_printf_i>:
 8008a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	7e0f      	ldrb	r7, [r1, #24]
 8008a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a6c:	2f78      	cmp	r7, #120	@ 0x78
 8008a6e:	4691      	mov	r9, r2
 8008a70:	4680      	mov	r8, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	469a      	mov	sl, r3
 8008a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a7a:	d807      	bhi.n	8008a8c <_printf_i+0x28>
 8008a7c:	2f62      	cmp	r7, #98	@ 0x62
 8008a7e:	d80a      	bhi.n	8008a96 <_printf_i+0x32>
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	f000 80d2 	beq.w	8008c2a <_printf_i+0x1c6>
 8008a86:	2f58      	cmp	r7, #88	@ 0x58
 8008a88:	f000 80b9 	beq.w	8008bfe <_printf_i+0x19a>
 8008a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a94:	e03a      	b.n	8008b0c <_printf_i+0xa8>
 8008a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a9a:	2b15      	cmp	r3, #21
 8008a9c:	d8f6      	bhi.n	8008a8c <_printf_i+0x28>
 8008a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8008aa4 <_printf_i+0x40>)
 8008aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008aa4:	08008afd 	.word	0x08008afd
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008a8d 	.word	0x08008a8d
 8008ab0:	08008a8d 	.word	0x08008a8d
 8008ab4:	08008a8d 	.word	0x08008a8d
 8008ab8:	08008a8d 	.word	0x08008a8d
 8008abc:	08008b11 	.word	0x08008b11
 8008ac0:	08008a8d 	.word	0x08008a8d
 8008ac4:	08008a8d 	.word	0x08008a8d
 8008ac8:	08008a8d 	.word	0x08008a8d
 8008acc:	08008a8d 	.word	0x08008a8d
 8008ad0:	08008c11 	.word	0x08008c11
 8008ad4:	08008b3b 	.word	0x08008b3b
 8008ad8:	08008bcb 	.word	0x08008bcb
 8008adc:	08008a8d 	.word	0x08008a8d
 8008ae0:	08008a8d 	.word	0x08008a8d
 8008ae4:	08008c33 	.word	0x08008c33
 8008ae8:	08008a8d 	.word	0x08008a8d
 8008aec:	08008b3b 	.word	0x08008b3b
 8008af0:	08008a8d 	.word	0x08008a8d
 8008af4:	08008a8d 	.word	0x08008a8d
 8008af8:	08008bd3 	.word	0x08008bd3
 8008afc:	6833      	ldr	r3, [r6, #0]
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6032      	str	r2, [r6, #0]
 8008b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e09d      	b.n	8008c4c <_printf_i+0x1e8>
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	6820      	ldr	r0, [r4, #0]
 8008b14:	1d19      	adds	r1, r3, #4
 8008b16:	6031      	str	r1, [r6, #0]
 8008b18:	0606      	lsls	r6, r0, #24
 8008b1a:	d501      	bpl.n	8008b20 <_printf_i+0xbc>
 8008b1c:	681d      	ldr	r5, [r3, #0]
 8008b1e:	e003      	b.n	8008b28 <_printf_i+0xc4>
 8008b20:	0645      	lsls	r5, r0, #25
 8008b22:	d5fb      	bpl.n	8008b1c <_printf_i+0xb8>
 8008b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	da03      	bge.n	8008b34 <_printf_i+0xd0>
 8008b2c:	232d      	movs	r3, #45	@ 0x2d
 8008b2e:	426d      	negs	r5, r5
 8008b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b34:	4859      	ldr	r0, [pc, #356]	@ (8008c9c <_printf_i+0x238>)
 8008b36:	230a      	movs	r3, #10
 8008b38:	e011      	b.n	8008b5e <_printf_i+0xfa>
 8008b3a:	6821      	ldr	r1, [r4, #0]
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	0608      	lsls	r0, r1, #24
 8008b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b44:	d402      	bmi.n	8008b4c <_printf_i+0xe8>
 8008b46:	0649      	lsls	r1, r1, #25
 8008b48:	bf48      	it	mi
 8008b4a:	b2ad      	uxthmi	r5, r5
 8008b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b4e:	4853      	ldr	r0, [pc, #332]	@ (8008c9c <_printf_i+0x238>)
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	bf14      	ite	ne
 8008b54:	230a      	movne	r3, #10
 8008b56:	2308      	moveq	r3, #8
 8008b58:	2100      	movs	r1, #0
 8008b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b5e:	6866      	ldr	r6, [r4, #4]
 8008b60:	60a6      	str	r6, [r4, #8]
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	bfa2      	ittt	ge
 8008b66:	6821      	ldrge	r1, [r4, #0]
 8008b68:	f021 0104 	bicge.w	r1, r1, #4
 8008b6c:	6021      	strge	r1, [r4, #0]
 8008b6e:	b90d      	cbnz	r5, 8008b74 <_printf_i+0x110>
 8008b70:	2e00      	cmp	r6, #0
 8008b72:	d04b      	beq.n	8008c0c <_printf_i+0x1a8>
 8008b74:	4616      	mov	r6, r2
 8008b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8008b7e:	5dc7      	ldrb	r7, [r0, r7]
 8008b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b84:	462f      	mov	r7, r5
 8008b86:	42bb      	cmp	r3, r7
 8008b88:	460d      	mov	r5, r1
 8008b8a:	d9f4      	bls.n	8008b76 <_printf_i+0x112>
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d10b      	bne.n	8008ba8 <_printf_i+0x144>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	07df      	lsls	r7, r3, #31
 8008b94:	d508      	bpl.n	8008ba8 <_printf_i+0x144>
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	6861      	ldr	r1, [r4, #4]
 8008b9a:	4299      	cmp	r1, r3
 8008b9c:	bfde      	ittt	le
 8008b9e:	2330      	movle	r3, #48	@ 0x30
 8008ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ba8:	1b92      	subs	r2, r2, r6
 8008baa:	6122      	str	r2, [r4, #16]
 8008bac:	f8cd a000 	str.w	sl, [sp]
 8008bb0:	464b      	mov	r3, r9
 8008bb2:	aa03      	add	r2, sp, #12
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	f7ff fee6 	bl	8008988 <_printf_common>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d14a      	bne.n	8008c56 <_printf_i+0x1f2>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	b004      	add	sp, #16
 8008bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	f043 0320 	orr.w	r3, r3, #32
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	4833      	ldr	r0, [pc, #204]	@ (8008ca0 <_printf_i+0x23c>)
 8008bd4:	2778      	movs	r7, #120	@ 0x78
 8008bd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	6831      	ldr	r1, [r6, #0]
 8008bde:	061f      	lsls	r7, r3, #24
 8008be0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008be4:	d402      	bmi.n	8008bec <_printf_i+0x188>
 8008be6:	065f      	lsls	r7, r3, #25
 8008be8:	bf48      	it	mi
 8008bea:	b2ad      	uxthmi	r5, r5
 8008bec:	6031      	str	r1, [r6, #0]
 8008bee:	07d9      	lsls	r1, r3, #31
 8008bf0:	bf44      	itt	mi
 8008bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8008bf6:	6023      	strmi	r3, [r4, #0]
 8008bf8:	b11d      	cbz	r5, 8008c02 <_printf_i+0x19e>
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	e7ac      	b.n	8008b58 <_printf_i+0xf4>
 8008bfe:	4827      	ldr	r0, [pc, #156]	@ (8008c9c <_printf_i+0x238>)
 8008c00:	e7e9      	b.n	8008bd6 <_printf_i+0x172>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	f023 0320 	bic.w	r3, r3, #32
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	e7f6      	b.n	8008bfa <_printf_i+0x196>
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	e7bd      	b.n	8008b8c <_printf_i+0x128>
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	6961      	ldr	r1, [r4, #20]
 8008c16:	1d18      	adds	r0, r3, #4
 8008c18:	6030      	str	r0, [r6, #0]
 8008c1a:	062e      	lsls	r6, r5, #24
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	d501      	bpl.n	8008c24 <_printf_i+0x1c0>
 8008c20:	6019      	str	r1, [r3, #0]
 8008c22:	e002      	b.n	8008c2a <_printf_i+0x1c6>
 8008c24:	0668      	lsls	r0, r5, #25
 8008c26:	d5fb      	bpl.n	8008c20 <_printf_i+0x1bc>
 8008c28:	8019      	strh	r1, [r3, #0]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	4616      	mov	r6, r2
 8008c30:	e7bc      	b.n	8008bac <_printf_i+0x148>
 8008c32:	6833      	ldr	r3, [r6, #0]
 8008c34:	1d1a      	adds	r2, r3, #4
 8008c36:	6032      	str	r2, [r6, #0]
 8008c38:	681e      	ldr	r6, [r3, #0]
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7f7 fac6 	bl	80001d0 <memchr>
 8008c44:	b108      	cbz	r0, 8008c4a <_printf_i+0x1e6>
 8008c46:	1b80      	subs	r0, r0, r6
 8008c48:	6060      	str	r0, [r4, #4]
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	6123      	str	r3, [r4, #16]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c54:	e7aa      	b.n	8008bac <_printf_i+0x148>
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	47d0      	blx	sl
 8008c60:	3001      	adds	r0, #1
 8008c62:	d0ad      	beq.n	8008bc0 <_printf_i+0x15c>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	079b      	lsls	r3, r3, #30
 8008c68:	d413      	bmi.n	8008c92 <_printf_i+0x22e>
 8008c6a:	68e0      	ldr	r0, [r4, #12]
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	bfb8      	it	lt
 8008c72:	4618      	movlt	r0, r3
 8008c74:	e7a6      	b.n	8008bc4 <_printf_i+0x160>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4632      	mov	r2, r6
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	47d0      	blx	sl
 8008c80:	3001      	adds	r0, #1
 8008c82:	d09d      	beq.n	8008bc0 <_printf_i+0x15c>
 8008c84:	3501      	adds	r5, #1
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	9903      	ldr	r1, [sp, #12]
 8008c8a:	1a5b      	subs	r3, r3, r1
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dcf2      	bgt.n	8008c76 <_printf_i+0x212>
 8008c90:	e7eb      	b.n	8008c6a <_printf_i+0x206>
 8008c92:	2500      	movs	r5, #0
 8008c94:	f104 0619 	add.w	r6, r4, #25
 8008c98:	e7f5      	b.n	8008c86 <_printf_i+0x222>
 8008c9a:	bf00      	nop
 8008c9c:	0800ad62 	.word	0x0800ad62
 8008ca0:	0800ad73 	.word	0x0800ad73

08008ca4 <std>:
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	e9c0 3300 	strd	r3, r3, [r0]
 8008cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cb2:	6083      	str	r3, [r0, #8]
 8008cb4:	8181      	strh	r1, [r0, #12]
 8008cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cb8:	81c2      	strh	r2, [r0, #14]
 8008cba:	6183      	str	r3, [r0, #24]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	2208      	movs	r2, #8
 8008cc0:	305c      	adds	r0, #92	@ 0x5c
 8008cc2:	f000 f8f4 	bl	8008eae <memset>
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <std+0x58>)
 8008cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cca:	4b0d      	ldr	r3, [pc, #52]	@ (8008d00 <std+0x5c>)
 8008ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cce:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <std+0x60>)
 8008cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <std+0x64>)
 8008cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d0c <std+0x68>)
 8008cd8:	6224      	str	r4, [r4, #32]
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	d006      	beq.n	8008cec <std+0x48>
 8008cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ce2:	4294      	cmp	r4, r2
 8008ce4:	d002      	beq.n	8008cec <std+0x48>
 8008ce6:	33d0      	adds	r3, #208	@ 0xd0
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d105      	bne.n	8008cf8 <std+0x54>
 8008cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf4:	f000 b958 	b.w	8008fa8 <__retarget_lock_init_recursive>
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	bf00      	nop
 8008cfc:	08008e29 	.word	0x08008e29
 8008d00:	08008e4b 	.word	0x08008e4b
 8008d04:	08008e83 	.word	0x08008e83
 8008d08:	08008ea7 	.word	0x08008ea7
 8008d0c:	2000040c 	.word	0x2000040c

08008d10 <stdio_exit_handler>:
 8008d10:	4a02      	ldr	r2, [pc, #8]	@ (8008d1c <stdio_exit_handler+0xc>)
 8008d12:	4903      	ldr	r1, [pc, #12]	@ (8008d20 <stdio_exit_handler+0x10>)
 8008d14:	4803      	ldr	r0, [pc, #12]	@ (8008d24 <stdio_exit_handler+0x14>)
 8008d16:	f000 b869 	b.w	8008dec <_fwalk_sglue>
 8008d1a:	bf00      	nop
 8008d1c:	2000000c 	.word	0x2000000c
 8008d20:	0800a655 	.word	0x0800a655
 8008d24:	2000001c 	.word	0x2000001c

08008d28 <cleanup_stdio>:
 8008d28:	6841      	ldr	r1, [r0, #4]
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d5c <cleanup_stdio+0x34>)
 8008d2c:	4299      	cmp	r1, r3
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	4604      	mov	r4, r0
 8008d32:	d001      	beq.n	8008d38 <cleanup_stdio+0x10>
 8008d34:	f001 fc8e 	bl	800a654 <_fflush_r>
 8008d38:	68a1      	ldr	r1, [r4, #8]
 8008d3a:	4b09      	ldr	r3, [pc, #36]	@ (8008d60 <cleanup_stdio+0x38>)
 8008d3c:	4299      	cmp	r1, r3
 8008d3e:	d002      	beq.n	8008d46 <cleanup_stdio+0x1e>
 8008d40:	4620      	mov	r0, r4
 8008d42:	f001 fc87 	bl	800a654 <_fflush_r>
 8008d46:	68e1      	ldr	r1, [r4, #12]
 8008d48:	4b06      	ldr	r3, [pc, #24]	@ (8008d64 <cleanup_stdio+0x3c>)
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	d004      	beq.n	8008d58 <cleanup_stdio+0x30>
 8008d4e:	4620      	mov	r0, r4
 8008d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d54:	f001 bc7e 	b.w	800a654 <_fflush_r>
 8008d58:	bd10      	pop	{r4, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2000040c 	.word	0x2000040c
 8008d60:	20000474 	.word	0x20000474
 8008d64:	200004dc 	.word	0x200004dc

08008d68 <global_stdio_init.part.0>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d98 <global_stdio_init.part.0+0x30>)
 8008d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008d9c <global_stdio_init.part.0+0x34>)
 8008d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008da0 <global_stdio_init.part.0+0x38>)
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	4620      	mov	r0, r4
 8008d74:	2200      	movs	r2, #0
 8008d76:	2104      	movs	r1, #4
 8008d78:	f7ff ff94 	bl	8008ca4 <std>
 8008d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d80:	2201      	movs	r2, #1
 8008d82:	2109      	movs	r1, #9
 8008d84:	f7ff ff8e 	bl	8008ca4 <std>
 8008d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d92:	2112      	movs	r1, #18
 8008d94:	f7ff bf86 	b.w	8008ca4 <std>
 8008d98:	20000544 	.word	0x20000544
 8008d9c:	2000040c 	.word	0x2000040c
 8008da0:	08008d11 	.word	0x08008d11

08008da4 <__sfp_lock_acquire>:
 8008da4:	4801      	ldr	r0, [pc, #4]	@ (8008dac <__sfp_lock_acquire+0x8>)
 8008da6:	f000 b900 	b.w	8008faa <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	2000054d 	.word	0x2000054d

08008db0 <__sfp_lock_release>:
 8008db0:	4801      	ldr	r0, [pc, #4]	@ (8008db8 <__sfp_lock_release+0x8>)
 8008db2:	f000 b8fb 	b.w	8008fac <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	2000054d 	.word	0x2000054d

08008dbc <__sinit>:
 8008dbc:	b510      	push	{r4, lr}
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	f7ff fff0 	bl	8008da4 <__sfp_lock_acquire>
 8008dc4:	6a23      	ldr	r3, [r4, #32]
 8008dc6:	b11b      	cbz	r3, 8008dd0 <__sinit+0x14>
 8008dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dcc:	f7ff bff0 	b.w	8008db0 <__sfp_lock_release>
 8008dd0:	4b04      	ldr	r3, [pc, #16]	@ (8008de4 <__sinit+0x28>)
 8008dd2:	6223      	str	r3, [r4, #32]
 8008dd4:	4b04      	ldr	r3, [pc, #16]	@ (8008de8 <__sinit+0x2c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1f5      	bne.n	8008dc8 <__sinit+0xc>
 8008ddc:	f7ff ffc4 	bl	8008d68 <global_stdio_init.part.0>
 8008de0:	e7f2      	b.n	8008dc8 <__sinit+0xc>
 8008de2:	bf00      	nop
 8008de4:	08008d29 	.word	0x08008d29
 8008de8:	20000544 	.word	0x20000544

08008dec <_fwalk_sglue>:
 8008dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	4607      	mov	r7, r0
 8008df2:	4688      	mov	r8, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	2600      	movs	r6, #0
 8008df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8008e00:	d505      	bpl.n	8008e0e <_fwalk_sglue+0x22>
 8008e02:	6824      	ldr	r4, [r4, #0]
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	d1f7      	bne.n	8008df8 <_fwalk_sglue+0xc>
 8008e08:	4630      	mov	r0, r6
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d907      	bls.n	8008e24 <_fwalk_sglue+0x38>
 8008e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	d003      	beq.n	8008e24 <_fwalk_sglue+0x38>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4638      	mov	r0, r7
 8008e20:	47c0      	blx	r8
 8008e22:	4306      	orrs	r6, r0
 8008e24:	3568      	adds	r5, #104	@ 0x68
 8008e26:	e7e9      	b.n	8008dfc <_fwalk_sglue+0x10>

08008e28 <__sread>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e30:	f000 f86c 	bl	8008f0c <_read_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	bfab      	itete	ge
 8008e38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e3c:	181b      	addge	r3, r3, r0
 8008e3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e42:	bfac      	ite	ge
 8008e44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e46:	81a3      	strhlt	r3, [r4, #12]
 8008e48:	bd10      	pop	{r4, pc}

08008e4a <__swrite>:
 8008e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4e:	461f      	mov	r7, r3
 8008e50:	898b      	ldrh	r3, [r1, #12]
 8008e52:	05db      	lsls	r3, r3, #23
 8008e54:	4605      	mov	r5, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	4616      	mov	r6, r2
 8008e5a:	d505      	bpl.n	8008e68 <__swrite+0x1e>
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	2302      	movs	r3, #2
 8008e62:	2200      	movs	r2, #0
 8008e64:	f000 f840 	bl	8008ee8 <_lseek_r>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	4632      	mov	r2, r6
 8008e76:	463b      	mov	r3, r7
 8008e78:	4628      	mov	r0, r5
 8008e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7e:	f000 b857 	b.w	8008f30 <_write_r>

08008e82 <__sseek>:
 8008e82:	b510      	push	{r4, lr}
 8008e84:	460c      	mov	r4, r1
 8008e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8a:	f000 f82d 	bl	8008ee8 <_lseek_r>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	bf15      	itete	ne
 8008e94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e9e:	81a3      	strheq	r3, [r4, #12]
 8008ea0:	bf18      	it	ne
 8008ea2:	81a3      	strhne	r3, [r4, #12]
 8008ea4:	bd10      	pop	{r4, pc}

08008ea6 <__sclose>:
 8008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eaa:	f000 b80d 	b.w	8008ec8 <_close_r>

08008eae <memset>:
 8008eae:	4402      	add	r2, r0
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d100      	bne.n	8008eb8 <memset+0xa>
 8008eb6:	4770      	bx	lr
 8008eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ebc:	e7f9      	b.n	8008eb2 <memset+0x4>
	...

08008ec0 <_localeconv_r>:
 8008ec0:	4800      	ldr	r0, [pc, #0]	@ (8008ec4 <_localeconv_r+0x4>)
 8008ec2:	4770      	bx	lr
 8008ec4:	20000158 	.word	0x20000158

08008ec8 <_close_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_close_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f8 fdb4 	bl	8001a40 <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_close_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_close_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20000548 	.word	0x20000548

08008ee8 <_lseek_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	@ (8008f08 <_lseek_r+0x20>)
 8008eec:	4604      	mov	r4, r0
 8008eee:	4608      	mov	r0, r1
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	602a      	str	r2, [r5, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7f8 fdc9 	bl	8001a8e <_lseek>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_lseek_r+0x1e>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_lseek_r+0x1e>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	20000548 	.word	0x20000548

08008f0c <_read_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	@ (8008f2c <_read_r+0x20>)
 8008f10:	4604      	mov	r4, r0
 8008f12:	4608      	mov	r0, r1
 8008f14:	4611      	mov	r1, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	602a      	str	r2, [r5, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f7f8 fd57 	bl	80019ce <_read>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_read_r+0x1e>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_read_r+0x1e>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	20000548 	.word	0x20000548

08008f30 <_write_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	@ (8008f50 <_write_r+0x20>)
 8008f34:	4604      	mov	r4, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f8 fd62 	bl	8001a08 <_write>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_write_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_write_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20000548 	.word	0x20000548

08008f54 <__errno>:
 8008f54:	4b01      	ldr	r3, [pc, #4]	@ (8008f5c <__errno+0x8>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000018 	.word	0x20000018

08008f60 <__libc_init_array>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4d0d      	ldr	r5, [pc, #52]	@ (8008f98 <__libc_init_array+0x38>)
 8008f64:	4c0d      	ldr	r4, [pc, #52]	@ (8008f9c <__libc_init_array+0x3c>)
 8008f66:	1b64      	subs	r4, r4, r5
 8008f68:	10a4      	asrs	r4, r4, #2
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	42a6      	cmp	r6, r4
 8008f6e:	d109      	bne.n	8008f84 <__libc_init_array+0x24>
 8008f70:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa0 <__libc_init_array+0x40>)
 8008f72:	4c0c      	ldr	r4, [pc, #48]	@ (8008fa4 <__libc_init_array+0x44>)
 8008f74:	f001 febc 	bl	800acf0 <_init>
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	10a4      	asrs	r4, r4, #2
 8008f7c:	2600      	movs	r6, #0
 8008f7e:	42a6      	cmp	r6, r4
 8008f80:	d105      	bne.n	8008f8e <__libc_init_array+0x2e>
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f88:	4798      	blx	r3
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	e7ee      	b.n	8008f6c <__libc_init_array+0xc>
 8008f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f92:	4798      	blx	r3
 8008f94:	3601      	adds	r6, #1
 8008f96:	e7f2      	b.n	8008f7e <__libc_init_array+0x1e>
 8008f98:	0800b0c8 	.word	0x0800b0c8
 8008f9c:	0800b0c8 	.word	0x0800b0c8
 8008fa0:	0800b0c8 	.word	0x0800b0c8
 8008fa4:	0800b0cc 	.word	0x0800b0cc

08008fa8 <__retarget_lock_init_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_acquire_recursive>:
 8008faa:	4770      	bx	lr

08008fac <__retarget_lock_release_recursive>:
 8008fac:	4770      	bx	lr

08008fae <quorem>:
 8008fae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb2:	6903      	ldr	r3, [r0, #16]
 8008fb4:	690c      	ldr	r4, [r1, #16]
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	4607      	mov	r7, r0
 8008fba:	db7e      	blt.n	80090ba <quorem+0x10c>
 8008fbc:	3c01      	subs	r4, #1
 8008fbe:	f101 0814 	add.w	r8, r1, #20
 8008fc2:	00a3      	lsls	r3, r4, #2
 8008fc4:	f100 0514 	add.w	r5, r0, #20
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fe0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fe4:	d32e      	bcc.n	8009044 <quorem+0x96>
 8008fe6:	f04f 0a00 	mov.w	sl, #0
 8008fea:	46c4      	mov	ip, r8
 8008fec:	46ae      	mov	lr, r5
 8008fee:	46d3      	mov	fp, sl
 8008ff0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ff4:	b298      	uxth	r0, r3
 8008ff6:	fb06 a000 	mla	r0, r6, r0, sl
 8008ffa:	0c02      	lsrs	r2, r0, #16
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	fb06 2303 	mla	r3, r6, r3, r2
 8009002:	f8de 2000 	ldr.w	r2, [lr]
 8009006:	b280      	uxth	r0, r0
 8009008:	b292      	uxth	r2, r2
 800900a:	1a12      	subs	r2, r2, r0
 800900c:	445a      	add	r2, fp
 800900e:	f8de 0000 	ldr.w	r0, [lr]
 8009012:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009016:	b29b      	uxth	r3, r3
 8009018:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800901c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009020:	b292      	uxth	r2, r2
 8009022:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009026:	45e1      	cmp	r9, ip
 8009028:	f84e 2b04 	str.w	r2, [lr], #4
 800902c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009030:	d2de      	bcs.n	8008ff0 <quorem+0x42>
 8009032:	9b00      	ldr	r3, [sp, #0]
 8009034:	58eb      	ldr	r3, [r5, r3]
 8009036:	b92b      	cbnz	r3, 8009044 <quorem+0x96>
 8009038:	9b01      	ldr	r3, [sp, #4]
 800903a:	3b04      	subs	r3, #4
 800903c:	429d      	cmp	r5, r3
 800903e:	461a      	mov	r2, r3
 8009040:	d32f      	bcc.n	80090a2 <quorem+0xf4>
 8009042:	613c      	str	r4, [r7, #16]
 8009044:	4638      	mov	r0, r7
 8009046:	f001 f979 	bl	800a33c <__mcmp>
 800904a:	2800      	cmp	r0, #0
 800904c:	db25      	blt.n	800909a <quorem+0xec>
 800904e:	4629      	mov	r1, r5
 8009050:	2000      	movs	r0, #0
 8009052:	f858 2b04 	ldr.w	r2, [r8], #4
 8009056:	f8d1 c000 	ldr.w	ip, [r1]
 800905a:	fa1f fe82 	uxth.w	lr, r2
 800905e:	fa1f f38c 	uxth.w	r3, ip
 8009062:	eba3 030e 	sub.w	r3, r3, lr
 8009066:	4403      	add	r3, r0
 8009068:	0c12      	lsrs	r2, r2, #16
 800906a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800906e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009078:	45c1      	cmp	r9, r8
 800907a:	f841 3b04 	str.w	r3, [r1], #4
 800907e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009082:	d2e6      	bcs.n	8009052 <quorem+0xa4>
 8009084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009088:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800908c:	b922      	cbnz	r2, 8009098 <quorem+0xea>
 800908e:	3b04      	subs	r3, #4
 8009090:	429d      	cmp	r5, r3
 8009092:	461a      	mov	r2, r3
 8009094:	d30b      	bcc.n	80090ae <quorem+0x100>
 8009096:	613c      	str	r4, [r7, #16]
 8009098:	3601      	adds	r6, #1
 800909a:	4630      	mov	r0, r6
 800909c:	b003      	add	sp, #12
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	6812      	ldr	r2, [r2, #0]
 80090a4:	3b04      	subs	r3, #4
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	d1cb      	bne.n	8009042 <quorem+0x94>
 80090aa:	3c01      	subs	r4, #1
 80090ac:	e7c6      	b.n	800903c <quorem+0x8e>
 80090ae:	6812      	ldr	r2, [r2, #0]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	d1ef      	bne.n	8009096 <quorem+0xe8>
 80090b6:	3c01      	subs	r4, #1
 80090b8:	e7ea      	b.n	8009090 <quorem+0xe2>
 80090ba:	2000      	movs	r0, #0
 80090bc:	e7ee      	b.n	800909c <quorem+0xee>
	...

080090c0 <_dtoa_r>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	69c7      	ldr	r7, [r0, #28]
 80090c6:	b099      	sub	sp, #100	@ 0x64
 80090c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090cc:	ec55 4b10 	vmov	r4, r5, d0
 80090d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80090d4:	4683      	mov	fp, r0
 80090d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80090d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090da:	b97f      	cbnz	r7, 80090fc <_dtoa_r+0x3c>
 80090dc:	2010      	movs	r0, #16
 80090de:	f000 fdfd 	bl	8009cdc <malloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80090e8:	b920      	cbnz	r0, 80090f4 <_dtoa_r+0x34>
 80090ea:	4ba7      	ldr	r3, [pc, #668]	@ (8009388 <_dtoa_r+0x2c8>)
 80090ec:	21ef      	movs	r1, #239	@ 0xef
 80090ee:	48a7      	ldr	r0, [pc, #668]	@ (800938c <_dtoa_r+0x2cc>)
 80090f0:	f001 faf6 	bl	800a6e0 <__assert_func>
 80090f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80090f8:	6007      	str	r7, [r0, #0]
 80090fa:	60c7      	str	r7, [r0, #12]
 80090fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009100:	6819      	ldr	r1, [r3, #0]
 8009102:	b159      	cbz	r1, 800911c <_dtoa_r+0x5c>
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	604a      	str	r2, [r1, #4]
 8009108:	2301      	movs	r3, #1
 800910a:	4093      	lsls	r3, r2
 800910c:	608b      	str	r3, [r1, #8]
 800910e:	4658      	mov	r0, fp
 8009110:	f000 feda 	bl	8009ec8 <_Bfree>
 8009114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	1e2b      	subs	r3, r5, #0
 800911e:	bfb9      	ittee	lt
 8009120:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009124:	9303      	strlt	r3, [sp, #12]
 8009126:	2300      	movge	r3, #0
 8009128:	6033      	strge	r3, [r6, #0]
 800912a:	9f03      	ldr	r7, [sp, #12]
 800912c:	4b98      	ldr	r3, [pc, #608]	@ (8009390 <_dtoa_r+0x2d0>)
 800912e:	bfbc      	itt	lt
 8009130:	2201      	movlt	r2, #1
 8009132:	6032      	strlt	r2, [r6, #0]
 8009134:	43bb      	bics	r3, r7
 8009136:	d112      	bne.n	800915e <_dtoa_r+0x9e>
 8009138:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800913a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009144:	4323      	orrs	r3, r4
 8009146:	f000 854d 	beq.w	8009be4 <_dtoa_r+0xb24>
 800914a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800914c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093a4 <_dtoa_r+0x2e4>
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 854f 	beq.w	8009bf4 <_dtoa_r+0xb34>
 8009156:	f10a 0303 	add.w	r3, sl, #3
 800915a:	f000 bd49 	b.w	8009bf0 <_dtoa_r+0xb30>
 800915e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	ec51 0b17 	vmov	r0, r1, d7
 8009168:	2300      	movs	r3, #0
 800916a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800916e:	f7f7 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009172:	4680      	mov	r8, r0
 8009174:	b158      	cbz	r0, 800918e <_dtoa_r+0xce>
 8009176:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009178:	2301      	movs	r3, #1
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800917e:	b113      	cbz	r3, 8009186 <_dtoa_r+0xc6>
 8009180:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009182:	4b84      	ldr	r3, [pc, #528]	@ (8009394 <_dtoa_r+0x2d4>)
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093a8 <_dtoa_r+0x2e8>
 800918a:	f000 bd33 	b.w	8009bf4 <_dtoa_r+0xb34>
 800918e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009192:	aa16      	add	r2, sp, #88	@ 0x58
 8009194:	a917      	add	r1, sp, #92	@ 0x5c
 8009196:	4658      	mov	r0, fp
 8009198:	f001 f980 	bl	800a49c <__d2b>
 800919c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091a0:	4681      	mov	r9, r0
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d077      	beq.n	8009296 <_dtoa_r+0x1d6>
 80091a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091c0:	4619      	mov	r1, r3
 80091c2:	2200      	movs	r2, #0
 80091c4:	4b74      	ldr	r3, [pc, #464]	@ (8009398 <_dtoa_r+0x2d8>)
 80091c6:	f7f7 f85f 	bl	8000288 <__aeabi_dsub>
 80091ca:	a369      	add	r3, pc, #420	@ (adr r3, 8009370 <_dtoa_r+0x2b0>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 fa12 	bl	80005f8 <__aeabi_dmul>
 80091d4:	a368      	add	r3, pc, #416	@ (adr r3, 8009378 <_dtoa_r+0x2b8>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f857 	bl	800028c <__adddf3>
 80091de:	4604      	mov	r4, r0
 80091e0:	4630      	mov	r0, r6
 80091e2:	460d      	mov	r5, r1
 80091e4:	f7f7 f99e 	bl	8000524 <__aeabi_i2d>
 80091e8:	a365      	add	r3, pc, #404	@ (adr r3, 8009380 <_dtoa_r+0x2c0>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fa03 	bl	80005f8 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 f847 	bl	800028c <__adddf3>
 80091fe:	4604      	mov	r4, r0
 8009200:	460d      	mov	r5, r1
 8009202:	f7f7 fca9 	bl	8000b58 <__aeabi_d2iz>
 8009206:	2200      	movs	r2, #0
 8009208:	4607      	mov	r7, r0
 800920a:	2300      	movs	r3, #0
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 fc64 	bl	8000adc <__aeabi_dcmplt>
 8009214:	b140      	cbz	r0, 8009228 <_dtoa_r+0x168>
 8009216:	4638      	mov	r0, r7
 8009218:	f7f7 f984 	bl	8000524 <__aeabi_i2d>
 800921c:	4622      	mov	r2, r4
 800921e:	462b      	mov	r3, r5
 8009220:	f7f7 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8009224:	b900      	cbnz	r0, 8009228 <_dtoa_r+0x168>
 8009226:	3f01      	subs	r7, #1
 8009228:	2f16      	cmp	r7, #22
 800922a:	d851      	bhi.n	80092d0 <_dtoa_r+0x210>
 800922c:	4b5b      	ldr	r3, [pc, #364]	@ (800939c <_dtoa_r+0x2dc>)
 800922e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800923a:	f7f7 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800923e:	2800      	cmp	r0, #0
 8009240:	d048      	beq.n	80092d4 <_dtoa_r+0x214>
 8009242:	3f01      	subs	r7, #1
 8009244:	2300      	movs	r3, #0
 8009246:	9312      	str	r3, [sp, #72]	@ 0x48
 8009248:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800924a:	1b9b      	subs	r3, r3, r6
 800924c:	1e5a      	subs	r2, r3, #1
 800924e:	bf44      	itt	mi
 8009250:	f1c3 0801 	rsbmi	r8, r3, #1
 8009254:	2300      	movmi	r3, #0
 8009256:	9208      	str	r2, [sp, #32]
 8009258:	bf54      	ite	pl
 800925a:	f04f 0800 	movpl.w	r8, #0
 800925e:	9308      	strmi	r3, [sp, #32]
 8009260:	2f00      	cmp	r7, #0
 8009262:	db39      	blt.n	80092d8 <_dtoa_r+0x218>
 8009264:	9b08      	ldr	r3, [sp, #32]
 8009266:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009268:	443b      	add	r3, r7
 800926a:	9308      	str	r3, [sp, #32]
 800926c:	2300      	movs	r3, #0
 800926e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009272:	2b09      	cmp	r3, #9
 8009274:	d864      	bhi.n	8009340 <_dtoa_r+0x280>
 8009276:	2b05      	cmp	r3, #5
 8009278:	bfc4      	itt	gt
 800927a:	3b04      	subgt	r3, #4
 800927c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800927e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009280:	f1a3 0302 	sub.w	r3, r3, #2
 8009284:	bfcc      	ite	gt
 8009286:	2400      	movgt	r4, #0
 8009288:	2401      	movle	r4, #1
 800928a:	2b03      	cmp	r3, #3
 800928c:	d863      	bhi.n	8009356 <_dtoa_r+0x296>
 800928e:	e8df f003 	tbb	[pc, r3]
 8009292:	372a      	.short	0x372a
 8009294:	5535      	.short	0x5535
 8009296:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800929a:	441e      	add	r6, r3
 800929c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	bfc1      	itttt	gt
 80092a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092a8:	409f      	lslgt	r7, r3
 80092aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092b2:	bfd6      	itet	le
 80092b4:	f1c3 0320 	rsble	r3, r3, #32
 80092b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80092bc:	fa04 f003 	lslle.w	r0, r4, r3
 80092c0:	f7f7 f920 	bl	8000504 <__aeabi_ui2d>
 80092c4:	2201      	movs	r2, #1
 80092c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092ca:	3e01      	subs	r6, #1
 80092cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80092ce:	e777      	b.n	80091c0 <_dtoa_r+0x100>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e7b8      	b.n	8009246 <_dtoa_r+0x186>
 80092d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80092d6:	e7b7      	b.n	8009248 <_dtoa_r+0x188>
 80092d8:	427b      	negs	r3, r7
 80092da:	930a      	str	r3, [sp, #40]	@ 0x28
 80092dc:	2300      	movs	r3, #0
 80092de:	eba8 0807 	sub.w	r8, r8, r7
 80092e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092e4:	e7c4      	b.n	8009270 <_dtoa_r+0x1b0>
 80092e6:	2300      	movs	r3, #0
 80092e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dc35      	bgt.n	800935c <_dtoa_r+0x29c>
 80092f0:	2301      	movs	r3, #1
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	9307      	str	r3, [sp, #28]
 80092f6:	461a      	mov	r2, r3
 80092f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80092fa:	e00b      	b.n	8009314 <_dtoa_r+0x254>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e7f3      	b.n	80092e8 <_dtoa_r+0x228>
 8009300:	2300      	movs	r3, #0
 8009302:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	3301      	adds	r3, #1
 800930c:	2b01      	cmp	r3, #1
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	bfb8      	it	lt
 8009312:	2301      	movlt	r3, #1
 8009314:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009318:	2100      	movs	r1, #0
 800931a:	2204      	movs	r2, #4
 800931c:	f102 0514 	add.w	r5, r2, #20
 8009320:	429d      	cmp	r5, r3
 8009322:	d91f      	bls.n	8009364 <_dtoa_r+0x2a4>
 8009324:	6041      	str	r1, [r0, #4]
 8009326:	4658      	mov	r0, fp
 8009328:	f000 fd8e 	bl	8009e48 <_Balloc>
 800932c:	4682      	mov	sl, r0
 800932e:	2800      	cmp	r0, #0
 8009330:	d13c      	bne.n	80093ac <_dtoa_r+0x2ec>
 8009332:	4b1b      	ldr	r3, [pc, #108]	@ (80093a0 <_dtoa_r+0x2e0>)
 8009334:	4602      	mov	r2, r0
 8009336:	f240 11af 	movw	r1, #431	@ 0x1af
 800933a:	e6d8      	b.n	80090ee <_dtoa_r+0x2e>
 800933c:	2301      	movs	r3, #1
 800933e:	e7e0      	b.n	8009302 <_dtoa_r+0x242>
 8009340:	2401      	movs	r4, #1
 8009342:	2300      	movs	r3, #0
 8009344:	9309      	str	r3, [sp, #36]	@ 0x24
 8009346:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009348:	f04f 33ff 	mov.w	r3, #4294967295
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	9307      	str	r3, [sp, #28]
 8009350:	2200      	movs	r2, #0
 8009352:	2312      	movs	r3, #18
 8009354:	e7d0      	b.n	80092f8 <_dtoa_r+0x238>
 8009356:	2301      	movs	r3, #1
 8009358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800935a:	e7f5      	b.n	8009348 <_dtoa_r+0x288>
 800935c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	e7d7      	b.n	8009314 <_dtoa_r+0x254>
 8009364:	3101      	adds	r1, #1
 8009366:	0052      	lsls	r2, r2, #1
 8009368:	e7d8      	b.n	800931c <_dtoa_r+0x25c>
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	636f4361 	.word	0x636f4361
 8009374:	3fd287a7 	.word	0x3fd287a7
 8009378:	8b60c8b3 	.word	0x8b60c8b3
 800937c:	3fc68a28 	.word	0x3fc68a28
 8009380:	509f79fb 	.word	0x509f79fb
 8009384:	3fd34413 	.word	0x3fd34413
 8009388:	0800ad91 	.word	0x0800ad91
 800938c:	0800ada8 	.word	0x0800ada8
 8009390:	7ff00000 	.word	0x7ff00000
 8009394:	0800ad61 	.word	0x0800ad61
 8009398:	3ff80000 	.word	0x3ff80000
 800939c:	0800aea0 	.word	0x0800aea0
 80093a0:	0800ae00 	.word	0x0800ae00
 80093a4:	0800ad8d 	.word	0x0800ad8d
 80093a8:	0800ad60 	.word	0x0800ad60
 80093ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093b0:	6018      	str	r0, [r3, #0]
 80093b2:	9b07      	ldr	r3, [sp, #28]
 80093b4:	2b0e      	cmp	r3, #14
 80093b6:	f200 80a4 	bhi.w	8009502 <_dtoa_r+0x442>
 80093ba:	2c00      	cmp	r4, #0
 80093bc:	f000 80a1 	beq.w	8009502 <_dtoa_r+0x442>
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	dd33      	ble.n	800942c <_dtoa_r+0x36c>
 80093c4:	4bad      	ldr	r3, [pc, #692]	@ (800967c <_dtoa_r+0x5bc>)
 80093c6:	f007 020f 	and.w	r2, r7, #15
 80093ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ce:	ed93 7b00 	vldr	d7, [r3]
 80093d2:	05f8      	lsls	r0, r7, #23
 80093d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093dc:	d516      	bpl.n	800940c <_dtoa_r+0x34c>
 80093de:	4ba8      	ldr	r3, [pc, #672]	@ (8009680 <_dtoa_r+0x5c0>)
 80093e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093e8:	f7f7 fa30 	bl	800084c <__aeabi_ddiv>
 80093ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f0:	f004 040f 	and.w	r4, r4, #15
 80093f4:	2603      	movs	r6, #3
 80093f6:	4da2      	ldr	r5, [pc, #648]	@ (8009680 <_dtoa_r+0x5c0>)
 80093f8:	b954      	cbnz	r4, 8009410 <_dtoa_r+0x350>
 80093fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009402:	f7f7 fa23 	bl	800084c <__aeabi_ddiv>
 8009406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800940a:	e028      	b.n	800945e <_dtoa_r+0x39e>
 800940c:	2602      	movs	r6, #2
 800940e:	e7f2      	b.n	80093f6 <_dtoa_r+0x336>
 8009410:	07e1      	lsls	r1, r4, #31
 8009412:	d508      	bpl.n	8009426 <_dtoa_r+0x366>
 8009414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800941c:	f7f7 f8ec 	bl	80005f8 <__aeabi_dmul>
 8009420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009424:	3601      	adds	r6, #1
 8009426:	1064      	asrs	r4, r4, #1
 8009428:	3508      	adds	r5, #8
 800942a:	e7e5      	b.n	80093f8 <_dtoa_r+0x338>
 800942c:	f000 80d2 	beq.w	80095d4 <_dtoa_r+0x514>
 8009430:	427c      	negs	r4, r7
 8009432:	4b92      	ldr	r3, [pc, #584]	@ (800967c <_dtoa_r+0x5bc>)
 8009434:	4d92      	ldr	r5, [pc, #584]	@ (8009680 <_dtoa_r+0x5c0>)
 8009436:	f004 020f 	and.w	r2, r4, #15
 800943a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009446:	f7f7 f8d7 	bl	80005f8 <__aeabi_dmul>
 800944a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800944e:	1124      	asrs	r4, r4, #4
 8009450:	2300      	movs	r3, #0
 8009452:	2602      	movs	r6, #2
 8009454:	2c00      	cmp	r4, #0
 8009456:	f040 80b2 	bne.w	80095be <_dtoa_r+0x4fe>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1d3      	bne.n	8009406 <_dtoa_r+0x346>
 800945e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009460:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 80b7 	beq.w	80095d8 <_dtoa_r+0x518>
 800946a:	4b86      	ldr	r3, [pc, #536]	@ (8009684 <_dtoa_r+0x5c4>)
 800946c:	2200      	movs	r2, #0
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f7 fb33 	bl	8000adc <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	f000 80ae 	beq.w	80095d8 <_dtoa_r+0x518>
 800947c:	9b07      	ldr	r3, [sp, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80aa 	beq.w	80095d8 <_dtoa_r+0x518>
 8009484:	9b00      	ldr	r3, [sp, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	dd37      	ble.n	80094fa <_dtoa_r+0x43a>
 800948a:	1e7b      	subs	r3, r7, #1
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	4620      	mov	r0, r4
 8009490:	4b7d      	ldr	r3, [pc, #500]	@ (8009688 <_dtoa_r+0x5c8>)
 8009492:	2200      	movs	r2, #0
 8009494:	4629      	mov	r1, r5
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800949e:	9c00      	ldr	r4, [sp, #0]
 80094a0:	3601      	adds	r6, #1
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7f7 f83e 	bl	8000524 <__aeabi_i2d>
 80094a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	4b76      	ldr	r3, [pc, #472]	@ (800968c <_dtoa_r+0x5cc>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	f7f6 feea 	bl	800028c <__adddf3>
 80094b8:	4605      	mov	r5, r0
 80094ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094be:	2c00      	cmp	r4, #0
 80094c0:	f040 808d 	bne.w	80095de <_dtoa_r+0x51e>
 80094c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c8:	4b71      	ldr	r3, [pc, #452]	@ (8009690 <_dtoa_r+0x5d0>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7f6 fedc 	bl	8000288 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094d8:	462a      	mov	r2, r5
 80094da:	4633      	mov	r3, r6
 80094dc:	f7f7 fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f040 828b 	bne.w	80099fc <_dtoa_r+0x93c>
 80094e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ea:	462a      	mov	r2, r5
 80094ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80094f0:	f7f7 faf4 	bl	8000adc <__aeabi_dcmplt>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f040 8128 	bne.w	800974a <_dtoa_r+0x68a>
 80094fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80094fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009502:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009504:	2b00      	cmp	r3, #0
 8009506:	f2c0 815a 	blt.w	80097be <_dtoa_r+0x6fe>
 800950a:	2f0e      	cmp	r7, #14
 800950c:	f300 8157 	bgt.w	80097be <_dtoa_r+0x6fe>
 8009510:	4b5a      	ldr	r3, [pc, #360]	@ (800967c <_dtoa_r+0x5bc>)
 8009512:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009516:	ed93 7b00 	vldr	d7, [r3]
 800951a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	ed8d 7b00 	vstr	d7, [sp]
 8009522:	da03      	bge.n	800952c <_dtoa_r+0x46c>
 8009524:	9b07      	ldr	r3, [sp, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f340 8101 	ble.w	800972e <_dtoa_r+0x66e>
 800952c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009530:	4656      	mov	r6, sl
 8009532:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009536:	4620      	mov	r0, r4
 8009538:	4629      	mov	r1, r5
 800953a:	f7f7 f987 	bl	800084c <__aeabi_ddiv>
 800953e:	f7f7 fb0b 	bl	8000b58 <__aeabi_d2iz>
 8009542:	4680      	mov	r8, r0
 8009544:	f7f6 ffee 	bl	8000524 <__aeabi_i2d>
 8009548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800954c:	f7f7 f854 	bl	80005f8 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4620      	mov	r0, r4
 8009556:	4629      	mov	r1, r5
 8009558:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800955c:	f7f6 fe94 	bl	8000288 <__aeabi_dsub>
 8009560:	f806 4b01 	strb.w	r4, [r6], #1
 8009564:	9d07      	ldr	r5, [sp, #28]
 8009566:	eba6 040a 	sub.w	r4, r6, sl
 800956a:	42a5      	cmp	r5, r4
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	f040 8117 	bne.w	80097a2 <_dtoa_r+0x6e2>
 8009574:	f7f6 fe8a 	bl	800028c <__adddf3>
 8009578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	f7f7 faca 	bl	8000b18 <__aeabi_dcmpgt>
 8009584:	2800      	cmp	r0, #0
 8009586:	f040 80f9 	bne.w	800977c <_dtoa_r+0x6bc>
 800958a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800958e:	4620      	mov	r0, r4
 8009590:	4629      	mov	r1, r5
 8009592:	f7f7 fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8009596:	b118      	cbz	r0, 80095a0 <_dtoa_r+0x4e0>
 8009598:	f018 0f01 	tst.w	r8, #1
 800959c:	f040 80ee 	bne.w	800977c <_dtoa_r+0x6bc>
 80095a0:	4649      	mov	r1, r9
 80095a2:	4658      	mov	r0, fp
 80095a4:	f000 fc90 	bl	8009ec8 <_Bfree>
 80095a8:	2300      	movs	r3, #0
 80095aa:	7033      	strb	r3, [r6, #0]
 80095ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095ae:	3701      	adds	r7, #1
 80095b0:	601f      	str	r7, [r3, #0]
 80095b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 831d 	beq.w	8009bf4 <_dtoa_r+0xb34>
 80095ba:	601e      	str	r6, [r3, #0]
 80095bc:	e31a      	b.n	8009bf4 <_dtoa_r+0xb34>
 80095be:	07e2      	lsls	r2, r4, #31
 80095c0:	d505      	bpl.n	80095ce <_dtoa_r+0x50e>
 80095c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	3601      	adds	r6, #1
 80095cc:	2301      	movs	r3, #1
 80095ce:	1064      	asrs	r4, r4, #1
 80095d0:	3508      	adds	r5, #8
 80095d2:	e73f      	b.n	8009454 <_dtoa_r+0x394>
 80095d4:	2602      	movs	r6, #2
 80095d6:	e742      	b.n	800945e <_dtoa_r+0x39e>
 80095d8:	9c07      	ldr	r4, [sp, #28]
 80095da:	9704      	str	r7, [sp, #16]
 80095dc:	e761      	b.n	80094a2 <_dtoa_r+0x3e2>
 80095de:	4b27      	ldr	r3, [pc, #156]	@ (800967c <_dtoa_r+0x5bc>)
 80095e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095ea:	4454      	add	r4, sl
 80095ec:	2900      	cmp	r1, #0
 80095ee:	d053      	beq.n	8009698 <_dtoa_r+0x5d8>
 80095f0:	4928      	ldr	r1, [pc, #160]	@ (8009694 <_dtoa_r+0x5d4>)
 80095f2:	2000      	movs	r0, #0
 80095f4:	f7f7 f92a 	bl	800084c <__aeabi_ddiv>
 80095f8:	4633      	mov	r3, r6
 80095fa:	462a      	mov	r2, r5
 80095fc:	f7f6 fe44 	bl	8000288 <__aeabi_dsub>
 8009600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009604:	4656      	mov	r6, sl
 8009606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800960a:	f7f7 faa5 	bl	8000b58 <__aeabi_d2iz>
 800960e:	4605      	mov	r5, r0
 8009610:	f7f6 ff88 	bl	8000524 <__aeabi_i2d>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800961c:	f7f6 fe34 	bl	8000288 <__aeabi_dsub>
 8009620:	3530      	adds	r5, #48	@ 0x30
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800962a:	f806 5b01 	strb.w	r5, [r6], #1
 800962e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009632:	f7f7 fa53 	bl	8000adc <__aeabi_dcmplt>
 8009636:	2800      	cmp	r0, #0
 8009638:	d171      	bne.n	800971e <_dtoa_r+0x65e>
 800963a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800963e:	4911      	ldr	r1, [pc, #68]	@ (8009684 <_dtoa_r+0x5c4>)
 8009640:	2000      	movs	r0, #0
 8009642:	f7f6 fe21 	bl	8000288 <__aeabi_dsub>
 8009646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800964a:	f7f7 fa47 	bl	8000adc <__aeabi_dcmplt>
 800964e:	2800      	cmp	r0, #0
 8009650:	f040 8095 	bne.w	800977e <_dtoa_r+0x6be>
 8009654:	42a6      	cmp	r6, r4
 8009656:	f43f af50 	beq.w	80094fa <_dtoa_r+0x43a>
 800965a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800965e:	4b0a      	ldr	r3, [pc, #40]	@ (8009688 <_dtoa_r+0x5c8>)
 8009660:	2200      	movs	r2, #0
 8009662:	f7f6 ffc9 	bl	80005f8 <__aeabi_dmul>
 8009666:	4b08      	ldr	r3, [pc, #32]	@ (8009688 <_dtoa_r+0x5c8>)
 8009668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800966c:	2200      	movs	r2, #0
 800966e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009672:	f7f6 ffc1 	bl	80005f8 <__aeabi_dmul>
 8009676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800967a:	e7c4      	b.n	8009606 <_dtoa_r+0x546>
 800967c:	0800aea0 	.word	0x0800aea0
 8009680:	0800ae78 	.word	0x0800ae78
 8009684:	3ff00000 	.word	0x3ff00000
 8009688:	40240000 	.word	0x40240000
 800968c:	401c0000 	.word	0x401c0000
 8009690:	40140000 	.word	0x40140000
 8009694:	3fe00000 	.word	0x3fe00000
 8009698:	4631      	mov	r1, r6
 800969a:	4628      	mov	r0, r5
 800969c:	f7f6 ffac 	bl	80005f8 <__aeabi_dmul>
 80096a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80096a6:	4656      	mov	r6, sl
 80096a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ac:	f7f7 fa54 	bl	8000b58 <__aeabi_d2iz>
 80096b0:	4605      	mov	r5, r0
 80096b2:	f7f6 ff37 	bl	8000524 <__aeabi_i2d>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096be:	f7f6 fde3 	bl	8000288 <__aeabi_dsub>
 80096c2:	3530      	adds	r5, #48	@ 0x30
 80096c4:	f806 5b01 	strb.w	r5, [r6], #1
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	d124      	bne.n	8009722 <_dtoa_r+0x662>
 80096d8:	4bac      	ldr	r3, [pc, #688]	@ (800998c <_dtoa_r+0x8cc>)
 80096da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096de:	f7f6 fdd5 	bl	800028c <__adddf3>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ea:	f7f7 fa15 	bl	8000b18 <__aeabi_dcmpgt>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d145      	bne.n	800977e <_dtoa_r+0x6be>
 80096f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096f6:	49a5      	ldr	r1, [pc, #660]	@ (800998c <_dtoa_r+0x8cc>)
 80096f8:	2000      	movs	r0, #0
 80096fa:	f7f6 fdc5 	bl	8000288 <__aeabi_dsub>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009706:	f7f7 f9e9 	bl	8000adc <__aeabi_dcmplt>
 800970a:	2800      	cmp	r0, #0
 800970c:	f43f aef5 	beq.w	80094fa <_dtoa_r+0x43a>
 8009710:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009712:	1e73      	subs	r3, r6, #1
 8009714:	9315      	str	r3, [sp, #84]	@ 0x54
 8009716:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800971a:	2b30      	cmp	r3, #48	@ 0x30
 800971c:	d0f8      	beq.n	8009710 <_dtoa_r+0x650>
 800971e:	9f04      	ldr	r7, [sp, #16]
 8009720:	e73e      	b.n	80095a0 <_dtoa_r+0x4e0>
 8009722:	4b9b      	ldr	r3, [pc, #620]	@ (8009990 <_dtoa_r+0x8d0>)
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800972c:	e7bc      	b.n	80096a8 <_dtoa_r+0x5e8>
 800972e:	d10c      	bne.n	800974a <_dtoa_r+0x68a>
 8009730:	4b98      	ldr	r3, [pc, #608]	@ (8009994 <_dtoa_r+0x8d4>)
 8009732:	2200      	movs	r2, #0
 8009734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009740:	f7f7 f9e0 	bl	8000b04 <__aeabi_dcmpge>
 8009744:	2800      	cmp	r0, #0
 8009746:	f000 8157 	beq.w	80099f8 <_dtoa_r+0x938>
 800974a:	2400      	movs	r4, #0
 800974c:	4625      	mov	r5, r4
 800974e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009750:	43db      	mvns	r3, r3
 8009752:	9304      	str	r3, [sp, #16]
 8009754:	4656      	mov	r6, sl
 8009756:	2700      	movs	r7, #0
 8009758:	4621      	mov	r1, r4
 800975a:	4658      	mov	r0, fp
 800975c:	f000 fbb4 	bl	8009ec8 <_Bfree>
 8009760:	2d00      	cmp	r5, #0
 8009762:	d0dc      	beq.n	800971e <_dtoa_r+0x65e>
 8009764:	b12f      	cbz	r7, 8009772 <_dtoa_r+0x6b2>
 8009766:	42af      	cmp	r7, r5
 8009768:	d003      	beq.n	8009772 <_dtoa_r+0x6b2>
 800976a:	4639      	mov	r1, r7
 800976c:	4658      	mov	r0, fp
 800976e:	f000 fbab 	bl	8009ec8 <_Bfree>
 8009772:	4629      	mov	r1, r5
 8009774:	4658      	mov	r0, fp
 8009776:	f000 fba7 	bl	8009ec8 <_Bfree>
 800977a:	e7d0      	b.n	800971e <_dtoa_r+0x65e>
 800977c:	9704      	str	r7, [sp, #16]
 800977e:	4633      	mov	r3, r6
 8009780:	461e      	mov	r6, r3
 8009782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009786:	2a39      	cmp	r2, #57	@ 0x39
 8009788:	d107      	bne.n	800979a <_dtoa_r+0x6da>
 800978a:	459a      	cmp	sl, r3
 800978c:	d1f8      	bne.n	8009780 <_dtoa_r+0x6c0>
 800978e:	9a04      	ldr	r2, [sp, #16]
 8009790:	3201      	adds	r2, #1
 8009792:	9204      	str	r2, [sp, #16]
 8009794:	2230      	movs	r2, #48	@ 0x30
 8009796:	f88a 2000 	strb.w	r2, [sl]
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	3201      	adds	r2, #1
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	e7bd      	b.n	800971e <_dtoa_r+0x65e>
 80097a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009990 <_dtoa_r+0x8d0>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	f7f6 ff27 	bl	80005f8 <__aeabi_dmul>
 80097aa:	2200      	movs	r2, #0
 80097ac:	2300      	movs	r3, #0
 80097ae:	4604      	mov	r4, r0
 80097b0:	460d      	mov	r5, r1
 80097b2:	f7f7 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f43f aebb 	beq.w	8009532 <_dtoa_r+0x472>
 80097bc:	e6f0      	b.n	80095a0 <_dtoa_r+0x4e0>
 80097be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097c0:	2a00      	cmp	r2, #0
 80097c2:	f000 80db 	beq.w	800997c <_dtoa_r+0x8bc>
 80097c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097c8:	2a01      	cmp	r2, #1
 80097ca:	f300 80bf 	bgt.w	800994c <_dtoa_r+0x88c>
 80097ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097d0:	2a00      	cmp	r2, #0
 80097d2:	f000 80b7 	beq.w	8009944 <_dtoa_r+0x884>
 80097d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80097da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097dc:	4646      	mov	r6, r8
 80097de:	9a08      	ldr	r2, [sp, #32]
 80097e0:	2101      	movs	r1, #1
 80097e2:	441a      	add	r2, r3
 80097e4:	4658      	mov	r0, fp
 80097e6:	4498      	add	r8, r3
 80097e8:	9208      	str	r2, [sp, #32]
 80097ea:	f000 fc21 	bl	800a030 <__i2b>
 80097ee:	4605      	mov	r5, r0
 80097f0:	b15e      	cbz	r6, 800980a <_dtoa_r+0x74a>
 80097f2:	9b08      	ldr	r3, [sp, #32]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd08      	ble.n	800980a <_dtoa_r+0x74a>
 80097f8:	42b3      	cmp	r3, r6
 80097fa:	9a08      	ldr	r2, [sp, #32]
 80097fc:	bfa8      	it	ge
 80097fe:	4633      	movge	r3, r6
 8009800:	eba8 0803 	sub.w	r8, r8, r3
 8009804:	1af6      	subs	r6, r6, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	9308      	str	r3, [sp, #32]
 800980a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800980c:	b1f3      	cbz	r3, 800984c <_dtoa_r+0x78c>
 800980e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80b7 	beq.w	8009984 <_dtoa_r+0x8c4>
 8009816:	b18c      	cbz	r4, 800983c <_dtoa_r+0x77c>
 8009818:	4629      	mov	r1, r5
 800981a:	4622      	mov	r2, r4
 800981c:	4658      	mov	r0, fp
 800981e:	f000 fcc7 	bl	800a1b0 <__pow5mult>
 8009822:	464a      	mov	r2, r9
 8009824:	4601      	mov	r1, r0
 8009826:	4605      	mov	r5, r0
 8009828:	4658      	mov	r0, fp
 800982a:	f000 fc17 	bl	800a05c <__multiply>
 800982e:	4649      	mov	r1, r9
 8009830:	9004      	str	r0, [sp, #16]
 8009832:	4658      	mov	r0, fp
 8009834:	f000 fb48 	bl	8009ec8 <_Bfree>
 8009838:	9b04      	ldr	r3, [sp, #16]
 800983a:	4699      	mov	r9, r3
 800983c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983e:	1b1a      	subs	r2, r3, r4
 8009840:	d004      	beq.n	800984c <_dtoa_r+0x78c>
 8009842:	4649      	mov	r1, r9
 8009844:	4658      	mov	r0, fp
 8009846:	f000 fcb3 	bl	800a1b0 <__pow5mult>
 800984a:	4681      	mov	r9, r0
 800984c:	2101      	movs	r1, #1
 800984e:	4658      	mov	r0, fp
 8009850:	f000 fbee 	bl	800a030 <__i2b>
 8009854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009856:	4604      	mov	r4, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 81cf 	beq.w	8009bfc <_dtoa_r+0xb3c>
 800985e:	461a      	mov	r2, r3
 8009860:	4601      	mov	r1, r0
 8009862:	4658      	mov	r0, fp
 8009864:	f000 fca4 	bl	800a1b0 <__pow5mult>
 8009868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986a:	2b01      	cmp	r3, #1
 800986c:	4604      	mov	r4, r0
 800986e:	f300 8095 	bgt.w	800999c <_dtoa_r+0x8dc>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 8087 	bne.w	8009988 <_dtoa_r+0x8c8>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009880:	2b00      	cmp	r3, #0
 8009882:	f040 8089 	bne.w	8009998 <_dtoa_r+0x8d8>
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800988c:	0d1b      	lsrs	r3, r3, #20
 800988e:	051b      	lsls	r3, r3, #20
 8009890:	b12b      	cbz	r3, 800989e <_dtoa_r+0x7de>
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	3301      	adds	r3, #1
 8009896:	9308      	str	r3, [sp, #32]
 8009898:	f108 0801 	add.w	r8, r8, #1
 800989c:	2301      	movs	r3, #1
 800989e:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 81b0 	beq.w	8009c08 <_dtoa_r+0xb48>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098ae:	6918      	ldr	r0, [r3, #16]
 80098b0:	f000 fb72 	bl	8009f98 <__hi0bits>
 80098b4:	f1c0 0020 	rsb	r0, r0, #32
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	4418      	add	r0, r3
 80098bc:	f010 001f 	ands.w	r0, r0, #31
 80098c0:	d077      	beq.n	80099b2 <_dtoa_r+0x8f2>
 80098c2:	f1c0 0320 	rsb	r3, r0, #32
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	dd6b      	ble.n	80099a2 <_dtoa_r+0x8e2>
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	f1c0 001c 	rsb	r0, r0, #28
 80098d0:	4403      	add	r3, r0
 80098d2:	4480      	add	r8, r0
 80098d4:	4406      	add	r6, r0
 80098d6:	9308      	str	r3, [sp, #32]
 80098d8:	f1b8 0f00 	cmp.w	r8, #0
 80098dc:	dd05      	ble.n	80098ea <_dtoa_r+0x82a>
 80098de:	4649      	mov	r1, r9
 80098e0:	4642      	mov	r2, r8
 80098e2:	4658      	mov	r0, fp
 80098e4:	f000 fcbe 	bl	800a264 <__lshift>
 80098e8:	4681      	mov	r9, r0
 80098ea:	9b08      	ldr	r3, [sp, #32]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dd05      	ble.n	80098fc <_dtoa_r+0x83c>
 80098f0:	4621      	mov	r1, r4
 80098f2:	461a      	mov	r2, r3
 80098f4:	4658      	mov	r0, fp
 80098f6:	f000 fcb5 	bl	800a264 <__lshift>
 80098fa:	4604      	mov	r4, r0
 80098fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d059      	beq.n	80099b6 <_dtoa_r+0x8f6>
 8009902:	4621      	mov	r1, r4
 8009904:	4648      	mov	r0, r9
 8009906:	f000 fd19 	bl	800a33c <__mcmp>
 800990a:	2800      	cmp	r0, #0
 800990c:	da53      	bge.n	80099b6 <_dtoa_r+0x8f6>
 800990e:	1e7b      	subs	r3, r7, #1
 8009910:	9304      	str	r3, [sp, #16]
 8009912:	4649      	mov	r1, r9
 8009914:	2300      	movs	r3, #0
 8009916:	220a      	movs	r2, #10
 8009918:	4658      	mov	r0, fp
 800991a:	f000 faf7 	bl	8009f0c <__multadd>
 800991e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009920:	4681      	mov	r9, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 8172 	beq.w	8009c0c <_dtoa_r+0xb4c>
 8009928:	2300      	movs	r3, #0
 800992a:	4629      	mov	r1, r5
 800992c:	220a      	movs	r2, #10
 800992e:	4658      	mov	r0, fp
 8009930:	f000 faec 	bl	8009f0c <__multadd>
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	4605      	mov	r5, r0
 800993a:	dc67      	bgt.n	8009a0c <_dtoa_r+0x94c>
 800993c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993e:	2b02      	cmp	r3, #2
 8009940:	dc41      	bgt.n	80099c6 <_dtoa_r+0x906>
 8009942:	e063      	b.n	8009a0c <_dtoa_r+0x94c>
 8009944:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009946:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800994a:	e746      	b.n	80097da <_dtoa_r+0x71a>
 800994c:	9b07      	ldr	r3, [sp, #28]
 800994e:	1e5c      	subs	r4, r3, #1
 8009950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009952:	42a3      	cmp	r3, r4
 8009954:	bfbf      	itttt	lt
 8009956:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009958:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800995a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800995c:	1ae3      	sublt	r3, r4, r3
 800995e:	bfb4      	ite	lt
 8009960:	18d2      	addlt	r2, r2, r3
 8009962:	1b1c      	subge	r4, r3, r4
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	bfbc      	itt	lt
 8009968:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800996a:	2400      	movlt	r4, #0
 800996c:	2b00      	cmp	r3, #0
 800996e:	bfb5      	itete	lt
 8009970:	eba8 0603 	sublt.w	r6, r8, r3
 8009974:	9b07      	ldrge	r3, [sp, #28]
 8009976:	2300      	movlt	r3, #0
 8009978:	4646      	movge	r6, r8
 800997a:	e730      	b.n	80097de <_dtoa_r+0x71e>
 800997c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800997e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009980:	4646      	mov	r6, r8
 8009982:	e735      	b.n	80097f0 <_dtoa_r+0x730>
 8009984:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009986:	e75c      	b.n	8009842 <_dtoa_r+0x782>
 8009988:	2300      	movs	r3, #0
 800998a:	e788      	b.n	800989e <_dtoa_r+0x7de>
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	40240000 	.word	0x40240000
 8009994:	40140000 	.word	0x40140000
 8009998:	9b02      	ldr	r3, [sp, #8]
 800999a:	e780      	b.n	800989e <_dtoa_r+0x7de>
 800999c:	2300      	movs	r3, #0
 800999e:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a0:	e782      	b.n	80098a8 <_dtoa_r+0x7e8>
 80099a2:	d099      	beq.n	80098d8 <_dtoa_r+0x818>
 80099a4:	9a08      	ldr	r2, [sp, #32]
 80099a6:	331c      	adds	r3, #28
 80099a8:	441a      	add	r2, r3
 80099aa:	4498      	add	r8, r3
 80099ac:	441e      	add	r6, r3
 80099ae:	9208      	str	r2, [sp, #32]
 80099b0:	e792      	b.n	80098d8 <_dtoa_r+0x818>
 80099b2:	4603      	mov	r3, r0
 80099b4:	e7f6      	b.n	80099a4 <_dtoa_r+0x8e4>
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	9704      	str	r7, [sp, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dc20      	bgt.n	8009a00 <_dtoa_r+0x940>
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	dd1e      	ble.n	8009a04 <_dtoa_r+0x944>
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f47f aec0 	bne.w	800974e <_dtoa_r+0x68e>
 80099ce:	4621      	mov	r1, r4
 80099d0:	2205      	movs	r2, #5
 80099d2:	4658      	mov	r0, fp
 80099d4:	f000 fa9a 	bl	8009f0c <__multadd>
 80099d8:	4601      	mov	r1, r0
 80099da:	4604      	mov	r4, r0
 80099dc:	4648      	mov	r0, r9
 80099de:	f000 fcad 	bl	800a33c <__mcmp>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f77f aeb3 	ble.w	800974e <_dtoa_r+0x68e>
 80099e8:	4656      	mov	r6, sl
 80099ea:	2331      	movs	r3, #49	@ 0x31
 80099ec:	f806 3b01 	strb.w	r3, [r6], #1
 80099f0:	9b04      	ldr	r3, [sp, #16]
 80099f2:	3301      	adds	r3, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	e6ae      	b.n	8009756 <_dtoa_r+0x696>
 80099f8:	9c07      	ldr	r4, [sp, #28]
 80099fa:	9704      	str	r7, [sp, #16]
 80099fc:	4625      	mov	r5, r4
 80099fe:	e7f3      	b.n	80099e8 <_dtoa_r+0x928>
 8009a00:	9b07      	ldr	r3, [sp, #28]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 8104 	beq.w	8009c14 <_dtoa_r+0xb54>
 8009a0c:	2e00      	cmp	r6, #0
 8009a0e:	dd05      	ble.n	8009a1c <_dtoa_r+0x95c>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4632      	mov	r2, r6
 8009a14:	4658      	mov	r0, fp
 8009a16:	f000 fc25 	bl	800a264 <__lshift>
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d05a      	beq.n	8009ad8 <_dtoa_r+0xa18>
 8009a22:	6869      	ldr	r1, [r5, #4]
 8009a24:	4658      	mov	r0, fp
 8009a26:	f000 fa0f 	bl	8009e48 <_Balloc>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <_dtoa_r+0x97a>
 8009a2e:	4b84      	ldr	r3, [pc, #528]	@ (8009c40 <_dtoa_r+0xb80>)
 8009a30:	4602      	mov	r2, r0
 8009a32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a36:	f7ff bb5a 	b.w	80090ee <_dtoa_r+0x2e>
 8009a3a:	692a      	ldr	r2, [r5, #16]
 8009a3c:	3202      	adds	r2, #2
 8009a3e:	0092      	lsls	r2, r2, #2
 8009a40:	f105 010c 	add.w	r1, r5, #12
 8009a44:	300c      	adds	r0, #12
 8009a46:	f000 fe3d 	bl	800a6c4 <memcpy>
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4658      	mov	r0, fp
 8009a50:	f000 fc08 	bl	800a264 <__lshift>
 8009a54:	f10a 0301 	add.w	r3, sl, #1
 8009a58:	9307      	str	r3, [sp, #28]
 8009a5a:	9b00      	ldr	r3, [sp, #0]
 8009a5c:	4453      	add	r3, sl
 8009a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a60:	9b02      	ldr	r3, [sp, #8]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	462f      	mov	r7, r5
 8009a68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	9b07      	ldr	r3, [sp, #28]
 8009a6e:	4621      	mov	r1, r4
 8009a70:	3b01      	subs	r3, #1
 8009a72:	4648      	mov	r0, r9
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	f7ff fa9a 	bl	8008fae <quorem>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	9002      	str	r0, [sp, #8]
 8009a7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a82:	4648      	mov	r0, r9
 8009a84:	f000 fc5a 	bl	800a33c <__mcmp>
 8009a88:	462a      	mov	r2, r5
 8009a8a:	9008      	str	r0, [sp, #32]
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4658      	mov	r0, fp
 8009a90:	f000 fc70 	bl	800a374 <__mdiff>
 8009a94:	68c2      	ldr	r2, [r0, #12]
 8009a96:	4606      	mov	r6, r0
 8009a98:	bb02      	cbnz	r2, 8009adc <_dtoa_r+0xa1c>
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	4648      	mov	r0, r9
 8009a9e:	f000 fc4d 	bl	800a33c <__mcmp>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009aaa:	f000 fa0d 	bl	8009ec8 <_Bfree>
 8009aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ab2:	9e07      	ldr	r6, [sp, #28]
 8009ab4:	ea43 0102 	orr.w	r1, r3, r2
 8009ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aba:	4319      	orrs	r1, r3
 8009abc:	d110      	bne.n	8009ae0 <_dtoa_r+0xa20>
 8009abe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ac2:	d029      	beq.n	8009b18 <_dtoa_r+0xa58>
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dd02      	ble.n	8009ad0 <_dtoa_r+0xa10>
 8009aca:	9b02      	ldr	r3, [sp, #8]
 8009acc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ad0:	9b00      	ldr	r3, [sp, #0]
 8009ad2:	f883 8000 	strb.w	r8, [r3]
 8009ad6:	e63f      	b.n	8009758 <_dtoa_r+0x698>
 8009ad8:	4628      	mov	r0, r5
 8009ada:	e7bb      	b.n	8009a54 <_dtoa_r+0x994>
 8009adc:	2201      	movs	r2, #1
 8009ade:	e7e1      	b.n	8009aa4 <_dtoa_r+0x9e4>
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	db04      	blt.n	8009af0 <_dtoa_r+0xa30>
 8009ae6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009aec:	430b      	orrs	r3, r1
 8009aee:	d120      	bne.n	8009b32 <_dtoa_r+0xa72>
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	dded      	ble.n	8009ad0 <_dtoa_r+0xa10>
 8009af4:	4649      	mov	r1, r9
 8009af6:	2201      	movs	r2, #1
 8009af8:	4658      	mov	r0, fp
 8009afa:	f000 fbb3 	bl	800a264 <__lshift>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4681      	mov	r9, r0
 8009b02:	f000 fc1b 	bl	800a33c <__mcmp>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	dc03      	bgt.n	8009b12 <_dtoa_r+0xa52>
 8009b0a:	d1e1      	bne.n	8009ad0 <_dtoa_r+0xa10>
 8009b0c:	f018 0f01 	tst.w	r8, #1
 8009b10:	d0de      	beq.n	8009ad0 <_dtoa_r+0xa10>
 8009b12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b16:	d1d8      	bne.n	8009aca <_dtoa_r+0xa0a>
 8009b18:	9a00      	ldr	r2, [sp, #0]
 8009b1a:	2339      	movs	r3, #57	@ 0x39
 8009b1c:	7013      	strb	r3, [r2, #0]
 8009b1e:	4633      	mov	r3, r6
 8009b20:	461e      	mov	r6, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b28:	2a39      	cmp	r2, #57	@ 0x39
 8009b2a:	d052      	beq.n	8009bd2 <_dtoa_r+0xb12>
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	e612      	b.n	8009758 <_dtoa_r+0x698>
 8009b32:	2a00      	cmp	r2, #0
 8009b34:	dd07      	ble.n	8009b46 <_dtoa_r+0xa86>
 8009b36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b3a:	d0ed      	beq.n	8009b18 <_dtoa_r+0xa58>
 8009b3c:	9a00      	ldr	r2, [sp, #0]
 8009b3e:	f108 0301 	add.w	r3, r8, #1
 8009b42:	7013      	strb	r3, [r2, #0]
 8009b44:	e608      	b.n	8009758 <_dtoa_r+0x698>
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d028      	beq.n	8009ba6 <_dtoa_r+0xae6>
 8009b54:	4649      	mov	r1, r9
 8009b56:	2300      	movs	r3, #0
 8009b58:	220a      	movs	r2, #10
 8009b5a:	4658      	mov	r0, fp
 8009b5c:	f000 f9d6 	bl	8009f0c <__multadd>
 8009b60:	42af      	cmp	r7, r5
 8009b62:	4681      	mov	r9, r0
 8009b64:	f04f 0300 	mov.w	r3, #0
 8009b68:	f04f 020a 	mov.w	r2, #10
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	4658      	mov	r0, fp
 8009b70:	d107      	bne.n	8009b82 <_dtoa_r+0xac2>
 8009b72:	f000 f9cb 	bl	8009f0c <__multadd>
 8009b76:	4607      	mov	r7, r0
 8009b78:	4605      	mov	r5, r0
 8009b7a:	9b07      	ldr	r3, [sp, #28]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	9307      	str	r3, [sp, #28]
 8009b80:	e774      	b.n	8009a6c <_dtoa_r+0x9ac>
 8009b82:	f000 f9c3 	bl	8009f0c <__multadd>
 8009b86:	4629      	mov	r1, r5
 8009b88:	4607      	mov	r7, r0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	220a      	movs	r2, #10
 8009b8e:	4658      	mov	r0, fp
 8009b90:	f000 f9bc 	bl	8009f0c <__multadd>
 8009b94:	4605      	mov	r5, r0
 8009b96:	e7f0      	b.n	8009b7a <_dtoa_r+0xaba>
 8009b98:	9b00      	ldr	r3, [sp, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	bfcc      	ite	gt
 8009b9e:	461e      	movgt	r6, r3
 8009ba0:	2601      	movle	r6, #1
 8009ba2:	4456      	add	r6, sl
 8009ba4:	2700      	movs	r7, #0
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	2201      	movs	r2, #1
 8009baa:	4658      	mov	r0, fp
 8009bac:	f000 fb5a 	bl	800a264 <__lshift>
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4681      	mov	r9, r0
 8009bb4:	f000 fbc2 	bl	800a33c <__mcmp>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dcb0      	bgt.n	8009b1e <_dtoa_r+0xa5e>
 8009bbc:	d102      	bne.n	8009bc4 <_dtoa_r+0xb04>
 8009bbe:	f018 0f01 	tst.w	r8, #1
 8009bc2:	d1ac      	bne.n	8009b1e <_dtoa_r+0xa5e>
 8009bc4:	4633      	mov	r3, r6
 8009bc6:	461e      	mov	r6, r3
 8009bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bcc:	2a30      	cmp	r2, #48	@ 0x30
 8009bce:	d0fa      	beq.n	8009bc6 <_dtoa_r+0xb06>
 8009bd0:	e5c2      	b.n	8009758 <_dtoa_r+0x698>
 8009bd2:	459a      	cmp	sl, r3
 8009bd4:	d1a4      	bne.n	8009b20 <_dtoa_r+0xa60>
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	2331      	movs	r3, #49	@ 0x31
 8009bde:	f88a 3000 	strb.w	r3, [sl]
 8009be2:	e5b9      	b.n	8009758 <_dtoa_r+0x698>
 8009be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009be6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c44 <_dtoa_r+0xb84>
 8009bea:	b11b      	cbz	r3, 8009bf4 <_dtoa_r+0xb34>
 8009bec:	f10a 0308 	add.w	r3, sl, #8
 8009bf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	b019      	add	sp, #100	@ 0x64
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	f77f ae37 	ble.w	8009872 <_dtoa_r+0x7b2>
 8009c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c08:	2001      	movs	r0, #1
 8009c0a:	e655      	b.n	80098b8 <_dtoa_r+0x7f8>
 8009c0c:	9b00      	ldr	r3, [sp, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f77f aed6 	ble.w	80099c0 <_dtoa_r+0x900>
 8009c14:	4656      	mov	r6, sl
 8009c16:	4621      	mov	r1, r4
 8009c18:	4648      	mov	r0, r9
 8009c1a:	f7ff f9c8 	bl	8008fae <quorem>
 8009c1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c22:	f806 8b01 	strb.w	r8, [r6], #1
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	eba6 020a 	sub.w	r2, r6, sl
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	ddb3      	ble.n	8009b98 <_dtoa_r+0xad8>
 8009c30:	4649      	mov	r1, r9
 8009c32:	2300      	movs	r3, #0
 8009c34:	220a      	movs	r2, #10
 8009c36:	4658      	mov	r0, fp
 8009c38:	f000 f968 	bl	8009f0c <__multadd>
 8009c3c:	4681      	mov	r9, r0
 8009c3e:	e7ea      	b.n	8009c16 <_dtoa_r+0xb56>
 8009c40:	0800ae00 	.word	0x0800ae00
 8009c44:	0800ad84 	.word	0x0800ad84

08009c48 <_free_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	d041      	beq.n	8009cd4 <_free_r+0x8c>
 8009c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c54:	1f0c      	subs	r4, r1, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bfb8      	it	lt
 8009c5a:	18e4      	addlt	r4, r4, r3
 8009c5c:	f000 f8e8 	bl	8009e30 <__malloc_lock>
 8009c60:	4a1d      	ldr	r2, [pc, #116]	@ (8009cd8 <_free_r+0x90>)
 8009c62:	6813      	ldr	r3, [r2, #0]
 8009c64:	b933      	cbnz	r3, 8009c74 <_free_r+0x2c>
 8009c66:	6063      	str	r3, [r4, #4]
 8009c68:	6014      	str	r4, [r2, #0]
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c70:	f000 b8e4 	b.w	8009e3c <__malloc_unlock>
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	d908      	bls.n	8009c8a <_free_r+0x42>
 8009c78:	6820      	ldr	r0, [r4, #0]
 8009c7a:	1821      	adds	r1, r4, r0
 8009c7c:	428b      	cmp	r3, r1
 8009c7e:	bf01      	itttt	eq
 8009c80:	6819      	ldreq	r1, [r3, #0]
 8009c82:	685b      	ldreq	r3, [r3, #4]
 8009c84:	1809      	addeq	r1, r1, r0
 8009c86:	6021      	streq	r1, [r4, #0]
 8009c88:	e7ed      	b.n	8009c66 <_free_r+0x1e>
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	b10b      	cbz	r3, 8009c94 <_free_r+0x4c>
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	d9fa      	bls.n	8009c8a <_free_r+0x42>
 8009c94:	6811      	ldr	r1, [r2, #0]
 8009c96:	1850      	adds	r0, r2, r1
 8009c98:	42a0      	cmp	r0, r4
 8009c9a:	d10b      	bne.n	8009cb4 <_free_r+0x6c>
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	4401      	add	r1, r0
 8009ca0:	1850      	adds	r0, r2, r1
 8009ca2:	4283      	cmp	r3, r0
 8009ca4:	6011      	str	r1, [r2, #0]
 8009ca6:	d1e0      	bne.n	8009c6a <_free_r+0x22>
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	6053      	str	r3, [r2, #4]
 8009cae:	4408      	add	r0, r1
 8009cb0:	6010      	str	r0, [r2, #0]
 8009cb2:	e7da      	b.n	8009c6a <_free_r+0x22>
 8009cb4:	d902      	bls.n	8009cbc <_free_r+0x74>
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	602b      	str	r3, [r5, #0]
 8009cba:	e7d6      	b.n	8009c6a <_free_r+0x22>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	1821      	adds	r1, r4, r0
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf04      	itt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	6063      	str	r3, [r4, #4]
 8009cca:	bf04      	itt	eq
 8009ccc:	1809      	addeq	r1, r1, r0
 8009cce:	6021      	streq	r1, [r4, #0]
 8009cd0:	6054      	str	r4, [r2, #4]
 8009cd2:	e7ca      	b.n	8009c6a <_free_r+0x22>
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000554 	.word	0x20000554

08009cdc <malloc>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	@ (8009ce8 <malloc+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f000 b825 	b.w	8009d30 <_malloc_r>
 8009ce6:	bf00      	nop
 8009ce8:	20000018 	.word	0x20000018

08009cec <sbrk_aligned>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4e0f      	ldr	r6, [pc, #60]	@ (8009d2c <sbrk_aligned+0x40>)
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	6831      	ldr	r1, [r6, #0]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	b911      	cbnz	r1, 8009cfe <sbrk_aligned+0x12>
 8009cf8:	f000 fcd4 	bl	800a6a4 <_sbrk_r>
 8009cfc:	6030      	str	r0, [r6, #0]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4628      	mov	r0, r5
 8009d02:	f000 fccf 	bl	800a6a4 <_sbrk_r>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d103      	bne.n	8009d12 <sbrk_aligned+0x26>
 8009d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009d0e:	4620      	mov	r0, r4
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	1cc4      	adds	r4, r0, #3
 8009d14:	f024 0403 	bic.w	r4, r4, #3
 8009d18:	42a0      	cmp	r0, r4
 8009d1a:	d0f8      	beq.n	8009d0e <sbrk_aligned+0x22>
 8009d1c:	1a21      	subs	r1, r4, r0
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 fcc0 	bl	800a6a4 <_sbrk_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d1f2      	bne.n	8009d0e <sbrk_aligned+0x22>
 8009d28:	e7ef      	b.n	8009d0a <sbrk_aligned+0x1e>
 8009d2a:	bf00      	nop
 8009d2c:	20000550 	.word	0x20000550

08009d30 <_malloc_r>:
 8009d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d34:	1ccd      	adds	r5, r1, #3
 8009d36:	f025 0503 	bic.w	r5, r5, #3
 8009d3a:	3508      	adds	r5, #8
 8009d3c:	2d0c      	cmp	r5, #12
 8009d3e:	bf38      	it	cc
 8009d40:	250c      	movcc	r5, #12
 8009d42:	2d00      	cmp	r5, #0
 8009d44:	4606      	mov	r6, r0
 8009d46:	db01      	blt.n	8009d4c <_malloc_r+0x1c>
 8009d48:	42a9      	cmp	r1, r5
 8009d4a:	d904      	bls.n	8009d56 <_malloc_r+0x26>
 8009d4c:	230c      	movs	r3, #12
 8009d4e:	6033      	str	r3, [r6, #0]
 8009d50:	2000      	movs	r0, #0
 8009d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e2c <_malloc_r+0xfc>
 8009d5a:	f000 f869 	bl	8009e30 <__malloc_lock>
 8009d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d62:	461c      	mov	r4, r3
 8009d64:	bb44      	cbnz	r4, 8009db8 <_malloc_r+0x88>
 8009d66:	4629      	mov	r1, r5
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7ff ffbf 	bl	8009cec <sbrk_aligned>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	4604      	mov	r4, r0
 8009d72:	d158      	bne.n	8009e26 <_malloc_r+0xf6>
 8009d74:	f8d8 4000 	ldr.w	r4, [r8]
 8009d78:	4627      	mov	r7, r4
 8009d7a:	2f00      	cmp	r7, #0
 8009d7c:	d143      	bne.n	8009e06 <_malloc_r+0xd6>
 8009d7e:	2c00      	cmp	r4, #0
 8009d80:	d04b      	beq.n	8009e1a <_malloc_r+0xea>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	4639      	mov	r1, r7
 8009d86:	4630      	mov	r0, r6
 8009d88:	eb04 0903 	add.w	r9, r4, r3
 8009d8c:	f000 fc8a 	bl	800a6a4 <_sbrk_r>
 8009d90:	4581      	cmp	r9, r0
 8009d92:	d142      	bne.n	8009e1a <_malloc_r+0xea>
 8009d94:	6821      	ldr	r1, [r4, #0]
 8009d96:	1a6d      	subs	r5, r5, r1
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff ffa6 	bl	8009cec <sbrk_aligned>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d03a      	beq.n	8009e1a <_malloc_r+0xea>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	442b      	add	r3, r5
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	f8d8 3000 	ldr.w	r3, [r8]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	bb62      	cbnz	r2, 8009e0c <_malloc_r+0xdc>
 8009db2:	f8c8 7000 	str.w	r7, [r8]
 8009db6:	e00f      	b.n	8009dd8 <_malloc_r+0xa8>
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	1b52      	subs	r2, r2, r5
 8009dbc:	d420      	bmi.n	8009e00 <_malloc_r+0xd0>
 8009dbe:	2a0b      	cmp	r2, #11
 8009dc0:	d917      	bls.n	8009df2 <_malloc_r+0xc2>
 8009dc2:	1961      	adds	r1, r4, r5
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	6025      	str	r5, [r4, #0]
 8009dc8:	bf18      	it	ne
 8009dca:	6059      	strne	r1, [r3, #4]
 8009dcc:	6863      	ldr	r3, [r4, #4]
 8009dce:	bf08      	it	eq
 8009dd0:	f8c8 1000 	streq.w	r1, [r8]
 8009dd4:	5162      	str	r2, [r4, r5]
 8009dd6:	604b      	str	r3, [r1, #4]
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f000 f82f 	bl	8009e3c <__malloc_unlock>
 8009dde:	f104 000b 	add.w	r0, r4, #11
 8009de2:	1d23      	adds	r3, r4, #4
 8009de4:	f020 0007 	bic.w	r0, r0, #7
 8009de8:	1ac2      	subs	r2, r0, r3
 8009dea:	bf1c      	itt	ne
 8009dec:	1a1b      	subne	r3, r3, r0
 8009dee:	50a3      	strne	r3, [r4, r2]
 8009df0:	e7af      	b.n	8009d52 <_malloc_r+0x22>
 8009df2:	6862      	ldr	r2, [r4, #4]
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	bf0c      	ite	eq
 8009df8:	f8c8 2000 	streq.w	r2, [r8]
 8009dfc:	605a      	strne	r2, [r3, #4]
 8009dfe:	e7eb      	b.n	8009dd8 <_malloc_r+0xa8>
 8009e00:	4623      	mov	r3, r4
 8009e02:	6864      	ldr	r4, [r4, #4]
 8009e04:	e7ae      	b.n	8009d64 <_malloc_r+0x34>
 8009e06:	463c      	mov	r4, r7
 8009e08:	687f      	ldr	r7, [r7, #4]
 8009e0a:	e7b6      	b.n	8009d7a <_malloc_r+0x4a>
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	d1fb      	bne.n	8009e0c <_malloc_r+0xdc>
 8009e14:	2300      	movs	r3, #0
 8009e16:	6053      	str	r3, [r2, #4]
 8009e18:	e7de      	b.n	8009dd8 <_malloc_r+0xa8>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	6033      	str	r3, [r6, #0]
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f000 f80c 	bl	8009e3c <__malloc_unlock>
 8009e24:	e794      	b.n	8009d50 <_malloc_r+0x20>
 8009e26:	6005      	str	r5, [r0, #0]
 8009e28:	e7d6      	b.n	8009dd8 <_malloc_r+0xa8>
 8009e2a:	bf00      	nop
 8009e2c:	20000554 	.word	0x20000554

08009e30 <__malloc_lock>:
 8009e30:	4801      	ldr	r0, [pc, #4]	@ (8009e38 <__malloc_lock+0x8>)
 8009e32:	f7ff b8ba 	b.w	8008faa <__retarget_lock_acquire_recursive>
 8009e36:	bf00      	nop
 8009e38:	2000054c 	.word	0x2000054c

08009e3c <__malloc_unlock>:
 8009e3c:	4801      	ldr	r0, [pc, #4]	@ (8009e44 <__malloc_unlock+0x8>)
 8009e3e:	f7ff b8b5 	b.w	8008fac <__retarget_lock_release_recursive>
 8009e42:	bf00      	nop
 8009e44:	2000054c 	.word	0x2000054c

08009e48 <_Balloc>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	69c6      	ldr	r6, [r0, #28]
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	b976      	cbnz	r6, 8009e70 <_Balloc+0x28>
 8009e52:	2010      	movs	r0, #16
 8009e54:	f7ff ff42 	bl	8009cdc <malloc>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	61e0      	str	r0, [r4, #28]
 8009e5c:	b920      	cbnz	r0, 8009e68 <_Balloc+0x20>
 8009e5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ec0 <_Balloc+0x78>)
 8009e60:	4818      	ldr	r0, [pc, #96]	@ (8009ec4 <_Balloc+0x7c>)
 8009e62:	216b      	movs	r1, #107	@ 0x6b
 8009e64:	f000 fc3c 	bl	800a6e0 <__assert_func>
 8009e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e6c:	6006      	str	r6, [r0, #0]
 8009e6e:	60c6      	str	r6, [r0, #12]
 8009e70:	69e6      	ldr	r6, [r4, #28]
 8009e72:	68f3      	ldr	r3, [r6, #12]
 8009e74:	b183      	cbz	r3, 8009e98 <_Balloc+0x50>
 8009e76:	69e3      	ldr	r3, [r4, #28]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e7e:	b9b8      	cbnz	r0, 8009eb0 <_Balloc+0x68>
 8009e80:	2101      	movs	r1, #1
 8009e82:	fa01 f605 	lsl.w	r6, r1, r5
 8009e86:	1d72      	adds	r2, r6, #5
 8009e88:	0092      	lsls	r2, r2, #2
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 fc46 	bl	800a71c <_calloc_r>
 8009e90:	b160      	cbz	r0, 8009eac <_Balloc+0x64>
 8009e92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e96:	e00e      	b.n	8009eb6 <_Balloc+0x6e>
 8009e98:	2221      	movs	r2, #33	@ 0x21
 8009e9a:	2104      	movs	r1, #4
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 fc3d 	bl	800a71c <_calloc_r>
 8009ea2:	69e3      	ldr	r3, [r4, #28]
 8009ea4:	60f0      	str	r0, [r6, #12]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e4      	bne.n	8009e76 <_Balloc+0x2e>
 8009eac:	2000      	movs	r0, #0
 8009eae:	bd70      	pop	{r4, r5, r6, pc}
 8009eb0:	6802      	ldr	r2, [r0, #0]
 8009eb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ebc:	e7f7      	b.n	8009eae <_Balloc+0x66>
 8009ebe:	bf00      	nop
 8009ec0:	0800ad91 	.word	0x0800ad91
 8009ec4:	0800ae11 	.word	0x0800ae11

08009ec8 <_Bfree>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	69c6      	ldr	r6, [r0, #28]
 8009ecc:	4605      	mov	r5, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	b976      	cbnz	r6, 8009ef0 <_Bfree+0x28>
 8009ed2:	2010      	movs	r0, #16
 8009ed4:	f7ff ff02 	bl	8009cdc <malloc>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	61e8      	str	r0, [r5, #28]
 8009edc:	b920      	cbnz	r0, 8009ee8 <_Bfree+0x20>
 8009ede:	4b09      	ldr	r3, [pc, #36]	@ (8009f04 <_Bfree+0x3c>)
 8009ee0:	4809      	ldr	r0, [pc, #36]	@ (8009f08 <_Bfree+0x40>)
 8009ee2:	218f      	movs	r1, #143	@ 0x8f
 8009ee4:	f000 fbfc 	bl	800a6e0 <__assert_func>
 8009ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eec:	6006      	str	r6, [r0, #0]
 8009eee:	60c6      	str	r6, [r0, #12]
 8009ef0:	b13c      	cbz	r4, 8009f02 <_Bfree+0x3a>
 8009ef2:	69eb      	ldr	r3, [r5, #28]
 8009ef4:	6862      	ldr	r2, [r4, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009efc:	6021      	str	r1, [r4, #0]
 8009efe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	0800ad91 	.word	0x0800ad91
 8009f08:	0800ae11 	.word	0x0800ae11

08009f0c <__multadd>:
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	690d      	ldr	r5, [r1, #16]
 8009f12:	4607      	mov	r7, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	461e      	mov	r6, r3
 8009f18:	f101 0c14 	add.w	ip, r1, #20
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f22:	b299      	uxth	r1, r3
 8009f24:	fb02 6101 	mla	r1, r2, r1, r6
 8009f28:	0c1e      	lsrs	r6, r3, #16
 8009f2a:	0c0b      	lsrs	r3, r1, #16
 8009f2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f30:	b289      	uxth	r1, r1
 8009f32:	3001      	adds	r0, #1
 8009f34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f38:	4285      	cmp	r5, r0
 8009f3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f42:	dcec      	bgt.n	8009f1e <__multadd+0x12>
 8009f44:	b30e      	cbz	r6, 8009f8a <__multadd+0x7e>
 8009f46:	68a3      	ldr	r3, [r4, #8]
 8009f48:	42ab      	cmp	r3, r5
 8009f4a:	dc19      	bgt.n	8009f80 <__multadd+0x74>
 8009f4c:	6861      	ldr	r1, [r4, #4]
 8009f4e:	4638      	mov	r0, r7
 8009f50:	3101      	adds	r1, #1
 8009f52:	f7ff ff79 	bl	8009e48 <_Balloc>
 8009f56:	4680      	mov	r8, r0
 8009f58:	b928      	cbnz	r0, 8009f66 <__multadd+0x5a>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f90 <__multadd+0x84>)
 8009f5e:	480d      	ldr	r0, [pc, #52]	@ (8009f94 <__multadd+0x88>)
 8009f60:	21ba      	movs	r1, #186	@ 0xba
 8009f62:	f000 fbbd 	bl	800a6e0 <__assert_func>
 8009f66:	6922      	ldr	r2, [r4, #16]
 8009f68:	3202      	adds	r2, #2
 8009f6a:	f104 010c 	add.w	r1, r4, #12
 8009f6e:	0092      	lsls	r2, r2, #2
 8009f70:	300c      	adds	r0, #12
 8009f72:	f000 fba7 	bl	800a6c4 <memcpy>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f7ff ffa5 	bl	8009ec8 <_Bfree>
 8009f7e:	4644      	mov	r4, r8
 8009f80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f84:	3501      	adds	r5, #1
 8009f86:	615e      	str	r6, [r3, #20]
 8009f88:	6125      	str	r5, [r4, #16]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	0800ae00 	.word	0x0800ae00
 8009f94:	0800ae11 	.word	0x0800ae11

08009f98 <__hi0bits>:
 8009f98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	bf36      	itet	cc
 8009fa0:	0403      	lslcc	r3, r0, #16
 8009fa2:	2000      	movcs	r0, #0
 8009fa4:	2010      	movcc	r0, #16
 8009fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009faa:	bf3c      	itt	cc
 8009fac:	021b      	lslcc	r3, r3, #8
 8009fae:	3008      	addcc	r0, #8
 8009fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fb4:	bf3c      	itt	cc
 8009fb6:	011b      	lslcc	r3, r3, #4
 8009fb8:	3004      	addcc	r0, #4
 8009fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fbe:	bf3c      	itt	cc
 8009fc0:	009b      	lslcc	r3, r3, #2
 8009fc2:	3002      	addcc	r0, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	db05      	blt.n	8009fd4 <__hi0bits+0x3c>
 8009fc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009fcc:	f100 0001 	add.w	r0, r0, #1
 8009fd0:	bf08      	it	eq
 8009fd2:	2020      	moveq	r0, #32
 8009fd4:	4770      	bx	lr

08009fd6 <__lo0bits>:
 8009fd6:	6803      	ldr	r3, [r0, #0]
 8009fd8:	4602      	mov	r2, r0
 8009fda:	f013 0007 	ands.w	r0, r3, #7
 8009fde:	d00b      	beq.n	8009ff8 <__lo0bits+0x22>
 8009fe0:	07d9      	lsls	r1, r3, #31
 8009fe2:	d421      	bmi.n	800a028 <__lo0bits+0x52>
 8009fe4:	0798      	lsls	r0, r3, #30
 8009fe6:	bf49      	itett	mi
 8009fe8:	085b      	lsrmi	r3, r3, #1
 8009fea:	089b      	lsrpl	r3, r3, #2
 8009fec:	2001      	movmi	r0, #1
 8009fee:	6013      	strmi	r3, [r2, #0]
 8009ff0:	bf5c      	itt	pl
 8009ff2:	6013      	strpl	r3, [r2, #0]
 8009ff4:	2002      	movpl	r0, #2
 8009ff6:	4770      	bx	lr
 8009ff8:	b299      	uxth	r1, r3
 8009ffa:	b909      	cbnz	r1, 800a000 <__lo0bits+0x2a>
 8009ffc:	0c1b      	lsrs	r3, r3, #16
 8009ffe:	2010      	movs	r0, #16
 800a000:	b2d9      	uxtb	r1, r3
 800a002:	b909      	cbnz	r1, 800a008 <__lo0bits+0x32>
 800a004:	3008      	adds	r0, #8
 800a006:	0a1b      	lsrs	r3, r3, #8
 800a008:	0719      	lsls	r1, r3, #28
 800a00a:	bf04      	itt	eq
 800a00c:	091b      	lsreq	r3, r3, #4
 800a00e:	3004      	addeq	r0, #4
 800a010:	0799      	lsls	r1, r3, #30
 800a012:	bf04      	itt	eq
 800a014:	089b      	lsreq	r3, r3, #2
 800a016:	3002      	addeq	r0, #2
 800a018:	07d9      	lsls	r1, r3, #31
 800a01a:	d403      	bmi.n	800a024 <__lo0bits+0x4e>
 800a01c:	085b      	lsrs	r3, r3, #1
 800a01e:	f100 0001 	add.w	r0, r0, #1
 800a022:	d003      	beq.n	800a02c <__lo0bits+0x56>
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	4770      	bx	lr
 800a028:	2000      	movs	r0, #0
 800a02a:	4770      	bx	lr
 800a02c:	2020      	movs	r0, #32
 800a02e:	4770      	bx	lr

0800a030 <__i2b>:
 800a030:	b510      	push	{r4, lr}
 800a032:	460c      	mov	r4, r1
 800a034:	2101      	movs	r1, #1
 800a036:	f7ff ff07 	bl	8009e48 <_Balloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	b928      	cbnz	r0, 800a04a <__i2b+0x1a>
 800a03e:	4b05      	ldr	r3, [pc, #20]	@ (800a054 <__i2b+0x24>)
 800a040:	4805      	ldr	r0, [pc, #20]	@ (800a058 <__i2b+0x28>)
 800a042:	f240 1145 	movw	r1, #325	@ 0x145
 800a046:	f000 fb4b 	bl	800a6e0 <__assert_func>
 800a04a:	2301      	movs	r3, #1
 800a04c:	6144      	str	r4, [r0, #20]
 800a04e:	6103      	str	r3, [r0, #16]
 800a050:	bd10      	pop	{r4, pc}
 800a052:	bf00      	nop
 800a054:	0800ae00 	.word	0x0800ae00
 800a058:	0800ae11 	.word	0x0800ae11

0800a05c <__multiply>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	4614      	mov	r4, r2
 800a062:	690a      	ldr	r2, [r1, #16]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	429a      	cmp	r2, r3
 800a068:	bfa8      	it	ge
 800a06a:	4623      	movge	r3, r4
 800a06c:	460f      	mov	r7, r1
 800a06e:	bfa4      	itt	ge
 800a070:	460c      	movge	r4, r1
 800a072:	461f      	movge	r7, r3
 800a074:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a078:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a07c:	68a3      	ldr	r3, [r4, #8]
 800a07e:	6861      	ldr	r1, [r4, #4]
 800a080:	eb0a 0609 	add.w	r6, sl, r9
 800a084:	42b3      	cmp	r3, r6
 800a086:	b085      	sub	sp, #20
 800a088:	bfb8      	it	lt
 800a08a:	3101      	addlt	r1, #1
 800a08c:	f7ff fedc 	bl	8009e48 <_Balloc>
 800a090:	b930      	cbnz	r0, 800a0a0 <__multiply+0x44>
 800a092:	4602      	mov	r2, r0
 800a094:	4b44      	ldr	r3, [pc, #272]	@ (800a1a8 <__multiply+0x14c>)
 800a096:	4845      	ldr	r0, [pc, #276]	@ (800a1ac <__multiply+0x150>)
 800a098:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a09c:	f000 fb20 	bl	800a6e0 <__assert_func>
 800a0a0:	f100 0514 	add.w	r5, r0, #20
 800a0a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	4543      	cmp	r3, r8
 800a0ae:	d321      	bcc.n	800a0f4 <__multiply+0x98>
 800a0b0:	f107 0114 	add.w	r1, r7, #20
 800a0b4:	f104 0214 	add.w	r2, r4, #20
 800a0b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0c0:	9302      	str	r3, [sp, #8]
 800a0c2:	1b13      	subs	r3, r2, r4
 800a0c4:	3b15      	subs	r3, #21
 800a0c6:	f023 0303 	bic.w	r3, r3, #3
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	f104 0715 	add.w	r7, r4, #21
 800a0d0:	42ba      	cmp	r2, r7
 800a0d2:	bf38      	it	cc
 800a0d4:	2304      	movcc	r3, #4
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	9b02      	ldr	r3, [sp, #8]
 800a0da:	9103      	str	r1, [sp, #12]
 800a0dc:	428b      	cmp	r3, r1
 800a0de:	d80c      	bhi.n	800a0fa <__multiply+0x9e>
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	dd03      	ble.n	800a0ec <__multiply+0x90>
 800a0e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d05b      	beq.n	800a1a4 <__multiply+0x148>
 800a0ec:	6106      	str	r6, [r0, #16]
 800a0ee:	b005      	add	sp, #20
 800a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f4:	f843 2b04 	str.w	r2, [r3], #4
 800a0f8:	e7d8      	b.n	800a0ac <__multiply+0x50>
 800a0fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a0fe:	f1ba 0f00 	cmp.w	sl, #0
 800a102:	d024      	beq.n	800a14e <__multiply+0xf2>
 800a104:	f104 0e14 	add.w	lr, r4, #20
 800a108:	46a9      	mov	r9, r5
 800a10a:	f04f 0c00 	mov.w	ip, #0
 800a10e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a112:	f8d9 3000 	ldr.w	r3, [r9]
 800a116:	fa1f fb87 	uxth.w	fp, r7
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a120:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a124:	f8d9 7000 	ldr.w	r7, [r9]
 800a128:	4463      	add	r3, ip
 800a12a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a12e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a132:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a136:	b29b      	uxth	r3, r3
 800a138:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a13c:	4572      	cmp	r2, lr
 800a13e:	f849 3b04 	str.w	r3, [r9], #4
 800a142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a146:	d8e2      	bhi.n	800a10e <__multiply+0xb2>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	f845 c003 	str.w	ip, [r5, r3]
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a154:	3104      	adds	r1, #4
 800a156:	f1b9 0f00 	cmp.w	r9, #0
 800a15a:	d021      	beq.n	800a1a0 <__multiply+0x144>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	f104 0c14 	add.w	ip, r4, #20
 800a162:	46ae      	mov	lr, r5
 800a164:	f04f 0a00 	mov.w	sl, #0
 800a168:	f8bc b000 	ldrh.w	fp, [ip]
 800a16c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a170:	fb09 770b 	mla	r7, r9, fp, r7
 800a174:	4457      	add	r7, sl
 800a176:	b29b      	uxth	r3, r3
 800a178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a17c:	f84e 3b04 	str.w	r3, [lr], #4
 800a180:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a188:	f8be 3000 	ldrh.w	r3, [lr]
 800a18c:	fb09 330a 	mla	r3, r9, sl, r3
 800a190:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a194:	4562      	cmp	r2, ip
 800a196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a19a:	d8e5      	bhi.n	800a168 <__multiply+0x10c>
 800a19c:	9f01      	ldr	r7, [sp, #4]
 800a19e:	51eb      	str	r3, [r5, r7]
 800a1a0:	3504      	adds	r5, #4
 800a1a2:	e799      	b.n	800a0d8 <__multiply+0x7c>
 800a1a4:	3e01      	subs	r6, #1
 800a1a6:	e79b      	b.n	800a0e0 <__multiply+0x84>
 800a1a8:	0800ae00 	.word	0x0800ae00
 800a1ac:	0800ae11 	.word	0x0800ae11

0800a1b0 <__pow5mult>:
 800a1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b4:	4615      	mov	r5, r2
 800a1b6:	f012 0203 	ands.w	r2, r2, #3
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	460e      	mov	r6, r1
 800a1be:	d007      	beq.n	800a1d0 <__pow5mult+0x20>
 800a1c0:	4c25      	ldr	r4, [pc, #148]	@ (800a258 <__pow5mult+0xa8>)
 800a1c2:	3a01      	subs	r2, #1
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1ca:	f7ff fe9f 	bl	8009f0c <__multadd>
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	10ad      	asrs	r5, r5, #2
 800a1d2:	d03d      	beq.n	800a250 <__pow5mult+0xa0>
 800a1d4:	69fc      	ldr	r4, [r7, #28]
 800a1d6:	b97c      	cbnz	r4, 800a1f8 <__pow5mult+0x48>
 800a1d8:	2010      	movs	r0, #16
 800a1da:	f7ff fd7f 	bl	8009cdc <malloc>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	61f8      	str	r0, [r7, #28]
 800a1e2:	b928      	cbnz	r0, 800a1f0 <__pow5mult+0x40>
 800a1e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a25c <__pow5mult+0xac>)
 800a1e6:	481e      	ldr	r0, [pc, #120]	@ (800a260 <__pow5mult+0xb0>)
 800a1e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a1ec:	f000 fa78 	bl	800a6e0 <__assert_func>
 800a1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1f4:	6004      	str	r4, [r0, #0]
 800a1f6:	60c4      	str	r4, [r0, #12]
 800a1f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a1fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a200:	b94c      	cbnz	r4, 800a216 <__pow5mult+0x66>
 800a202:	f240 2171 	movw	r1, #625	@ 0x271
 800a206:	4638      	mov	r0, r7
 800a208:	f7ff ff12 	bl	800a030 <__i2b>
 800a20c:	2300      	movs	r3, #0
 800a20e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a212:	4604      	mov	r4, r0
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	f04f 0900 	mov.w	r9, #0
 800a21a:	07eb      	lsls	r3, r5, #31
 800a21c:	d50a      	bpl.n	800a234 <__pow5mult+0x84>
 800a21e:	4631      	mov	r1, r6
 800a220:	4622      	mov	r2, r4
 800a222:	4638      	mov	r0, r7
 800a224:	f7ff ff1a 	bl	800a05c <__multiply>
 800a228:	4631      	mov	r1, r6
 800a22a:	4680      	mov	r8, r0
 800a22c:	4638      	mov	r0, r7
 800a22e:	f7ff fe4b 	bl	8009ec8 <_Bfree>
 800a232:	4646      	mov	r6, r8
 800a234:	106d      	asrs	r5, r5, #1
 800a236:	d00b      	beq.n	800a250 <__pow5mult+0xa0>
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	b938      	cbnz	r0, 800a24c <__pow5mult+0x9c>
 800a23c:	4622      	mov	r2, r4
 800a23e:	4621      	mov	r1, r4
 800a240:	4638      	mov	r0, r7
 800a242:	f7ff ff0b 	bl	800a05c <__multiply>
 800a246:	6020      	str	r0, [r4, #0]
 800a248:	f8c0 9000 	str.w	r9, [r0]
 800a24c:	4604      	mov	r4, r0
 800a24e:	e7e4      	b.n	800a21a <__pow5mult+0x6a>
 800a250:	4630      	mov	r0, r6
 800a252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a256:	bf00      	nop
 800a258:	0800ae6c 	.word	0x0800ae6c
 800a25c:	0800ad91 	.word	0x0800ad91
 800a260:	0800ae11 	.word	0x0800ae11

0800a264 <__lshift>:
 800a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	460c      	mov	r4, r1
 800a26a:	6849      	ldr	r1, [r1, #4]
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	4607      	mov	r7, r0
 800a276:	4691      	mov	r9, r2
 800a278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a27c:	f108 0601 	add.w	r6, r8, #1
 800a280:	42b3      	cmp	r3, r6
 800a282:	db0b      	blt.n	800a29c <__lshift+0x38>
 800a284:	4638      	mov	r0, r7
 800a286:	f7ff fddf 	bl	8009e48 <_Balloc>
 800a28a:	4605      	mov	r5, r0
 800a28c:	b948      	cbnz	r0, 800a2a2 <__lshift+0x3e>
 800a28e:	4602      	mov	r2, r0
 800a290:	4b28      	ldr	r3, [pc, #160]	@ (800a334 <__lshift+0xd0>)
 800a292:	4829      	ldr	r0, [pc, #164]	@ (800a338 <__lshift+0xd4>)
 800a294:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a298:	f000 fa22 	bl	800a6e0 <__assert_func>
 800a29c:	3101      	adds	r1, #1
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	e7ee      	b.n	800a280 <__lshift+0x1c>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f100 0114 	add.w	r1, r0, #20
 800a2a8:	f100 0210 	add.w	r2, r0, #16
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	4553      	cmp	r3, sl
 800a2b0:	db33      	blt.n	800a31a <__lshift+0xb6>
 800a2b2:	6920      	ldr	r0, [r4, #16]
 800a2b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2b8:	f104 0314 	add.w	r3, r4, #20
 800a2bc:	f019 091f 	ands.w	r9, r9, #31
 800a2c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2c8:	d02b      	beq.n	800a322 <__lshift+0xbe>
 800a2ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a2ce:	468a      	mov	sl, r1
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	fa00 f009 	lsl.w	r0, r0, r9
 800a2d8:	4310      	orrs	r0, r2
 800a2da:	f84a 0b04 	str.w	r0, [sl], #4
 800a2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e2:	459c      	cmp	ip, r3
 800a2e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2e8:	d8f3      	bhi.n	800a2d2 <__lshift+0x6e>
 800a2ea:	ebac 0304 	sub.w	r3, ip, r4
 800a2ee:	3b15      	subs	r3, #21
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	f104 0015 	add.w	r0, r4, #21
 800a2fa:	4584      	cmp	ip, r0
 800a2fc:	bf38      	it	cc
 800a2fe:	2304      	movcc	r3, #4
 800a300:	50ca      	str	r2, [r1, r3]
 800a302:	b10a      	cbz	r2, 800a308 <__lshift+0xa4>
 800a304:	f108 0602 	add.w	r6, r8, #2
 800a308:	3e01      	subs	r6, #1
 800a30a:	4638      	mov	r0, r7
 800a30c:	612e      	str	r6, [r5, #16]
 800a30e:	4621      	mov	r1, r4
 800a310:	f7ff fdda 	bl	8009ec8 <_Bfree>
 800a314:	4628      	mov	r0, r5
 800a316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a31e:	3301      	adds	r3, #1
 800a320:	e7c5      	b.n	800a2ae <__lshift+0x4a>
 800a322:	3904      	subs	r1, #4
 800a324:	f853 2b04 	ldr.w	r2, [r3], #4
 800a328:	f841 2f04 	str.w	r2, [r1, #4]!
 800a32c:	459c      	cmp	ip, r3
 800a32e:	d8f9      	bhi.n	800a324 <__lshift+0xc0>
 800a330:	e7ea      	b.n	800a308 <__lshift+0xa4>
 800a332:	bf00      	nop
 800a334:	0800ae00 	.word	0x0800ae00
 800a338:	0800ae11 	.word	0x0800ae11

0800a33c <__mcmp>:
 800a33c:	690a      	ldr	r2, [r1, #16]
 800a33e:	4603      	mov	r3, r0
 800a340:	6900      	ldr	r0, [r0, #16]
 800a342:	1a80      	subs	r0, r0, r2
 800a344:	b530      	push	{r4, r5, lr}
 800a346:	d10e      	bne.n	800a366 <__mcmp+0x2a>
 800a348:	3314      	adds	r3, #20
 800a34a:	3114      	adds	r1, #20
 800a34c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a350:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a354:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a358:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a35c:	4295      	cmp	r5, r2
 800a35e:	d003      	beq.n	800a368 <__mcmp+0x2c>
 800a360:	d205      	bcs.n	800a36e <__mcmp+0x32>
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	bd30      	pop	{r4, r5, pc}
 800a368:	42a3      	cmp	r3, r4
 800a36a:	d3f3      	bcc.n	800a354 <__mcmp+0x18>
 800a36c:	e7fb      	b.n	800a366 <__mcmp+0x2a>
 800a36e:	2001      	movs	r0, #1
 800a370:	e7f9      	b.n	800a366 <__mcmp+0x2a>
	...

0800a374 <__mdiff>:
 800a374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	4689      	mov	r9, r1
 800a37a:	4606      	mov	r6, r0
 800a37c:	4611      	mov	r1, r2
 800a37e:	4648      	mov	r0, r9
 800a380:	4614      	mov	r4, r2
 800a382:	f7ff ffdb 	bl	800a33c <__mcmp>
 800a386:	1e05      	subs	r5, r0, #0
 800a388:	d112      	bne.n	800a3b0 <__mdiff+0x3c>
 800a38a:	4629      	mov	r1, r5
 800a38c:	4630      	mov	r0, r6
 800a38e:	f7ff fd5b 	bl	8009e48 <_Balloc>
 800a392:	4602      	mov	r2, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <__mdiff+0x2e>
 800a396:	4b3f      	ldr	r3, [pc, #252]	@ (800a494 <__mdiff+0x120>)
 800a398:	f240 2137 	movw	r1, #567	@ 0x237
 800a39c:	483e      	ldr	r0, [pc, #248]	@ (800a498 <__mdiff+0x124>)
 800a39e:	f000 f99f 	bl	800a6e0 <__assert_func>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	b003      	add	sp, #12
 800a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b0:	bfbc      	itt	lt
 800a3b2:	464b      	movlt	r3, r9
 800a3b4:	46a1      	movlt	r9, r4
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3bc:	bfba      	itte	lt
 800a3be:	461c      	movlt	r4, r3
 800a3c0:	2501      	movlt	r5, #1
 800a3c2:	2500      	movge	r5, #0
 800a3c4:	f7ff fd40 	bl	8009e48 <_Balloc>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	b918      	cbnz	r0, 800a3d4 <__mdiff+0x60>
 800a3cc:	4b31      	ldr	r3, [pc, #196]	@ (800a494 <__mdiff+0x120>)
 800a3ce:	f240 2145 	movw	r1, #581	@ 0x245
 800a3d2:	e7e3      	b.n	800a39c <__mdiff+0x28>
 800a3d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3d8:	6926      	ldr	r6, [r4, #16]
 800a3da:	60c5      	str	r5, [r0, #12]
 800a3dc:	f109 0310 	add.w	r3, r9, #16
 800a3e0:	f109 0514 	add.w	r5, r9, #20
 800a3e4:	f104 0e14 	add.w	lr, r4, #20
 800a3e8:	f100 0b14 	add.w	fp, r0, #20
 800a3ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a3f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	46d9      	mov	r9, fp
 800a3f8:	f04f 0c00 	mov.w	ip, #0
 800a3fc:	9b01      	ldr	r3, [sp, #4]
 800a3fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a402:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	fa1f f38a 	uxth.w	r3, sl
 800a40c:	4619      	mov	r1, r3
 800a40e:	b283      	uxth	r3, r0
 800a410:	1acb      	subs	r3, r1, r3
 800a412:	0c00      	lsrs	r0, r0, #16
 800a414:	4463      	add	r3, ip
 800a416:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a41a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a41e:	b29b      	uxth	r3, r3
 800a420:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a424:	4576      	cmp	r6, lr
 800a426:	f849 3b04 	str.w	r3, [r9], #4
 800a42a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a42e:	d8e5      	bhi.n	800a3fc <__mdiff+0x88>
 800a430:	1b33      	subs	r3, r6, r4
 800a432:	3b15      	subs	r3, #21
 800a434:	f023 0303 	bic.w	r3, r3, #3
 800a438:	3415      	adds	r4, #21
 800a43a:	3304      	adds	r3, #4
 800a43c:	42a6      	cmp	r6, r4
 800a43e:	bf38      	it	cc
 800a440:	2304      	movcc	r3, #4
 800a442:	441d      	add	r5, r3
 800a444:	445b      	add	r3, fp
 800a446:	461e      	mov	r6, r3
 800a448:	462c      	mov	r4, r5
 800a44a:	4544      	cmp	r4, r8
 800a44c:	d30e      	bcc.n	800a46c <__mdiff+0xf8>
 800a44e:	f108 0103 	add.w	r1, r8, #3
 800a452:	1b49      	subs	r1, r1, r5
 800a454:	f021 0103 	bic.w	r1, r1, #3
 800a458:	3d03      	subs	r5, #3
 800a45a:	45a8      	cmp	r8, r5
 800a45c:	bf38      	it	cc
 800a45e:	2100      	movcc	r1, #0
 800a460:	440b      	add	r3, r1
 800a462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a466:	b191      	cbz	r1, 800a48e <__mdiff+0x11a>
 800a468:	6117      	str	r7, [r2, #16]
 800a46a:	e79d      	b.n	800a3a8 <__mdiff+0x34>
 800a46c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a470:	46e6      	mov	lr, ip
 800a472:	0c08      	lsrs	r0, r1, #16
 800a474:	fa1c fc81 	uxtah	ip, ip, r1
 800a478:	4471      	add	r1, lr
 800a47a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a47e:	b289      	uxth	r1, r1
 800a480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a484:	f846 1b04 	str.w	r1, [r6], #4
 800a488:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a48c:	e7dd      	b.n	800a44a <__mdiff+0xd6>
 800a48e:	3f01      	subs	r7, #1
 800a490:	e7e7      	b.n	800a462 <__mdiff+0xee>
 800a492:	bf00      	nop
 800a494:	0800ae00 	.word	0x0800ae00
 800a498:	0800ae11 	.word	0x0800ae11

0800a49c <__d2b>:
 800a49c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4a0:	460f      	mov	r7, r1
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	ec59 8b10 	vmov	r8, r9, d0
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	f7ff fccd 	bl	8009e48 <_Balloc>
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	b930      	cbnz	r0, 800a4c0 <__d2b+0x24>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	4b23      	ldr	r3, [pc, #140]	@ (800a544 <__d2b+0xa8>)
 800a4b6:	4824      	ldr	r0, [pc, #144]	@ (800a548 <__d2b+0xac>)
 800a4b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4bc:	f000 f910 	bl	800a6e0 <__assert_func>
 800a4c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4c8:	b10d      	cbz	r5, 800a4ce <__d2b+0x32>
 800a4ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	f1b8 0300 	subs.w	r3, r8, #0
 800a4d4:	d023      	beq.n	800a51e <__d2b+0x82>
 800a4d6:	4668      	mov	r0, sp
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	f7ff fd7c 	bl	8009fd6 <__lo0bits>
 800a4de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4e2:	b1d0      	cbz	r0, 800a51a <__d2b+0x7e>
 800a4e4:	f1c0 0320 	rsb	r3, r0, #32
 800a4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	40c2      	lsrs	r2, r0
 800a4f0:	6163      	str	r3, [r4, #20]
 800a4f2:	9201      	str	r2, [sp, #4]
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	61a3      	str	r3, [r4, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bf0c      	ite	eq
 800a4fc:	2201      	moveq	r2, #1
 800a4fe:	2202      	movne	r2, #2
 800a500:	6122      	str	r2, [r4, #16]
 800a502:	b1a5      	cbz	r5, 800a52e <__d2b+0x92>
 800a504:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a508:	4405      	add	r5, r0
 800a50a:	603d      	str	r5, [r7, #0]
 800a50c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4620      	mov	r0, r4
 800a514:	b003      	add	sp, #12
 800a516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a51a:	6161      	str	r1, [r4, #20]
 800a51c:	e7ea      	b.n	800a4f4 <__d2b+0x58>
 800a51e:	a801      	add	r0, sp, #4
 800a520:	f7ff fd59 	bl	8009fd6 <__lo0bits>
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	6163      	str	r3, [r4, #20]
 800a528:	3020      	adds	r0, #32
 800a52a:	2201      	movs	r2, #1
 800a52c:	e7e8      	b.n	800a500 <__d2b+0x64>
 800a52e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a532:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a536:	6038      	str	r0, [r7, #0]
 800a538:	6918      	ldr	r0, [r3, #16]
 800a53a:	f7ff fd2d 	bl	8009f98 <__hi0bits>
 800a53e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a542:	e7e5      	b.n	800a510 <__d2b+0x74>
 800a544:	0800ae00 	.word	0x0800ae00
 800a548:	0800ae11 	.word	0x0800ae11

0800a54c <__sflush_r>:
 800a54c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	0716      	lsls	r6, r2, #28
 800a556:	4605      	mov	r5, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	d454      	bmi.n	800a606 <__sflush_r+0xba>
 800a55c:	684b      	ldr	r3, [r1, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc02      	bgt.n	800a568 <__sflush_r+0x1c>
 800a562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	dd48      	ble.n	800a5fa <__sflush_r+0xae>
 800a568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d045      	beq.n	800a5fa <__sflush_r+0xae>
 800a56e:	2300      	movs	r3, #0
 800a570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a574:	682f      	ldr	r7, [r5, #0]
 800a576:	6a21      	ldr	r1, [r4, #32]
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	d030      	beq.n	800a5de <__sflush_r+0x92>
 800a57c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	0759      	lsls	r1, r3, #29
 800a582:	d505      	bpl.n	800a590 <__sflush_r+0x44>
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a58a:	b10b      	cbz	r3, 800a590 <__sflush_r+0x44>
 800a58c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	2300      	movs	r3, #0
 800a592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a594:	6a21      	ldr	r1, [r4, #32]
 800a596:	4628      	mov	r0, r5
 800a598:	47b0      	blx	r6
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	d106      	bne.n	800a5ae <__sflush_r+0x62>
 800a5a0:	6829      	ldr	r1, [r5, #0]
 800a5a2:	291d      	cmp	r1, #29
 800a5a4:	d82b      	bhi.n	800a5fe <__sflush_r+0xb2>
 800a5a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a650 <__sflush_r+0x104>)
 800a5a8:	410a      	asrs	r2, r1
 800a5aa:	07d6      	lsls	r6, r2, #31
 800a5ac:	d427      	bmi.n	800a5fe <__sflush_r+0xb2>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	6062      	str	r2, [r4, #4]
 800a5b2:	04d9      	lsls	r1, r3, #19
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	d504      	bpl.n	800a5c4 <__sflush_r+0x78>
 800a5ba:	1c42      	adds	r2, r0, #1
 800a5bc:	d101      	bne.n	800a5c2 <__sflush_r+0x76>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	b903      	cbnz	r3, 800a5c4 <__sflush_r+0x78>
 800a5c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5c6:	602f      	str	r7, [r5, #0]
 800a5c8:	b1b9      	cbz	r1, 800a5fa <__sflush_r+0xae>
 800a5ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	d002      	beq.n	800a5d8 <__sflush_r+0x8c>
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f7ff fb38 	bl	8009c48 <_free_r>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5dc:	e00d      	b.n	800a5fa <__sflush_r+0xae>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b0      	blx	r6
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	1c50      	adds	r0, r2, #1
 800a5e8:	d1c9      	bne.n	800a57e <__sflush_r+0x32>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0c6      	beq.n	800a57e <__sflush_r+0x32>
 800a5f0:	2b1d      	cmp	r3, #29
 800a5f2:	d001      	beq.n	800a5f8 <__sflush_r+0xac>
 800a5f4:	2b16      	cmp	r3, #22
 800a5f6:	d11e      	bne.n	800a636 <__sflush_r+0xea>
 800a5f8:	602f      	str	r7, [r5, #0]
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e022      	b.n	800a644 <__sflush_r+0xf8>
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a602:	b21b      	sxth	r3, r3
 800a604:	e01b      	b.n	800a63e <__sflush_r+0xf2>
 800a606:	690f      	ldr	r7, [r1, #16]
 800a608:	2f00      	cmp	r7, #0
 800a60a:	d0f6      	beq.n	800a5fa <__sflush_r+0xae>
 800a60c:	0793      	lsls	r3, r2, #30
 800a60e:	680e      	ldr	r6, [r1, #0]
 800a610:	bf08      	it	eq
 800a612:	694b      	ldreq	r3, [r1, #20]
 800a614:	600f      	str	r7, [r1, #0]
 800a616:	bf18      	it	ne
 800a618:	2300      	movne	r3, #0
 800a61a:	eba6 0807 	sub.w	r8, r6, r7
 800a61e:	608b      	str	r3, [r1, #8]
 800a620:	f1b8 0f00 	cmp.w	r8, #0
 800a624:	dde9      	ble.n	800a5fa <__sflush_r+0xae>
 800a626:	6a21      	ldr	r1, [r4, #32]
 800a628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a62a:	4643      	mov	r3, r8
 800a62c:	463a      	mov	r2, r7
 800a62e:	4628      	mov	r0, r5
 800a630:	47b0      	blx	r6
 800a632:	2800      	cmp	r0, #0
 800a634:	dc08      	bgt.n	800a648 <__sflush_r+0xfc>
 800a636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a648:	4407      	add	r7, r0
 800a64a:	eba8 0800 	sub.w	r8, r8, r0
 800a64e:	e7e7      	b.n	800a620 <__sflush_r+0xd4>
 800a650:	dfbffffe 	.word	0xdfbffffe

0800a654 <_fflush_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	690b      	ldr	r3, [r1, #16]
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	b913      	cbnz	r3, 800a664 <_fflush_r+0x10>
 800a65e:	2500      	movs	r5, #0
 800a660:	4628      	mov	r0, r5
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	b118      	cbz	r0, 800a66e <_fflush_r+0x1a>
 800a666:	6a03      	ldr	r3, [r0, #32]
 800a668:	b90b      	cbnz	r3, 800a66e <_fflush_r+0x1a>
 800a66a:	f7fe fba7 	bl	8008dbc <__sinit>
 800a66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0f3      	beq.n	800a65e <_fflush_r+0xa>
 800a676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a678:	07d0      	lsls	r0, r2, #31
 800a67a:	d404      	bmi.n	800a686 <_fflush_r+0x32>
 800a67c:	0599      	lsls	r1, r3, #22
 800a67e:	d402      	bmi.n	800a686 <_fflush_r+0x32>
 800a680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a682:	f7fe fc92 	bl	8008faa <__retarget_lock_acquire_recursive>
 800a686:	4628      	mov	r0, r5
 800a688:	4621      	mov	r1, r4
 800a68a:	f7ff ff5f 	bl	800a54c <__sflush_r>
 800a68e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a690:	07da      	lsls	r2, r3, #31
 800a692:	4605      	mov	r5, r0
 800a694:	d4e4      	bmi.n	800a660 <_fflush_r+0xc>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	059b      	lsls	r3, r3, #22
 800a69a:	d4e1      	bmi.n	800a660 <_fflush_r+0xc>
 800a69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a69e:	f7fe fc85 	bl	8008fac <__retarget_lock_release_recursive>
 800a6a2:	e7dd      	b.n	800a660 <_fflush_r+0xc>

0800a6a4 <_sbrk_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d06      	ldr	r5, [pc, #24]	@ (800a6c0 <_sbrk_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f7 f9fa 	bl	8001aa8 <_sbrk>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_sbrk_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_sbrk_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	20000548 	.word	0x20000548

0800a6c4 <memcpy>:
 800a6c4:	440a      	add	r2, r1
 800a6c6:	4291      	cmp	r1, r2
 800a6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6cc:	d100      	bne.n	800a6d0 <memcpy+0xc>
 800a6ce:	4770      	bx	lr
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6da:	4291      	cmp	r1, r2
 800a6dc:	d1f9      	bne.n	800a6d2 <memcpy+0xe>
 800a6de:	bd10      	pop	{r4, pc}

0800a6e0 <__assert_func>:
 800a6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6e2:	4614      	mov	r4, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b09      	ldr	r3, [pc, #36]	@ (800a70c <__assert_func+0x2c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	68d8      	ldr	r0, [r3, #12]
 800a6ee:	b954      	cbnz	r4, 800a706 <__assert_func+0x26>
 800a6f0:	4b07      	ldr	r3, [pc, #28]	@ (800a710 <__assert_func+0x30>)
 800a6f2:	461c      	mov	r4, r3
 800a6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6f8:	9100      	str	r1, [sp, #0]
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	4905      	ldr	r1, [pc, #20]	@ (800a714 <__assert_func+0x34>)
 800a6fe:	f000 f841 	bl	800a784 <fiprintf>
 800a702:	f000 f851 	bl	800a7a8 <abort>
 800a706:	4b04      	ldr	r3, [pc, #16]	@ (800a718 <__assert_func+0x38>)
 800a708:	e7f4      	b.n	800a6f4 <__assert_func+0x14>
 800a70a:	bf00      	nop
 800a70c:	20000018 	.word	0x20000018
 800a710:	0800afad 	.word	0x0800afad
 800a714:	0800af7f 	.word	0x0800af7f
 800a718:	0800af72 	.word	0x0800af72

0800a71c <_calloc_r>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	fba1 5402 	umull	r5, r4, r1, r2
 800a722:	b93c      	cbnz	r4, 800a734 <_calloc_r+0x18>
 800a724:	4629      	mov	r1, r5
 800a726:	f7ff fb03 	bl	8009d30 <_malloc_r>
 800a72a:	4606      	mov	r6, r0
 800a72c:	b928      	cbnz	r0, 800a73a <_calloc_r+0x1e>
 800a72e:	2600      	movs	r6, #0
 800a730:	4630      	mov	r0, r6
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	220c      	movs	r2, #12
 800a736:	6002      	str	r2, [r0, #0]
 800a738:	e7f9      	b.n	800a72e <_calloc_r+0x12>
 800a73a:	462a      	mov	r2, r5
 800a73c:	4621      	mov	r1, r4
 800a73e:	f7fe fbb6 	bl	8008eae <memset>
 800a742:	e7f5      	b.n	800a730 <_calloc_r+0x14>

0800a744 <__ascii_mbtowc>:
 800a744:	b082      	sub	sp, #8
 800a746:	b901      	cbnz	r1, 800a74a <__ascii_mbtowc+0x6>
 800a748:	a901      	add	r1, sp, #4
 800a74a:	b142      	cbz	r2, 800a75e <__ascii_mbtowc+0x1a>
 800a74c:	b14b      	cbz	r3, 800a762 <__ascii_mbtowc+0x1e>
 800a74e:	7813      	ldrb	r3, [r2, #0]
 800a750:	600b      	str	r3, [r1, #0]
 800a752:	7812      	ldrb	r2, [r2, #0]
 800a754:	1e10      	subs	r0, r2, #0
 800a756:	bf18      	it	ne
 800a758:	2001      	movne	r0, #1
 800a75a:	b002      	add	sp, #8
 800a75c:	4770      	bx	lr
 800a75e:	4610      	mov	r0, r2
 800a760:	e7fb      	b.n	800a75a <__ascii_mbtowc+0x16>
 800a762:	f06f 0001 	mvn.w	r0, #1
 800a766:	e7f8      	b.n	800a75a <__ascii_mbtowc+0x16>

0800a768 <__ascii_wctomb>:
 800a768:	4603      	mov	r3, r0
 800a76a:	4608      	mov	r0, r1
 800a76c:	b141      	cbz	r1, 800a780 <__ascii_wctomb+0x18>
 800a76e:	2aff      	cmp	r2, #255	@ 0xff
 800a770:	d904      	bls.n	800a77c <__ascii_wctomb+0x14>
 800a772:	228a      	movs	r2, #138	@ 0x8a
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	4770      	bx	lr
 800a77c:	700a      	strb	r2, [r1, #0]
 800a77e:	2001      	movs	r0, #1
 800a780:	4770      	bx	lr
	...

0800a784 <fiprintf>:
 800a784:	b40e      	push	{r1, r2, r3}
 800a786:	b503      	push	{r0, r1, lr}
 800a788:	4601      	mov	r1, r0
 800a78a:	ab03      	add	r3, sp, #12
 800a78c:	4805      	ldr	r0, [pc, #20]	@ (800a7a4 <fiprintf+0x20>)
 800a78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a792:	6800      	ldr	r0, [r0, #0]
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	f000 f837 	bl	800a808 <_vfiprintf_r>
 800a79a:	b002      	add	sp, #8
 800a79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7a0:	b003      	add	sp, #12
 800a7a2:	4770      	bx	lr
 800a7a4:	20000018 	.word	0x20000018

0800a7a8 <abort>:
 800a7a8:	b508      	push	{r3, lr}
 800a7aa:	2006      	movs	r0, #6
 800a7ac:	f000 fa00 	bl	800abb0 <raise>
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	f7f7 f901 	bl	80019b8 <_exit>

0800a7b6 <__sfputc_r>:
 800a7b6:	6893      	ldr	r3, [r2, #8]
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	b410      	push	{r4}
 800a7be:	6093      	str	r3, [r2, #8]
 800a7c0:	da08      	bge.n	800a7d4 <__sfputc_r+0x1e>
 800a7c2:	6994      	ldr	r4, [r2, #24]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	db01      	blt.n	800a7cc <__sfputc_r+0x16>
 800a7c8:	290a      	cmp	r1, #10
 800a7ca:	d103      	bne.n	800a7d4 <__sfputc_r+0x1e>
 800a7cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d0:	f000 b932 	b.w	800aa38 <__swbuf_r>
 800a7d4:	6813      	ldr	r3, [r2, #0]
 800a7d6:	1c58      	adds	r0, r3, #1
 800a7d8:	6010      	str	r0, [r2, #0]
 800a7da:	7019      	strb	r1, [r3, #0]
 800a7dc:	4608      	mov	r0, r1
 800a7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <__sfputs_r>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	4614      	mov	r4, r2
 800a7ec:	18d5      	adds	r5, r2, r3
 800a7ee:	42ac      	cmp	r4, r5
 800a7f0:	d101      	bne.n	800a7f6 <__sfputs_r+0x12>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e007      	b.n	800a806 <__sfputs_r+0x22>
 800a7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7ff ffda 	bl	800a7b6 <__sfputc_r>
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	d1f3      	bne.n	800a7ee <__sfputs_r+0xa>
 800a806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a808 <_vfiprintf_r>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	460d      	mov	r5, r1
 800a80e:	b09d      	sub	sp, #116	@ 0x74
 800a810:	4614      	mov	r4, r2
 800a812:	4698      	mov	r8, r3
 800a814:	4606      	mov	r6, r0
 800a816:	b118      	cbz	r0, 800a820 <_vfiprintf_r+0x18>
 800a818:	6a03      	ldr	r3, [r0, #32]
 800a81a:	b90b      	cbnz	r3, 800a820 <_vfiprintf_r+0x18>
 800a81c:	f7fe face 	bl	8008dbc <__sinit>
 800a820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a822:	07d9      	lsls	r1, r3, #31
 800a824:	d405      	bmi.n	800a832 <_vfiprintf_r+0x2a>
 800a826:	89ab      	ldrh	r3, [r5, #12]
 800a828:	059a      	lsls	r2, r3, #22
 800a82a:	d402      	bmi.n	800a832 <_vfiprintf_r+0x2a>
 800a82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a82e:	f7fe fbbc 	bl	8008faa <__retarget_lock_acquire_recursive>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	071b      	lsls	r3, r3, #28
 800a836:	d501      	bpl.n	800a83c <_vfiprintf_r+0x34>
 800a838:	692b      	ldr	r3, [r5, #16]
 800a83a:	b99b      	cbnz	r3, 800a864 <_vfiprintf_r+0x5c>
 800a83c:	4629      	mov	r1, r5
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 f938 	bl	800aab4 <__swsetup_r>
 800a844:	b170      	cbz	r0, 800a864 <_vfiprintf_r+0x5c>
 800a846:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a848:	07dc      	lsls	r4, r3, #31
 800a84a:	d504      	bpl.n	800a856 <_vfiprintf_r+0x4e>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	b01d      	add	sp, #116	@ 0x74
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	0598      	lsls	r0, r3, #22
 800a85a:	d4f7      	bmi.n	800a84c <_vfiprintf_r+0x44>
 800a85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a85e:	f7fe fba5 	bl	8008fac <__retarget_lock_release_recursive>
 800a862:	e7f3      	b.n	800a84c <_vfiprintf_r+0x44>
 800a864:	2300      	movs	r3, #0
 800a866:	9309      	str	r3, [sp, #36]	@ 0x24
 800a868:	2320      	movs	r3, #32
 800a86a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a86e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a872:	2330      	movs	r3, #48	@ 0x30
 800a874:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa24 <_vfiprintf_r+0x21c>
 800a878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a87c:	f04f 0901 	mov.w	r9, #1
 800a880:	4623      	mov	r3, r4
 800a882:	469a      	mov	sl, r3
 800a884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a888:	b10a      	cbz	r2, 800a88e <_vfiprintf_r+0x86>
 800a88a:	2a25      	cmp	r2, #37	@ 0x25
 800a88c:	d1f9      	bne.n	800a882 <_vfiprintf_r+0x7a>
 800a88e:	ebba 0b04 	subs.w	fp, sl, r4
 800a892:	d00b      	beq.n	800a8ac <_vfiprintf_r+0xa4>
 800a894:	465b      	mov	r3, fp
 800a896:	4622      	mov	r2, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ffa2 	bl	800a7e4 <__sfputs_r>
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	f000 80a7 	beq.w	800a9f4 <_vfiprintf_r+0x1ec>
 800a8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8a8:	445a      	add	r2, fp
 800a8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 809f 	beq.w	800a9f4 <_vfiprintf_r+0x1ec>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c0:	f10a 0a01 	add.w	sl, sl, #1
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9307      	str	r3, [sp, #28]
 800a8c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8ce:	4654      	mov	r4, sl
 800a8d0:	2205      	movs	r2, #5
 800a8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d6:	4853      	ldr	r0, [pc, #332]	@ (800aa24 <_vfiprintf_r+0x21c>)
 800a8d8:	f7f5 fc7a 	bl	80001d0 <memchr>
 800a8dc:	9a04      	ldr	r2, [sp, #16]
 800a8de:	b9d8      	cbnz	r0, 800a918 <_vfiprintf_r+0x110>
 800a8e0:	06d1      	lsls	r1, r2, #27
 800a8e2:	bf44      	itt	mi
 800a8e4:	2320      	movmi	r3, #32
 800a8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ea:	0713      	lsls	r3, r2, #28
 800a8ec:	bf44      	itt	mi
 800a8ee:	232b      	movmi	r3, #43	@ 0x2b
 800a8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8fa:	d015      	beq.n	800a928 <_vfiprintf_r+0x120>
 800a8fc:	9a07      	ldr	r2, [sp, #28]
 800a8fe:	4654      	mov	r4, sl
 800a900:	2000      	movs	r0, #0
 800a902:	f04f 0c0a 	mov.w	ip, #10
 800a906:	4621      	mov	r1, r4
 800a908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a90c:	3b30      	subs	r3, #48	@ 0x30
 800a90e:	2b09      	cmp	r3, #9
 800a910:	d94b      	bls.n	800a9aa <_vfiprintf_r+0x1a2>
 800a912:	b1b0      	cbz	r0, 800a942 <_vfiprintf_r+0x13a>
 800a914:	9207      	str	r2, [sp, #28]
 800a916:	e014      	b.n	800a942 <_vfiprintf_r+0x13a>
 800a918:	eba0 0308 	sub.w	r3, r0, r8
 800a91c:	fa09 f303 	lsl.w	r3, r9, r3
 800a920:	4313      	orrs	r3, r2
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	46a2      	mov	sl, r4
 800a926:	e7d2      	b.n	800a8ce <_vfiprintf_r+0xc6>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	1d19      	adds	r1, r3, #4
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	9103      	str	r1, [sp, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	bfbb      	ittet	lt
 800a934:	425b      	neglt	r3, r3
 800a936:	f042 0202 	orrlt.w	r2, r2, #2
 800a93a:	9307      	strge	r3, [sp, #28]
 800a93c:	9307      	strlt	r3, [sp, #28]
 800a93e:	bfb8      	it	lt
 800a940:	9204      	strlt	r2, [sp, #16]
 800a942:	7823      	ldrb	r3, [r4, #0]
 800a944:	2b2e      	cmp	r3, #46	@ 0x2e
 800a946:	d10a      	bne.n	800a95e <_vfiprintf_r+0x156>
 800a948:	7863      	ldrb	r3, [r4, #1]
 800a94a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a94c:	d132      	bne.n	800a9b4 <_vfiprintf_r+0x1ac>
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	1d1a      	adds	r2, r3, #4
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	9203      	str	r2, [sp, #12]
 800a956:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a95a:	3402      	adds	r4, #2
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa34 <_vfiprintf_r+0x22c>
 800a962:	7821      	ldrb	r1, [r4, #0]
 800a964:	2203      	movs	r2, #3
 800a966:	4650      	mov	r0, sl
 800a968:	f7f5 fc32 	bl	80001d0 <memchr>
 800a96c:	b138      	cbz	r0, 800a97e <_vfiprintf_r+0x176>
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	eba0 000a 	sub.w	r0, r0, sl
 800a974:	2240      	movs	r2, #64	@ 0x40
 800a976:	4082      	lsls	r2, r0
 800a978:	4313      	orrs	r3, r2
 800a97a:	3401      	adds	r4, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a982:	4829      	ldr	r0, [pc, #164]	@ (800aa28 <_vfiprintf_r+0x220>)
 800a984:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a988:	2206      	movs	r2, #6
 800a98a:	f7f5 fc21 	bl	80001d0 <memchr>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d03f      	beq.n	800aa12 <_vfiprintf_r+0x20a>
 800a992:	4b26      	ldr	r3, [pc, #152]	@ (800aa2c <_vfiprintf_r+0x224>)
 800a994:	bb1b      	cbnz	r3, 800a9de <_vfiprintf_r+0x1d6>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	3307      	adds	r3, #7
 800a99a:	f023 0307 	bic.w	r3, r3, #7
 800a99e:	3308      	adds	r3, #8
 800a9a0:	9303      	str	r3, [sp, #12]
 800a9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a4:	443b      	add	r3, r7
 800a9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a8:	e76a      	b.n	800a880 <_vfiprintf_r+0x78>
 800a9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	e7a8      	b.n	800a906 <_vfiprintf_r+0xfe>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	3401      	adds	r4, #1
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	f04f 0c0a 	mov.w	ip, #10
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c6:	3a30      	subs	r2, #48	@ 0x30
 800a9c8:	2a09      	cmp	r2, #9
 800a9ca:	d903      	bls.n	800a9d4 <_vfiprintf_r+0x1cc>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0c6      	beq.n	800a95e <_vfiprintf_r+0x156>
 800a9d0:	9105      	str	r1, [sp, #20]
 800a9d2:	e7c4      	b.n	800a95e <_vfiprintf_r+0x156>
 800a9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9d8:	4604      	mov	r4, r0
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e7f0      	b.n	800a9c0 <_vfiprintf_r+0x1b8>
 800a9de:	ab03      	add	r3, sp, #12
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	4b12      	ldr	r3, [pc, #72]	@ (800aa30 <_vfiprintf_r+0x228>)
 800a9e6:	a904      	add	r1, sp, #16
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7fd fda3 	bl	8008534 <_printf_float>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	1c78      	adds	r0, r7, #1
 800a9f2:	d1d6      	bne.n	800a9a2 <_vfiprintf_r+0x19a>
 800a9f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9f6:	07d9      	lsls	r1, r3, #31
 800a9f8:	d405      	bmi.n	800aa06 <_vfiprintf_r+0x1fe>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	059a      	lsls	r2, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_vfiprintf_r+0x1fe>
 800aa00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa02:	f7fe fad3 	bl	8008fac <__retarget_lock_release_recursive>
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	065b      	lsls	r3, r3, #25
 800aa0a:	f53f af1f 	bmi.w	800a84c <_vfiprintf_r+0x44>
 800aa0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa10:	e71e      	b.n	800a850 <_vfiprintf_r+0x48>
 800aa12:	ab03      	add	r3, sp, #12
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	462a      	mov	r2, r5
 800aa18:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <_vfiprintf_r+0x228>)
 800aa1a:	a904      	add	r1, sp, #16
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f7fe f821 	bl	8008a64 <_printf_i>
 800aa22:	e7e4      	b.n	800a9ee <_vfiprintf_r+0x1e6>
 800aa24:	0800b0af 	.word	0x0800b0af
 800aa28:	0800b0b9 	.word	0x0800b0b9
 800aa2c:	08008535 	.word	0x08008535
 800aa30:	0800a7e5 	.word	0x0800a7e5
 800aa34:	0800b0b5 	.word	0x0800b0b5

0800aa38 <__swbuf_r>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	460e      	mov	r6, r1
 800aa3c:	4614      	mov	r4, r2
 800aa3e:	4605      	mov	r5, r0
 800aa40:	b118      	cbz	r0, 800aa4a <__swbuf_r+0x12>
 800aa42:	6a03      	ldr	r3, [r0, #32]
 800aa44:	b90b      	cbnz	r3, 800aa4a <__swbuf_r+0x12>
 800aa46:	f7fe f9b9 	bl	8008dbc <__sinit>
 800aa4a:	69a3      	ldr	r3, [r4, #24]
 800aa4c:	60a3      	str	r3, [r4, #8]
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	071a      	lsls	r2, r3, #28
 800aa52:	d501      	bpl.n	800aa58 <__swbuf_r+0x20>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b943      	cbnz	r3, 800aa6a <__swbuf_r+0x32>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 f82a 	bl	800aab4 <__swsetup_r>
 800aa60:	b118      	cbz	r0, 800aa6a <__swbuf_r+0x32>
 800aa62:	f04f 37ff 	mov.w	r7, #4294967295
 800aa66:	4638      	mov	r0, r7
 800aa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	6922      	ldr	r2, [r4, #16]
 800aa6e:	1a98      	subs	r0, r3, r2
 800aa70:	6963      	ldr	r3, [r4, #20]
 800aa72:	b2f6      	uxtb	r6, r6
 800aa74:	4283      	cmp	r3, r0
 800aa76:	4637      	mov	r7, r6
 800aa78:	dc05      	bgt.n	800aa86 <__swbuf_r+0x4e>
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f7ff fde9 	bl	800a654 <_fflush_r>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d1ed      	bne.n	800aa62 <__swbuf_r+0x2a>
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	60a3      	str	r3, [r4, #8]
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	701e      	strb	r6, [r3, #0]
 800aa94:	6962      	ldr	r2, [r4, #20]
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d004      	beq.n	800aaa6 <__swbuf_r+0x6e>
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	07db      	lsls	r3, r3, #31
 800aaa0:	d5e1      	bpl.n	800aa66 <__swbuf_r+0x2e>
 800aaa2:	2e0a      	cmp	r6, #10
 800aaa4:	d1df      	bne.n	800aa66 <__swbuf_r+0x2e>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f7ff fdd3 	bl	800a654 <_fflush_r>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d0d9      	beq.n	800aa66 <__swbuf_r+0x2e>
 800aab2:	e7d6      	b.n	800aa62 <__swbuf_r+0x2a>

0800aab4 <__swsetup_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4b29      	ldr	r3, [pc, #164]	@ (800ab5c <__swsetup_r+0xa8>)
 800aab8:	4605      	mov	r5, r0
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	460c      	mov	r4, r1
 800aabe:	b118      	cbz	r0, 800aac8 <__swsetup_r+0x14>
 800aac0:	6a03      	ldr	r3, [r0, #32]
 800aac2:	b90b      	cbnz	r3, 800aac8 <__swsetup_r+0x14>
 800aac4:	f7fe f97a 	bl	8008dbc <__sinit>
 800aac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aacc:	0719      	lsls	r1, r3, #28
 800aace:	d422      	bmi.n	800ab16 <__swsetup_r+0x62>
 800aad0:	06da      	lsls	r2, r3, #27
 800aad2:	d407      	bmi.n	800aae4 <__swsetup_r+0x30>
 800aad4:	2209      	movs	r2, #9
 800aad6:	602a      	str	r2, [r5, #0]
 800aad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	f04f 30ff 	mov.w	r0, #4294967295
 800aae2:	e033      	b.n	800ab4c <__swsetup_r+0x98>
 800aae4:	0758      	lsls	r0, r3, #29
 800aae6:	d512      	bpl.n	800ab0e <__swsetup_r+0x5a>
 800aae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaea:	b141      	cbz	r1, 800aafe <__swsetup_r+0x4a>
 800aaec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaf0:	4299      	cmp	r1, r3
 800aaf2:	d002      	beq.n	800aafa <__swsetup_r+0x46>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f7ff f8a7 	bl	8009c48 <_free_r>
 800aafa:	2300      	movs	r3, #0
 800aafc:	6363      	str	r3, [r4, #52]	@ 0x34
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	2300      	movs	r3, #0
 800ab08:	6063      	str	r3, [r4, #4]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f043 0308 	orr.w	r3, r3, #8
 800ab14:	81a3      	strh	r3, [r4, #12]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	b94b      	cbnz	r3, 800ab2e <__swsetup_r+0x7a>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab24:	d003      	beq.n	800ab2e <__swsetup_r+0x7a>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f000 f883 	bl	800ac34 <__smakebuf_r>
 800ab2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab32:	f013 0201 	ands.w	r2, r3, #1
 800ab36:	d00a      	beq.n	800ab4e <__swsetup_r+0x9a>
 800ab38:	2200      	movs	r2, #0
 800ab3a:	60a2      	str	r2, [r4, #8]
 800ab3c:	6962      	ldr	r2, [r4, #20]
 800ab3e:	4252      	negs	r2, r2
 800ab40:	61a2      	str	r2, [r4, #24]
 800ab42:	6922      	ldr	r2, [r4, #16]
 800ab44:	b942      	cbnz	r2, 800ab58 <__swsetup_r+0xa4>
 800ab46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab4a:	d1c5      	bne.n	800aad8 <__swsetup_r+0x24>
 800ab4c:	bd38      	pop	{r3, r4, r5, pc}
 800ab4e:	0799      	lsls	r1, r3, #30
 800ab50:	bf58      	it	pl
 800ab52:	6962      	ldrpl	r2, [r4, #20]
 800ab54:	60a2      	str	r2, [r4, #8]
 800ab56:	e7f4      	b.n	800ab42 <__swsetup_r+0x8e>
 800ab58:	2000      	movs	r0, #0
 800ab5a:	e7f7      	b.n	800ab4c <__swsetup_r+0x98>
 800ab5c:	20000018 	.word	0x20000018

0800ab60 <_raise_r>:
 800ab60:	291f      	cmp	r1, #31
 800ab62:	b538      	push	{r3, r4, r5, lr}
 800ab64:	4605      	mov	r5, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	d904      	bls.n	800ab74 <_raise_r+0x14>
 800ab6a:	2316      	movs	r3, #22
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab76:	b112      	cbz	r2, 800ab7e <_raise_r+0x1e>
 800ab78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab7c:	b94b      	cbnz	r3, 800ab92 <_raise_r+0x32>
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 f830 	bl	800abe4 <_getpid_r>
 800ab84:	4622      	mov	r2, r4
 800ab86:	4601      	mov	r1, r0
 800ab88:	4628      	mov	r0, r5
 800ab8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab8e:	f000 b817 	b.w	800abc0 <_kill_r>
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d00a      	beq.n	800abac <_raise_r+0x4c>
 800ab96:	1c59      	adds	r1, r3, #1
 800ab98:	d103      	bne.n	800aba2 <_raise_r+0x42>
 800ab9a:	2316      	movs	r3, #22
 800ab9c:	6003      	str	r3, [r0, #0]
 800ab9e:	2001      	movs	r0, #1
 800aba0:	e7e7      	b.n	800ab72 <_raise_r+0x12>
 800aba2:	2100      	movs	r1, #0
 800aba4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aba8:	4620      	mov	r0, r4
 800abaa:	4798      	blx	r3
 800abac:	2000      	movs	r0, #0
 800abae:	e7e0      	b.n	800ab72 <_raise_r+0x12>

0800abb0 <raise>:
 800abb0:	4b02      	ldr	r3, [pc, #8]	@ (800abbc <raise+0xc>)
 800abb2:	4601      	mov	r1, r0
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	f7ff bfd3 	b.w	800ab60 <_raise_r>
 800abba:	bf00      	nop
 800abbc:	20000018 	.word	0x20000018

0800abc0 <_kill_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d07      	ldr	r5, [pc, #28]	@ (800abe0 <_kill_r+0x20>)
 800abc4:	2300      	movs	r3, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	4611      	mov	r1, r2
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	f7f6 fee3 	bl	8001998 <_kill>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d102      	bne.n	800abdc <_kill_r+0x1c>
 800abd6:	682b      	ldr	r3, [r5, #0]
 800abd8:	b103      	cbz	r3, 800abdc <_kill_r+0x1c>
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	bf00      	nop
 800abe0:	20000548 	.word	0x20000548

0800abe4 <_getpid_r>:
 800abe4:	f7f6 bed0 	b.w	8001988 <_getpid>

0800abe8 <__swhatbuf_r>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	460c      	mov	r4, r1
 800abec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf0:	2900      	cmp	r1, #0
 800abf2:	b096      	sub	sp, #88	@ 0x58
 800abf4:	4615      	mov	r5, r2
 800abf6:	461e      	mov	r6, r3
 800abf8:	da0d      	bge.n	800ac16 <__swhatbuf_r+0x2e>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac00:	f04f 0100 	mov.w	r1, #0
 800ac04:	bf14      	ite	ne
 800ac06:	2340      	movne	r3, #64	@ 0x40
 800ac08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	6031      	str	r1, [r6, #0]
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	b016      	add	sp, #88	@ 0x58
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	466a      	mov	r2, sp
 800ac18:	f000 f848 	bl	800acac <_fstat_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	dbec      	blt.n	800abfa <__swhatbuf_r+0x12>
 800ac20:	9901      	ldr	r1, [sp, #4]
 800ac22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac2a:	4259      	negs	r1, r3
 800ac2c:	4159      	adcs	r1, r3
 800ac2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac32:	e7eb      	b.n	800ac0c <__swhatbuf_r+0x24>

0800ac34 <__smakebuf_r>:
 800ac34:	898b      	ldrh	r3, [r1, #12]
 800ac36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac38:	079d      	lsls	r5, r3, #30
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	d507      	bpl.n	800ac50 <__smakebuf_r+0x1c>
 800ac40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	2301      	movs	r3, #1
 800ac4a:	6163      	str	r3, [r4, #20]
 800ac4c:	b003      	add	sp, #12
 800ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac50:	ab01      	add	r3, sp, #4
 800ac52:	466a      	mov	r2, sp
 800ac54:	f7ff ffc8 	bl	800abe8 <__swhatbuf_r>
 800ac58:	9f00      	ldr	r7, [sp, #0]
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7ff f866 	bl	8009d30 <_malloc_r>
 800ac64:	b948      	cbnz	r0, 800ac7a <__smakebuf_r+0x46>
 800ac66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6a:	059a      	lsls	r2, r3, #22
 800ac6c:	d4ee      	bmi.n	800ac4c <__smakebuf_r+0x18>
 800ac6e:	f023 0303 	bic.w	r3, r3, #3
 800ac72:	f043 0302 	orr.w	r3, r3, #2
 800ac76:	81a3      	strh	r3, [r4, #12]
 800ac78:	e7e2      	b.n	800ac40 <__smakebuf_r+0xc>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	6020      	str	r0, [r4, #0]
 800ac7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac8a:	b15b      	cbz	r3, 800aca4 <__smakebuf_r+0x70>
 800ac8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac90:	4630      	mov	r0, r6
 800ac92:	f000 f81d 	bl	800acd0 <_isatty_r>
 800ac96:	b128      	cbz	r0, 800aca4 <__smakebuf_r+0x70>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	431d      	orrs	r5, r3
 800aca8:	81a5      	strh	r5, [r4, #12]
 800acaa:	e7cf      	b.n	800ac4c <__smakebuf_r+0x18>

0800acac <_fstat_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d07      	ldr	r5, [pc, #28]	@ (800accc <_fstat_r+0x20>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	4611      	mov	r1, r2
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	f7f6 fecd 	bl	8001a58 <_fstat>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	d102      	bne.n	800acc8 <_fstat_r+0x1c>
 800acc2:	682b      	ldr	r3, [r5, #0]
 800acc4:	b103      	cbz	r3, 800acc8 <_fstat_r+0x1c>
 800acc6:	6023      	str	r3, [r4, #0]
 800acc8:	bd38      	pop	{r3, r4, r5, pc}
 800acca:	bf00      	nop
 800accc:	20000548 	.word	0x20000548

0800acd0 <_isatty_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	@ (800acec <_isatty_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f6 fecc 	bl	8001a78 <_isatty>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_isatty_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_isatty_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000548 	.word	0x20000548

0800acf0 <_init>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr

0800acfc <_fini>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr
