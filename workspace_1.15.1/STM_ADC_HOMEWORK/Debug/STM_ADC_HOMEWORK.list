
STM_ADC_HOMEWORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009230  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080093c0  080093c0  0000a3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009778  08009778  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009780  08009780  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009784  08009784  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009788  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001d4  0800995c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800995c  0000b4cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bd0  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b23  00000000  00000000  00020dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000238f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa4  00000000  00000000  00024d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002995a  00000000  00000000  00025ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cfe  00000000  00000000  0004f5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107764  00000000  00000000  000662fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016da60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  0016daa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00174050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093a8 	.word	0x080093a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080093a8 	.word	0x080093a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <__io_putchar>:
/* USER CODE BEGIN 0 */

volatile uint32_t adc_value = 0;

int __io_putchar(int ch)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d102      	bne.n	8000eac <__io_putchar+0x14>
	{
		__io_putchar('\r');
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff fff6 	bl	8000e98 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1 , HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <__io_putchar+0x2c>)
 8000eb6:	f004 fd2b 	bl	8005910 <HAL_UART_Transmit>
	return 1;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002ec 	.word	0x200002ec

08000ec8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ed8:	d106      	bne.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f002 fce7 	bl	80038b4 <HAL_GPIO_TogglePin>
	} else if(htim->Instance == TIM3)
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	}
}
 8000ee6:	e009      	b.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if(htim->Instance == TIM3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d104      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000ef2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef6:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ef8:	f002 fcdc 	bl	80038b4 <HAL_GPIO_TogglePin>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40000400 	.word	0x40000400
 8000f08:	48000800 	.word	0x48000800

08000f0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a11      	ldr	r2, [pc, #68]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x54>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11c      	bne.n	8000f58 <HAL_ADC_ConvCpltCallback+0x4c>
		adc_value = HAL_ADC_GetValue(hadc);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f001 f9ba 	bl	8002298 <HAL_ADC_GetValue>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0f      	ldr	r2, [pc, #60]	@ (8000f64 <HAL_ADC_ConvCpltCallback+0x58>)
 8000f28:	6013      	str	r3, [r2, #0]
		uint32_t frequency = 100 + (adc_value * 4000 / 4096);
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_ADC_ConvCpltCallback+0x58>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	0b1b      	lsrs	r3, r3, #12
 8000f38:	3364      	adds	r3, #100	@ 0x64
 8000f3a:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim2, frequency);
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f44:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, frequency);
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0x60>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f52:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0x60>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	60d3      	str	r3, [r2, #12]
	}
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	50040000 	.word	0x50040000
 8000f64:	20000374 	.word	0x20000374
 8000f68:	20000254 	.word	0x20000254
 8000f6c:	200002a0 	.word	0x200002a0

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 fca7 	bl	80018c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f81c 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 f9b2 	bl	80012e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f80:	f000 f86a 	bl	8001058 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 f97e 	bl	8001284 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f88:	f000 f8de 	bl	8001148 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f8c:	f000 f92a 	bl	80011e4 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_IT(&hadc1);
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <main+0x38>)
 8000f92:	f001 f853 	bl	800203c <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <main+0x3c>)
 8000f98:	f004 f81e 	bl	8004fd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <main+0x40>)
 8000f9e:	f004 f81b 	bl	8004fd8 <HAL_TIM_Base_Start_IT>

  while (1)
 8000fa2:	bf00      	nop
 8000fa4:	e7fd      	b.n	8000fa2 <main+0x32>
 8000fa6:	bf00      	nop
 8000fa8:	200001f0 	.word	0x200001f0
 8000fac:	20000254 	.word	0x20000254
 8000fb0:	200002a0 	.word	0x200002a0

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b096      	sub	sp, #88	@ 0x58
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2244      	movs	r2, #68	@ 0x44
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 facd 	bl	8007562 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fda:	f002 fc93 	bl	8003904 <HAL_PWREx_ControlVoltageScaling>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe4:	f000 f9d6 	bl	8001394 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ff4:	2360      	movs	r3, #96	@ 0x60
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001004:	2328      	movs	r3, #40	@ 0x28
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001008:	2307      	movs	r3, #7
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fcc9 	bl	80039b0 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001024:	f000 f9b6 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2303      	movs	r3, #3
 800102e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f003 f891 	bl	8004168 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800104c:	f000 f9a2 	bl	8001394 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3758      	adds	r7, #88	@ 0x58
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_ADC1_Init+0xe4>)
 800107c:	4a30      	ldr	r2, [pc, #192]	@ (8001140 <MX_ADC1_Init+0xe8>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <MX_ADC1_Init+0xe4>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <MX_ADC1_Init+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_ADC1_Init+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001092:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <MX_ADC1_Init+0xe4>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_ADC1_Init+0xe4>)
 800109a:	2204      	movs	r2, #4
 800109c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800109e:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4817      	ldr	r0, [pc, #92]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010de:	f000 fe5d 	bl	8001d9c <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010e8:	f000 f954 	bl	8001394 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC1_Init+0xe4>)
 80010f8:	f001 ffda 	bl	80030b0 <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001102:	f000 f947 	bl	8001394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_ADC1_Init+0xec>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800110e:	2307      	movs	r3, #7
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0xe4>)
 8001124:	f001 faf4 	bl	8002710 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800112e:	f000 f931 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f0 	.word	0x200001f0
 8001140:	50040000 	.word	0x50040000
 8001144:	04300002 	.word	0x04300002

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001168:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001170:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001174:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_TIM2_Init+0x98>)
 800117e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001182:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_TIM2_Init+0x98>)
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001190:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001192:	f003 fec9 	bl	8004f28 <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 f8fa 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <MX_TIM2_Init+0x98>)
 80011ae:	f004 f88a 	bl	80052c6 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80011b8:	f000 f8ec 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_TIM2_Init+0x98>)
 80011ca:	f004 faad 	bl	8005728 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80011d4:	f000 f8de 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000254 	.word	0x20000254

080011e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_TIM3_Init+0x98>)
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <MX_TIM3_Init+0x9c>)
 8001206:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001208:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <MX_TIM3_Init+0x98>)
 800120a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800120e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_TIM3_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_TIM3_Init+0x98>)
 8001218:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800121c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_TIM3_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_TIM3_Init+0x98>)
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <MX_TIM3_Init+0x98>)
 800122c:	f003 fe7c 	bl	8004f28 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001236:	f000 f8ad 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_TIM3_Init+0x98>)
 8001248:	f004 f83d 	bl	80052c6 <HAL_TIM_ConfigClockSource>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001252:	f000 f89f 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_TIM3_Init+0x98>)
 8001264:	f004 fa60 	bl	8005728 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800126e:	f000 f891 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002a0 	.word	0x200002a0
 8001280:	40000400 	.word	0x40000400

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <MX_USART2_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012c8:	f004 fad4 	bl	8005874 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f85f 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002ec 	.word	0x200002ec
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <MX_GPIO_Init+0xa8>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <MX_GPIO_Init+0xa8>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_GPIO_Init+0xa8>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_GPIO_Init+0xa8>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <MX_GPIO_Init+0xa8>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_GPIO_Init+0xa8>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <MX_GPIO_Init+0xac>)
 8001332:	f002 faa7 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f002 faa0 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <MX_GPIO_Init+0xac>)
 800135e:	f002 f8e7 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137e:	f002 f8d7 	bl	8003530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	48000800 	.word	0x48000800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_MspInit+0x44>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013aa:	4a0e      	ldr	r2, [pc, #56]	@ (80013e4 <HAL_MspInit+0x44>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ac      	sub	sp, #176	@ 0xb0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2288      	movs	r2, #136	@ 0x88
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f006 f8aa 	bl	8007562 <memset>
  if(hadc->Instance==ADC1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a2b      	ldr	r2, [pc, #172]	@ (80014c0 <HAL_ADC_MspInit+0xd8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d14e      	bne.n	80014b6 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001418:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800141c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800141e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001426:	2301      	movs	r3, #1
 8001428:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800142e:	2310      	movs	r3, #16
 8001430:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001432:	2307      	movs	r3, #7
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800143e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f8b1 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001454:	f7ff ff9e 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_ADC_MspInit+0xdc>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a19      	ldr	r2, [pc, #100]	@ (80014c4 <HAL_ADC_MspInit+0xdc>)
 800145e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_ADC_MspInit+0xdc>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_ADC_MspInit+0xdc>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <HAL_ADC_MspInit+0xdc>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_ADC_MspInit+0xdc>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800148e:	230b      	movs	r3, #11
 8001490:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800149e:	4619      	mov	r1, r3
 80014a0:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <HAL_ADC_MspInit+0xe0>)
 80014a2:	f002 f845 	bl	8003530 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2103      	movs	r1, #3
 80014aa:	2012      	movs	r0, #18
 80014ac:	f001 ff8b 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014b0:	2012      	movs	r0, #18
 80014b2:	f001 ffa4 	bl	80033fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014b6:	bf00      	nop
 80014b8:	37b0      	adds	r7, #176	@ 0xb0
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	50040000 	.word	0x50040000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000800 	.word	0x48000800

080014cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014dc:	d114      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_TIM_Base_MspInit+0x78>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <HAL_TIM_Base_MspInit+0x78>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_TIM_Base_MspInit+0x78>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2107      	movs	r1, #7
 80014fa:	201c      	movs	r0, #28
 80014fc:	f001 ff63 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001500:	201c      	movs	r0, #28
 8001502:	f001 ff7c 	bl	80033fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001506:	e018      	b.n	800153a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_TIM_Base_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d113      	bne.n	800153a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_TIM_Base_MspInit+0x78>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_TIM_Base_MspInit+0x78>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_TIM_Base_MspInit+0x78>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2107      	movs	r1, #7
 800152e:	201d      	movs	r0, #29
 8001530:	f001 ff49 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001534:	201d      	movs	r0, #29
 8001536:	f001 ff62 	bl	80033fe <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40000400 	.word	0x40000400

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ac      	sub	sp, #176	@ 0xb0
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2288      	movs	r2, #136	@ 0x88
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f005 fff8 	bl	8007562 <memset>
  if(huart->Instance==USART2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a25      	ldr	r2, [pc, #148]	@ (800160c <HAL_UART_MspInit+0xc0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d143      	bne.n	8001604 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f811 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001594:	f7ff fefe 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001598:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <HAL_UART_MspInit+0xc4>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <HAL_UART_MspInit+0xc4>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <HAL_UART_MspInit+0xc4>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_UART_MspInit+0xc4>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_UART_MspInit+0xc4>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_UART_MspInit+0xc4>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c8:	230c      	movs	r3, #12
 80015ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e0:	2307      	movs	r3, #7
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f001 ff9e 	bl	8003530 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	210a      	movs	r1, #10
 80015f8:	2026      	movs	r0, #38	@ 0x26
 80015fa:	f001 fee4 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015fe:	2026      	movs	r0, #38	@ 0x26
 8001600:	f001 fefd 	bl	80033fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001604:	bf00      	nop
 8001606:	37b0      	adds	r7, #176	@ 0xb0
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40004400 	.word	0x40004400
 8001610:	40021000 	.word	0x40021000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <NMI_Handler+0x4>

0800161c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <MemManage_Handler+0x4>

0800162c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <UsageFault_Handler+0x4>

0800163c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f000 f981 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <ADC1_2_IRQHandler+0x10>)
 800167a:	f000 fe1b 	bl	80022b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001f0 	.word	0x200001f0

08001688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <TIM2_IRQHandler+0x10>)
 800168e:	f003 fd13 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000254 	.word	0x20000254

0800169c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <TIM3_IRQHandler+0x10>)
 80016a2:	f003 fd09 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002a0 	.word	0x200002a0

080016b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <USART2_IRQHandler+0x10>)
 80016b6:	f004 f9b5 	bl	8005a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002ec 	.word	0x200002ec

080016c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_kill>:

int _kill(int pid, int sig)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016de:	f005 ff93 	bl	8007608 <__errno>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2216      	movs	r2, #22
 80016e6:	601a      	str	r2, [r3, #0]
  return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_exit>:

void _exit (int status)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ffe7 	bl	80016d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001706:	bf00      	nop
 8001708:	e7fd      	b.n	8001706 <_exit+0x12>

0800170a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e00a      	b.n	8001732 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800171c:	f3af 8000 	nop.w
 8001720:	4601      	mov	r1, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	60ba      	str	r2, [r7, #8]
 8001728:	b2ca      	uxtb	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	dbf0      	blt.n	800171c <_read+0x12>
  }

  return len;
 800173a:	687b      	ldr	r3, [r7, #4]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e009      	b.n	800176a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	60ba      	str	r2, [r7, #8]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fb9a 	bl	8000e98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf1      	blt.n	8001756 <_write+0x12>
  }
  return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_close>:

int _close(int file)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a4:	605a      	str	r2, [r3, #4]
  return 0;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_isatty>:

int _isatty(int file)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f005 fef8 	bl	8007608 <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20018000 	.word	0x20018000
 8001844:	00000400 	.word	0x00000400
 8001848:	20000378 	.word	0x20000378
 800184c:	200004d0 	.word	0x200004d0

08001850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff ffea 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	@ (80018b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	@ (80018c0 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f005 feb7 	bl	8007614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a6:	f7ff fb63 	bl	8000f70 <main>

080018aa <LoopForever>:

LoopForever:
    b LoopForever
 80018aa:	e7fe      	b.n	80018aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018b8:	08009788 	.word	0x08009788
  ldr r2, =_sbss
 80018bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018c0:	200004cc 	.word	0x200004cc

080018c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC3_IRQHandler>

080018c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 fd6d 	bl	80033b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f80e 	bl	80018f8 <HAL_InitTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e001      	b.n	80018ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e8:	f7ff fd5a 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_InitTick+0x70>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_InitTick+0x6c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fd79 	bl	800341a <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d809      	bhi.n	8001948 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f001 fd43 	bl	80033c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_InitTick+0x74>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e007      	b.n	8001958 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e004      	b.n	8001958 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e001      	b.n	8001958 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008
 8001994:	2000037c 	.word	0x2000037c

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000037c 	.word	0x2000037c

080019b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3360      	adds	r3, #96	@ 0x60
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <LL_ADC_SetOffset+0x44>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	03fff000 	.word	0x03fff000

08001a60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3360      	adds	r3, #96	@ 0x60
 8001a6e:	461a      	mov	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3360      	adds	r3, #96	@ 0x60
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3330      	adds	r3, #48	@ 0x30
 8001af8:	461a      	mov	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	211f      	movs	r1, #31
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	f003 011f 	and.w	r1, r3, #31
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b087      	sub	sp, #28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3314      	adds	r3, #20
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	0e5b      	lsrs	r3, r3, #25
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0d1b      	lsrs	r3, r3, #20
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2107      	movs	r1, #7
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	0d1b      	lsrs	r3, r3, #20
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0318 	and.w	r3, r3, #24
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001be0:	40d9      	lsrs	r1, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	400b      	ands	r3, r1
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	431a      	orrs	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	0007ffff 	.word	0x0007ffff

08001c04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 031f 	and.w	r3, r3, #31
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6093      	str	r3, [r2, #8]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ce8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <LL_ADC_IsEnabled+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <LL_ADC_IsEnabled+0x1a>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d3a:	f043 0204 	orr.w	r2, r3, #4
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d101      	bne.n	8001d8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e130      	b.n	8002018 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fb0f 	bl	80013e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff3f 	bl	8001c60 <LL_ADC_IsDeepPowerDownEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff25 	bl	8001c3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff5a 	bl	8001cb0 <LL_ADC_IsInternalRegulatorEnabled>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff3e 	bl	8001c88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e0c:	4b84      	ldr	r3, [pc, #528]	@ (8002020 <HAL_ADC_Init+0x284>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	4a84      	ldr	r2, [pc, #528]	@ (8002024 <HAL_ADC_Init+0x288>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e20:	e002      	b.n	8001e28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f9      	bne.n	8001e22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff3c 	bl	8001cb0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff75 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 8001e64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 80c9 	bne.w	8002006 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 80c5 	bne.w	8002006 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e84:	f043 0202 	orr.w	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff35 	bl	8001d00 <LL_ADC_IsEnabled>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d115      	bne.n	8001ec8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e9c:	4862      	ldr	r0, [pc, #392]	@ (8002028 <HAL_ADC_Init+0x28c>)
 8001e9e:	f7ff ff2f 	bl	8001d00 <LL_ADC_IsEnabled>
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	4861      	ldr	r0, [pc, #388]	@ (800202c <HAL_ADC_Init+0x290>)
 8001ea6:	f7ff ff2b 	bl	8001d00 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	431c      	orrs	r4, r3
 8001eae:	4860      	ldr	r0, [pc, #384]	@ (8002030 <HAL_ADC_Init+0x294>)
 8001eb0:	f7ff ff26 	bl	8001d00 <LL_ADC_IsEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	485c      	ldr	r0, [pc, #368]	@ (8002034 <HAL_ADC_Init+0x298>)
 8001ec4:	f7ff fd74 	bl	80019b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e5b      	ldrb	r3, [r3, #25]
 8001ecc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ed8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ede:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d106      	bne.n	8001f04 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	3b01      	subs	r3, #1
 8001efc:	045b      	lsls	r3, r3, #17
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4b44      	ldr	r3, [pc, #272]	@ (8002038 <HAL_ADC_Init+0x29c>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff1b 	bl	8001d74 <LL_ADC_INJ_IsConversionOngoing>
 8001f3e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d13d      	bne.n	8001fc2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d13a      	bne.n	8001fc2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f50:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f58:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f68:	f023 0302 	bic.w	r3, r3, #2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	430b      	orrs	r3, r1
 8001f74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d118      	bne.n	8001fb2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	611a      	str	r2, [r3, #16]
 8001fb0:	e007      	b.n	8001fc2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	f023 010f 	bic.w	r1, r3, #15
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fe2:	e007      	b.n	8001ff4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 020f 	bic.w	r2, r2, #15
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54
 8002004:	e007      	b.n	8002016 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f043 0210 	orr.w	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002016:	7ffb      	ldrb	r3, [r7, #31]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3724      	adds	r7, #36	@ 0x24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	20000000 	.word	0x20000000
 8002024:	053e2d63 	.word	0x053e2d63
 8002028:	50040000 	.word	0x50040000
 800202c:	50040100 	.word	0x50040100
 8002030:	50040200 	.word	0x50040200
 8002034:	50040300 	.word	0x50040300
 8002038:	fff0c007 	.word	0xfff0c007

0800203c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002044:	4891      	ldr	r0, [pc, #580]	@ (800228c <HAL_ADC_Start_IT+0x250>)
 8002046:	f7ff fddd 	bl	8001c04 <LL_ADC_GetMultimode>
 800204a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fe7c 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8110 	bne.w	800227e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_Start_IT+0x30>
 8002068:	2302      	movs	r3, #2
 800206a:	e10b      	b.n	8002284 <HAL_ADC_Start_IT+0x248>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 ff3d 	bl	8002ef4 <ADC_Enable>
 800207a:	4603      	mov	r3, r0
 800207c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80f7 	bne.w	8002274 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7c      	ldr	r2, [pc, #496]	@ (8002290 <HAL_ADC_Start_IT+0x254>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_Start_IT+0x6e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e000      	b.n	80020ac <HAL_ADC_Start_IT+0x70>
 80020aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002294 <HAL_ADC_Start_IT+0x258>)
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f023 0206 	bic.w	r2, r3, #6
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80020de:	e002      	b.n	80020e6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	221c      	movs	r2, #28
 80020ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 021c 	bic.w	r2, r2, #28
 8002104:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d108      	bne.n	8002120 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0208 	orr.w	r2, r2, #8
 800211c:	605a      	str	r2, [r3, #4]
          break;
 800211e:	e008      	b.n	8002132 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0204 	orr.w	r2, r2, #4
 800212e:	605a      	str	r2, [r3, #4]
          break;
 8002130:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0210 	orr.w	r2, r2, #16
 8002148:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a50      	ldr	r2, [pc, #320]	@ (8002290 <HAL_ADC_Start_IT+0x254>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d002      	beq.n	800215a <HAL_ADC_Start_IT+0x11e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e000      	b.n	800215c <HAL_ADC_Start_IT+0x120>
 800215a:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <HAL_ADC_Start_IT+0x258>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	4293      	cmp	r3, r2
 8002162:	d008      	beq.n	8002176 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d002      	beq.n	8002176 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b09      	cmp	r3, #9
 8002174:	d13a      	bne.n	80021ec <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02d      	beq.n	80021e0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800218c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d110      	bne.n	80021be <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0220 	bic.w	r2, r2, #32
 80021aa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ba:	605a      	str	r2, [r3, #4]
              break;
 80021bc:	e010      	b.n	80021e0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0220 	orr.w	r2, r2, #32
 80021dc:	605a      	str	r2, [r3, #4]
              break;
 80021de:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fd9e 	bl	8001d26 <LL_ADC_REG_StartConversion>
 80021ea:	e04a      	b.n	8002282 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <HAL_ADC_Start_IT+0x254>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d002      	beq.n	8002208 <HAL_ADC_Start_IT+0x1cc>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	e000      	b.n	800220a <HAL_ADC_Start_IT+0x1ce>
 8002208:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <HAL_ADC_Start_IT+0x258>)
 800220a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d034      	beq.n	8002282 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002220:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d110      	bne.n	8002252 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0220 	bic.w	r2, r2, #32
 800223e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800224e:	605a      	str	r2, [r3, #4]
              break;
 8002250:	e017      	b.n	8002282 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002260:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0220 	orr.w	r2, r2, #32
 8002270:	605a      	str	r2, [r3, #4]
              break;
 8002272:	e006      	b.n	8002282 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800227c:	e001      	b.n	8002282 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	50040300 	.word	0x50040300
 8002290:	50040100 	.word	0x50040100
 8002294:	50040000 	.word	0x50040000

08002298 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d0:	4882      	ldr	r0, [pc, #520]	@ (80024dc <HAL_ADC_IRQHandler+0x228>)
 80022d2:	f7ff fc97 	bl	8001c04 <LL_ADC_GetMultimode>
 80022d6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d017      	beq.n	8002312 <HAL_ADC_IRQHandler+0x5e>
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d012      	beq.n	8002312 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fec9 	bl	800309c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_IRQHandler+0x72>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8083 	beq.w	8002438 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d07d      	beq.n	8002438 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fbb2 	bl	8001ac2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d062      	beq.n	800242a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5d      	ldr	r2, [pc, #372]	@ (80024e0 <HAL_ADC_IRQHandler+0x22c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d002      	beq.n	8002374 <HAL_ADC_IRQHandler+0xc0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e000      	b.n	8002376 <HAL_ADC_IRQHandler+0xc2>
 8002374:	4b5b      	ldr	r3, [pc, #364]	@ (80024e4 <HAL_ADC_IRQHandler+0x230>)
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	4293      	cmp	r3, r2
 800237c:	d008      	beq.n	8002390 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d002      	beq.n	8002390 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d104      	bne.n	800239a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	e00c      	b.n	80023b4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a50      	ldr	r2, [pc, #320]	@ (80024e0 <HAL_ADC_IRQHandler+0x22c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_IRQHandler+0xf6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e000      	b.n	80023ac <HAL_ADC_IRQHandler+0xf8>
 80023aa:	4b4e      	ldr	r3, [pc, #312]	@ (80024e4 <HAL_ADC_IRQHandler+0x230>)
 80023ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d135      	bne.n	800242a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d12e      	bne.n	800242a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fcbc 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11a      	bne.n	8002412 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020c 	bic.w	r2, r2, #12
 80023ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d112      	bne.n	800242a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002410:	e00b      	b.n	800242a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	f043 0210 	orr.w	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fd6e 	bl	8000f0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	220c      	movs	r2, #12
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_ADC_IRQHandler+0x198>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 809f 	beq.w	8002596 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8099 	beq.w	8002596 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fb5d 	bl	8001b40 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002486:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb18 	bl	8001ac2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002492:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a11      	ldr	r2, [pc, #68]	@ (80024e0 <HAL_ADC_IRQHandler+0x22c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d002      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x1f0>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e000      	b.n	80024a6 <HAL_ADC_IRQHandler+0x1f2>
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <HAL_ADC_IRQHandler+0x230>)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d008      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d002      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b07      	cmp	r3, #7
 80024be:	d104      	bne.n	80024ca <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	e013      	b.n	80024f2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a04      	ldr	r2, [pc, #16]	@ (80024e0 <HAL_ADC_IRQHandler+0x22c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x234>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	e007      	b.n	80024ea <HAL_ADC_IRQHandler+0x236>
 80024da:	bf00      	nop
 80024dc:	50040300 	.word	0x50040300
 80024e0:	50040100 	.word	0x50040100
 80024e4:	50040000 	.word	0x50040000
 80024e8:	4b7d      	ldr	r3, [pc, #500]	@ (80026e0 <HAL_ADC_IRQHandler+0x42c>)
 80024ea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d047      	beq.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_ADC_IRQHandler+0x25e>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d03f      	beq.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d13a      	bne.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251c:	2b40      	cmp	r3, #64	@ 0x40
 800251e:	d133      	bne.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d12e      	bne.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fc20 	bl	8001d74 <LL_ADC_INJ_IsConversionOngoing>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11a      	bne.n	8002570 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002548:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	@ 0x54
 800256e:	e00b      	b.n	8002588 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	f043 0210 	orr.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fd5f 	bl	800304c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2260      	movs	r2, #96	@ 0x60
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d011      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x310>
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f896 	bl	80026e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2280      	movs	r2, #128	@ 0x80
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d012      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x340>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fd45 	bl	8003074 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <HAL_ADC_IRQHandler+0x370>
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fd37 	bl	8003088 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d036      	beq.n	800269c <HAL_ADC_IRQHandler+0x3e8>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d031      	beq.n	800269c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002640:	2301      	movs	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
 8002644:	e014      	b.n	8002670 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800264c:	4825      	ldr	r0, [pc, #148]	@ (80026e4 <HAL_ADC_IRQHandler+0x430>)
 800264e:	f7ff fae7 	bl	8001c20 <LL_ADC_GetMultiDMATransfer>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002658:	2301      	movs	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
 800265c:	e008      	b.n	8002670 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10e      	bne.n	8002694 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f834 	bl	80026fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2210      	movs	r2, #16
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x424>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	f043 0208 	orr.w	r2, r3, #8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fcc4 	bl	8003060 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	@ 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	50040000 	.word	0x50040000
 80026e4:	50040300 	.word	0x50040300

080026e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0b6      	sub	sp, #216	@ 0xd8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x22>
 800272e:	2302      	movs	r3, #2
 8002730:	e3c9      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x7b6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fb05 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 83aa 	bne.w	8002ea0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d824      	bhi.n	80027a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	3b02      	subs	r3, #2
 8002762:	2b03      	cmp	r3, #3
 8002764:	d81b      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x8e>
 8002766:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <HAL_ADC_ConfigChannel+0x5c>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	0800277d 	.word	0x0800277d
 8002770:	08002785 	.word	0x08002785
 8002774:	0800278d 	.word	0x0800278d
 8002778:	08002795 	.word	0x08002795
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800277c:	230c      	movs	r3, #12
 800277e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002782:	e010      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002784:	2312      	movs	r3, #18
 8002786:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800278a:	e00c      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800278c:	2318      	movs	r3, #24
 800278e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002792:	e008      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800279e:	2306      	movs	r3, #6
 80027a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80027b4:	f7ff f998 	bl	8001ae8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fac6 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 80027c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fad2 	bl	8001d74 <LL_ADC_INJ_IsConversionOngoing>
 80027d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 81a4 	bne.w	8002b26 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 819f 	bne.w	8002b26 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f7ff f9b6 	bl	8001b66 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d00a      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6919      	ldr	r1, [r3, #16]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800282c:	f7ff f8f4 	bl	8001a18 <LL_ADC_SetOffset>
 8002830:	e179      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f911 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x14e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f906 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	e01e      	b.n	800289c <HAL_ADC_ConfigChannel+0x18c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f8fb 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800287c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002880:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e004      	b.n	800289a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002890:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1a4>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	e018      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1d6>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80028c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80028d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f8ca 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f8ae 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x214>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f8a3 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	e01e      	b.n	8002962 <HAL_ADC_ConfigChannel+0x252>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f898 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002942:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800294a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e004      	b.n	8002960 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x26a>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	e018      	b.n	80029ac <HAL_ADC_ConfigChannel+0x29c>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800298e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002992:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002996:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f867 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f84b 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x2da>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f840 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	e01e      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x318>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2102      	movs	r1, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f835 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e004      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x330>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	e014      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x35a>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e004      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d106      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2102      	movs	r1, #2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f808 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2103      	movs	r1, #3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe ffec 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x398>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe ffe1 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	e017      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x3c8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ffd6 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002aca:	2320      	movs	r3, #32
 8002acc:	e003      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x3e0>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	e011      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x404>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b00:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e003      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2103      	movs	r1, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ffb3 	bl	8001a8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f8e8 	bl	8001d00 <LL_ADC_IsEnabled>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 8140 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f7ff f839 	bl	8001bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a8f      	ldr	r2, [pc, #572]	@ (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	f040 8131 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x46e>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2b09      	cmp	r3, #9
 8002b74:	bf94      	ite	ls
 8002b76:	2301      	movls	r3, #1
 8002b78:	2300      	movhi	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e019      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x4a2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	bf94      	ite	ls
 8002bac:	2301      	movls	r3, #1
 8002bae:	2300      	movhi	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d079      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d107      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x4c2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	3301      	adds	r3, #1
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd0:	e015      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x4ee>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	069b      	lsls	r3, r3, #26
 8002bfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x50e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	e017      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x53e>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e003      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x564>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	3301      	adds	r3, #1
 8002c66:	f003 021f 	and.w	r2, r3, #31
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	051b      	lsls	r3, r3, #20
 8002c72:	e018      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x596>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	e081      	b.n	8002dae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x5b6>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	069b      	lsls	r3, r3, #26
 8002cc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cc4:	e015      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x5e2>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e003      	b.n	8002cea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x602>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	3301      	adds	r3, #1
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	e017      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x632>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e003      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	ea42 0103 	orr.w	r1, r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x65e>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 021f 	and.w	r2, r3, #31
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	3b1e      	subs	r3, #30
 8002d66:	051b      	lsls	r3, r3, #20
 8002d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d6c:	e01e      	b.n	8002dac <HAL_ADC_ConfigChannel+0x69c>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
  return result;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d86:	2320      	movs	r3, #32
 8002d88:	e006      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x688>
 8002d8a:	bf00      	nop
 8002d8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f003 021f 	and.w	r2, r3, #31
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	3b1e      	subs	r3, #30
 8002da6:	051b      	lsls	r3, r3, #20
 8002da8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7fe fed7 	bl	8001b66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b44      	ldr	r3, [pc, #272]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d07a      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc4:	4843      	ldr	r0, [pc, #268]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dc6:	f7fe fe19 	bl	80019fc <LL_ADC_GetCommonPathInternalCh>
 8002dca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a41      	ldr	r2, [pc, #260]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d12c      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d126      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a3c      	ldr	r2, [pc, #240]	@ (8002edc <HAL_ADC_ConfigChannel+0x7cc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x6e8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d15d      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e00:	4619      	mov	r1, r3
 8002e02:	4834      	ldr	r0, [pc, #208]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e04:	f7fe fde7 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	4a36      	ldr	r2, [pc, #216]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e22:	e002      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e30:	e040      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_ADC_ConfigChannel+0x7dc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d118      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d112      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <HAL_ADC_ConfigChannel+0x7cc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x74c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a22      	ldr	r2, [pc, #136]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d12d      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e64:	4619      	mov	r1, r3
 8002e66:	481b      	ldr	r0, [pc, #108]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e68:	f7fe fdb5 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6c:	e024      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d120      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11a      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <HAL_ADC_ConfigChannel+0x7cc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d115      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e96:	4619      	mov	r1, r3
 8002e98:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e9a:	f7fe fd9c 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
 8002e9e:	e00c      	b.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002eb2:	e002      	b.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ec2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	37d8      	adds	r7, #216	@ 0xd8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	80080000 	.word	0x80080000
 8002ed4:	50040300 	.word	0x50040300
 8002ed8:	c7520000 	.word	0xc7520000
 8002edc:	50040000 	.word	0x50040000
 8002ee0:	50040200 	.word	0x50040200
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	053e2d63 	.word	0x053e2d63
 8002eec:	cb840000 	.word	0xcb840000
 8002ef0:	80000001 	.word	0x80000001

08002ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fefb 	bl	8001d00 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d169      	bne.n	8002fe4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <ADC_Enable+0xfc>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e055      	b.n	8002fe6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe feca 	bl	8001cd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f44:	482b      	ldr	r0, [pc, #172]	@ (8002ff4 <ADC_Enable+0x100>)
 8002f46:	f7fe fd59 	bl	80019fc <LL_ADC_GetCommonPathInternalCh>
 8002f4a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f54:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <ADC_Enable+0x104>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	4a28      	ldr	r2, [pc, #160]	@ (8002ffc <ADC_Enable+0x108>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f6e:	e002      	b.n	8002f76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fd0c 	bl	8001998 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f82:	e028      	b.n	8002fd6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe feb9 	bl	8001d00 <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe fe9d 	bl	8001cd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f9e:	f7fe fcfb 	bl	8001998 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d914      	bls.n	8002fd6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d00d      	beq.n	8002fd6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e007      	b.n	8002fe6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d1cf      	bne.n	8002f84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	8000003f 	.word	0x8000003f
 8002ff4:	50040300 	.word	0x50040300
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	053e2d63 	.word	0x053e2d63

08003000 <LL_ADC_IsEnabled>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <LL_ADC_IsEnabled+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_IsEnabled+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_REG_IsConversionOngoing>:
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d101      	bne.n	800303e <LL_ADC_REG_IsConversionOngoing+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b09f      	sub	sp, #124	@ 0x7c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e093      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030d6:	2300      	movs	r3, #0
 80030d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030da:	2300      	movs	r3, #0
 80030dc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a47      	ldr	r2, [pc, #284]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d102      	bne.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030e8:	4b46      	ldr	r3, [pc, #280]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	e001      	b.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e072      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff87 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003118:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff81 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d154      	bne.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800312a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800312c:	2b00      	cmp	r3, #0
 800312e:	d151      	bne.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003130:	4b35      	ldr	r3, [pc, #212]	@ (8003208 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003132:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02c      	beq.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800313c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800314e:	035b      	lsls	r3, r3, #13
 8003150:	430b      	orrs	r3, r1
 8003152:	431a      	orrs	r2, r3
 8003154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003156:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003158:	4829      	ldr	r0, [pc, #164]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800315a:	f7ff ff51 	bl	8003000 <LL_ADC_IsEnabled>
 800315e:	4604      	mov	r4, r0
 8003160:	4828      	ldr	r0, [pc, #160]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003162:	f7ff ff4d 	bl	8003000 <LL_ADC_IsEnabled>
 8003166:	4603      	mov	r3, r0
 8003168:	431c      	orrs	r4, r3
 800316a:	4828      	ldr	r0, [pc, #160]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800316c:	f7ff ff48 	bl	8003000 <LL_ADC_IsEnabled>
 8003170:	4603      	mov	r3, r0
 8003172:	4323      	orrs	r3, r4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d137      	bne.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003180:	f023 030f 	bic.w	r3, r3, #15
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	6811      	ldr	r1, [r2, #0]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	430a      	orrs	r2, r1
 800318e:	431a      	orrs	r2, r3
 8003190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003192:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003194:	e028      	b.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800319e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a2:	4817      	ldr	r0, [pc, #92]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031a4:	f7ff ff2c 	bl	8003000 <LL_ADC_IsEnabled>
 80031a8:	4604      	mov	r4, r0
 80031aa:	4816      	ldr	r0, [pc, #88]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031ac:	f7ff ff28 	bl	8003000 <LL_ADC_IsEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	431c      	orrs	r4, r3
 80031b4:	4815      	ldr	r0, [pc, #84]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031b6:	f7ff ff23 	bl	8003000 <LL_ADC_IsEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4323      	orrs	r3, r4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d112      	bne.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031ca:	f023 030f 	bic.w	r3, r3, #15
 80031ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d2:	e009      	b.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031e6:	e000      	b.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031f2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	377c      	adds	r7, #124	@ 0x7c
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	bf00      	nop
 8003200:	50040000 	.word	0x50040000
 8003204:	50040100 	.word	0x50040100
 8003208:	50040300 	.word	0x50040300
 800320c:	50040200 	.word	0x50040200

08003210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	@ (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	@ (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	@ (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	@ 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800337c:	d301      	bcc.n	8003382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337e:	2301      	movs	r3, #1
 8003380:	e00f      	b.n	80033a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <SysTick_Config+0x40>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338a:	210f      	movs	r1, #15
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f7ff ff8e 	bl	80032b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <SysTick_Config+0x40>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339a:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <SysTick_Config+0x40>)
 800339c:	2207      	movs	r2, #7
 800339e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff29 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d8:	f7ff ff3e 	bl	8003258 <__NVIC_GetPriorityGrouping>
 80033dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff ff8e 	bl	8003304 <NVIC_EncodePriority>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff5d 	bl	80032b0 <__NVIC_SetPriority>
}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff31 	bl	8003274 <__NVIC_EnableIRQ>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ffa2 	bl	800336c <SysTick_Config>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d008      	beq.n	800345c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2204      	movs	r2, #4
 800344e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e022      	b.n	80034a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	f003 021c 	and.w	r2, r3, #28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f202 	lsl.w	r2, r1, r2
 800348e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d005      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e029      	b.n	8003526 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 020e 	bic.w	r2, r2, #14
 80034e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f003 021c 	and.w	r2, r3, #28
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2101      	movs	r1, #1
 8003500:	fa01 f202 	lsl.w	r2, r1, r2
 8003504:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
    }
  }
  return status;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	e17f      	b.n	8003840 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8171 	beq.w	800383a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d005      	beq.n	8003570 <HAL_GPIO_Init+0x40>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d130      	bne.n	80035d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035a6:	2201      	movs	r2, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 0201 	and.w	r2, r3, #1
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d118      	bne.n	8003610 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035e4:	2201      	movs	r2, #1
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	f003 0201 	and.w	r2, r3, #1
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b03      	cmp	r3, #3
 800361a:	d017      	beq.n	800364c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d123      	bne.n	80036a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	08da      	lsrs	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3208      	adds	r2, #8
 8003660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	220f      	movs	r2, #15
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	08da      	lsrs	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3208      	adds	r2, #8
 800369a:	6939      	ldr	r1, [r7, #16]
 800369c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0203 	and.w	r2, r3, #3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80ac 	beq.w	800383a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003860 <HAL_GPIO_Init+0x330>)
 80036e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003860 <HAL_GPIO_Init+0x330>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003860 <HAL_GPIO_Init+0x330>)
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003864 <HAL_GPIO_Init+0x334>)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	3302      	adds	r3, #2
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003724:	d025      	beq.n	8003772 <HAL_GPIO_Init+0x242>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4f      	ldr	r2, [pc, #316]	@ (8003868 <HAL_GPIO_Init+0x338>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01f      	beq.n	800376e <HAL_GPIO_Init+0x23e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4e      	ldr	r2, [pc, #312]	@ (800386c <HAL_GPIO_Init+0x33c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d019      	beq.n	800376a <HAL_GPIO_Init+0x23a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4d      	ldr	r2, [pc, #308]	@ (8003870 <HAL_GPIO_Init+0x340>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_GPIO_Init+0x236>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4c      	ldr	r2, [pc, #304]	@ (8003874 <HAL_GPIO_Init+0x344>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_GPIO_Init+0x232>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4b      	ldr	r2, [pc, #300]	@ (8003878 <HAL_GPIO_Init+0x348>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x22e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4a      	ldr	r2, [pc, #296]	@ (800387c <HAL_GPIO_Init+0x34c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_GPIO_Init+0x22a>
 8003756:	2306      	movs	r3, #6
 8003758:	e00c      	b.n	8003774 <HAL_GPIO_Init+0x244>
 800375a:	2307      	movs	r3, #7
 800375c:	e00a      	b.n	8003774 <HAL_GPIO_Init+0x244>
 800375e:	2305      	movs	r3, #5
 8003760:	e008      	b.n	8003774 <HAL_GPIO_Init+0x244>
 8003762:	2304      	movs	r3, #4
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x244>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_Init+0x244>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_Init+0x244>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_Init+0x244>
 8003772:	2300      	movs	r3, #0
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	f002 0203 	and.w	r2, r2, #3
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4093      	lsls	r3, r2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003784:	4937      	ldr	r1, [pc, #220]	@ (8003864 <HAL_GPIO_Init+0x334>)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_GPIO_Init+0x350>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037b6:	4a32      	ldr	r2, [pc, #200]	@ (8003880 <HAL_GPIO_Init+0x350>)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037bc:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <HAL_GPIO_Init+0x350>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037e0:	4a27      	ldr	r2, [pc, #156]	@ (8003880 <HAL_GPIO_Init+0x350>)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <HAL_GPIO_Init+0x350>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800380a:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <HAL_GPIO_Init+0x350>)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003810:	4b1b      	ldr	r3, [pc, #108]	@ (8003880 <HAL_GPIO_Init+0x350>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003834:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <HAL_GPIO_Init+0x350>)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	f47f ae78 	bne.w	8003540 <HAL_GPIO_Init+0x10>
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40010000 	.word	0x40010000
 8003868:	48000400 	.word	0x48000400
 800386c:	48000800 	.word	0x48000800
 8003870:	48000c00 	.word	0x48000c00
 8003874:	48001000 	.word	0x48001000
 8003878:	48001400 	.word	0x48001400
 800387c:	48001800 	.word	0x48001800
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43d9      	mvns	r1, r3
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	400b      	ands	r3, r1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	619a      	str	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <HAL_PWREx_GetVoltageRange+0x18>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40007000 	.word	0x40007000

08003904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003912:	d130      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003914:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800391c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003920:	d038      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800392a:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2232      	movs	r2, #50	@ 0x32
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0c9b      	lsrs	r3, r3, #18
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003948:	e002      	b.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800395c:	d102      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f2      	bne.n	800394a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003964:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003970:	d110      	bne.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003982:	d007      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003984:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800398c:	4a05      	ldr	r2, [pc, #20]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000
 80039a8:	20000000 	.word	0x20000000
 80039ac:	431bde83 	.word	0x431bde83

080039b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e3ca      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c2:	4b97      	ldr	r3, [pc, #604]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039cc:	4b94      	ldr	r3, [pc, #592]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80e4 	beq.w	8003bac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_RCC_OscConfig+0x4a>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	f040 808b 	bne.w	8003b08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	f040 8087 	bne.w	8003b08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039fa:	4b89      	ldr	r3, [pc, #548]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e3a2      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	4b82      	ldr	r3, [pc, #520]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_RCC_OscConfig+0x7c>
 8003a22:	4b7f      	ldr	r3, [pc, #508]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_OscConfig+0x88>
 8003a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d223      	bcs.n	8003a84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd55 	bl	80044f0 <RCC_SetFlashLatencyFromMSIRange>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e383      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a50:	4b73      	ldr	r3, [pc, #460]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a72      	ldr	r2, [pc, #456]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f043 0308 	orr.w	r3, r3, #8
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b70      	ldr	r3, [pc, #448]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	496d      	ldr	r1, [pc, #436]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	4968      	ldr	r1, [pc, #416]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
 8003a82:	e025      	b.n	8003ad0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a84:	4b66      	ldr	r3, [pc, #408]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a65      	ldr	r2, [pc, #404]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b63      	ldr	r3, [pc, #396]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4960      	ldr	r1, [pc, #384]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	495b      	ldr	r1, [pc, #364]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fd15 	bl	80044f0 <RCC_SetFlashLatencyFromMSIRange>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e343      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad0:	f000 fc4a 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b52      	ldr	r3, [pc, #328]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	4950      	ldr	r1, [pc, #320]	@ (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	4a4e      	ldr	r2, [pc, #312]	@ (8003c28 <HAL_RCC_OscConfig+0x278>)
 8003aee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003af0:	4b4e      	ldr	r3, [pc, #312]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd feff 	bl	80018f8 <HAL_InitTick>
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d052      	beq.n	8003baa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	e327      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d032      	beq.n	8003b76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b10:	4b43      	ldr	r3, [pc, #268]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a42      	ldr	r2, [pc, #264]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b1c:	f7fd ff3c 	bl	8001998 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b24:	f7fd ff38 	bl	8001998 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e310      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b36:	4b3a      	ldr	r3, [pc, #232]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b42:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a36      	ldr	r2, [pc, #216]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b48:	f043 0308 	orr.w	r3, r3, #8
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4931      	ldr	r1, [pc, #196]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b60:	4b2f      	ldr	r3, [pc, #188]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	492c      	ldr	r1, [pc, #176]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	e01a      	b.n	8003bac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b76:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a29      	ldr	r2, [pc, #164]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b82:	f7fd ff09 	bl	8001998 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b8a:	f7fd ff05 	bl	8001998 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e2dd      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b9c:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x1da>
 8003ba8:	e000      	b.n	8003bac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003baa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d074      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x21a>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d10e      	bne.n	8003be2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d10b      	bne.n	8003be2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bca:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d064      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d160      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e2ba      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x24a>
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e026      	b.n	8003c48 <HAL_RCC_OscConfig+0x298>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c02:	d115      	bne.n	8003c30 <HAL_RCC_OscConfig+0x280>
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a05      	ldr	r2, [pc, #20]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a02      	ldr	r2, [pc, #8]	@ (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e014      	b.n	8003c48 <HAL_RCC_OscConfig+0x298>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	080093c0 	.word	0x080093c0
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000004 	.word	0x20000004
 8003c30:	4ba0      	ldr	r3, [pc, #640]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a9c      	ldr	r2, [pc, #624]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fea2 	bl	8001998 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd fe9e 	bl	8001998 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e276      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6a:	4b92      	ldr	r3, [pc, #584]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2a8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fe8e 	bl	8001998 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd fe8a 	bl	8001998 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e262      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c92:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2d0>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d060      	beq.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x310>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d116      	bne.n	8003cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc0:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x328>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e23f      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	4973      	ldr	r1, [pc, #460]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cec:	e040      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d023      	beq.n	8003d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fd fe49 	bl	8001998 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fd fe45 	bl	8001998 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e21d      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d1c:	4b65      	ldr	r3, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b62      	ldr	r3, [pc, #392]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	495f      	ldr	r1, [pc, #380]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	e018      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fe25 	bl	8001998 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fd fe21 	bl	8001998 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1f9      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d64:	4b53      	ldr	r3, [pc, #332]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d84:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd fe00 	bl	8001998 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fdfc 	bl	8001998 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1d4      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dae:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <HAL_RCC_OscConfig+0x3ec>
 8003dbc:	e01b      	b.n	8003df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc4:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fd fde3 	bl	8001998 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fd fddf 	bl	8001998 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1b7      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ef      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80a6 	beq.w	8003f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e08:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e20:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e30:	4b21      	ldr	r3, [pc, #132]	@ (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d118      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e48:	f7fd fda6 	bl	8001998 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd fda2 	bl	8001998 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e17a      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e62:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4d8>
 8003e76:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e86:	e029      	b.n	8003edc <HAL_RCC_OscConfig+0x52c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_OscConfig+0x50c>
 8003e90:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	4a07      	ldr	r2, [pc, #28]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea0:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	4a03      	ldr	r2, [pc, #12]	@ (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x52c>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	4b9c      	ldr	r3, [pc, #624]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	4a9b      	ldr	r2, [pc, #620]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ecc:	4b98      	ldr	r3, [pc, #608]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	4a97      	ldr	r2, [pc, #604]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d016      	beq.n	8003f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fd58 	bl	8001998 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd fd54 	bl	8001998 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e12a      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	4b8b      	ldr	r3, [pc, #556]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ed      	beq.n	8003eec <HAL_RCC_OscConfig+0x53c>
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fd fd41 	bl	8001998 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fd3d 	bl	8001998 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e113      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f30:	4b7f      	ldr	r3, [pc, #508]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ed      	bne.n	8003f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b7a      	ldr	r3, [pc, #488]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f48:	4a79      	ldr	r2, [pc, #484]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80fe 	beq.w	8004156 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	f040 80d0 	bne.w	8004104 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f64:	4b72      	ldr	r3, [pc, #456]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0203 	and.w	r2, r3, #3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d130      	bne.n	8003fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	3b01      	subs	r3, #1
 8003f84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d127      	bne.n	8003fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d11f      	bne.n	8003fda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fa4:	2a07      	cmp	r2, #7
 8003fa6:	bf14      	ite	ne
 8003fa8:	2201      	movne	r2, #1
 8003faa:	2200      	moveq	r2, #0
 8003fac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d113      	bne.n	8003fda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d06e      	beq.n	80040b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d069      	beq.n	80040b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fe0:	4b53      	ldr	r3, [pc, #332]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fec:	4b50      	ldr	r3, [pc, #320]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0ad      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4b      	ldr	r2, [pc, #300]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004008:	f7fd fcc6 	bl	8001998 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fcc2 	bl	8001998 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e09a      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004022:	4b43      	ldr	r3, [pc, #268]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800402e:	4b40      	ldr	r3, [pc, #256]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	4b40      	ldr	r3, [pc, #256]	@ (8004134 <HAL_RCC_OscConfig+0x784>)
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800403e:	3a01      	subs	r2, #1
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	4311      	orrs	r1, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004048:	0212      	lsls	r2, r2, #8
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004050:	0852      	lsrs	r2, r2, #1
 8004052:	3a01      	subs	r2, #1
 8004054:	0552      	lsls	r2, r2, #21
 8004056:	4311      	orrs	r1, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800405c:	0852      	lsrs	r2, r2, #1
 800405e:	3a01      	subs	r2, #1
 8004060:	0652      	lsls	r2, r2, #25
 8004062:	4311      	orrs	r1, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004068:	0912      	lsrs	r2, r2, #4
 800406a:	0452      	lsls	r2, r2, #17
 800406c:	430a      	orrs	r2, r1
 800406e:	4930      	ldr	r1, [pc, #192]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004070:	4313      	orrs	r3, r2
 8004072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004074:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2d      	ldr	r2, [pc, #180]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004080:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a2a      	ldr	r2, [pc, #168]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800408c:	f7fd fc84 	bl	8001998 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd fc80 	bl	8001998 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e058      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a6:	4b22      	ldr	r3, [pc, #136]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b2:	e050      	b.n	8004156 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e04f      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d148      	bne.n	8004156 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d0:	4b17      	ldr	r3, [pc, #92]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040dc:	f7fd fc5c 	bl	8001998 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd fc58 	bl	8001998 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e030      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x734>
 8004102:	e028      	b.n	8004156 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d023      	beq.n	8004152 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a08      	ldr	r2, [pc, #32]	@ (8004130 <HAL_RCC_OscConfig+0x780>)
 8004110:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fd fc3f 	bl	8001998 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	e00c      	b.n	8004138 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fd fc3b 	bl	8001998 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d905      	bls.n	8004138 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e013      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
 8004130:	40021000 	.word	0x40021000
 8004134:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004138:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <HAL_RCC_OscConfig+0x7b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ec      	bne.n	800411e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_OscConfig+0x7b0>)
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	4905      	ldr	r1, [pc, #20]	@ (8004160 <HAL_RCC_OscConfig+0x7b0>)
 800414a:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_RCC_OscConfig+0x7b4>)
 800414c:	4013      	ands	r3, r2
 800414e:	60cb      	str	r3, [r1, #12]
 8004150:	e001      	b.n	8004156 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	feeefffc 	.word	0xfeeefffc

08004168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0e7      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b75      	ldr	r3, [pc, #468]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d910      	bls.n	80041ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b72      	ldr	r3, [pc, #456]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4970      	ldr	r1, [pc, #448]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b6e      	ldr	r3, [pc, #440]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cf      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b66      	ldr	r3, [pc, #408]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d908      	bls.n	80041da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b63      	ldr	r3, [pc, #396]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4960      	ldr	r1, [pc, #384]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04c      	beq.n	8004280 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0a6      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	4b54      	ldr	r3, [pc, #336]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d115      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e09a      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800421e:	4b4e      	ldr	r3, [pc, #312]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e08e      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e086      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b46      	ldr	r3, [pc, #280]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4943      	ldr	r1, [pc, #268]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fd fba2 	bl	8001998 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fd fb9e 	bl	8001998 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e06e      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b3a      	ldr	r3, [pc, #232]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004298:	429a      	cmp	r2, r3
 800429a:	d208      	bcs.n	80042ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b2e      	ldr	r3, [pc, #184]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	492b      	ldr	r1, [pc, #172]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ae:	4b29      	ldr	r3, [pc, #164]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d210      	bcs.n	80042de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042bc:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 0207 	bic.w	r2, r3, #7
 80042c4:	4923      	ldr	r1, [pc, #140]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042cc:	4b21      	ldr	r3, [pc, #132]	@ (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e036      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	4918      	ldr	r1, [pc, #96]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004308:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4910      	ldr	r1, [pc, #64]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800431c:	f000 f824 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	490b      	ldr	r1, [pc, #44]	@ (800435c <HAL_RCC_ClockConfig+0x1f4>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <HAL_RCC_ClockConfig+0x1f8>)
 800433a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_ClockConfig+0x1fc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fd fad9 	bl	80018f8 <HAL_InitTick>
 8004346:	4603      	mov	r3, r0
 8004348:	72fb      	strb	r3, [r7, #11]

  return status;
 800434a:	7afb      	ldrb	r3, [r7, #11]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
 800435c:	080093c0 	.word	0x080093c0
 8004360:	20000000 	.word	0x20000000
 8004364:	20000004 	.word	0x20000004

08004368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	@ 0x24
 800436c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004376:	4b3e      	ldr	r3, [pc, #248]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004380:	4b3b      	ldr	r3, [pc, #236]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x34>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d121      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d11e      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800439c:	4b34      	ldr	r3, [pc, #208]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043a8:	4b31      	ldr	r3, [pc, #196]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e005      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d102      	bne.n	80043e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e0:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x110>)
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	e004      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043ec:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_RCC_GetSysClockFreq+0x114>)
 80043ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d134      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0xa6>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0xac>
 800440c:	e005      	b.n	800441a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800440e:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x110>)
 8004410:	617b      	str	r3, [r7, #20]
      break;
 8004412:	e005      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_RCC_GetSysClockFreq+0x114>)
 8004416:	617b      	str	r3, [r7, #20]
      break;
 8004418:	e002      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	617b      	str	r3, [r7, #20]
      break;
 800441e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004420:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	fb03 f202 	mul.w	r2, r3, r2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	0e5b      	lsrs	r3, r3, #25
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	3301      	adds	r3, #1
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004460:	69bb      	ldr	r3, [r7, #24]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3724      	adds	r7, #36	@ 0x24
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	080093d8 	.word	0x080093d8
 8004478:	00f42400 	.word	0x00f42400
 800447c:	007a1200 	.word	0x007a1200

08004480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <HAL_RCC_GetHCLKFreq+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800449c:	f7ff fff0 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4904      	ldr	r1, [pc, #16]	@ (80044c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000
 80044c0:	080093d0 	.word	0x080093d0

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044c8:	f7ff ffda 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0adb      	lsrs	r3, r3, #11
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	@ (80044ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	080093d0 	.word	0x080093d0

080044f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044fc:	4b2a      	ldr	r3, [pc, #168]	@ (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004508:	f7ff f9ee 	bl	80038e8 <HAL_PWREx_GetVoltageRange>
 800450c:	6178      	str	r0, [r7, #20]
 800450e:	e014      	b.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b25      	ldr	r3, [pc, #148]	@ (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	4a24      	ldr	r2, [pc, #144]	@ (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	@ 0x58
 800451c:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004528:	f7ff f9de 	bl	80038e8 <HAL_PWREx_GetVoltageRange>
 800452c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800452e:	4b1e      	ldr	r3, [pc, #120]	@ (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004538:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004540:	d10b      	bne.n	800455a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b80      	cmp	r3, #128	@ 0x80
 8004546:	d919      	bls.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2ba0      	cmp	r3, #160	@ 0xa0
 800454c:	d902      	bls.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800454e:	2302      	movs	r3, #2
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e013      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e010      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b80      	cmp	r3, #128	@ 0x80
 800455e:	d902      	bls.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004560:	2303      	movs	r3, #3
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e00a      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b80      	cmp	r3, #128	@ 0x80
 800456a:	d102      	bne.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800456c:	2302      	movs	r3, #2
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e004      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b70      	cmp	r3, #112	@ 0x70
 8004576:	d101      	bne.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004578:	2301      	movs	r3, #1
 800457a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 0207 	bic.w	r2, r3, #7
 8004584:	4909      	ldr	r1, [pc, #36]	@ (80045ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800458c:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40022000 	.word	0x40022000

080045b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b8:	2300      	movs	r3, #0
 80045ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045bc:	2300      	movs	r3, #0
 80045be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d041      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045d4:	d02a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045da:	d824      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045e0:	d008      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045e6:	d81e      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f0:	d010      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045f2:	e018      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045f4:	4b86      	ldr	r3, [pc, #536]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a85      	ldr	r2, [pc, #532]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004600:	e015      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fabb 	bl	8004b84 <RCCEx_PLLSAI1_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004612:	e00c      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3320      	adds	r3, #32
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fba6 	bl	8004d6c <RCCEx_PLLSAI2_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	74fb      	strb	r3, [r7, #19]
      break;
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800462c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004634:	4b76      	ldr	r3, [pc, #472]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004642:	4973      	ldr	r1, [pc, #460]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d041      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004660:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004664:	d02a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004666:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800466a:	d824      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800466c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004670:	d008      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004676:	d81e      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800467c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004680:	d010      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004682:	e018      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004684:	4b62      	ldr	r3, [pc, #392]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a61      	ldr	r2, [pc, #388]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004690:	e015      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fa73 	bl	8004b84 <RCCEx_PLLSAI1_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a2:	e00c      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3320      	adds	r3, #32
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fb5e 	bl	8004d6c <RCCEx_PLLSAI2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046b4:	e003      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	74fb      	strb	r3, [r7, #19]
      break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c4:	4b52      	ldr	r3, [pc, #328]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d2:	494f      	ldr	r1, [pc, #316]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046da:	e001      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80a0 	beq.w	800482e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	4a40      	ldr	r2, [pc, #256]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004712:	6593      	str	r3, [r2, #88]	@ 0x58
 8004714:	4b3e      	ldr	r3, [pc, #248]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004720:	2301      	movs	r3, #1
 8004722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004724:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a3a      	ldr	r2, [pc, #232]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004730:	f7fd f932 	bl	8001998 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004736:	e009      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fd f92e 	bl	8001998 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d902      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	74fb      	strb	r3, [r7, #19]
        break;
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800474c:	4b31      	ldr	r3, [pc, #196]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d15c      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800475e:	4b2c      	ldr	r3, [pc, #176]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	d019      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800477c:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004788:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	4a20      	ldr	r2, [pc, #128]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004798:	4b1d      	ldr	r3, [pc, #116]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a8:	4a19      	ldr	r2, [pc, #100]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d016      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd f8ed 	bl	8001998 <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	e00b      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd f8e9 	bl	8001998 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d902      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	74fb      	strb	r3, [r7, #19]
            break;
 80047d8:	e006      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ec      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ee:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fe:	4904      	ldr	r1, [pc, #16]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004806:	e009      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
 800480c:	e006      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800481c:	7c7b      	ldrb	r3, [r7, #17]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d105      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004822:	4b9e      	ldr	r3, [pc, #632]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	4a9d      	ldr	r2, [pc, #628]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800483a:	4b98      	ldr	r3, [pc, #608]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004840:	f023 0203 	bic.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	4994      	ldr	r1, [pc, #592]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485c:	4b8f      	ldr	r3, [pc, #572]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004862:	f023 020c 	bic.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486a:	498c      	ldr	r1, [pc, #560]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487e:	4b87      	ldr	r3, [pc, #540]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	4983      	ldr	r1, [pc, #524]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a0:	4b7e      	ldr	r3, [pc, #504]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	497b      	ldr	r1, [pc, #492]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c2:	4b76      	ldr	r3, [pc, #472]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d0:	4972      	ldr	r1, [pc, #456]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e4:	4b6d      	ldr	r3, [pc, #436]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f2:	496a      	ldr	r1, [pc, #424]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b65      	ldr	r3, [pc, #404]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004914:	4961      	ldr	r1, [pc, #388]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004928:	4b5c      	ldr	r3, [pc, #368]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004936:	4959      	ldr	r1, [pc, #356]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494a:	4b54      	ldr	r3, [pc, #336]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004950:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004958:	4950      	ldr	r1, [pc, #320]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800496c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	4948      	ldr	r1, [pc, #288]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800498e:	4b43      	ldr	r3, [pc, #268]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499c:	493f      	ldr	r1, [pc, #252]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d028      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b0:	4b3a      	ldr	r3, [pc, #232]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049be:	4937      	ldr	r1, [pc, #220]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ce:	d106      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b32      	ldr	r3, [pc, #200]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a31      	ldr	r2, [pc, #196]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e011      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	2101      	movs	r1, #1
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f8c8 	bl	8004b84 <RCCEx_PLLSAI1_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a0e:	4b23      	ldr	r3, [pc, #140]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	491f      	ldr	r1, [pc, #124]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	4a1a      	ldr	r2, [pc, #104]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a38:	60d3      	str	r3, [r2, #12]
 8004a3a:	e011      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f899 	bl	8004b84 <RCCEx_PLLSAI1_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02b      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7a:	4908      	ldr	r1, [pc, #32]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a8a:	d109      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8c:	4b03      	ldr	r3, [pc, #12]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a02      	ldr	r2, [pc, #8]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a96:	60d3      	str	r3, [r2, #12]
 8004a98:	e014      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f867 	bl	8004b84 <RCCEx_PLLSAI1_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02f      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ade:	4928      	ldr	r1, [pc, #160]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aee:	d10d      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	2102      	movs	r1, #2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f844 	bl	8004b84 <RCCEx_PLLSAI1_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d014      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	74bb      	strb	r3, [r7, #18]
 8004b0a:	e011      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3320      	adds	r3, #32
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f925 	bl	8004d6c <RCCEx_PLLSAI2_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b42:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b4a:	490d      	ldr	r1, [pc, #52]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b5e:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b6e:	4904      	ldr	r1, [pc, #16]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b76:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000

08004b84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b92:	4b75      	ldr	r3, [pc, #468]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d018      	beq.n	8004bd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b9e:	4b72      	ldr	r3, [pc, #456]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0203 	and.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d10d      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d047      	beq.n	8004c5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	e044      	b.n	8004c5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d018      	beq.n	8004c0a <RCCEx_PLLSAI1_Config+0x86>
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d825      	bhi.n	8004c28 <RCCEx_PLLSAI1_Config+0xa4>
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d002      	beq.n	8004be6 <RCCEx_PLLSAI1_Config+0x62>
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d009      	beq.n	8004bf8 <RCCEx_PLLSAI1_Config+0x74>
 8004be4:	e020      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004be6:	4b60      	ldr	r3, [pc, #384]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11d      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf6:	e01a      	b.n	8004c2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d116      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c08:	e013      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c0a:	4b57      	ldr	r3, [pc, #348]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c16:	4b54      	ldr	r3, [pc, #336]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c26:	e006      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2c:	e004      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10d      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	430b      	orrs	r3, r1
 8004c54:	4944      	ldr	r1, [pc, #272]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d17d      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c60:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a40      	ldr	r2, [pc, #256]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6c:	f7fc fe94 	bl	8001998 <HAL_GetTick>
 8004c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c72:	e009      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c74:	f7fc fe90 	bl	8001998 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	73fb      	strb	r3, [r7, #15]
        break;
 8004c86:	e005      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c88:	4b37      	ldr	r3, [pc, #220]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ef      	bne.n	8004c74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d160      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d111      	bne.n	8004cc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca0:	4b31      	ldr	r3, [pc, #196]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6892      	ldr	r2, [r2, #8]
 8004cb0:	0211      	lsls	r1, r2, #8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68d2      	ldr	r2, [r2, #12]
 8004cb6:	0912      	lsrs	r2, r2, #4
 8004cb8:	0452      	lsls	r2, r2, #17
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	492a      	ldr	r1, [pc, #168]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	610b      	str	r3, [r1, #16]
 8004cc2:	e027      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d112      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cca:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004cd2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	0211      	lsls	r1, r2, #8
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6912      	ldr	r2, [r2, #16]
 8004ce0:	0852      	lsrs	r2, r2, #1
 8004ce2:	3a01      	subs	r2, #1
 8004ce4:	0552      	lsls	r2, r2, #21
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	491f      	ldr	r1, [pc, #124]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
 8004cee:	e011      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cf8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	0211      	lsls	r1, r2, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6952      	ldr	r2, [r2, #20]
 8004d06:	0852      	lsrs	r2, r2, #1
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	0652      	lsls	r2, r2, #25
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	4916      	ldr	r1, [pc, #88]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d14:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a13      	ldr	r2, [pc, #76]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fc fe3a 	bl	8001998 <HAL_GetTick>
 8004d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d26:	e009      	b.n	8004d3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d28:	f7fc fe36 	bl	8001998 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	73fb      	strb	r3, [r7, #15]
          break;
 8004d3a:	e005      	b.n	8004d48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d4e:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	4904      	ldr	r1, [pc, #16]	@ (8004d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000

08004d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d86:	4b67      	ldr	r3, [pc, #412]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0203 	and.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d10d      	bne.n	8004db2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
       ||
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d9e:	4b61      	ldr	r3, [pc, #388]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
       ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d047      	beq.n	8004e42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e044      	b.n	8004e42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d018      	beq.n	8004df2 <RCCEx_PLLSAI2_Config+0x86>
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d825      	bhi.n	8004e10 <RCCEx_PLLSAI2_Config+0xa4>
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d002      	beq.n	8004dce <RCCEx_PLLSAI2_Config+0x62>
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d009      	beq.n	8004de0 <RCCEx_PLLSAI2_Config+0x74>
 8004dcc:	e020      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dce:	4b55      	ldr	r3, [pc, #340]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11d      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dde:	e01a      	b.n	8004e16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004de0:	4b50      	ldr	r3, [pc, #320]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d116      	bne.n	8004e1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df0:	e013      	b.n	8004e1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004df2:	4b4c      	ldr	r3, [pc, #304]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dfe:	4b49      	ldr	r3, [pc, #292]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e0e:	e006      	b.n	8004e1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      break;
 8004e14:	e004      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e26:	4b3f      	ldr	r3, [pc, #252]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	4939      	ldr	r1, [pc, #228]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d167      	bne.n	8004f18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e48:	4b36      	ldr	r3, [pc, #216]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e54:	f7fc fda0 	bl	8001998 <HAL_GetTick>
 8004e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e5a:	e009      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e5c:	f7fc fd9c 	bl	8001998 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d902      	bls.n	8004e70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e6e:	e005      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e70:	4b2c      	ldr	r3, [pc, #176]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1ef      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d14a      	bne.n	8004f18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d111      	bne.n	8004eac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e88:	4b26      	ldr	r3, [pc, #152]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6892      	ldr	r2, [r2, #8]
 8004e98:	0211      	lsls	r1, r2, #8
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68d2      	ldr	r2, [r2, #12]
 8004e9e:	0912      	lsrs	r2, r2, #4
 8004ea0:	0452      	lsls	r2, r2, #17
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	491f      	ldr	r1, [pc, #124]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	614b      	str	r3, [r1, #20]
 8004eaa:	e011      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004eb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6892      	ldr	r2, [r2, #8]
 8004ebc:	0211      	lsls	r1, r2, #8
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6912      	ldr	r2, [r2, #16]
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0652      	lsls	r2, r2, #25
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	4916      	ldr	r1, [pc, #88]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fc fd5c 	bl	8001998 <HAL_GetTick>
 8004ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee2:	e009      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ee4:	f7fc fd58 	bl	8001998 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ef6:	e005      	b.n	8004f04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ef      	beq.n	8004ee4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4904      	ldr	r1, [pc, #16]	@ (8004f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e049      	b.n	8004fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fabc 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fa9e 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e04f      	b.n	8005090 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a23      	ldr	r2, [pc, #140]	@ (800509c <HAL_TIM_Base_Start_IT+0xc4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01d      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501a:	d018      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d115      	bne.n	800507a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b06      	cmp	r3, #6
 800505e:	d015      	beq.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005066:	d011      	beq.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005078:	e008      	b.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e000      	b.n	800508e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	00010007 	.word	0x00010007

080050b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d020      	beq.n	800511c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0202 	mvn.w	r2, #2
 80050ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9b2 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f9a4 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f9b5 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d020      	beq.n	8005168 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01b      	beq.n	8005168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0204 	mvn.w	r2, #4
 8005138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f98c 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f97e 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f98f 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d020      	beq.n	80051b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0208 	mvn.w	r2, #8
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2204      	movs	r2, #4
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f966 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f958 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f969 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d020      	beq.n	8005200 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0210 	mvn.w	r2, #16
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2208      	movs	r2, #8
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f940 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f932 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f943 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0201 	mvn.w	r2, #1
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fb fe52 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00c      	beq.n	8005252 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800524a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fafd 	bl	800584c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00c      	beq.n	8005276 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 faf5 	bl	8005860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00c      	beq.n	800529a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8fd 	bl	8005494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0220 	mvn.w	r2, #32
 80052b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fabd 	bl	8005838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_ConfigClockSource+0x1c>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0b6      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x18a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005300:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005304:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800530c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531e:	d03e      	beq.n	800539e <HAL_TIM_ConfigClockSource+0xd8>
 8005320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005324:	f200 8087 	bhi.w	8005436 <HAL_TIM_ConfigClockSource+0x170>
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532c:	f000 8086 	beq.w	800543c <HAL_TIM_ConfigClockSource+0x176>
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005334:	d87f      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 8005336:	2b70      	cmp	r3, #112	@ 0x70
 8005338:	d01a      	beq.n	8005370 <HAL_TIM_ConfigClockSource+0xaa>
 800533a:	2b70      	cmp	r3, #112	@ 0x70
 800533c:	d87b      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 800533e:	2b60      	cmp	r3, #96	@ 0x60
 8005340:	d050      	beq.n	80053e4 <HAL_TIM_ConfigClockSource+0x11e>
 8005342:	2b60      	cmp	r3, #96	@ 0x60
 8005344:	d877      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 8005346:	2b50      	cmp	r3, #80	@ 0x50
 8005348:	d03c      	beq.n	80053c4 <HAL_TIM_ConfigClockSource+0xfe>
 800534a:	2b50      	cmp	r3, #80	@ 0x50
 800534c:	d873      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d058      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0x13e>
 8005352:	2b40      	cmp	r3, #64	@ 0x40
 8005354:	d86f      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 8005356:	2b30      	cmp	r3, #48	@ 0x30
 8005358:	d064      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x15e>
 800535a:	2b30      	cmp	r3, #48	@ 0x30
 800535c:	d86b      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 800535e:	2b20      	cmp	r3, #32
 8005360:	d060      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x15e>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d867      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d05c      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x15e>
 800536a:	2b10      	cmp	r3, #16
 800536c:	d05a      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x15e>
 800536e:	e062      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005380:	f000 f9b2 	bl	80056e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005392:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]
      break;
 800539c:	e04f      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ae:	f000 f99b 	bl	80056e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053c0:	609a      	str	r2, [r3, #8]
      break;
 80053c2:	e03c      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d0:	461a      	mov	r2, r3
 80053d2:	f000 f90f 	bl	80055f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2150      	movs	r1, #80	@ 0x50
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 f968 	bl	80056b2 <TIM_ITRx_SetConfig>
      break;
 80053e2:	e02c      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f0:	461a      	mov	r2, r3
 80053f2:	f000 f92e 	bl	8005652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2160      	movs	r1, #96	@ 0x60
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f958 	bl	80056b2 <TIM_ITRx_SetConfig>
      break;
 8005402:	e01c      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005410:	461a      	mov	r2, r3
 8005412:	f000 f8ef 	bl	80055f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2140      	movs	r1, #64	@ 0x40
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f948 	bl	80056b2 <TIM_ITRx_SetConfig>
      break;
 8005422:	e00c      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 f93f 	bl	80056b2 <TIM_ITRx_SetConfig>
      break;
 8005434:	e003      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
      break;
 800543a:	e000      	b.n	800543e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800543c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a46      	ldr	r2, [pc, #280]	@ (80055d4 <TIM_Base_SetConfig+0x12c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c6:	d00f      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a43      	ldr	r2, [pc, #268]	@ (80055d8 <TIM_Base_SetConfig+0x130>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a42      	ldr	r2, [pc, #264]	@ (80055dc <TIM_Base_SetConfig+0x134>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a41      	ldr	r2, [pc, #260]	@ (80055e0 <TIM_Base_SetConfig+0x138>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a40      	ldr	r2, [pc, #256]	@ (80055e4 <TIM_Base_SetConfig+0x13c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d108      	bne.n	80054fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a35      	ldr	r2, [pc, #212]	@ (80055d4 <TIM_Base_SetConfig+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01f      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d01b      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a32      	ldr	r2, [pc, #200]	@ (80055d8 <TIM_Base_SetConfig+0x130>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d017      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a31      	ldr	r2, [pc, #196]	@ (80055dc <TIM_Base_SetConfig+0x134>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a30      	ldr	r2, [pc, #192]	@ (80055e0 <TIM_Base_SetConfig+0x138>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2f      	ldr	r2, [pc, #188]	@ (80055e4 <TIM_Base_SetConfig+0x13c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a2e      	ldr	r2, [pc, #184]	@ (80055e8 <TIM_Base_SetConfig+0x140>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2d      	ldr	r2, [pc, #180]	@ (80055ec <TIM_Base_SetConfig+0x144>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x9a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2c      	ldr	r2, [pc, #176]	@ (80055f0 <TIM_Base_SetConfig+0x148>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <TIM_Base_SetConfig+0x12c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0xf8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a18      	ldr	r2, [pc, #96]	@ (80055e4 <TIM_Base_SetConfig+0x13c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0xf8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <TIM_Base_SetConfig+0x140>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0xf8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a16      	ldr	r2, [pc, #88]	@ (80055ec <TIM_Base_SetConfig+0x144>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0xf8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a15      	ldr	r2, [pc, #84]	@ (80055f0 <TIM_Base_SetConfig+0x148>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d103      	bne.n	80055a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]
  }
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800

080055f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f023 0201 	bic.w	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800561e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 030a 	bic.w	r3, r3, #10
 8005630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005652:	b480      	push	{r7}
 8005654:	b087      	sub	sp, #28
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f023 0210 	bic.w	r2, r3, #16
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800567c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800568e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f043 0307 	orr.w	r3, r3, #7
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	021a      	lsls	r2, r3, #8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	431a      	orrs	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4313      	orrs	r3, r2
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	609a      	str	r2, [r3, #8]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800573c:	2302      	movs	r3, #2
 800573e:	e068      	b.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2e      	ldr	r2, [pc, #184]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2d      	ldr	r2, [pc, #180]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800577a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b2:	d018      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a13      	ldr	r2, [pc, #76]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a14      	ldr	r2, [pc, #80]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40014000 	.word	0x40014000

08005838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e040      	b.n	8005908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb fe58 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	@ 0x24
 80058a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fe90 	bl	80065e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fbd5 	bl	8006070 <UART_SetConfig>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e01b      	b.n	8005908 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 ff0f 	bl	8006724 <UART_CheckIdleState>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005924:	2b20      	cmp	r3, #32
 8005926:	d177      	bne.n	8005a18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_Transmit+0x24>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e070      	b.n	8005a1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2221      	movs	r2, #33	@ 0x21
 8005944:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fc f827 	bl	8001998 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005964:	d108      	bne.n	8005978 <HAL_UART_Transmit+0x68>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	e003      	b.n	8005980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005980:	e02f      	b.n	80059e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2200      	movs	r2, #0
 800598a:	2180      	movs	r1, #128	@ 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 ff71 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e03b      	b.n	8005a1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	881a      	ldrh	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b4:	b292      	uxth	r2, r2
 80059b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	3302      	adds	r3, #2
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	e007      	b.n	80059d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3301      	adds	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1c9      	bne.n	8005982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2140      	movs	r1, #64	@ 0x40
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 ff3b 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e005      	b.n	8005a1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b0ba      	sub	sp, #232	@ 0xe8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a52:	4013      	ands	r3, r2
 8005a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d115      	bne.n	8005a8c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00f      	beq.n	8005a8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 82ca 	beq.w	8006016 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
      }
      return;
 8005a8a:	e2c4      	b.n	8006016 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8117 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005aa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005aa6:	4b85      	ldr	r3, [pc, #532]	@ (8005cbc <HAL_UART_IRQHandler+0x298>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 810a 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d011      	beq.n	8005ae0 <HAL_UART_IRQHandler+0xbc>
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad6:	f043 0201 	orr.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d011      	beq.n	8005b10 <HAL_UART_IRQHandler+0xec>
 8005aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2202      	movs	r2, #2
 8005afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d011      	beq.n	8005b40 <HAL_UART_IRQHandler+0x11c>
 8005b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b36:	f043 0202 	orr.w	r2, r3, #2
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d017      	beq.n	8005b7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b72:	f043 0208 	orr.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d012      	beq.n	8005bae <HAL_UART_IRQHandler+0x18a>
 8005b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00c      	beq.n	8005bae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8230 	beq.w	800601a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b40      	cmp	r3, #64	@ 0x40
 8005bf8:	d005      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d04f      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fea1 	bl	800694e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c16:	2b40      	cmp	r3, #64	@ 0x40
 8005c18:	d141      	bne.n	8005c9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d9      	bne.n	8005c1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d013      	beq.n	8005c96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c72:	4a13      	ldr	r2, [pc, #76]	@ (8005cc0 <HAL_UART_IRQHandler+0x29c>)
 8005c74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fd fc17 	bl	80034ae <HAL_DMA_Abort_IT>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d017      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	e00f      	b.n	8005cb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f9d4 	bl	8006044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	e00b      	b.n	8005cb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9d0 	bl	8006044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	e007      	b.n	8005cb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f9cc 	bl	8006044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005cb4:	e1b1      	b.n	800601a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb6:	bf00      	nop
    return;
 8005cb8:	e1af      	b.n	800601a <HAL_UART_IRQHandler+0x5f6>
 8005cba:	bf00      	nop
 8005cbc:	04000120 	.word	0x04000120
 8005cc0:	08006a17 	.word	0x08006a17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f040 816a 	bne.w	8005fa2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8163 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 815c 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfc:	2b40      	cmp	r3, #64	@ 0x40
 8005cfe:	f040 80d4 	bne.w	8005eaa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80ad 	beq.w	8005e72 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f080 80a5 	bcs.w	8005e72 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f040 8086 	bne.w	8005e50 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1da      	bne.n	8005d44 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005db2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e1      	bne.n	8005d8e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005df0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005df4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e3      	bne.n	8005dca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e20:	f023 0310 	bic.w	r3, r3, #16
 8005e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e4      	bne.n	8005e10 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fd faf1 	bl	8003432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8f4 	bl	8006058 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e70:	e0d5      	b.n	800601e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 80ce 	bne.w	800601e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 80c5 	bne.w	800601e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8d8 	bl	8006058 <HAL_UARTEx_RxEventCallback>
      return;
 8005ea8:	e0b9      	b.n	800601e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80ab 	beq.w	8006022 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80a6 	beq.w	8006022 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005efa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e4      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3308      	adds	r3, #8
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f30:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e3      	bne.n	8005f0c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 0310 	bic.w	r3, r3, #16
 8005f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	69b9      	ldr	r1, [r7, #24]
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	617b      	str	r3, [r7, #20]
   return(result);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e4      	bne.n	8005f58 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f85c 	bl	8006058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fa0:	e03f      	b.n	8006022 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00e      	beq.n	8005fcc <HAL_UART_IRQHandler+0x5a8>
 8005fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005fc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fd66 	bl	8006a96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fca:	e02d      	b.n	8006028 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01c      	beq.n	8006026 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
    }
    return;
 8005ff4:	e017      	b.n	8006026 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d012      	beq.n	8006028 <HAL_UART_IRQHandler+0x604>
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fd17 	bl	8006a42 <UART_EndTransmit_IT>
    return;
 8006014:	e008      	b.n	8006028 <HAL_UART_IRQHandler+0x604>
      return;
 8006016:	bf00      	nop
 8006018:	e006      	b.n	8006028 <HAL_UART_IRQHandler+0x604>
    return;
 800601a:	bf00      	nop
 800601c:	e004      	b.n	8006028 <HAL_UART_IRQHandler+0x604>
      return;
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <HAL_UART_IRQHandler+0x604>
      return;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <HAL_UART_IRQHandler+0x604>
    return;
 8006026:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006028:	37e8      	adds	r7, #232	@ 0xe8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop

08006030 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006074:	b08a      	sub	sp, #40	@ 0x28
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	4313      	orrs	r3, r2
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4ba4      	ldr	r3, [pc, #656]	@ (8006330 <UART_SetConfig+0x2c0>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a99      	ldr	r2, [pc, #612]	@ (8006334 <UART_SetConfig+0x2c4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d8:	4313      	orrs	r3, r2
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a90      	ldr	r2, [pc, #576]	@ (8006338 <UART_SetConfig+0x2c8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d126      	bne.n	8006148 <UART_SetConfig+0xd8>
 80060fa:	4b90      	ldr	r3, [pc, #576]	@ (800633c <UART_SetConfig+0x2cc>)
 80060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b03      	cmp	r3, #3
 8006106:	d81b      	bhi.n	8006140 <UART_SetConfig+0xd0>
 8006108:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0xa0>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006121 	.word	0x08006121
 8006114:	08006131 	.word	0x08006131
 8006118:	08006129 	.word	0x08006129
 800611c:	08006139 	.word	0x08006139
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006126:	e116      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006128:	2302      	movs	r3, #2
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612e:	e112      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006130:	2304      	movs	r3, #4
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006136:	e10e      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006138:	2308      	movs	r3, #8
 800613a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613e:	e10a      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006140:	2310      	movs	r3, #16
 8006142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006146:	e106      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a7c      	ldr	r2, [pc, #496]	@ (8006340 <UART_SetConfig+0x2d0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d138      	bne.n	80061c4 <UART_SetConfig+0x154>
 8006152:	4b7a      	ldr	r3, [pc, #488]	@ (800633c <UART_SetConfig+0x2cc>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b0c      	cmp	r3, #12
 800615e:	d82d      	bhi.n	80061bc <UART_SetConfig+0x14c>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <UART_SetConfig+0xf8>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800619d 	.word	0x0800619d
 800616c:	080061bd 	.word	0x080061bd
 8006170:	080061bd 	.word	0x080061bd
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061bd 	.word	0x080061bd
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061a5 	.word	0x080061a5
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061b5 	.word	0x080061b5
 800619c:	2300      	movs	r3, #0
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061a2:	e0d8      	b.n	8006356 <UART_SetConfig+0x2e6>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061aa:	e0d4      	b.n	8006356 <UART_SetConfig+0x2e6>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061b2:	e0d0      	b.n	8006356 <UART_SetConfig+0x2e6>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ba:	e0cc      	b.n	8006356 <UART_SetConfig+0x2e6>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c2:	e0c8      	b.n	8006356 <UART_SetConfig+0x2e6>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006344 <UART_SetConfig+0x2d4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d125      	bne.n	800621a <UART_SetConfig+0x1aa>
 80061ce:	4b5b      	ldr	r3, [pc, #364]	@ (800633c <UART_SetConfig+0x2cc>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061d8:	2b30      	cmp	r3, #48	@ 0x30
 80061da:	d016      	beq.n	800620a <UART_SetConfig+0x19a>
 80061dc:	2b30      	cmp	r3, #48	@ 0x30
 80061de:	d818      	bhi.n	8006212 <UART_SetConfig+0x1a2>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d00a      	beq.n	80061fa <UART_SetConfig+0x18a>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d814      	bhi.n	8006212 <UART_SetConfig+0x1a2>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <UART_SetConfig+0x182>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d008      	beq.n	8006202 <UART_SetConfig+0x192>
 80061f0:	e00f      	b.n	8006212 <UART_SetConfig+0x1a2>
 80061f2:	2300      	movs	r3, #0
 80061f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f8:	e0ad      	b.n	8006356 <UART_SetConfig+0x2e6>
 80061fa:	2302      	movs	r3, #2
 80061fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006200:	e0a9      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006202:	2304      	movs	r3, #4
 8006204:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006208:	e0a5      	b.n	8006356 <UART_SetConfig+0x2e6>
 800620a:	2308      	movs	r3, #8
 800620c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006210:	e0a1      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006212:	2310      	movs	r3, #16
 8006214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006218:	e09d      	b.n	8006356 <UART_SetConfig+0x2e6>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4a      	ldr	r2, [pc, #296]	@ (8006348 <UART_SetConfig+0x2d8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d125      	bne.n	8006270 <UART_SetConfig+0x200>
 8006224:	4b45      	ldr	r3, [pc, #276]	@ (800633c <UART_SetConfig+0x2cc>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800622e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006230:	d016      	beq.n	8006260 <UART_SetConfig+0x1f0>
 8006232:	2bc0      	cmp	r3, #192	@ 0xc0
 8006234:	d818      	bhi.n	8006268 <UART_SetConfig+0x1f8>
 8006236:	2b80      	cmp	r3, #128	@ 0x80
 8006238:	d00a      	beq.n	8006250 <UART_SetConfig+0x1e0>
 800623a:	2b80      	cmp	r3, #128	@ 0x80
 800623c:	d814      	bhi.n	8006268 <UART_SetConfig+0x1f8>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <UART_SetConfig+0x1d8>
 8006242:	2b40      	cmp	r3, #64	@ 0x40
 8006244:	d008      	beq.n	8006258 <UART_SetConfig+0x1e8>
 8006246:	e00f      	b.n	8006268 <UART_SetConfig+0x1f8>
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800624e:	e082      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006250:	2302      	movs	r3, #2
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006256:	e07e      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006258:	2304      	movs	r3, #4
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625e:	e07a      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006260:	2308      	movs	r3, #8
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006266:	e076      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006268:	2310      	movs	r3, #16
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800626e:	e072      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a35      	ldr	r2, [pc, #212]	@ (800634c <UART_SetConfig+0x2dc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d12a      	bne.n	80062d0 <UART_SetConfig+0x260>
 800627a:	4b30      	ldr	r3, [pc, #192]	@ (800633c <UART_SetConfig+0x2cc>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006288:	d01a      	beq.n	80062c0 <UART_SetConfig+0x250>
 800628a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800628e:	d81b      	bhi.n	80062c8 <UART_SetConfig+0x258>
 8006290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006294:	d00c      	beq.n	80062b0 <UART_SetConfig+0x240>
 8006296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629a:	d815      	bhi.n	80062c8 <UART_SetConfig+0x258>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <UART_SetConfig+0x238>
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a4:	d008      	beq.n	80062b8 <UART_SetConfig+0x248>
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x258>
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ae:	e052      	b.n	8006356 <UART_SetConfig+0x2e6>
 80062b0:	2302      	movs	r3, #2
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062b6:	e04e      	b.n	8006356 <UART_SetConfig+0x2e6>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062be:	e04a      	b.n	8006356 <UART_SetConfig+0x2e6>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c6:	e046      	b.n	8006356 <UART_SetConfig+0x2e6>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ce:	e042      	b.n	8006356 <UART_SetConfig+0x2e6>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <UART_SetConfig+0x2c4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d13a      	bne.n	8006350 <UART_SetConfig+0x2e0>
 80062da:	4b18      	ldr	r3, [pc, #96]	@ (800633c <UART_SetConfig+0x2cc>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e8:	d01a      	beq.n	8006320 <UART_SetConfig+0x2b0>
 80062ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062ee:	d81b      	bhi.n	8006328 <UART_SetConfig+0x2b8>
 80062f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062f4:	d00c      	beq.n	8006310 <UART_SetConfig+0x2a0>
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fa:	d815      	bhi.n	8006328 <UART_SetConfig+0x2b8>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <UART_SetConfig+0x298>
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006304:	d008      	beq.n	8006318 <UART_SetConfig+0x2a8>
 8006306:	e00f      	b.n	8006328 <UART_SetConfig+0x2b8>
 8006308:	2300      	movs	r3, #0
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630e:	e022      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006310:	2302      	movs	r3, #2
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006316:	e01e      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006318:	2304      	movs	r3, #4
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631e:	e01a      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006320:	2308      	movs	r3, #8
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006326:	e016      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006328:	2310      	movs	r3, #16
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632e:	e012      	b.n	8006356 <UART_SetConfig+0x2e6>
 8006330:	efff69f3 	.word	0xefff69f3
 8006334:	40008000 	.word	0x40008000
 8006338:	40013800 	.word	0x40013800
 800633c:	40021000 	.word	0x40021000
 8006340:	40004400 	.word	0x40004400
 8006344:	40004800 	.word	0x40004800
 8006348:	40004c00 	.word	0x40004c00
 800634c:	40005000 	.word	0x40005000
 8006350:	2310      	movs	r3, #16
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a9f      	ldr	r2, [pc, #636]	@ (80065d8 <UART_SetConfig+0x568>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d17a      	bne.n	8006456 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006360:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006364:	2b08      	cmp	r3, #8
 8006366:	d824      	bhi.n	80063b2 <UART_SetConfig+0x342>
 8006368:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <UART_SetConfig+0x300>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006395 	.word	0x08006395
 8006374:	080063b3 	.word	0x080063b3
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063b3 	.word	0x080063b3
 8006380:	080063a3 	.word	0x080063a3
 8006384:	080063b3 	.word	0x080063b3
 8006388:	080063b3 	.word	0x080063b3
 800638c:	080063b3 	.word	0x080063b3
 8006390:	080063ab 	.word	0x080063ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fe f880 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006398:	61f8      	str	r0, [r7, #28]
        break;
 800639a:	e010      	b.n	80063be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800639c:	4b8f      	ldr	r3, [pc, #572]	@ (80065dc <UART_SetConfig+0x56c>)
 800639e:	61fb      	str	r3, [r7, #28]
        break;
 80063a0:	e00d      	b.n	80063be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a2:	f7fd ffe1 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 80063a6:	61f8      	str	r0, [r7, #28]
        break;
 80063a8:	e009      	b.n	80063be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ae:	61fb      	str	r3, [r7, #28]
        break;
 80063b0:	e005      	b.n	80063be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80fb 	beq.w	80065bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	4413      	add	r3, r2
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d305      	bcc.n	80063e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d903      	bls.n	80063ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063e8:	e0e8      	b.n	80065bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2200      	movs	r2, #0
 80063ee:	461c      	mov	r4, r3
 80063f0:	4615      	mov	r5, r2
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	022b      	lsls	r3, r5, #8
 80063fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006400:	0222      	lsls	r2, r4, #8
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	6849      	ldr	r1, [r1, #4]
 8006406:	0849      	lsrs	r1, r1, #1
 8006408:	2000      	movs	r0, #0
 800640a:	4688      	mov	r8, r1
 800640c:	4681      	mov	r9, r0
 800640e:	eb12 0a08 	adds.w	sl, r2, r8
 8006412:	eb43 0b09 	adc.w	fp, r3, r9
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006424:	4650      	mov	r0, sl
 8006426:	4659      	mov	r1, fp
 8006428:	f7fa fbbe 	bl	8000ba8 <__aeabi_uldivmod>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4613      	mov	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800643a:	d308      	bcc.n	800644e <UART_SetConfig+0x3de>
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006442:	d204      	bcs.n	800644e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	60da      	str	r2, [r3, #12]
 800644c:	e0b6      	b.n	80065bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006454:	e0b2      	b.n	80065bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800645e:	d15e      	bne.n	800651e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006460:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006464:	2b08      	cmp	r3, #8
 8006466:	d828      	bhi.n	80064ba <UART_SetConfig+0x44a>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <UART_SetConfig+0x400>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006495 	.word	0x08006495
 8006474:	0800649d 	.word	0x0800649d
 8006478:	080064a5 	.word	0x080064a5
 800647c:	080064bb 	.word	0x080064bb
 8006480:	080064ab 	.word	0x080064ab
 8006484:	080064bb 	.word	0x080064bb
 8006488:	080064bb 	.word	0x080064bb
 800648c:	080064bb 	.word	0x080064bb
 8006490:	080064b3 	.word	0x080064b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006494:	f7fe f800 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006498:	61f8      	str	r0, [r7, #28]
        break;
 800649a:	e014      	b.n	80064c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe f812 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 80064a0:	61f8      	str	r0, [r7, #28]
        break;
 80064a2:	e010      	b.n	80064c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a4:	4b4d      	ldr	r3, [pc, #308]	@ (80065dc <UART_SetConfig+0x56c>)
 80064a6:	61fb      	str	r3, [r7, #28]
        break;
 80064a8:	e00d      	b.n	80064c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064aa:	f7fd ff5d 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 80064ae:	61f8      	str	r0, [r7, #28]
        break;
 80064b0:	e009      	b.n	80064c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b6:	61fb      	str	r3, [r7, #28]
        break;
 80064b8:	e005      	b.n	80064c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d077      	beq.n	80065bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	005a      	lsls	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b0f      	cmp	r3, #15
 80064e6:	d916      	bls.n	8006516 <UART_SetConfig+0x4a6>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ee:	d212      	bcs.n	8006516 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f023 030f 	bic.w	r3, r3, #15
 80064f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	b29a      	uxth	r2, r3
 8006506:	8afb      	ldrh	r3, [r7, #22]
 8006508:	4313      	orrs	r3, r2
 800650a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	8afa      	ldrh	r2, [r7, #22]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	e052      	b.n	80065bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800651c:	e04e      	b.n	80065bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800651e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006522:	2b08      	cmp	r3, #8
 8006524:	d827      	bhi.n	8006576 <UART_SetConfig+0x506>
 8006526:	a201      	add	r2, pc, #4	@ (adr r2, 800652c <UART_SetConfig+0x4bc>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	08006577 	.word	0x08006577
 800653c:	08006567 	.word	0x08006567
 8006540:	08006577 	.word	0x08006577
 8006544:	08006577 	.word	0x08006577
 8006548:	08006577 	.word	0x08006577
 800654c:	0800656f 	.word	0x0800656f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fd ffa2 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006554:	61f8      	str	r0, [r7, #28]
        break;
 8006556:	e014      	b.n	8006582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006558:	f7fd ffb4 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 800655c:	61f8      	str	r0, [r7, #28]
        break;
 800655e:	e010      	b.n	8006582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b1e      	ldr	r3, [pc, #120]	@ (80065dc <UART_SetConfig+0x56c>)
 8006562:	61fb      	str	r3, [r7, #28]
        break;
 8006564:	e00d      	b.n	8006582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7fd feff 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 800656a:	61f8      	str	r0, [r7, #28]
        break;
 800656c:	e009      	b.n	8006582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006572:	61fb      	str	r3, [r7, #28]
        break;
 8006574:	e005      	b.n	8006582 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006580:	bf00      	nop
    }

    if (pclk != 0U)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	085a      	lsrs	r2, r3, #1
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	441a      	add	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d909      	bls.n	80065b6 <UART_SetConfig+0x546>
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a8:	d205      	bcs.n	80065b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60da      	str	r2, [r3, #12]
 80065b4:	e002      	b.n	80065bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	@ 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	40008000 	.word	0x40008000
 80065dc:	00f42400 	.word	0x00f42400

080065e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066de:	d10a      	bne.n	80066f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b098      	sub	sp, #96	@ 0x60
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006734:	f7fb f930 	bl	8001998 <HAL_GetTick>
 8006738:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b08      	cmp	r3, #8
 8006746:	d12e      	bne.n	80067a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006750:	2200      	movs	r2, #0
 8006752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f88c 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d021      	beq.n	80067a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006776:	653b      	str	r3, [r7, #80]	@ 0x50
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006780:	647b      	str	r3, [r7, #68]	@ 0x44
 8006782:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800678e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e6      	bne.n	8006762 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e062      	b.n	800686c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d149      	bne.n	8006848 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067bc:	2200      	movs	r2, #0
 80067be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f856 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03c      	beq.n	8006848 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	623b      	str	r3, [r7, #32]
   return(result);
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e6      	bne.n	80067ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006820:	61fa      	str	r2, [r7, #28]
 8006822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	69b9      	ldr	r1, [r7, #24]
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	617b      	str	r3, [r7, #20]
   return(result);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e5      	bne.n	8006800 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e011      	b.n	800686c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3758      	adds	r7, #88	@ 0x58
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006884:	e04f      	b.n	8006926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d04b      	beq.n	8006926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fb f883 	bl	8001998 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e04e      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d037      	beq.n	8006926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b80      	cmp	r3, #128	@ 0x80
 80068ba:	d034      	beq.n	8006926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b40      	cmp	r3, #64	@ 0x40
 80068c0:	d031      	beq.n	8006926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d110      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2208      	movs	r2, #8
 80068d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f838 	bl	800694e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2208      	movs	r2, #8
 80068e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e029      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006900:	d111      	bne.n	8006926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800690a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f81e 	bl	800694e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e00f      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	429a      	cmp	r2, r3
 8006942:	d0a0      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800694e:	b480      	push	{r7}
 8006950:	b095      	sub	sp, #84	@ 0x54
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800696a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006974:	643b      	str	r3, [r7, #64]	@ 0x40
 8006976:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800697a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e6      	bne.n	8006956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	61fb      	str	r3, [r7, #28]
   return(result);
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f023 0301 	bic.w	r3, r3, #1
 800699e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d118      	bne.n	80069f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f023 0310 	bic.w	r3, r3, #16
 80069d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6979      	ldr	r1, [r7, #20]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	613b      	str	r3, [r7, #16]
   return(result);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a0a:	bf00      	nop
 8006a0c:	3754      	adds	r7, #84	@ 0x54
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff fb05 	bl	8006044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b088      	sub	sp, #32
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6979      	ldr	r1, [r7, #20]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	613b      	str	r3, [r7, #16]
   return(result);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e6      	bne.n	8006a4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fad1 	bl	8006030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8e:	bf00      	nop
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <__cvt>:
 8006aaa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aae:	ec57 6b10 	vmov	r6, r7, d0
 8006ab2:	2f00      	cmp	r7, #0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	463b      	mov	r3, r7
 8006aba:	bfbb      	ittet	lt
 8006abc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ac0:	461f      	movlt	r7, r3
 8006ac2:	2300      	movge	r3, #0
 8006ac4:	232d      	movlt	r3, #45	@ 0x2d
 8006ac6:	700b      	strb	r3, [r1, #0]
 8006ac8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aca:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ace:	4691      	mov	r9, r2
 8006ad0:	f023 0820 	bic.w	r8, r3, #32
 8006ad4:	bfbc      	itt	lt
 8006ad6:	4632      	movlt	r2, r6
 8006ad8:	4616      	movlt	r6, r2
 8006ada:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ade:	d005      	beq.n	8006aec <__cvt+0x42>
 8006ae0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ae4:	d100      	bne.n	8006ae8 <__cvt+0x3e>
 8006ae6:	3401      	adds	r4, #1
 8006ae8:	2102      	movs	r1, #2
 8006aea:	e000      	b.n	8006aee <__cvt+0x44>
 8006aec:	2103      	movs	r1, #3
 8006aee:	ab03      	add	r3, sp, #12
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	ab02      	add	r3, sp, #8
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	ec47 6b10 	vmov	d0, r6, r7
 8006afa:	4653      	mov	r3, sl
 8006afc:	4622      	mov	r2, r4
 8006afe:	f000 fe3b 	bl	8007778 <_dtoa_r>
 8006b02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b06:	4605      	mov	r5, r0
 8006b08:	d119      	bne.n	8006b3e <__cvt+0x94>
 8006b0a:	f019 0f01 	tst.w	r9, #1
 8006b0e:	d00e      	beq.n	8006b2e <__cvt+0x84>
 8006b10:	eb00 0904 	add.w	r9, r0, r4
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b20:	b108      	cbz	r0, 8006b26 <__cvt+0x7c>
 8006b22:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b26:	2230      	movs	r2, #48	@ 0x30
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	454b      	cmp	r3, r9
 8006b2c:	d31e      	bcc.n	8006b6c <__cvt+0xc2>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b32:	1b5b      	subs	r3, r3, r5
 8006b34:	4628      	mov	r0, r5
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	b004      	add	sp, #16
 8006b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b42:	eb00 0904 	add.w	r9, r0, r4
 8006b46:	d1e5      	bne.n	8006b14 <__cvt+0x6a>
 8006b48:	7803      	ldrb	r3, [r0, #0]
 8006b4a:	2b30      	cmp	r3, #48	@ 0x30
 8006b4c:	d10a      	bne.n	8006b64 <__cvt+0xba>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	4630      	mov	r0, r6
 8006b54:	4639      	mov	r1, r7
 8006b56:	f7f9 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b5a:	b918      	cbnz	r0, 8006b64 <__cvt+0xba>
 8006b5c:	f1c4 0401 	rsb	r4, r4, #1
 8006b60:	f8ca 4000 	str.w	r4, [sl]
 8006b64:	f8da 3000 	ldr.w	r3, [sl]
 8006b68:	4499      	add	r9, r3
 8006b6a:	e7d3      	b.n	8006b14 <__cvt+0x6a>
 8006b6c:	1c59      	adds	r1, r3, #1
 8006b6e:	9103      	str	r1, [sp, #12]
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e7d9      	b.n	8006b28 <__cvt+0x7e>

08006b74 <__exponent>:
 8006b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b76:	2900      	cmp	r1, #0
 8006b78:	bfba      	itte	lt
 8006b7a:	4249      	neglt	r1, r1
 8006b7c:	232d      	movlt	r3, #45	@ 0x2d
 8006b7e:	232b      	movge	r3, #43	@ 0x2b
 8006b80:	2909      	cmp	r1, #9
 8006b82:	7002      	strb	r2, [r0, #0]
 8006b84:	7043      	strb	r3, [r0, #1]
 8006b86:	dd29      	ble.n	8006bdc <__exponent+0x68>
 8006b88:	f10d 0307 	add.w	r3, sp, #7
 8006b8c:	461d      	mov	r5, r3
 8006b8e:	270a      	movs	r7, #10
 8006b90:	461a      	mov	r2, r3
 8006b92:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b96:	fb07 1416 	mls	r4, r7, r6, r1
 8006b9a:	3430      	adds	r4, #48	@ 0x30
 8006b9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	2c63      	cmp	r4, #99	@ 0x63
 8006ba4:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ba8:	4631      	mov	r1, r6
 8006baa:	dcf1      	bgt.n	8006b90 <__exponent+0x1c>
 8006bac:	3130      	adds	r1, #48	@ 0x30
 8006bae:	1e94      	subs	r4, r2, #2
 8006bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bb4:	1c41      	adds	r1, r0, #1
 8006bb6:	4623      	mov	r3, r4
 8006bb8:	42ab      	cmp	r3, r5
 8006bba:	d30a      	bcc.n	8006bd2 <__exponent+0x5e>
 8006bbc:	f10d 0309 	add.w	r3, sp, #9
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	42ac      	cmp	r4, r5
 8006bc4:	bf88      	it	hi
 8006bc6:	2300      	movhi	r3, #0
 8006bc8:	3302      	adds	r3, #2
 8006bca:	4403      	add	r3, r0
 8006bcc:	1a18      	subs	r0, r3, r0
 8006bce:	b003      	add	sp, #12
 8006bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bda:	e7ed      	b.n	8006bb8 <__exponent+0x44>
 8006bdc:	2330      	movs	r3, #48	@ 0x30
 8006bde:	3130      	adds	r1, #48	@ 0x30
 8006be0:	7083      	strb	r3, [r0, #2]
 8006be2:	70c1      	strb	r1, [r0, #3]
 8006be4:	1d03      	adds	r3, r0, #4
 8006be6:	e7f1      	b.n	8006bcc <__exponent+0x58>

08006be8 <_printf_float>:
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	b08d      	sub	sp, #52	@ 0x34
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	461f      	mov	r7, r3
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	f000 fcbb 	bl	8007574 <_localeconv_r>
 8006bfe:	6803      	ldr	r3, [r0, #0]
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fb34 	bl	8000270 <strlen>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c10:	9005      	str	r0, [sp, #20]
 8006c12:	3307      	adds	r3, #7
 8006c14:	f023 0307 	bic.w	r3, r3, #7
 8006c18:	f103 0208 	add.w	r2, r3, #8
 8006c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c20:	f8d4 b000 	ldr.w	fp, [r4]
 8006c24:	f8c8 2000 	str.w	r2, [r8]
 8006c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c30:	9307      	str	r3, [sp, #28]
 8006c32:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8006eb0 <_printf_float+0x2c8>)
 8006c40:	f04f 32ff 	mov.w	r2, #4294967295
 8006c44:	f7f9 ff72 	bl	8000b2c <__aeabi_dcmpun>
 8006c48:	bb70      	cbnz	r0, 8006ca8 <_printf_float+0xc0>
 8006c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4e:	4b98      	ldr	r3, [pc, #608]	@ (8006eb0 <_printf_float+0x2c8>)
 8006c50:	f04f 32ff 	mov.w	r2, #4294967295
 8006c54:	f7f9 ff4c 	bl	8000af0 <__aeabi_dcmple>
 8006c58:	bb30      	cbnz	r0, 8006ca8 <_printf_float+0xc0>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4640      	mov	r0, r8
 8006c60:	4649      	mov	r1, r9
 8006c62:	f7f9 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8006c66:	b110      	cbz	r0, 8006c6e <_printf_float+0x86>
 8006c68:	232d      	movs	r3, #45	@ 0x2d
 8006c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c6e:	4a91      	ldr	r2, [pc, #580]	@ (8006eb4 <_printf_float+0x2cc>)
 8006c70:	4b91      	ldr	r3, [pc, #580]	@ (8006eb8 <_printf_float+0x2d0>)
 8006c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c76:	bf94      	ite	ls
 8006c78:	4690      	movls	r8, r2
 8006c7a:	4698      	movhi	r8, r3
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	f02b 0304 	bic.w	r3, fp, #4
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	f04f 0900 	mov.w	r9, #0
 8006c8a:	9700      	str	r7, [sp, #0]
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f9d2 	bl	800703c <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f040 808d 	bne.w	8006db8 <_printf_float+0x1d0>
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	b00d      	add	sp, #52	@ 0x34
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	f7f9 ff3c 	bl	8000b2c <__aeabi_dcmpun>
 8006cb4:	b140      	cbz	r0, 8006cc8 <_printf_float+0xe0>
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	bfbc      	itt	lt
 8006cbc:	232d      	movlt	r3, #45	@ 0x2d
 8006cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8006ebc <_printf_float+0x2d4>)
 8006cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ec0 <_printf_float+0x2d8>)
 8006cc6:	e7d4      	b.n	8006c72 <_printf_float+0x8a>
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006cce:	9206      	str	r2, [sp, #24]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	d13b      	bne.n	8006d4c <_printf_float+0x164>
 8006cd4:	2306      	movs	r3, #6
 8006cd6:	6063      	str	r3, [r4, #4]
 8006cd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cdc:	2300      	movs	r3, #0
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ce4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ce8:	ab09      	add	r3, sp, #36	@ 0x24
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	6861      	ldr	r1, [r4, #4]
 8006cee:	ec49 8b10 	vmov	d0, r8, r9
 8006cf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f7ff fed7 	bl	8006aaa <__cvt>
 8006cfc:	9b06      	ldr	r3, [sp, #24]
 8006cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d00:	2b47      	cmp	r3, #71	@ 0x47
 8006d02:	4680      	mov	r8, r0
 8006d04:	d129      	bne.n	8006d5a <_printf_float+0x172>
 8006d06:	1cc8      	adds	r0, r1, #3
 8006d08:	db02      	blt.n	8006d10 <_printf_float+0x128>
 8006d0a:	6863      	ldr	r3, [r4, #4]
 8006d0c:	4299      	cmp	r1, r3
 8006d0e:	dd41      	ble.n	8006d94 <_printf_float+0x1ac>
 8006d10:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d14:	fa5f fa8a 	uxtb.w	sl, sl
 8006d18:	3901      	subs	r1, #1
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d20:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d22:	f7ff ff27 	bl	8006b74 <__exponent>
 8006d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d28:	1813      	adds	r3, r2, r0
 8006d2a:	2a01      	cmp	r2, #1
 8006d2c:	4681      	mov	r9, r0
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	dc02      	bgt.n	8006d38 <_printf_float+0x150>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	07d2      	lsls	r2, r2, #31
 8006d36:	d501      	bpl.n	8006d3c <_printf_float+0x154>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0a2      	beq.n	8006c8a <_printf_float+0xa2>
 8006d44:	232d      	movs	r3, #45	@ 0x2d
 8006d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d4a:	e79e      	b.n	8006c8a <_printf_float+0xa2>
 8006d4c:	9a06      	ldr	r2, [sp, #24]
 8006d4e:	2a47      	cmp	r2, #71	@ 0x47
 8006d50:	d1c2      	bne.n	8006cd8 <_printf_float+0xf0>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1c0      	bne.n	8006cd8 <_printf_float+0xf0>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e7bd      	b.n	8006cd6 <_printf_float+0xee>
 8006d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d5e:	d9db      	bls.n	8006d18 <_printf_float+0x130>
 8006d60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d64:	d118      	bne.n	8006d98 <_printf_float+0x1b0>
 8006d66:	2900      	cmp	r1, #0
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	dd0b      	ble.n	8006d84 <_printf_float+0x19c>
 8006d6c:	6121      	str	r1, [r4, #16]
 8006d6e:	b913      	cbnz	r3, 8006d76 <_printf_float+0x18e>
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	07d0      	lsls	r0, r2, #31
 8006d74:	d502      	bpl.n	8006d7c <_printf_float+0x194>
 8006d76:	3301      	adds	r3, #1
 8006d78:	440b      	add	r3, r1
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d7e:	f04f 0900 	mov.w	r9, #0
 8006d82:	e7db      	b.n	8006d3c <_printf_float+0x154>
 8006d84:	b913      	cbnz	r3, 8006d8c <_printf_float+0x1a4>
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	07d2      	lsls	r2, r2, #31
 8006d8a:	d501      	bpl.n	8006d90 <_printf_float+0x1a8>
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	e7f4      	b.n	8006d7a <_printf_float+0x192>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e7f2      	b.n	8006d7a <_printf_float+0x192>
 8006d94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d9a:	4299      	cmp	r1, r3
 8006d9c:	db05      	blt.n	8006daa <_printf_float+0x1c2>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	6121      	str	r1, [r4, #16]
 8006da2:	07d8      	lsls	r0, r3, #31
 8006da4:	d5ea      	bpl.n	8006d7c <_printf_float+0x194>
 8006da6:	1c4b      	adds	r3, r1, #1
 8006da8:	e7e7      	b.n	8006d7a <_printf_float+0x192>
 8006daa:	2900      	cmp	r1, #0
 8006dac:	bfd4      	ite	le
 8006dae:	f1c1 0202 	rsble	r2, r1, #2
 8006db2:	2201      	movgt	r2, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	e7e0      	b.n	8006d7a <_printf_float+0x192>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	055a      	lsls	r2, r3, #21
 8006dbc:	d407      	bmi.n	8006dce <_printf_float+0x1e6>
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d12b      	bne.n	8006e24 <_printf_float+0x23c>
 8006dcc:	e767      	b.n	8006c9e <_printf_float+0xb6>
 8006dce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dd2:	f240 80dd 	bls.w	8006f90 <_printf_float+0x3a8>
 8006dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f7f9 fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d033      	beq.n	8006e4e <_printf_float+0x266>
 8006de6:	4a37      	ldr	r2, [pc, #220]	@ (8006ec4 <_printf_float+0x2dc>)
 8006de8:	2301      	movs	r3, #1
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	f43f af54 	beq.w	8006c9e <_printf_float+0xb6>
 8006df6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dfa:	4543      	cmp	r3, r8
 8006dfc:	db02      	blt.n	8006e04 <_printf_float+0x21c>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	07d8      	lsls	r0, r3, #31
 8006e02:	d50f      	bpl.n	8006e24 <_printf_float+0x23c>
 8006e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af45 	beq.w	8006c9e <_printf_float+0xb6>
 8006e14:	f04f 0900 	mov.w	r9, #0
 8006e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e1c:	f104 0a1a 	add.w	sl, r4, #26
 8006e20:	45c8      	cmp	r8, r9
 8006e22:	dc09      	bgt.n	8006e38 <_printf_float+0x250>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	079b      	lsls	r3, r3, #30
 8006e28:	f100 8103 	bmi.w	8007032 <_printf_float+0x44a>
 8006e2c:	68e0      	ldr	r0, [r4, #12]
 8006e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e30:	4298      	cmp	r0, r3
 8006e32:	bfb8      	it	lt
 8006e34:	4618      	movlt	r0, r3
 8006e36:	e734      	b.n	8006ca2 <_printf_float+0xba>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f af2b 	beq.w	8006c9e <_printf_float+0xb6>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7e8      	b.n	8006e20 <_printf_float+0x238>
 8006e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dc39      	bgt.n	8006ec8 <_printf_float+0x2e0>
 8006e54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <_printf_float+0x2dc>)
 8006e56:	2301      	movs	r3, #1
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f af1d 	beq.w	8006c9e <_printf_float+0xb6>
 8006e64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e68:	ea59 0303 	orrs.w	r3, r9, r3
 8006e6c:	d102      	bne.n	8006e74 <_printf_float+0x28c>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	07d9      	lsls	r1, r3, #31
 8006e72:	d5d7      	bpl.n	8006e24 <_printf_float+0x23c>
 8006e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f af0d 	beq.w	8006c9e <_printf_float+0xb6>
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	f104 0b1a 	add.w	fp, r4, #26
 8006e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8e:	425b      	negs	r3, r3
 8006e90:	4553      	cmp	r3, sl
 8006e92:	dc01      	bgt.n	8006e98 <_printf_float+0x2b0>
 8006e94:	464b      	mov	r3, r9
 8006e96:	e793      	b.n	8006dc0 <_printf_float+0x1d8>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	465a      	mov	r2, fp
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f aefb 	beq.w	8006c9e <_printf_float+0xb6>
 8006ea8:	f10a 0a01 	add.w	sl, sl, #1
 8006eac:	e7ee      	b.n	8006e8c <_printf_float+0x2a4>
 8006eae:	bf00      	nop
 8006eb0:	7fefffff 	.word	0x7fefffff
 8006eb4:	08009408 	.word	0x08009408
 8006eb8:	0800940c 	.word	0x0800940c
 8006ebc:	08009410 	.word	0x08009410
 8006ec0:	08009414 	.word	0x08009414
 8006ec4:	08009418 	.word	0x08009418
 8006ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ece:	4553      	cmp	r3, sl
 8006ed0:	bfa8      	it	ge
 8006ed2:	4653      	movge	r3, sl
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	4699      	mov	r9, r3
 8006ed8:	dc36      	bgt.n	8006f48 <_printf_float+0x360>
 8006eda:	f04f 0b00 	mov.w	fp, #0
 8006ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee2:	f104 021a 	add.w	r2, r4, #26
 8006ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ee8:	9306      	str	r3, [sp, #24]
 8006eea:	eba3 0309 	sub.w	r3, r3, r9
 8006eee:	455b      	cmp	r3, fp
 8006ef0:	dc31      	bgt.n	8006f56 <_printf_float+0x36e>
 8006ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef4:	459a      	cmp	sl, r3
 8006ef6:	dc3a      	bgt.n	8006f6e <_printf_float+0x386>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	07da      	lsls	r2, r3, #31
 8006efc:	d437      	bmi.n	8006f6e <_printf_float+0x386>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	ebaa 0903 	sub.w	r9, sl, r3
 8006f04:	9b06      	ldr	r3, [sp, #24]
 8006f06:	ebaa 0303 	sub.w	r3, sl, r3
 8006f0a:	4599      	cmp	r9, r3
 8006f0c:	bfa8      	it	ge
 8006f0e:	4699      	movge	r9, r3
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	dc33      	bgt.n	8006f7e <_printf_float+0x396>
 8006f16:	f04f 0800 	mov.w	r8, #0
 8006f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f1e:	f104 0b1a 	add.w	fp, r4, #26
 8006f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f24:	ebaa 0303 	sub.w	r3, sl, r3
 8006f28:	eba3 0309 	sub.w	r3, r3, r9
 8006f2c:	4543      	cmp	r3, r8
 8006f2e:	f77f af79 	ble.w	8006e24 <_printf_float+0x23c>
 8006f32:	2301      	movs	r3, #1
 8006f34:	465a      	mov	r2, fp
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f aeae 	beq.w	8006c9e <_printf_float+0xb6>
 8006f42:	f108 0801 	add.w	r8, r8, #1
 8006f46:	e7ec      	b.n	8006f22 <_printf_float+0x33a>
 8006f48:	4642      	mov	r2, r8
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	d1c2      	bne.n	8006eda <_printf_float+0x2f2>
 8006f54:	e6a3      	b.n	8006c9e <_printf_float+0xb6>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	9206      	str	r2, [sp, #24]
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	f43f ae9c 	beq.w	8006c9e <_printf_float+0xb6>
 8006f66:	9a06      	ldr	r2, [sp, #24]
 8006f68:	f10b 0b01 	add.w	fp, fp, #1
 8006f6c:	e7bb      	b.n	8006ee6 <_printf_float+0x2fe>
 8006f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d1c0      	bne.n	8006efe <_printf_float+0x316>
 8006f7c:	e68f      	b.n	8006c9e <_printf_float+0xb6>
 8006f7e:	9a06      	ldr	r2, [sp, #24]
 8006f80:	464b      	mov	r3, r9
 8006f82:	4442      	add	r2, r8
 8006f84:	4631      	mov	r1, r6
 8006f86:	4628      	mov	r0, r5
 8006f88:	47b8      	blx	r7
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d1c3      	bne.n	8006f16 <_printf_float+0x32e>
 8006f8e:	e686      	b.n	8006c9e <_printf_float+0xb6>
 8006f90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f94:	f1ba 0f01 	cmp.w	sl, #1
 8006f98:	dc01      	bgt.n	8006f9e <_printf_float+0x3b6>
 8006f9a:	07db      	lsls	r3, r3, #31
 8006f9c:	d536      	bpl.n	800700c <_printf_float+0x424>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f ae78 	beq.w	8006c9e <_printf_float+0xb6>
 8006fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae70 	beq.w	8006c9e <_printf_float+0xb6>
 8006fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fca:	f7f9 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fce:	b9c0      	cbnz	r0, 8007002 <_printf_float+0x41a>
 8006fd0:	4653      	mov	r3, sl
 8006fd2:	f108 0201 	add.w	r2, r8, #1
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d10c      	bne.n	8006ffa <_printf_float+0x412>
 8006fe0:	e65d      	b.n	8006c9e <_printf_float+0xb6>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	465a      	mov	r2, fp
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f ae56 	beq.w	8006c9e <_printf_float+0xb6>
 8006ff2:	f108 0801 	add.w	r8, r8, #1
 8006ff6:	45d0      	cmp	r8, sl
 8006ff8:	dbf3      	blt.n	8006fe2 <_printf_float+0x3fa>
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007000:	e6df      	b.n	8006dc2 <_printf_float+0x1da>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	f104 0b1a 	add.w	fp, r4, #26
 800700a:	e7f4      	b.n	8006ff6 <_printf_float+0x40e>
 800700c:	2301      	movs	r3, #1
 800700e:	4642      	mov	r2, r8
 8007010:	e7e1      	b.n	8006fd6 <_printf_float+0x3ee>
 8007012:	2301      	movs	r3, #1
 8007014:	464a      	mov	r2, r9
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	f43f ae3e 	beq.w	8006c9e <_printf_float+0xb6>
 8007022:	f108 0801 	add.w	r8, r8, #1
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	4543      	cmp	r3, r8
 800702e:	dcf0      	bgt.n	8007012 <_printf_float+0x42a>
 8007030:	e6fc      	b.n	8006e2c <_printf_float+0x244>
 8007032:	f04f 0800 	mov.w	r8, #0
 8007036:	f104 0919 	add.w	r9, r4, #25
 800703a:	e7f4      	b.n	8007026 <_printf_float+0x43e>

0800703c <_printf_common>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	4616      	mov	r6, r2
 8007042:	4698      	mov	r8, r3
 8007044:	688a      	ldr	r2, [r1, #8]
 8007046:	690b      	ldr	r3, [r1, #16]
 8007048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800704c:	4293      	cmp	r3, r2
 800704e:	bfb8      	it	lt
 8007050:	4613      	movlt	r3, r2
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007058:	4607      	mov	r7, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b10a      	cbz	r2, 8007062 <_printf_common+0x26>
 800705e:	3301      	adds	r3, #1
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	0699      	lsls	r1, r3, #26
 8007066:	bf42      	ittt	mi
 8007068:	6833      	ldrmi	r3, [r6, #0]
 800706a:	3302      	addmi	r3, #2
 800706c:	6033      	strmi	r3, [r6, #0]
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	f015 0506 	ands.w	r5, r5, #6
 8007074:	d106      	bne.n	8007084 <_printf_common+0x48>
 8007076:	f104 0a19 	add.w	sl, r4, #25
 800707a:	68e3      	ldr	r3, [r4, #12]
 800707c:	6832      	ldr	r2, [r6, #0]
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc26      	bgt.n	80070d2 <_printf_common+0x96>
 8007084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	3b00      	subs	r3, #0
 800708c:	bf18      	it	ne
 800708e:	2301      	movne	r3, #1
 8007090:	0692      	lsls	r2, r2, #26
 8007092:	d42b      	bmi.n	80070ec <_printf_common+0xb0>
 8007094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007098:	4641      	mov	r1, r8
 800709a:	4638      	mov	r0, r7
 800709c:	47c8      	blx	r9
 800709e:	3001      	adds	r0, #1
 80070a0:	d01e      	beq.n	80070e0 <_printf_common+0xa4>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	f003 0306 	and.w	r3, r3, #6
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	bf02      	ittt	eq
 80070ae:	68e5      	ldreq	r5, [r4, #12]
 80070b0:	6833      	ldreq	r3, [r6, #0]
 80070b2:	1aed      	subeq	r5, r5, r3
 80070b4:	68a3      	ldr	r3, [r4, #8]
 80070b6:	bf0c      	ite	eq
 80070b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070bc:	2500      	movne	r5, #0
 80070be:	4293      	cmp	r3, r2
 80070c0:	bfc4      	itt	gt
 80070c2:	1a9b      	subgt	r3, r3, r2
 80070c4:	18ed      	addgt	r5, r5, r3
 80070c6:	2600      	movs	r6, #0
 80070c8:	341a      	adds	r4, #26
 80070ca:	42b5      	cmp	r5, r6
 80070cc:	d11a      	bne.n	8007104 <_printf_common+0xc8>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e008      	b.n	80070e4 <_printf_common+0xa8>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4652      	mov	r2, sl
 80070d6:	4641      	mov	r1, r8
 80070d8:	4638      	mov	r0, r7
 80070da:	47c8      	blx	r9
 80070dc:	3001      	adds	r0, #1
 80070de:	d103      	bne.n	80070e8 <_printf_common+0xac>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7c6      	b.n	800707a <_printf_common+0x3e>
 80070ec:	18e1      	adds	r1, r4, r3
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	2030      	movs	r0, #48	@ 0x30
 80070f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070f6:	4422      	add	r2, r4
 80070f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007100:	3302      	adds	r3, #2
 8007102:	e7c7      	b.n	8007094 <_printf_common+0x58>
 8007104:	2301      	movs	r3, #1
 8007106:	4622      	mov	r2, r4
 8007108:	4641      	mov	r1, r8
 800710a:	4638      	mov	r0, r7
 800710c:	47c8      	blx	r9
 800710e:	3001      	adds	r0, #1
 8007110:	d0e6      	beq.n	80070e0 <_printf_common+0xa4>
 8007112:	3601      	adds	r6, #1
 8007114:	e7d9      	b.n	80070ca <_printf_common+0x8e>
	...

08007118 <_printf_i>:
 8007118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	7e0f      	ldrb	r7, [r1, #24]
 800711e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007120:	2f78      	cmp	r7, #120	@ 0x78
 8007122:	4691      	mov	r9, r2
 8007124:	4680      	mov	r8, r0
 8007126:	460c      	mov	r4, r1
 8007128:	469a      	mov	sl, r3
 800712a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800712e:	d807      	bhi.n	8007140 <_printf_i+0x28>
 8007130:	2f62      	cmp	r7, #98	@ 0x62
 8007132:	d80a      	bhi.n	800714a <_printf_i+0x32>
 8007134:	2f00      	cmp	r7, #0
 8007136:	f000 80d2 	beq.w	80072de <_printf_i+0x1c6>
 800713a:	2f58      	cmp	r7, #88	@ 0x58
 800713c:	f000 80b9 	beq.w	80072b2 <_printf_i+0x19a>
 8007140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007148:	e03a      	b.n	80071c0 <_printf_i+0xa8>
 800714a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800714e:	2b15      	cmp	r3, #21
 8007150:	d8f6      	bhi.n	8007140 <_printf_i+0x28>
 8007152:	a101      	add	r1, pc, #4	@ (adr r1, 8007158 <_printf_i+0x40>)
 8007154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071c5 	.word	0x080071c5
 8007160:	08007141 	.word	0x08007141
 8007164:	08007141 	.word	0x08007141
 8007168:	08007141 	.word	0x08007141
 800716c:	08007141 	.word	0x08007141
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007141 	.word	0x08007141
 8007178:	08007141 	.word	0x08007141
 800717c:	08007141 	.word	0x08007141
 8007180:	08007141 	.word	0x08007141
 8007184:	080072c5 	.word	0x080072c5
 8007188:	080071ef 	.word	0x080071ef
 800718c:	0800727f 	.word	0x0800727f
 8007190:	08007141 	.word	0x08007141
 8007194:	08007141 	.word	0x08007141
 8007198:	080072e7 	.word	0x080072e7
 800719c:	08007141 	.word	0x08007141
 80071a0:	080071ef 	.word	0x080071ef
 80071a4:	08007141 	.word	0x08007141
 80071a8:	08007141 	.word	0x08007141
 80071ac:	08007287 	.word	0x08007287
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6032      	str	r2, [r6, #0]
 80071b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071c0:	2301      	movs	r3, #1
 80071c2:	e09d      	b.n	8007300 <_printf_i+0x1e8>
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	1d19      	adds	r1, r3, #4
 80071ca:	6031      	str	r1, [r6, #0]
 80071cc:	0606      	lsls	r6, r0, #24
 80071ce:	d501      	bpl.n	80071d4 <_printf_i+0xbc>
 80071d0:	681d      	ldr	r5, [r3, #0]
 80071d2:	e003      	b.n	80071dc <_printf_i+0xc4>
 80071d4:	0645      	lsls	r5, r0, #25
 80071d6:	d5fb      	bpl.n	80071d0 <_printf_i+0xb8>
 80071d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071dc:	2d00      	cmp	r5, #0
 80071de:	da03      	bge.n	80071e8 <_printf_i+0xd0>
 80071e0:	232d      	movs	r3, #45	@ 0x2d
 80071e2:	426d      	negs	r5, r5
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071e8:	4859      	ldr	r0, [pc, #356]	@ (8007350 <_printf_i+0x238>)
 80071ea:	230a      	movs	r3, #10
 80071ec:	e011      	b.n	8007212 <_printf_i+0xfa>
 80071ee:	6821      	ldr	r1, [r4, #0]
 80071f0:	6833      	ldr	r3, [r6, #0]
 80071f2:	0608      	lsls	r0, r1, #24
 80071f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071f8:	d402      	bmi.n	8007200 <_printf_i+0xe8>
 80071fa:	0649      	lsls	r1, r1, #25
 80071fc:	bf48      	it	mi
 80071fe:	b2ad      	uxthmi	r5, r5
 8007200:	2f6f      	cmp	r7, #111	@ 0x6f
 8007202:	4853      	ldr	r0, [pc, #332]	@ (8007350 <_printf_i+0x238>)
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	bf14      	ite	ne
 8007208:	230a      	movne	r3, #10
 800720a:	2308      	moveq	r3, #8
 800720c:	2100      	movs	r1, #0
 800720e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007212:	6866      	ldr	r6, [r4, #4]
 8007214:	60a6      	str	r6, [r4, #8]
 8007216:	2e00      	cmp	r6, #0
 8007218:	bfa2      	ittt	ge
 800721a:	6821      	ldrge	r1, [r4, #0]
 800721c:	f021 0104 	bicge.w	r1, r1, #4
 8007220:	6021      	strge	r1, [r4, #0]
 8007222:	b90d      	cbnz	r5, 8007228 <_printf_i+0x110>
 8007224:	2e00      	cmp	r6, #0
 8007226:	d04b      	beq.n	80072c0 <_printf_i+0x1a8>
 8007228:	4616      	mov	r6, r2
 800722a:	fbb5 f1f3 	udiv	r1, r5, r3
 800722e:	fb03 5711 	mls	r7, r3, r1, r5
 8007232:	5dc7      	ldrb	r7, [r0, r7]
 8007234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007238:	462f      	mov	r7, r5
 800723a:	42bb      	cmp	r3, r7
 800723c:	460d      	mov	r5, r1
 800723e:	d9f4      	bls.n	800722a <_printf_i+0x112>
 8007240:	2b08      	cmp	r3, #8
 8007242:	d10b      	bne.n	800725c <_printf_i+0x144>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	07df      	lsls	r7, r3, #31
 8007248:	d508      	bpl.n	800725c <_printf_i+0x144>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	6861      	ldr	r1, [r4, #4]
 800724e:	4299      	cmp	r1, r3
 8007250:	bfde      	ittt	le
 8007252:	2330      	movle	r3, #48	@ 0x30
 8007254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800725c:	1b92      	subs	r2, r2, r6
 800725e:	6122      	str	r2, [r4, #16]
 8007260:	f8cd a000 	str.w	sl, [sp]
 8007264:	464b      	mov	r3, r9
 8007266:	aa03      	add	r2, sp, #12
 8007268:	4621      	mov	r1, r4
 800726a:	4640      	mov	r0, r8
 800726c:	f7ff fee6 	bl	800703c <_printf_common>
 8007270:	3001      	adds	r0, #1
 8007272:	d14a      	bne.n	800730a <_printf_i+0x1f2>
 8007274:	f04f 30ff 	mov.w	r0, #4294967295
 8007278:	b004      	add	sp, #16
 800727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	f043 0320 	orr.w	r3, r3, #32
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	4833      	ldr	r0, [pc, #204]	@ (8007354 <_printf_i+0x23c>)
 8007288:	2778      	movs	r7, #120	@ 0x78
 800728a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	6831      	ldr	r1, [r6, #0]
 8007292:	061f      	lsls	r7, r3, #24
 8007294:	f851 5b04 	ldr.w	r5, [r1], #4
 8007298:	d402      	bmi.n	80072a0 <_printf_i+0x188>
 800729a:	065f      	lsls	r7, r3, #25
 800729c:	bf48      	it	mi
 800729e:	b2ad      	uxthmi	r5, r5
 80072a0:	6031      	str	r1, [r6, #0]
 80072a2:	07d9      	lsls	r1, r3, #31
 80072a4:	bf44      	itt	mi
 80072a6:	f043 0320 	orrmi.w	r3, r3, #32
 80072aa:	6023      	strmi	r3, [r4, #0]
 80072ac:	b11d      	cbz	r5, 80072b6 <_printf_i+0x19e>
 80072ae:	2310      	movs	r3, #16
 80072b0:	e7ac      	b.n	800720c <_printf_i+0xf4>
 80072b2:	4827      	ldr	r0, [pc, #156]	@ (8007350 <_printf_i+0x238>)
 80072b4:	e7e9      	b.n	800728a <_printf_i+0x172>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	f023 0320 	bic.w	r3, r3, #32
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	e7f6      	b.n	80072ae <_printf_i+0x196>
 80072c0:	4616      	mov	r6, r2
 80072c2:	e7bd      	b.n	8007240 <_printf_i+0x128>
 80072c4:	6833      	ldr	r3, [r6, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	6961      	ldr	r1, [r4, #20]
 80072ca:	1d18      	adds	r0, r3, #4
 80072cc:	6030      	str	r0, [r6, #0]
 80072ce:	062e      	lsls	r6, r5, #24
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	d501      	bpl.n	80072d8 <_printf_i+0x1c0>
 80072d4:	6019      	str	r1, [r3, #0]
 80072d6:	e002      	b.n	80072de <_printf_i+0x1c6>
 80072d8:	0668      	lsls	r0, r5, #25
 80072da:	d5fb      	bpl.n	80072d4 <_printf_i+0x1bc>
 80072dc:	8019      	strh	r1, [r3, #0]
 80072de:	2300      	movs	r3, #0
 80072e0:	6123      	str	r3, [r4, #16]
 80072e2:	4616      	mov	r6, r2
 80072e4:	e7bc      	b.n	8007260 <_printf_i+0x148>
 80072e6:	6833      	ldr	r3, [r6, #0]
 80072e8:	1d1a      	adds	r2, r3, #4
 80072ea:	6032      	str	r2, [r6, #0]
 80072ec:	681e      	ldr	r6, [r3, #0]
 80072ee:	6862      	ldr	r2, [r4, #4]
 80072f0:	2100      	movs	r1, #0
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7f8 ff6c 	bl	80001d0 <memchr>
 80072f8:	b108      	cbz	r0, 80072fe <_printf_i+0x1e6>
 80072fa:	1b80      	subs	r0, r0, r6
 80072fc:	6060      	str	r0, [r4, #4]
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	6123      	str	r3, [r4, #16]
 8007302:	2300      	movs	r3, #0
 8007304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007308:	e7aa      	b.n	8007260 <_printf_i+0x148>
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	4632      	mov	r2, r6
 800730e:	4649      	mov	r1, r9
 8007310:	4640      	mov	r0, r8
 8007312:	47d0      	blx	sl
 8007314:	3001      	adds	r0, #1
 8007316:	d0ad      	beq.n	8007274 <_printf_i+0x15c>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	079b      	lsls	r3, r3, #30
 800731c:	d413      	bmi.n	8007346 <_printf_i+0x22e>
 800731e:	68e0      	ldr	r0, [r4, #12]
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	4298      	cmp	r0, r3
 8007324:	bfb8      	it	lt
 8007326:	4618      	movlt	r0, r3
 8007328:	e7a6      	b.n	8007278 <_printf_i+0x160>
 800732a:	2301      	movs	r3, #1
 800732c:	4632      	mov	r2, r6
 800732e:	4649      	mov	r1, r9
 8007330:	4640      	mov	r0, r8
 8007332:	47d0      	blx	sl
 8007334:	3001      	adds	r0, #1
 8007336:	d09d      	beq.n	8007274 <_printf_i+0x15c>
 8007338:	3501      	adds	r5, #1
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	9903      	ldr	r1, [sp, #12]
 800733e:	1a5b      	subs	r3, r3, r1
 8007340:	42ab      	cmp	r3, r5
 8007342:	dcf2      	bgt.n	800732a <_printf_i+0x212>
 8007344:	e7eb      	b.n	800731e <_printf_i+0x206>
 8007346:	2500      	movs	r5, #0
 8007348:	f104 0619 	add.w	r6, r4, #25
 800734c:	e7f5      	b.n	800733a <_printf_i+0x222>
 800734e:	bf00      	nop
 8007350:	0800941a 	.word	0x0800941a
 8007354:	0800942b 	.word	0x0800942b

08007358 <std>:
 8007358:	2300      	movs	r3, #0
 800735a:	b510      	push	{r4, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	e9c0 3300 	strd	r3, r3, [r0]
 8007362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007366:	6083      	str	r3, [r0, #8]
 8007368:	8181      	strh	r1, [r0, #12]
 800736a:	6643      	str	r3, [r0, #100]	@ 0x64
 800736c:	81c2      	strh	r2, [r0, #14]
 800736e:	6183      	str	r3, [r0, #24]
 8007370:	4619      	mov	r1, r3
 8007372:	2208      	movs	r2, #8
 8007374:	305c      	adds	r0, #92	@ 0x5c
 8007376:	f000 f8f4 	bl	8007562 <memset>
 800737a:	4b0d      	ldr	r3, [pc, #52]	@ (80073b0 <std+0x58>)
 800737c:	6263      	str	r3, [r4, #36]	@ 0x24
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <std+0x5c>)
 8007380:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <std+0x60>)
 8007384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007386:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <std+0x64>)
 8007388:	6323      	str	r3, [r4, #48]	@ 0x30
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <std+0x68>)
 800738c:	6224      	str	r4, [r4, #32]
 800738e:	429c      	cmp	r4, r3
 8007390:	d006      	beq.n	80073a0 <std+0x48>
 8007392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007396:	4294      	cmp	r4, r2
 8007398:	d002      	beq.n	80073a0 <std+0x48>
 800739a:	33d0      	adds	r3, #208	@ 0xd0
 800739c:	429c      	cmp	r4, r3
 800739e:	d105      	bne.n	80073ac <std+0x54>
 80073a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a8:	f000 b958 	b.w	800765c <__retarget_lock_init_recursive>
 80073ac:	bd10      	pop	{r4, pc}
 80073ae:	bf00      	nop
 80073b0:	080074dd 	.word	0x080074dd
 80073b4:	080074ff 	.word	0x080074ff
 80073b8:	08007537 	.word	0x08007537
 80073bc:	0800755b 	.word	0x0800755b
 80073c0:	20000380 	.word	0x20000380

080073c4 <stdio_exit_handler>:
 80073c4:	4a02      	ldr	r2, [pc, #8]	@ (80073d0 <stdio_exit_handler+0xc>)
 80073c6:	4903      	ldr	r1, [pc, #12]	@ (80073d4 <stdio_exit_handler+0x10>)
 80073c8:	4803      	ldr	r0, [pc, #12]	@ (80073d8 <stdio_exit_handler+0x14>)
 80073ca:	f000 b869 	b.w	80074a0 <_fwalk_sglue>
 80073ce:	bf00      	nop
 80073d0:	2000000c 	.word	0x2000000c
 80073d4:	08008d0d 	.word	0x08008d0d
 80073d8:	2000001c 	.word	0x2000001c

080073dc <cleanup_stdio>:
 80073dc:	6841      	ldr	r1, [r0, #4]
 80073de:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <cleanup_stdio+0x34>)
 80073e0:	4299      	cmp	r1, r3
 80073e2:	b510      	push	{r4, lr}
 80073e4:	4604      	mov	r4, r0
 80073e6:	d001      	beq.n	80073ec <cleanup_stdio+0x10>
 80073e8:	f001 fc90 	bl	8008d0c <_fflush_r>
 80073ec:	68a1      	ldr	r1, [r4, #8]
 80073ee:	4b09      	ldr	r3, [pc, #36]	@ (8007414 <cleanup_stdio+0x38>)
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d002      	beq.n	80073fa <cleanup_stdio+0x1e>
 80073f4:	4620      	mov	r0, r4
 80073f6:	f001 fc89 	bl	8008d0c <_fflush_r>
 80073fa:	68e1      	ldr	r1, [r4, #12]
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <cleanup_stdio+0x3c>)
 80073fe:	4299      	cmp	r1, r3
 8007400:	d004      	beq.n	800740c <cleanup_stdio+0x30>
 8007402:	4620      	mov	r0, r4
 8007404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007408:	f001 bc80 	b.w	8008d0c <_fflush_r>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	bf00      	nop
 8007410:	20000380 	.word	0x20000380
 8007414:	200003e8 	.word	0x200003e8
 8007418:	20000450 	.word	0x20000450

0800741c <global_stdio_init.part.0>:
 800741c:	b510      	push	{r4, lr}
 800741e:	4b0b      	ldr	r3, [pc, #44]	@ (800744c <global_stdio_init.part.0+0x30>)
 8007420:	4c0b      	ldr	r4, [pc, #44]	@ (8007450 <global_stdio_init.part.0+0x34>)
 8007422:	4a0c      	ldr	r2, [pc, #48]	@ (8007454 <global_stdio_init.part.0+0x38>)
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	4620      	mov	r0, r4
 8007428:	2200      	movs	r2, #0
 800742a:	2104      	movs	r1, #4
 800742c:	f7ff ff94 	bl	8007358 <std>
 8007430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007434:	2201      	movs	r2, #1
 8007436:	2109      	movs	r1, #9
 8007438:	f7ff ff8e 	bl	8007358 <std>
 800743c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007440:	2202      	movs	r2, #2
 8007442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007446:	2112      	movs	r1, #18
 8007448:	f7ff bf86 	b.w	8007358 <std>
 800744c:	200004b8 	.word	0x200004b8
 8007450:	20000380 	.word	0x20000380
 8007454:	080073c5 	.word	0x080073c5

08007458 <__sfp_lock_acquire>:
 8007458:	4801      	ldr	r0, [pc, #4]	@ (8007460 <__sfp_lock_acquire+0x8>)
 800745a:	f000 b900 	b.w	800765e <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	200004c1 	.word	0x200004c1

08007464 <__sfp_lock_release>:
 8007464:	4801      	ldr	r0, [pc, #4]	@ (800746c <__sfp_lock_release+0x8>)
 8007466:	f000 b8fb 	b.w	8007660 <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	200004c1 	.word	0x200004c1

08007470 <__sinit>:
 8007470:	b510      	push	{r4, lr}
 8007472:	4604      	mov	r4, r0
 8007474:	f7ff fff0 	bl	8007458 <__sfp_lock_acquire>
 8007478:	6a23      	ldr	r3, [r4, #32]
 800747a:	b11b      	cbz	r3, 8007484 <__sinit+0x14>
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007480:	f7ff bff0 	b.w	8007464 <__sfp_lock_release>
 8007484:	4b04      	ldr	r3, [pc, #16]	@ (8007498 <__sinit+0x28>)
 8007486:	6223      	str	r3, [r4, #32]
 8007488:	4b04      	ldr	r3, [pc, #16]	@ (800749c <__sinit+0x2c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f5      	bne.n	800747c <__sinit+0xc>
 8007490:	f7ff ffc4 	bl	800741c <global_stdio_init.part.0>
 8007494:	e7f2      	b.n	800747c <__sinit+0xc>
 8007496:	bf00      	nop
 8007498:	080073dd 	.word	0x080073dd
 800749c:	200004b8 	.word	0x200004b8

080074a0 <_fwalk_sglue>:
 80074a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a4:	4607      	mov	r7, r0
 80074a6:	4688      	mov	r8, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	2600      	movs	r6, #0
 80074ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074b0:	f1b9 0901 	subs.w	r9, r9, #1
 80074b4:	d505      	bpl.n	80074c2 <_fwalk_sglue+0x22>
 80074b6:	6824      	ldr	r4, [r4, #0]
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	d1f7      	bne.n	80074ac <_fwalk_sglue+0xc>
 80074bc:	4630      	mov	r0, r6
 80074be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c2:	89ab      	ldrh	r3, [r5, #12]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d907      	bls.n	80074d8 <_fwalk_sglue+0x38>
 80074c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074cc:	3301      	adds	r3, #1
 80074ce:	d003      	beq.n	80074d8 <_fwalk_sglue+0x38>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c0      	blx	r8
 80074d6:	4306      	orrs	r6, r0
 80074d8:	3568      	adds	r5, #104	@ 0x68
 80074da:	e7e9      	b.n	80074b0 <_fwalk_sglue+0x10>

080074dc <__sread>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	460c      	mov	r4, r1
 80074e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e4:	f000 f86c 	bl	80075c0 <_read_r>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	bfab      	itete	ge
 80074ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074ee:	89a3      	ldrhlt	r3, [r4, #12]
 80074f0:	181b      	addge	r3, r3, r0
 80074f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074f6:	bfac      	ite	ge
 80074f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074fa:	81a3      	strhlt	r3, [r4, #12]
 80074fc:	bd10      	pop	{r4, pc}

080074fe <__swrite>:
 80074fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007502:	461f      	mov	r7, r3
 8007504:	898b      	ldrh	r3, [r1, #12]
 8007506:	05db      	lsls	r3, r3, #23
 8007508:	4605      	mov	r5, r0
 800750a:	460c      	mov	r4, r1
 800750c:	4616      	mov	r6, r2
 800750e:	d505      	bpl.n	800751c <__swrite+0x1e>
 8007510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007514:	2302      	movs	r3, #2
 8007516:	2200      	movs	r2, #0
 8007518:	f000 f840 	bl	800759c <_lseek_r>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	4632      	mov	r2, r6
 800752a:	463b      	mov	r3, r7
 800752c:	4628      	mov	r0, r5
 800752e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007532:	f000 b857 	b.w	80075e4 <_write_r>

08007536 <__sseek>:
 8007536:	b510      	push	{r4, lr}
 8007538:	460c      	mov	r4, r1
 800753a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753e:	f000 f82d 	bl	800759c <_lseek_r>
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	bf15      	itete	ne
 8007548:	6560      	strne	r0, [r4, #84]	@ 0x54
 800754a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800754e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007552:	81a3      	strheq	r3, [r4, #12]
 8007554:	bf18      	it	ne
 8007556:	81a3      	strhne	r3, [r4, #12]
 8007558:	bd10      	pop	{r4, pc}

0800755a <__sclose>:
 800755a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755e:	f000 b80d 	b.w	800757c <_close_r>

08007562 <memset>:
 8007562:	4402      	add	r2, r0
 8007564:	4603      	mov	r3, r0
 8007566:	4293      	cmp	r3, r2
 8007568:	d100      	bne.n	800756c <memset+0xa>
 800756a:	4770      	bx	lr
 800756c:	f803 1b01 	strb.w	r1, [r3], #1
 8007570:	e7f9      	b.n	8007566 <memset+0x4>
	...

08007574 <_localeconv_r>:
 8007574:	4800      	ldr	r0, [pc, #0]	@ (8007578 <_localeconv_r+0x4>)
 8007576:	4770      	bx	lr
 8007578:	20000158 	.word	0x20000158

0800757c <_close_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d06      	ldr	r5, [pc, #24]	@ (8007598 <_close_r+0x1c>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7fa f8f8 	bl	800177c <_close>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_close_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_close_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	200004bc 	.word	0x200004bc

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	@ (80075bc <_lseek_r+0x20>)
 80075a0:	4604      	mov	r4, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fa f90d 	bl	80017ca <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	200004bc 	.word	0x200004bc

080075c0 <_read_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	@ (80075e0 <_read_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fa f89b 	bl	800170a <_read>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_read_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_read_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	200004bc 	.word	0x200004bc

080075e4 <_write_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	@ (8007604 <_write_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7fa f8a6 	bl	8001744 <_write>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_write_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_write_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	200004bc 	.word	0x200004bc

08007608 <__errno>:
 8007608:	4b01      	ldr	r3, [pc, #4]	@ (8007610 <__errno+0x8>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000018 	.word	0x20000018

08007614 <__libc_init_array>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4d0d      	ldr	r5, [pc, #52]	@ (800764c <__libc_init_array+0x38>)
 8007618:	4c0d      	ldr	r4, [pc, #52]	@ (8007650 <__libc_init_array+0x3c>)
 800761a:	1b64      	subs	r4, r4, r5
 800761c:	10a4      	asrs	r4, r4, #2
 800761e:	2600      	movs	r6, #0
 8007620:	42a6      	cmp	r6, r4
 8007622:	d109      	bne.n	8007638 <__libc_init_array+0x24>
 8007624:	4d0b      	ldr	r5, [pc, #44]	@ (8007654 <__libc_init_array+0x40>)
 8007626:	4c0c      	ldr	r4, [pc, #48]	@ (8007658 <__libc_init_array+0x44>)
 8007628:	f001 febe 	bl	80093a8 <_init>
 800762c:	1b64      	subs	r4, r4, r5
 800762e:	10a4      	asrs	r4, r4, #2
 8007630:	2600      	movs	r6, #0
 8007632:	42a6      	cmp	r6, r4
 8007634:	d105      	bne.n	8007642 <__libc_init_array+0x2e>
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	f855 3b04 	ldr.w	r3, [r5], #4
 800763c:	4798      	blx	r3
 800763e:	3601      	adds	r6, #1
 8007640:	e7ee      	b.n	8007620 <__libc_init_array+0xc>
 8007642:	f855 3b04 	ldr.w	r3, [r5], #4
 8007646:	4798      	blx	r3
 8007648:	3601      	adds	r6, #1
 800764a:	e7f2      	b.n	8007632 <__libc_init_array+0x1e>
 800764c:	08009780 	.word	0x08009780
 8007650:	08009780 	.word	0x08009780
 8007654:	08009780 	.word	0x08009780
 8007658:	08009784 	.word	0x08009784

0800765c <__retarget_lock_init_recursive>:
 800765c:	4770      	bx	lr

0800765e <__retarget_lock_acquire_recursive>:
 800765e:	4770      	bx	lr

08007660 <__retarget_lock_release_recursive>:
 8007660:	4770      	bx	lr

08007662 <quorem>:
 8007662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	6903      	ldr	r3, [r0, #16]
 8007668:	690c      	ldr	r4, [r1, #16]
 800766a:	42a3      	cmp	r3, r4
 800766c:	4607      	mov	r7, r0
 800766e:	db7e      	blt.n	800776e <quorem+0x10c>
 8007670:	3c01      	subs	r4, #1
 8007672:	f101 0814 	add.w	r8, r1, #20
 8007676:	00a3      	lsls	r3, r4, #2
 8007678:	f100 0514 	add.w	r5, r0, #20
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800768c:	3301      	adds	r3, #1
 800768e:	429a      	cmp	r2, r3
 8007690:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007694:	fbb2 f6f3 	udiv	r6, r2, r3
 8007698:	d32e      	bcc.n	80076f8 <quorem+0x96>
 800769a:	f04f 0a00 	mov.w	sl, #0
 800769e:	46c4      	mov	ip, r8
 80076a0:	46ae      	mov	lr, r5
 80076a2:	46d3      	mov	fp, sl
 80076a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076a8:	b298      	uxth	r0, r3
 80076aa:	fb06 a000 	mla	r0, r6, r0, sl
 80076ae:	0c02      	lsrs	r2, r0, #16
 80076b0:	0c1b      	lsrs	r3, r3, #16
 80076b2:	fb06 2303 	mla	r3, r6, r3, r2
 80076b6:	f8de 2000 	ldr.w	r2, [lr]
 80076ba:	b280      	uxth	r0, r0
 80076bc:	b292      	uxth	r2, r2
 80076be:	1a12      	subs	r2, r2, r0
 80076c0:	445a      	add	r2, fp
 80076c2:	f8de 0000 	ldr.w	r0, [lr]
 80076c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076d4:	b292      	uxth	r2, r2
 80076d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076da:	45e1      	cmp	r9, ip
 80076dc:	f84e 2b04 	str.w	r2, [lr], #4
 80076e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076e4:	d2de      	bcs.n	80076a4 <quorem+0x42>
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	58eb      	ldr	r3, [r5, r3]
 80076ea:	b92b      	cbnz	r3, 80076f8 <quorem+0x96>
 80076ec:	9b01      	ldr	r3, [sp, #4]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	429d      	cmp	r5, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	d32f      	bcc.n	8007756 <quorem+0xf4>
 80076f6:	613c      	str	r4, [r7, #16]
 80076f8:	4638      	mov	r0, r7
 80076fa:	f001 f97b 	bl	80089f4 <__mcmp>
 80076fe:	2800      	cmp	r0, #0
 8007700:	db25      	blt.n	800774e <quorem+0xec>
 8007702:	4629      	mov	r1, r5
 8007704:	2000      	movs	r0, #0
 8007706:	f858 2b04 	ldr.w	r2, [r8], #4
 800770a:	f8d1 c000 	ldr.w	ip, [r1]
 800770e:	fa1f fe82 	uxth.w	lr, r2
 8007712:	fa1f f38c 	uxth.w	r3, ip
 8007716:	eba3 030e 	sub.w	r3, r3, lr
 800771a:	4403      	add	r3, r0
 800771c:	0c12      	lsrs	r2, r2, #16
 800771e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007722:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772c:	45c1      	cmp	r9, r8
 800772e:	f841 3b04 	str.w	r3, [r1], #4
 8007732:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007736:	d2e6      	bcs.n	8007706 <quorem+0xa4>
 8007738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800773c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007740:	b922      	cbnz	r2, 800774c <quorem+0xea>
 8007742:	3b04      	subs	r3, #4
 8007744:	429d      	cmp	r5, r3
 8007746:	461a      	mov	r2, r3
 8007748:	d30b      	bcc.n	8007762 <quorem+0x100>
 800774a:	613c      	str	r4, [r7, #16]
 800774c:	3601      	adds	r6, #1
 800774e:	4630      	mov	r0, r6
 8007750:	b003      	add	sp, #12
 8007752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	3b04      	subs	r3, #4
 800775a:	2a00      	cmp	r2, #0
 800775c:	d1cb      	bne.n	80076f6 <quorem+0x94>
 800775e:	3c01      	subs	r4, #1
 8007760:	e7c6      	b.n	80076f0 <quorem+0x8e>
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	3b04      	subs	r3, #4
 8007766:	2a00      	cmp	r2, #0
 8007768:	d1ef      	bne.n	800774a <quorem+0xe8>
 800776a:	3c01      	subs	r4, #1
 800776c:	e7ea      	b.n	8007744 <quorem+0xe2>
 800776e:	2000      	movs	r0, #0
 8007770:	e7ee      	b.n	8007750 <quorem+0xee>
 8007772:	0000      	movs	r0, r0
 8007774:	0000      	movs	r0, r0
	...

08007778 <_dtoa_r>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	69c7      	ldr	r7, [r0, #28]
 800777e:	b099      	sub	sp, #100	@ 0x64
 8007780:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007784:	ec55 4b10 	vmov	r4, r5, d0
 8007788:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800778a:	9109      	str	r1, [sp, #36]	@ 0x24
 800778c:	4683      	mov	fp, r0
 800778e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007790:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007792:	b97f      	cbnz	r7, 80077b4 <_dtoa_r+0x3c>
 8007794:	2010      	movs	r0, #16
 8007796:	f000 fdfd 	bl	8008394 <malloc>
 800779a:	4602      	mov	r2, r0
 800779c:	f8cb 001c 	str.w	r0, [fp, #28]
 80077a0:	b920      	cbnz	r0, 80077ac <_dtoa_r+0x34>
 80077a2:	4ba7      	ldr	r3, [pc, #668]	@ (8007a40 <_dtoa_r+0x2c8>)
 80077a4:	21ef      	movs	r1, #239	@ 0xef
 80077a6:	48a7      	ldr	r0, [pc, #668]	@ (8007a44 <_dtoa_r+0x2cc>)
 80077a8:	f001 faf6 	bl	8008d98 <__assert_func>
 80077ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077b0:	6007      	str	r7, [r0, #0]
 80077b2:	60c7      	str	r7, [r0, #12]
 80077b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	b159      	cbz	r1, 80077d4 <_dtoa_r+0x5c>
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	604a      	str	r2, [r1, #4]
 80077c0:	2301      	movs	r3, #1
 80077c2:	4093      	lsls	r3, r2
 80077c4:	608b      	str	r3, [r1, #8]
 80077c6:	4658      	mov	r0, fp
 80077c8:	f000 feda 	bl	8008580 <_Bfree>
 80077cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	1e2b      	subs	r3, r5, #0
 80077d6:	bfb9      	ittee	lt
 80077d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077dc:	9303      	strlt	r3, [sp, #12]
 80077de:	2300      	movge	r3, #0
 80077e0:	6033      	strge	r3, [r6, #0]
 80077e2:	9f03      	ldr	r7, [sp, #12]
 80077e4:	4b98      	ldr	r3, [pc, #608]	@ (8007a48 <_dtoa_r+0x2d0>)
 80077e6:	bfbc      	itt	lt
 80077e8:	2201      	movlt	r2, #1
 80077ea:	6032      	strlt	r2, [r6, #0]
 80077ec:	43bb      	bics	r3, r7
 80077ee:	d112      	bne.n	8007816 <_dtoa_r+0x9e>
 80077f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077fc:	4323      	orrs	r3, r4
 80077fe:	f000 854d 	beq.w	800829c <_dtoa_r+0xb24>
 8007802:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007804:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a5c <_dtoa_r+0x2e4>
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 854f 	beq.w	80082ac <_dtoa_r+0xb34>
 800780e:	f10a 0303 	add.w	r3, sl, #3
 8007812:	f000 bd49 	b.w	80082a8 <_dtoa_r+0xb30>
 8007816:	ed9d 7b02 	vldr	d7, [sp, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	ec51 0b17 	vmov	r0, r1, d7
 8007820:	2300      	movs	r3, #0
 8007822:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007826:	f7f9 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800782a:	4680      	mov	r8, r0
 800782c:	b158      	cbz	r0, 8007846 <_dtoa_r+0xce>
 800782e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007830:	2301      	movs	r3, #1
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007836:	b113      	cbz	r3, 800783e <_dtoa_r+0xc6>
 8007838:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800783a:	4b84      	ldr	r3, [pc, #528]	@ (8007a4c <_dtoa_r+0x2d4>)
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a60 <_dtoa_r+0x2e8>
 8007842:	f000 bd33 	b.w	80082ac <_dtoa_r+0xb34>
 8007846:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800784a:	aa16      	add	r2, sp, #88	@ 0x58
 800784c:	a917      	add	r1, sp, #92	@ 0x5c
 800784e:	4658      	mov	r0, fp
 8007850:	f001 f980 	bl	8008b54 <__d2b>
 8007854:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007858:	4681      	mov	r9, r0
 800785a:	2e00      	cmp	r6, #0
 800785c:	d077      	beq.n	800794e <_dtoa_r+0x1d6>
 800785e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007860:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800786c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007870:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007874:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007878:	4619      	mov	r1, r3
 800787a:	2200      	movs	r2, #0
 800787c:	4b74      	ldr	r3, [pc, #464]	@ (8007a50 <_dtoa_r+0x2d8>)
 800787e:	f7f8 fd03 	bl	8000288 <__aeabi_dsub>
 8007882:	a369      	add	r3, pc, #420	@ (adr r3, 8007a28 <_dtoa_r+0x2b0>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 feb6 	bl	80005f8 <__aeabi_dmul>
 800788c:	a368      	add	r3, pc, #416	@ (adr r3, 8007a30 <_dtoa_r+0x2b8>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 fcfb 	bl	800028c <__adddf3>
 8007896:	4604      	mov	r4, r0
 8007898:	4630      	mov	r0, r6
 800789a:	460d      	mov	r5, r1
 800789c:	f7f8 fe42 	bl	8000524 <__aeabi_i2d>
 80078a0:	a365      	add	r3, pc, #404	@ (adr r3, 8007a38 <_dtoa_r+0x2c0>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fea7 	bl	80005f8 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f8 fceb 	bl	800028c <__adddf3>
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	f7f9 f94d 	bl	8000b58 <__aeabi_d2iz>
 80078be:	2200      	movs	r2, #0
 80078c0:	4607      	mov	r7, r0
 80078c2:	2300      	movs	r3, #0
 80078c4:	4620      	mov	r0, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7f9 f908 	bl	8000adc <__aeabi_dcmplt>
 80078cc:	b140      	cbz	r0, 80078e0 <_dtoa_r+0x168>
 80078ce:	4638      	mov	r0, r7
 80078d0:	f7f8 fe28 	bl	8000524 <__aeabi_i2d>
 80078d4:	4622      	mov	r2, r4
 80078d6:	462b      	mov	r3, r5
 80078d8:	f7f9 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80078dc:	b900      	cbnz	r0, 80078e0 <_dtoa_r+0x168>
 80078de:	3f01      	subs	r7, #1
 80078e0:	2f16      	cmp	r7, #22
 80078e2:	d851      	bhi.n	8007988 <_dtoa_r+0x210>
 80078e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a54 <_dtoa_r+0x2dc>)
 80078e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078f2:	f7f9 f8f3 	bl	8000adc <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d048      	beq.n	800798c <_dtoa_r+0x214>
 80078fa:	3f01      	subs	r7, #1
 80078fc:	2300      	movs	r3, #0
 80078fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8007900:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007902:	1b9b      	subs	r3, r3, r6
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	bf44      	itt	mi
 8007908:	f1c3 0801 	rsbmi	r8, r3, #1
 800790c:	2300      	movmi	r3, #0
 800790e:	9208      	str	r2, [sp, #32]
 8007910:	bf54      	ite	pl
 8007912:	f04f 0800 	movpl.w	r8, #0
 8007916:	9308      	strmi	r3, [sp, #32]
 8007918:	2f00      	cmp	r7, #0
 800791a:	db39      	blt.n	8007990 <_dtoa_r+0x218>
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007920:	443b      	add	r3, r7
 8007922:	9308      	str	r3, [sp, #32]
 8007924:	2300      	movs	r3, #0
 8007926:	930a      	str	r3, [sp, #40]	@ 0x28
 8007928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792a:	2b09      	cmp	r3, #9
 800792c:	d864      	bhi.n	80079f8 <_dtoa_r+0x280>
 800792e:	2b05      	cmp	r3, #5
 8007930:	bfc4      	itt	gt
 8007932:	3b04      	subgt	r3, #4
 8007934:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	f1a3 0302 	sub.w	r3, r3, #2
 800793c:	bfcc      	ite	gt
 800793e:	2400      	movgt	r4, #0
 8007940:	2401      	movle	r4, #1
 8007942:	2b03      	cmp	r3, #3
 8007944:	d863      	bhi.n	8007a0e <_dtoa_r+0x296>
 8007946:	e8df f003 	tbb	[pc, r3]
 800794a:	372a      	.short	0x372a
 800794c:	5535      	.short	0x5535
 800794e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007952:	441e      	add	r6, r3
 8007954:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007958:	2b20      	cmp	r3, #32
 800795a:	bfc1      	itttt	gt
 800795c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007960:	409f      	lslgt	r7, r3
 8007962:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007966:	fa24 f303 	lsrgt.w	r3, r4, r3
 800796a:	bfd6      	itet	le
 800796c:	f1c3 0320 	rsble	r3, r3, #32
 8007970:	ea47 0003 	orrgt.w	r0, r7, r3
 8007974:	fa04 f003 	lslle.w	r0, r4, r3
 8007978:	f7f8 fdc4 	bl	8000504 <__aeabi_ui2d>
 800797c:	2201      	movs	r2, #1
 800797e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007982:	3e01      	subs	r6, #1
 8007984:	9214      	str	r2, [sp, #80]	@ 0x50
 8007986:	e777      	b.n	8007878 <_dtoa_r+0x100>
 8007988:	2301      	movs	r3, #1
 800798a:	e7b8      	b.n	80078fe <_dtoa_r+0x186>
 800798c:	9012      	str	r0, [sp, #72]	@ 0x48
 800798e:	e7b7      	b.n	8007900 <_dtoa_r+0x188>
 8007990:	427b      	negs	r3, r7
 8007992:	930a      	str	r3, [sp, #40]	@ 0x28
 8007994:	2300      	movs	r3, #0
 8007996:	eba8 0807 	sub.w	r8, r8, r7
 800799a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800799c:	e7c4      	b.n	8007928 <_dtoa_r+0x1b0>
 800799e:	2300      	movs	r3, #0
 80079a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dc35      	bgt.n	8007a14 <_dtoa_r+0x29c>
 80079a8:	2301      	movs	r3, #1
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	9307      	str	r3, [sp, #28]
 80079ae:	461a      	mov	r2, r3
 80079b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80079b2:	e00b      	b.n	80079cc <_dtoa_r+0x254>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e7f3      	b.n	80079a0 <_dtoa_r+0x228>
 80079b8:	2300      	movs	r3, #0
 80079ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	bfb8      	it	lt
 80079ca:	2301      	movlt	r3, #1
 80079cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079d0:	2100      	movs	r1, #0
 80079d2:	2204      	movs	r2, #4
 80079d4:	f102 0514 	add.w	r5, r2, #20
 80079d8:	429d      	cmp	r5, r3
 80079da:	d91f      	bls.n	8007a1c <_dtoa_r+0x2a4>
 80079dc:	6041      	str	r1, [r0, #4]
 80079de:	4658      	mov	r0, fp
 80079e0:	f000 fd8e 	bl	8008500 <_Balloc>
 80079e4:	4682      	mov	sl, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d13c      	bne.n	8007a64 <_dtoa_r+0x2ec>
 80079ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007a58 <_dtoa_r+0x2e0>)
 80079ec:	4602      	mov	r2, r0
 80079ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80079f2:	e6d8      	b.n	80077a6 <_dtoa_r+0x2e>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e7e0      	b.n	80079ba <_dtoa_r+0x242>
 80079f8:	2401      	movs	r4, #1
 80079fa:	2300      	movs	r3, #0
 80079fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a00:	f04f 33ff 	mov.w	r3, #4294967295
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2312      	movs	r3, #18
 8007a0c:	e7d0      	b.n	80079b0 <_dtoa_r+0x238>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a12:	e7f5      	b.n	8007a00 <_dtoa_r+0x288>
 8007a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	e7d7      	b.n	80079cc <_dtoa_r+0x254>
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	0052      	lsls	r2, r2, #1
 8007a20:	e7d8      	b.n	80079d4 <_dtoa_r+0x25c>
 8007a22:	bf00      	nop
 8007a24:	f3af 8000 	nop.w
 8007a28:	636f4361 	.word	0x636f4361
 8007a2c:	3fd287a7 	.word	0x3fd287a7
 8007a30:	8b60c8b3 	.word	0x8b60c8b3
 8007a34:	3fc68a28 	.word	0x3fc68a28
 8007a38:	509f79fb 	.word	0x509f79fb
 8007a3c:	3fd34413 	.word	0x3fd34413
 8007a40:	08009449 	.word	0x08009449
 8007a44:	08009460 	.word	0x08009460
 8007a48:	7ff00000 	.word	0x7ff00000
 8007a4c:	08009419 	.word	0x08009419
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	08009558 	.word	0x08009558
 8007a58:	080094b8 	.word	0x080094b8
 8007a5c:	08009445 	.word	0x08009445
 8007a60:	08009418 	.word	0x08009418
 8007a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	9b07      	ldr	r3, [sp, #28]
 8007a6c:	2b0e      	cmp	r3, #14
 8007a6e:	f200 80a4 	bhi.w	8007bba <_dtoa_r+0x442>
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	f000 80a1 	beq.w	8007bba <_dtoa_r+0x442>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	dd33      	ble.n	8007ae4 <_dtoa_r+0x36c>
 8007a7c:	4bad      	ldr	r3, [pc, #692]	@ (8007d34 <_dtoa_r+0x5bc>)
 8007a7e:	f007 020f 	and.w	r2, r7, #15
 8007a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a86:	ed93 7b00 	vldr	d7, [r3]
 8007a8a:	05f8      	lsls	r0, r7, #23
 8007a8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a94:	d516      	bpl.n	8007ac4 <_dtoa_r+0x34c>
 8007a96:	4ba8      	ldr	r3, [pc, #672]	@ (8007d38 <_dtoa_r+0x5c0>)
 8007a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aa0:	f7f8 fed4 	bl	800084c <__aeabi_ddiv>
 8007aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa8:	f004 040f 	and.w	r4, r4, #15
 8007aac:	2603      	movs	r6, #3
 8007aae:	4da2      	ldr	r5, [pc, #648]	@ (8007d38 <_dtoa_r+0x5c0>)
 8007ab0:	b954      	cbnz	r4, 8007ac8 <_dtoa_r+0x350>
 8007ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aba:	f7f8 fec7 	bl	800084c <__aeabi_ddiv>
 8007abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac2:	e028      	b.n	8007b16 <_dtoa_r+0x39e>
 8007ac4:	2602      	movs	r6, #2
 8007ac6:	e7f2      	b.n	8007aae <_dtoa_r+0x336>
 8007ac8:	07e1      	lsls	r1, r4, #31
 8007aca:	d508      	bpl.n	8007ade <_dtoa_r+0x366>
 8007acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ad4:	f7f8 fd90 	bl	80005f8 <__aeabi_dmul>
 8007ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007adc:	3601      	adds	r6, #1
 8007ade:	1064      	asrs	r4, r4, #1
 8007ae0:	3508      	adds	r5, #8
 8007ae2:	e7e5      	b.n	8007ab0 <_dtoa_r+0x338>
 8007ae4:	f000 80d2 	beq.w	8007c8c <_dtoa_r+0x514>
 8007ae8:	427c      	negs	r4, r7
 8007aea:	4b92      	ldr	r3, [pc, #584]	@ (8007d34 <_dtoa_r+0x5bc>)
 8007aec:	4d92      	ldr	r5, [pc, #584]	@ (8007d38 <_dtoa_r+0x5c0>)
 8007aee:	f004 020f 	and.w	r2, r4, #15
 8007af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007afe:	f7f8 fd7b 	bl	80005f8 <__aeabi_dmul>
 8007b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b06:	1124      	asrs	r4, r4, #4
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2602      	movs	r6, #2
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	f040 80b2 	bne.w	8007c76 <_dtoa_r+0x4fe>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1d3      	bne.n	8007abe <_dtoa_r+0x346>
 8007b16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80b7 	beq.w	8007c90 <_dtoa_r+0x518>
 8007b22:	4b86      	ldr	r3, [pc, #536]	@ (8007d3c <_dtoa_r+0x5c4>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 ffd7 	bl	8000adc <__aeabi_dcmplt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f000 80ae 	beq.w	8007c90 <_dtoa_r+0x518>
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 80aa 	beq.w	8007c90 <_dtoa_r+0x518>
 8007b3c:	9b00      	ldr	r3, [sp, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dd37      	ble.n	8007bb2 <_dtoa_r+0x43a>
 8007b42:	1e7b      	subs	r3, r7, #1
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	4620      	mov	r0, r4
 8007b48:	4b7d      	ldr	r3, [pc, #500]	@ (8007d40 <_dtoa_r+0x5c8>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b56:	9c00      	ldr	r4, [sp, #0]
 8007b58:	3601      	adds	r6, #1
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7f8 fce2 	bl	8000524 <__aeabi_i2d>
 8007b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	4b76      	ldr	r3, [pc, #472]	@ (8007d44 <_dtoa_r+0x5cc>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f7f8 fb8e 	bl	800028c <__adddf3>
 8007b70:	4605      	mov	r5, r0
 8007b72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b76:	2c00      	cmp	r4, #0
 8007b78:	f040 808d 	bne.w	8007c96 <_dtoa_r+0x51e>
 8007b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b80:	4b71      	ldr	r3, [pc, #452]	@ (8007d48 <_dtoa_r+0x5d0>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fb80 	bl	8000288 <__aeabi_dsub>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b90:	462a      	mov	r2, r5
 8007b92:	4633      	mov	r3, r6
 8007b94:	f7f8 ffc0 	bl	8000b18 <__aeabi_dcmpgt>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f040 828b 	bne.w	80080b4 <_dtoa_r+0x93c>
 8007b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ba8:	f7f8 ff98 	bl	8000adc <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f040 8128 	bne.w	8007e02 <_dtoa_r+0x68a>
 8007bb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007bba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f2c0 815a 	blt.w	8007e76 <_dtoa_r+0x6fe>
 8007bc2:	2f0e      	cmp	r7, #14
 8007bc4:	f300 8157 	bgt.w	8007e76 <_dtoa_r+0x6fe>
 8007bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d34 <_dtoa_r+0x5bc>)
 8007bca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bce:	ed93 7b00 	vldr	d7, [r3]
 8007bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	ed8d 7b00 	vstr	d7, [sp]
 8007bda:	da03      	bge.n	8007be4 <_dtoa_r+0x46c>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f340 8101 	ble.w	8007de6 <_dtoa_r+0x66e>
 8007be4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007be8:	4656      	mov	r6, sl
 8007bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fe2b 	bl	800084c <__aeabi_ddiv>
 8007bf6:	f7f8 ffaf 	bl	8000b58 <__aeabi_d2iz>
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	f7f8 fc92 	bl	8000524 <__aeabi_i2d>
 8007c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c04:	f7f8 fcf8 	bl	80005f8 <__aeabi_dmul>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c14:	f7f8 fb38 	bl	8000288 <__aeabi_dsub>
 8007c18:	f806 4b01 	strb.w	r4, [r6], #1
 8007c1c:	9d07      	ldr	r5, [sp, #28]
 8007c1e:	eba6 040a 	sub.w	r4, r6, sl
 8007c22:	42a5      	cmp	r5, r4
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	f040 8117 	bne.w	8007e5a <_dtoa_r+0x6e2>
 8007c2c:	f7f8 fb2e 	bl	800028c <__adddf3>
 8007c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c34:	4604      	mov	r4, r0
 8007c36:	460d      	mov	r5, r1
 8007c38:	f7f8 ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f040 80f9 	bne.w	8007e34 <_dtoa_r+0x6bc>
 8007c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c4e:	b118      	cbz	r0, 8007c58 <_dtoa_r+0x4e0>
 8007c50:	f018 0f01 	tst.w	r8, #1
 8007c54:	f040 80ee 	bne.w	8007e34 <_dtoa_r+0x6bc>
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4658      	mov	r0, fp
 8007c5c:	f000 fc90 	bl	8008580 <_Bfree>
 8007c60:	2300      	movs	r3, #0
 8007c62:	7033      	strb	r3, [r6, #0]
 8007c64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c66:	3701      	adds	r7, #1
 8007c68:	601f      	str	r7, [r3, #0]
 8007c6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 831d 	beq.w	80082ac <_dtoa_r+0xb34>
 8007c72:	601e      	str	r6, [r3, #0]
 8007c74:	e31a      	b.n	80082ac <_dtoa_r+0xb34>
 8007c76:	07e2      	lsls	r2, r4, #31
 8007c78:	d505      	bpl.n	8007c86 <_dtoa_r+0x50e>
 8007c7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	3601      	adds	r6, #1
 8007c84:	2301      	movs	r3, #1
 8007c86:	1064      	asrs	r4, r4, #1
 8007c88:	3508      	adds	r5, #8
 8007c8a:	e73f      	b.n	8007b0c <_dtoa_r+0x394>
 8007c8c:	2602      	movs	r6, #2
 8007c8e:	e742      	b.n	8007b16 <_dtoa_r+0x39e>
 8007c90:	9c07      	ldr	r4, [sp, #28]
 8007c92:	9704      	str	r7, [sp, #16]
 8007c94:	e761      	b.n	8007b5a <_dtoa_r+0x3e2>
 8007c96:	4b27      	ldr	r3, [pc, #156]	@ (8007d34 <_dtoa_r+0x5bc>)
 8007c98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ca2:	4454      	add	r4, sl
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d053      	beq.n	8007d50 <_dtoa_r+0x5d8>
 8007ca8:	4928      	ldr	r1, [pc, #160]	@ (8007d4c <_dtoa_r+0x5d4>)
 8007caa:	2000      	movs	r0, #0
 8007cac:	f7f8 fdce 	bl	800084c <__aeabi_ddiv>
 8007cb0:	4633      	mov	r3, r6
 8007cb2:	462a      	mov	r2, r5
 8007cb4:	f7f8 fae8 	bl	8000288 <__aeabi_dsub>
 8007cb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cbc:	4656      	mov	r6, sl
 8007cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc2:	f7f8 ff49 	bl	8000b58 <__aeabi_d2iz>
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	f7f8 fc2c 	bl	8000524 <__aeabi_i2d>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd4:	f7f8 fad8 	bl	8000288 <__aeabi_dsub>
 8007cd8:	3530      	adds	r5, #48	@ 0x30
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ce2:	f806 5b01 	strb.w	r5, [r6], #1
 8007ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cea:	f7f8 fef7 	bl	8000adc <__aeabi_dcmplt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d171      	bne.n	8007dd6 <_dtoa_r+0x65e>
 8007cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf6:	4911      	ldr	r1, [pc, #68]	@ (8007d3c <_dtoa_r+0x5c4>)
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f7f8 fac5 	bl	8000288 <__aeabi_dsub>
 8007cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d02:	f7f8 feeb 	bl	8000adc <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f040 8095 	bne.w	8007e36 <_dtoa_r+0x6be>
 8007d0c:	42a6      	cmp	r6, r4
 8007d0e:	f43f af50 	beq.w	8007bb2 <_dtoa_r+0x43a>
 8007d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d16:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <_dtoa_r+0x5c8>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f7f8 fc6d 	bl	80005f8 <__aeabi_dmul>
 8007d1e:	4b08      	ldr	r3, [pc, #32]	@ (8007d40 <_dtoa_r+0x5c8>)
 8007d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d24:	2200      	movs	r2, #0
 8007d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d2a:	f7f8 fc65 	bl	80005f8 <__aeabi_dmul>
 8007d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d32:	e7c4      	b.n	8007cbe <_dtoa_r+0x546>
 8007d34:	08009558 	.word	0x08009558
 8007d38:	08009530 	.word	0x08009530
 8007d3c:	3ff00000 	.word	0x3ff00000
 8007d40:	40240000 	.word	0x40240000
 8007d44:	401c0000 	.word	0x401c0000
 8007d48:	40140000 	.word	0x40140000
 8007d4c:	3fe00000 	.word	0x3fe00000
 8007d50:	4631      	mov	r1, r6
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7f8 fc50 	bl	80005f8 <__aeabi_dmul>
 8007d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d5e:	4656      	mov	r6, sl
 8007d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d64:	f7f8 fef8 	bl	8000b58 <__aeabi_d2iz>
 8007d68:	4605      	mov	r5, r0
 8007d6a:	f7f8 fbdb 	bl	8000524 <__aeabi_i2d>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d76:	f7f8 fa87 	bl	8000288 <__aeabi_dsub>
 8007d7a:	3530      	adds	r5, #48	@ 0x30
 8007d7c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	d124      	bne.n	8007dda <_dtoa_r+0x662>
 8007d90:	4bac      	ldr	r3, [pc, #688]	@ (8008044 <_dtoa_r+0x8cc>)
 8007d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d96:	f7f8 fa79 	bl	800028c <__adddf3>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da2:	f7f8 feb9 	bl	8000b18 <__aeabi_dcmpgt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d145      	bne.n	8007e36 <_dtoa_r+0x6be>
 8007daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dae:	49a5      	ldr	r1, [pc, #660]	@ (8008044 <_dtoa_r+0x8cc>)
 8007db0:	2000      	movs	r0, #0
 8007db2:	f7f8 fa69 	bl	8000288 <__aeabi_dsub>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dbe:	f7f8 fe8d 	bl	8000adc <__aeabi_dcmplt>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f aef5 	beq.w	8007bb2 <_dtoa_r+0x43a>
 8007dc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007dca:	1e73      	subs	r3, r6, #1
 8007dcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007dce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dd2:	2b30      	cmp	r3, #48	@ 0x30
 8007dd4:	d0f8      	beq.n	8007dc8 <_dtoa_r+0x650>
 8007dd6:	9f04      	ldr	r7, [sp, #16]
 8007dd8:	e73e      	b.n	8007c58 <_dtoa_r+0x4e0>
 8007dda:	4b9b      	ldr	r3, [pc, #620]	@ (8008048 <_dtoa_r+0x8d0>)
 8007ddc:	f7f8 fc0c 	bl	80005f8 <__aeabi_dmul>
 8007de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de4:	e7bc      	b.n	8007d60 <_dtoa_r+0x5e8>
 8007de6:	d10c      	bne.n	8007e02 <_dtoa_r+0x68a>
 8007de8:	4b98      	ldr	r3, [pc, #608]	@ (800804c <_dtoa_r+0x8d4>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007df0:	f7f8 fc02 	bl	80005f8 <__aeabi_dmul>
 8007df4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df8:	f7f8 fe84 	bl	8000b04 <__aeabi_dcmpge>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f000 8157 	beq.w	80080b0 <_dtoa_r+0x938>
 8007e02:	2400      	movs	r4, #0
 8007e04:	4625      	mov	r5, r4
 8007e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	4656      	mov	r6, sl
 8007e0e:	2700      	movs	r7, #0
 8007e10:	4621      	mov	r1, r4
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fbb4 	bl	8008580 <_Bfree>
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	d0dc      	beq.n	8007dd6 <_dtoa_r+0x65e>
 8007e1c:	b12f      	cbz	r7, 8007e2a <_dtoa_r+0x6b2>
 8007e1e:	42af      	cmp	r7, r5
 8007e20:	d003      	beq.n	8007e2a <_dtoa_r+0x6b2>
 8007e22:	4639      	mov	r1, r7
 8007e24:	4658      	mov	r0, fp
 8007e26:	f000 fbab 	bl	8008580 <_Bfree>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4658      	mov	r0, fp
 8007e2e:	f000 fba7 	bl	8008580 <_Bfree>
 8007e32:	e7d0      	b.n	8007dd6 <_dtoa_r+0x65e>
 8007e34:	9704      	str	r7, [sp, #16]
 8007e36:	4633      	mov	r3, r6
 8007e38:	461e      	mov	r6, r3
 8007e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3e:	2a39      	cmp	r2, #57	@ 0x39
 8007e40:	d107      	bne.n	8007e52 <_dtoa_r+0x6da>
 8007e42:	459a      	cmp	sl, r3
 8007e44:	d1f8      	bne.n	8007e38 <_dtoa_r+0x6c0>
 8007e46:	9a04      	ldr	r2, [sp, #16]
 8007e48:	3201      	adds	r2, #1
 8007e4a:	9204      	str	r2, [sp, #16]
 8007e4c:	2230      	movs	r2, #48	@ 0x30
 8007e4e:	f88a 2000 	strb.w	r2, [sl]
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	3201      	adds	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	e7bd      	b.n	8007dd6 <_dtoa_r+0x65e>
 8007e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008048 <_dtoa_r+0x8d0>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f7f8 fbcb 	bl	80005f8 <__aeabi_dmul>
 8007e62:	2200      	movs	r2, #0
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	f7f8 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f43f aebb 	beq.w	8007bea <_dtoa_r+0x472>
 8007e74:	e6f0      	b.n	8007c58 <_dtoa_r+0x4e0>
 8007e76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	f000 80db 	beq.w	8008034 <_dtoa_r+0x8bc>
 8007e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e80:	2a01      	cmp	r2, #1
 8007e82:	f300 80bf 	bgt.w	8008004 <_dtoa_r+0x88c>
 8007e86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e88:	2a00      	cmp	r2, #0
 8007e8a:	f000 80b7 	beq.w	8007ffc <_dtoa_r+0x884>
 8007e8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e94:	4646      	mov	r6, r8
 8007e96:	9a08      	ldr	r2, [sp, #32]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	441a      	add	r2, r3
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	4498      	add	r8, r3
 8007ea0:	9208      	str	r2, [sp, #32]
 8007ea2:	f000 fc21 	bl	80086e8 <__i2b>
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	b15e      	cbz	r6, 8007ec2 <_dtoa_r+0x74a>
 8007eaa:	9b08      	ldr	r3, [sp, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd08      	ble.n	8007ec2 <_dtoa_r+0x74a>
 8007eb0:	42b3      	cmp	r3, r6
 8007eb2:	9a08      	ldr	r2, [sp, #32]
 8007eb4:	bfa8      	it	ge
 8007eb6:	4633      	movge	r3, r6
 8007eb8:	eba8 0803 	sub.w	r8, r8, r3
 8007ebc:	1af6      	subs	r6, r6, r3
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	9308      	str	r3, [sp, #32]
 8007ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec4:	b1f3      	cbz	r3, 8007f04 <_dtoa_r+0x78c>
 8007ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80b7 	beq.w	800803c <_dtoa_r+0x8c4>
 8007ece:	b18c      	cbz	r4, 8007ef4 <_dtoa_r+0x77c>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	4658      	mov	r0, fp
 8007ed6:	f000 fcc7 	bl	8008868 <__pow5mult>
 8007eda:	464a      	mov	r2, r9
 8007edc:	4601      	mov	r1, r0
 8007ede:	4605      	mov	r5, r0
 8007ee0:	4658      	mov	r0, fp
 8007ee2:	f000 fc17 	bl	8008714 <__multiply>
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	9004      	str	r0, [sp, #16]
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fb48 	bl	8008580 <_Bfree>
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	4699      	mov	r9, r3
 8007ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ef6:	1b1a      	subs	r2, r3, r4
 8007ef8:	d004      	beq.n	8007f04 <_dtoa_r+0x78c>
 8007efa:	4649      	mov	r1, r9
 8007efc:	4658      	mov	r0, fp
 8007efe:	f000 fcb3 	bl	8008868 <__pow5mult>
 8007f02:	4681      	mov	r9, r0
 8007f04:	2101      	movs	r1, #1
 8007f06:	4658      	mov	r0, fp
 8007f08:	f000 fbee 	bl	80086e8 <__i2b>
 8007f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0e:	4604      	mov	r4, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 81cf 	beq.w	80082b4 <_dtoa_r+0xb3c>
 8007f16:	461a      	mov	r2, r3
 8007f18:	4601      	mov	r1, r0
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f000 fca4 	bl	8008868 <__pow5mult>
 8007f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	4604      	mov	r4, r0
 8007f26:	f300 8095 	bgt.w	8008054 <_dtoa_r+0x8dc>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 8087 	bne.w	8008040 <_dtoa_r+0x8c8>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 8089 	bne.w	8008050 <_dtoa_r+0x8d8>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f44:	0d1b      	lsrs	r3, r3, #20
 8007f46:	051b      	lsls	r3, r3, #20
 8007f48:	b12b      	cbz	r3, 8007f56 <_dtoa_r+0x7de>
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	9308      	str	r3, [sp, #32]
 8007f50:	f108 0801 	add.w	r8, r8, #1
 8007f54:	2301      	movs	r3, #1
 8007f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 81b0 	beq.w	80082c0 <_dtoa_r+0xb48>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f66:	6918      	ldr	r0, [r3, #16]
 8007f68:	f000 fb72 	bl	8008650 <__hi0bits>
 8007f6c:	f1c0 0020 	rsb	r0, r0, #32
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	4418      	add	r0, r3
 8007f74:	f010 001f 	ands.w	r0, r0, #31
 8007f78:	d077      	beq.n	800806a <_dtoa_r+0x8f2>
 8007f7a:	f1c0 0320 	rsb	r3, r0, #32
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	dd6b      	ble.n	800805a <_dtoa_r+0x8e2>
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	f1c0 001c 	rsb	r0, r0, #28
 8007f88:	4403      	add	r3, r0
 8007f8a:	4480      	add	r8, r0
 8007f8c:	4406      	add	r6, r0
 8007f8e:	9308      	str	r3, [sp, #32]
 8007f90:	f1b8 0f00 	cmp.w	r8, #0
 8007f94:	dd05      	ble.n	8007fa2 <_dtoa_r+0x82a>
 8007f96:	4649      	mov	r1, r9
 8007f98:	4642      	mov	r2, r8
 8007f9a:	4658      	mov	r0, fp
 8007f9c:	f000 fcbe 	bl	800891c <__lshift>
 8007fa0:	4681      	mov	r9, r0
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd05      	ble.n	8007fb4 <_dtoa_r+0x83c>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	461a      	mov	r2, r3
 8007fac:	4658      	mov	r0, fp
 8007fae:	f000 fcb5 	bl	800891c <__lshift>
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d059      	beq.n	800806e <_dtoa_r+0x8f6>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4648      	mov	r0, r9
 8007fbe:	f000 fd19 	bl	80089f4 <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	da53      	bge.n	800806e <_dtoa_r+0x8f6>
 8007fc6:	1e7b      	subs	r3, r7, #1
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	4649      	mov	r1, r9
 8007fcc:	2300      	movs	r3, #0
 8007fce:	220a      	movs	r2, #10
 8007fd0:	4658      	mov	r0, fp
 8007fd2:	f000 faf7 	bl	80085c4 <__multadd>
 8007fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd8:	4681      	mov	r9, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 8172 	beq.w	80082c4 <_dtoa_r+0xb4c>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 faec 	bl	80085c4 <__multadd>
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	dc67      	bgt.n	80080c4 <_dtoa_r+0x94c>
 8007ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	dc41      	bgt.n	800807e <_dtoa_r+0x906>
 8007ffa:	e063      	b.n	80080c4 <_dtoa_r+0x94c>
 8007ffc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ffe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008002:	e746      	b.n	8007e92 <_dtoa_r+0x71a>
 8008004:	9b07      	ldr	r3, [sp, #28]
 8008006:	1e5c      	subs	r4, r3, #1
 8008008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800800a:	42a3      	cmp	r3, r4
 800800c:	bfbf      	itttt	lt
 800800e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008010:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008012:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008014:	1ae3      	sublt	r3, r4, r3
 8008016:	bfb4      	ite	lt
 8008018:	18d2      	addlt	r2, r2, r3
 800801a:	1b1c      	subge	r4, r3, r4
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	bfbc      	itt	lt
 8008020:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008022:	2400      	movlt	r4, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfb5      	itete	lt
 8008028:	eba8 0603 	sublt.w	r6, r8, r3
 800802c:	9b07      	ldrge	r3, [sp, #28]
 800802e:	2300      	movlt	r3, #0
 8008030:	4646      	movge	r6, r8
 8008032:	e730      	b.n	8007e96 <_dtoa_r+0x71e>
 8008034:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008036:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008038:	4646      	mov	r6, r8
 800803a:	e735      	b.n	8007ea8 <_dtoa_r+0x730>
 800803c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800803e:	e75c      	b.n	8007efa <_dtoa_r+0x782>
 8008040:	2300      	movs	r3, #0
 8008042:	e788      	b.n	8007f56 <_dtoa_r+0x7de>
 8008044:	3fe00000 	.word	0x3fe00000
 8008048:	40240000 	.word	0x40240000
 800804c:	40140000 	.word	0x40140000
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	e780      	b.n	8007f56 <_dtoa_r+0x7de>
 8008054:	2300      	movs	r3, #0
 8008056:	930a      	str	r3, [sp, #40]	@ 0x28
 8008058:	e782      	b.n	8007f60 <_dtoa_r+0x7e8>
 800805a:	d099      	beq.n	8007f90 <_dtoa_r+0x818>
 800805c:	9a08      	ldr	r2, [sp, #32]
 800805e:	331c      	adds	r3, #28
 8008060:	441a      	add	r2, r3
 8008062:	4498      	add	r8, r3
 8008064:	441e      	add	r6, r3
 8008066:	9208      	str	r2, [sp, #32]
 8008068:	e792      	b.n	8007f90 <_dtoa_r+0x818>
 800806a:	4603      	mov	r3, r0
 800806c:	e7f6      	b.n	800805c <_dtoa_r+0x8e4>
 800806e:	9b07      	ldr	r3, [sp, #28]
 8008070:	9704      	str	r7, [sp, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc20      	bgt.n	80080b8 <_dtoa_r+0x940>
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807a:	2b02      	cmp	r3, #2
 800807c:	dd1e      	ble.n	80080bc <_dtoa_r+0x944>
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f aec0 	bne.w	8007e06 <_dtoa_r+0x68e>
 8008086:	4621      	mov	r1, r4
 8008088:	2205      	movs	r2, #5
 800808a:	4658      	mov	r0, fp
 800808c:	f000 fa9a 	bl	80085c4 <__multadd>
 8008090:	4601      	mov	r1, r0
 8008092:	4604      	mov	r4, r0
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fcad 	bl	80089f4 <__mcmp>
 800809a:	2800      	cmp	r0, #0
 800809c:	f77f aeb3 	ble.w	8007e06 <_dtoa_r+0x68e>
 80080a0:	4656      	mov	r6, sl
 80080a2:	2331      	movs	r3, #49	@ 0x31
 80080a4:	f806 3b01 	strb.w	r3, [r6], #1
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	e6ae      	b.n	8007e0e <_dtoa_r+0x696>
 80080b0:	9c07      	ldr	r4, [sp, #28]
 80080b2:	9704      	str	r7, [sp, #16]
 80080b4:	4625      	mov	r5, r4
 80080b6:	e7f3      	b.n	80080a0 <_dtoa_r+0x928>
 80080b8:	9b07      	ldr	r3, [sp, #28]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8104 	beq.w	80082cc <_dtoa_r+0xb54>
 80080c4:	2e00      	cmp	r6, #0
 80080c6:	dd05      	ble.n	80080d4 <_dtoa_r+0x95c>
 80080c8:	4629      	mov	r1, r5
 80080ca:	4632      	mov	r2, r6
 80080cc:	4658      	mov	r0, fp
 80080ce:	f000 fc25 	bl	800891c <__lshift>
 80080d2:	4605      	mov	r5, r0
 80080d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d05a      	beq.n	8008190 <_dtoa_r+0xa18>
 80080da:	6869      	ldr	r1, [r5, #4]
 80080dc:	4658      	mov	r0, fp
 80080de:	f000 fa0f 	bl	8008500 <_Balloc>
 80080e2:	4606      	mov	r6, r0
 80080e4:	b928      	cbnz	r0, 80080f2 <_dtoa_r+0x97a>
 80080e6:	4b84      	ldr	r3, [pc, #528]	@ (80082f8 <_dtoa_r+0xb80>)
 80080e8:	4602      	mov	r2, r0
 80080ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080ee:	f7ff bb5a 	b.w	80077a6 <_dtoa_r+0x2e>
 80080f2:	692a      	ldr	r2, [r5, #16]
 80080f4:	3202      	adds	r2, #2
 80080f6:	0092      	lsls	r2, r2, #2
 80080f8:	f105 010c 	add.w	r1, r5, #12
 80080fc:	300c      	adds	r0, #12
 80080fe:	f000 fe3d 	bl	8008d7c <memcpy>
 8008102:	2201      	movs	r2, #1
 8008104:	4631      	mov	r1, r6
 8008106:	4658      	mov	r0, fp
 8008108:	f000 fc08 	bl	800891c <__lshift>
 800810c:	f10a 0301 	add.w	r3, sl, #1
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	9b00      	ldr	r3, [sp, #0]
 8008114:	4453      	add	r3, sl
 8008116:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	462f      	mov	r7, r5
 8008120:	930a      	str	r3, [sp, #40]	@ 0x28
 8008122:	4605      	mov	r5, r0
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	4621      	mov	r1, r4
 8008128:	3b01      	subs	r3, #1
 800812a:	4648      	mov	r0, r9
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	f7ff fa98 	bl	8007662 <quorem>
 8008132:	4639      	mov	r1, r7
 8008134:	9002      	str	r0, [sp, #8]
 8008136:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800813a:	4648      	mov	r0, r9
 800813c:	f000 fc5a 	bl	80089f4 <__mcmp>
 8008140:	462a      	mov	r2, r5
 8008142:	9008      	str	r0, [sp, #32]
 8008144:	4621      	mov	r1, r4
 8008146:	4658      	mov	r0, fp
 8008148:	f000 fc70 	bl	8008a2c <__mdiff>
 800814c:	68c2      	ldr	r2, [r0, #12]
 800814e:	4606      	mov	r6, r0
 8008150:	bb02      	cbnz	r2, 8008194 <_dtoa_r+0xa1c>
 8008152:	4601      	mov	r1, r0
 8008154:	4648      	mov	r0, r9
 8008156:	f000 fc4d 	bl	80089f4 <__mcmp>
 800815a:	4602      	mov	r2, r0
 800815c:	4631      	mov	r1, r6
 800815e:	4658      	mov	r0, fp
 8008160:	920e      	str	r2, [sp, #56]	@ 0x38
 8008162:	f000 fa0d 	bl	8008580 <_Bfree>
 8008166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008168:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800816a:	9e07      	ldr	r6, [sp, #28]
 800816c:	ea43 0102 	orr.w	r1, r3, r2
 8008170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008172:	4319      	orrs	r1, r3
 8008174:	d110      	bne.n	8008198 <_dtoa_r+0xa20>
 8008176:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800817a:	d029      	beq.n	80081d0 <_dtoa_r+0xa58>
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dd02      	ble.n	8008188 <_dtoa_r+0xa10>
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008188:	9b00      	ldr	r3, [sp, #0]
 800818a:	f883 8000 	strb.w	r8, [r3]
 800818e:	e63f      	b.n	8007e10 <_dtoa_r+0x698>
 8008190:	4628      	mov	r0, r5
 8008192:	e7bb      	b.n	800810c <_dtoa_r+0x994>
 8008194:	2201      	movs	r2, #1
 8008196:	e7e1      	b.n	800815c <_dtoa_r+0x9e4>
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	2b00      	cmp	r3, #0
 800819c:	db04      	blt.n	80081a8 <_dtoa_r+0xa30>
 800819e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081a0:	430b      	orrs	r3, r1
 80081a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081a4:	430b      	orrs	r3, r1
 80081a6:	d120      	bne.n	80081ea <_dtoa_r+0xa72>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	dded      	ble.n	8008188 <_dtoa_r+0xa10>
 80081ac:	4649      	mov	r1, r9
 80081ae:	2201      	movs	r2, #1
 80081b0:	4658      	mov	r0, fp
 80081b2:	f000 fbb3 	bl	800891c <__lshift>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4681      	mov	r9, r0
 80081ba:	f000 fc1b 	bl	80089f4 <__mcmp>
 80081be:	2800      	cmp	r0, #0
 80081c0:	dc03      	bgt.n	80081ca <_dtoa_r+0xa52>
 80081c2:	d1e1      	bne.n	8008188 <_dtoa_r+0xa10>
 80081c4:	f018 0f01 	tst.w	r8, #1
 80081c8:	d0de      	beq.n	8008188 <_dtoa_r+0xa10>
 80081ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081ce:	d1d8      	bne.n	8008182 <_dtoa_r+0xa0a>
 80081d0:	9a00      	ldr	r2, [sp, #0]
 80081d2:	2339      	movs	r3, #57	@ 0x39
 80081d4:	7013      	strb	r3, [r2, #0]
 80081d6:	4633      	mov	r3, r6
 80081d8:	461e      	mov	r6, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081e0:	2a39      	cmp	r2, #57	@ 0x39
 80081e2:	d052      	beq.n	800828a <_dtoa_r+0xb12>
 80081e4:	3201      	adds	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	e612      	b.n	8007e10 <_dtoa_r+0x698>
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	dd07      	ble.n	80081fe <_dtoa_r+0xa86>
 80081ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081f2:	d0ed      	beq.n	80081d0 <_dtoa_r+0xa58>
 80081f4:	9a00      	ldr	r2, [sp, #0]
 80081f6:	f108 0301 	add.w	r3, r8, #1
 80081fa:	7013      	strb	r3, [r2, #0]
 80081fc:	e608      	b.n	8007e10 <_dtoa_r+0x698>
 80081fe:	9b07      	ldr	r3, [sp, #28]
 8008200:	9a07      	ldr	r2, [sp, #28]
 8008202:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008208:	4293      	cmp	r3, r2
 800820a:	d028      	beq.n	800825e <_dtoa_r+0xae6>
 800820c:	4649      	mov	r1, r9
 800820e:	2300      	movs	r3, #0
 8008210:	220a      	movs	r2, #10
 8008212:	4658      	mov	r0, fp
 8008214:	f000 f9d6 	bl	80085c4 <__multadd>
 8008218:	42af      	cmp	r7, r5
 800821a:	4681      	mov	r9, r0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	f04f 020a 	mov.w	r2, #10
 8008224:	4639      	mov	r1, r7
 8008226:	4658      	mov	r0, fp
 8008228:	d107      	bne.n	800823a <_dtoa_r+0xac2>
 800822a:	f000 f9cb 	bl	80085c4 <__multadd>
 800822e:	4607      	mov	r7, r0
 8008230:	4605      	mov	r5, r0
 8008232:	9b07      	ldr	r3, [sp, #28]
 8008234:	3301      	adds	r3, #1
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	e774      	b.n	8008124 <_dtoa_r+0x9ac>
 800823a:	f000 f9c3 	bl	80085c4 <__multadd>
 800823e:	4629      	mov	r1, r5
 8008240:	4607      	mov	r7, r0
 8008242:	2300      	movs	r3, #0
 8008244:	220a      	movs	r2, #10
 8008246:	4658      	mov	r0, fp
 8008248:	f000 f9bc 	bl	80085c4 <__multadd>
 800824c:	4605      	mov	r5, r0
 800824e:	e7f0      	b.n	8008232 <_dtoa_r+0xaba>
 8008250:	9b00      	ldr	r3, [sp, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfcc      	ite	gt
 8008256:	461e      	movgt	r6, r3
 8008258:	2601      	movle	r6, #1
 800825a:	4456      	add	r6, sl
 800825c:	2700      	movs	r7, #0
 800825e:	4649      	mov	r1, r9
 8008260:	2201      	movs	r2, #1
 8008262:	4658      	mov	r0, fp
 8008264:	f000 fb5a 	bl	800891c <__lshift>
 8008268:	4621      	mov	r1, r4
 800826a:	4681      	mov	r9, r0
 800826c:	f000 fbc2 	bl	80089f4 <__mcmp>
 8008270:	2800      	cmp	r0, #0
 8008272:	dcb0      	bgt.n	80081d6 <_dtoa_r+0xa5e>
 8008274:	d102      	bne.n	800827c <_dtoa_r+0xb04>
 8008276:	f018 0f01 	tst.w	r8, #1
 800827a:	d1ac      	bne.n	80081d6 <_dtoa_r+0xa5e>
 800827c:	4633      	mov	r3, r6
 800827e:	461e      	mov	r6, r3
 8008280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008284:	2a30      	cmp	r2, #48	@ 0x30
 8008286:	d0fa      	beq.n	800827e <_dtoa_r+0xb06>
 8008288:	e5c2      	b.n	8007e10 <_dtoa_r+0x698>
 800828a:	459a      	cmp	sl, r3
 800828c:	d1a4      	bne.n	80081d8 <_dtoa_r+0xa60>
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	3301      	adds	r3, #1
 8008292:	9304      	str	r3, [sp, #16]
 8008294:	2331      	movs	r3, #49	@ 0x31
 8008296:	f88a 3000 	strb.w	r3, [sl]
 800829a:	e5b9      	b.n	8007e10 <_dtoa_r+0x698>
 800829c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800829e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082fc <_dtoa_r+0xb84>
 80082a2:	b11b      	cbz	r3, 80082ac <_dtoa_r+0xb34>
 80082a4:	f10a 0308 	add.w	r3, sl, #8
 80082a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	4650      	mov	r0, sl
 80082ae:	b019      	add	sp, #100	@ 0x64
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	f77f ae37 	ble.w	8007f2a <_dtoa_r+0x7b2>
 80082bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082be:	930a      	str	r3, [sp, #40]	@ 0x28
 80082c0:	2001      	movs	r0, #1
 80082c2:	e655      	b.n	8007f70 <_dtoa_r+0x7f8>
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f77f aed6 	ble.w	8008078 <_dtoa_r+0x900>
 80082cc:	4656      	mov	r6, sl
 80082ce:	4621      	mov	r1, r4
 80082d0:	4648      	mov	r0, r9
 80082d2:	f7ff f9c6 	bl	8007662 <quorem>
 80082d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082da:	f806 8b01 	strb.w	r8, [r6], #1
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	eba6 020a 	sub.w	r2, r6, sl
 80082e4:	4293      	cmp	r3, r2
 80082e6:	ddb3      	ble.n	8008250 <_dtoa_r+0xad8>
 80082e8:	4649      	mov	r1, r9
 80082ea:	2300      	movs	r3, #0
 80082ec:	220a      	movs	r2, #10
 80082ee:	4658      	mov	r0, fp
 80082f0:	f000 f968 	bl	80085c4 <__multadd>
 80082f4:	4681      	mov	r9, r0
 80082f6:	e7ea      	b.n	80082ce <_dtoa_r+0xb56>
 80082f8:	080094b8 	.word	0x080094b8
 80082fc:	0800943c 	.word	0x0800943c

08008300 <_free_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	2900      	cmp	r1, #0
 8008306:	d041      	beq.n	800838c <_free_r+0x8c>
 8008308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830c:	1f0c      	subs	r4, r1, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	18e4      	addlt	r4, r4, r3
 8008314:	f000 f8e8 	bl	80084e8 <__malloc_lock>
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <_free_r+0x90>)
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x2c>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008328:	f000 b8e4 	b.w	80084f4 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x42>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1809      	addeq	r1, r1, r0
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x1e>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x4c>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x42>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1850      	adds	r0, r2, r1
 8008350:	42a0      	cmp	r0, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x6c>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4401      	add	r1, r0
 8008358:	1850      	adds	r0, r2, r1
 800835a:	4283      	cmp	r3, r0
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x22>
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	4408      	add	r0, r1
 8008368:	6010      	str	r0, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x22>
 800836c:	d902      	bls.n	8008374 <_free_r+0x74>
 800836e:	230c      	movs	r3, #12
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x22>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	1821      	adds	r1, r4, r0
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1809      	addeq	r1, r1, r0
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x22>
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	200004c8 	.word	0x200004c8

08008394 <malloc>:
 8008394:	4b02      	ldr	r3, [pc, #8]	@ (80083a0 <malloc+0xc>)
 8008396:	4601      	mov	r1, r0
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f000 b825 	b.w	80083e8 <_malloc_r>
 800839e:	bf00      	nop
 80083a0:	20000018 	.word	0x20000018

080083a4 <sbrk_aligned>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4e0f      	ldr	r6, [pc, #60]	@ (80083e4 <sbrk_aligned+0x40>)
 80083a8:	460c      	mov	r4, r1
 80083aa:	6831      	ldr	r1, [r6, #0]
 80083ac:	4605      	mov	r5, r0
 80083ae:	b911      	cbnz	r1, 80083b6 <sbrk_aligned+0x12>
 80083b0:	f000 fcd4 	bl	8008d5c <_sbrk_r>
 80083b4:	6030      	str	r0, [r6, #0]
 80083b6:	4621      	mov	r1, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 fccf 	bl	8008d5c <_sbrk_r>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d103      	bne.n	80083ca <sbrk_aligned+0x26>
 80083c2:	f04f 34ff 	mov.w	r4, #4294967295
 80083c6:	4620      	mov	r0, r4
 80083c8:	bd70      	pop	{r4, r5, r6, pc}
 80083ca:	1cc4      	adds	r4, r0, #3
 80083cc:	f024 0403 	bic.w	r4, r4, #3
 80083d0:	42a0      	cmp	r0, r4
 80083d2:	d0f8      	beq.n	80083c6 <sbrk_aligned+0x22>
 80083d4:	1a21      	subs	r1, r4, r0
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 fcc0 	bl	8008d5c <_sbrk_r>
 80083dc:	3001      	adds	r0, #1
 80083de:	d1f2      	bne.n	80083c6 <sbrk_aligned+0x22>
 80083e0:	e7ef      	b.n	80083c2 <sbrk_aligned+0x1e>
 80083e2:	bf00      	nop
 80083e4:	200004c4 	.word	0x200004c4

080083e8 <_malloc_r>:
 80083e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ec:	1ccd      	adds	r5, r1, #3
 80083ee:	f025 0503 	bic.w	r5, r5, #3
 80083f2:	3508      	adds	r5, #8
 80083f4:	2d0c      	cmp	r5, #12
 80083f6:	bf38      	it	cc
 80083f8:	250c      	movcc	r5, #12
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	4606      	mov	r6, r0
 80083fe:	db01      	blt.n	8008404 <_malloc_r+0x1c>
 8008400:	42a9      	cmp	r1, r5
 8008402:	d904      	bls.n	800840e <_malloc_r+0x26>
 8008404:	230c      	movs	r3, #12
 8008406:	6033      	str	r3, [r6, #0]
 8008408:	2000      	movs	r0, #0
 800840a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084e4 <_malloc_r+0xfc>
 8008412:	f000 f869 	bl	80084e8 <__malloc_lock>
 8008416:	f8d8 3000 	ldr.w	r3, [r8]
 800841a:	461c      	mov	r4, r3
 800841c:	bb44      	cbnz	r4, 8008470 <_malloc_r+0x88>
 800841e:	4629      	mov	r1, r5
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff ffbf 	bl	80083a4 <sbrk_aligned>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	4604      	mov	r4, r0
 800842a:	d158      	bne.n	80084de <_malloc_r+0xf6>
 800842c:	f8d8 4000 	ldr.w	r4, [r8]
 8008430:	4627      	mov	r7, r4
 8008432:	2f00      	cmp	r7, #0
 8008434:	d143      	bne.n	80084be <_malloc_r+0xd6>
 8008436:	2c00      	cmp	r4, #0
 8008438:	d04b      	beq.n	80084d2 <_malloc_r+0xea>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	4639      	mov	r1, r7
 800843e:	4630      	mov	r0, r6
 8008440:	eb04 0903 	add.w	r9, r4, r3
 8008444:	f000 fc8a 	bl	8008d5c <_sbrk_r>
 8008448:	4581      	cmp	r9, r0
 800844a:	d142      	bne.n	80084d2 <_malloc_r+0xea>
 800844c:	6821      	ldr	r1, [r4, #0]
 800844e:	1a6d      	subs	r5, r5, r1
 8008450:	4629      	mov	r1, r5
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff ffa6 	bl	80083a4 <sbrk_aligned>
 8008458:	3001      	adds	r0, #1
 800845a:	d03a      	beq.n	80084d2 <_malloc_r+0xea>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	442b      	add	r3, r5
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	f8d8 3000 	ldr.w	r3, [r8]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	bb62      	cbnz	r2, 80084c4 <_malloc_r+0xdc>
 800846a:	f8c8 7000 	str.w	r7, [r8]
 800846e:	e00f      	b.n	8008490 <_malloc_r+0xa8>
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	1b52      	subs	r2, r2, r5
 8008474:	d420      	bmi.n	80084b8 <_malloc_r+0xd0>
 8008476:	2a0b      	cmp	r2, #11
 8008478:	d917      	bls.n	80084aa <_malloc_r+0xc2>
 800847a:	1961      	adds	r1, r4, r5
 800847c:	42a3      	cmp	r3, r4
 800847e:	6025      	str	r5, [r4, #0]
 8008480:	bf18      	it	ne
 8008482:	6059      	strne	r1, [r3, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	bf08      	it	eq
 8008488:	f8c8 1000 	streq.w	r1, [r8]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4630      	mov	r0, r6
 8008492:	f000 f82f 	bl	80084f4 <__malloc_unlock>
 8008496:	f104 000b 	add.w	r0, r4, #11
 800849a:	1d23      	adds	r3, r4, #4
 800849c:	f020 0007 	bic.w	r0, r0, #7
 80084a0:	1ac2      	subs	r2, r0, r3
 80084a2:	bf1c      	itt	ne
 80084a4:	1a1b      	subne	r3, r3, r0
 80084a6:	50a3      	strne	r3, [r4, r2]
 80084a8:	e7af      	b.n	800840a <_malloc_r+0x22>
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	bf0c      	ite	eq
 80084b0:	f8c8 2000 	streq.w	r2, [r8]
 80084b4:	605a      	strne	r2, [r3, #4]
 80084b6:	e7eb      	b.n	8008490 <_malloc_r+0xa8>
 80084b8:	4623      	mov	r3, r4
 80084ba:	6864      	ldr	r4, [r4, #4]
 80084bc:	e7ae      	b.n	800841c <_malloc_r+0x34>
 80084be:	463c      	mov	r4, r7
 80084c0:	687f      	ldr	r7, [r7, #4]
 80084c2:	e7b6      	b.n	8008432 <_malloc_r+0x4a>
 80084c4:	461a      	mov	r2, r3
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d1fb      	bne.n	80084c4 <_malloc_r+0xdc>
 80084cc:	2300      	movs	r3, #0
 80084ce:	6053      	str	r3, [r2, #4]
 80084d0:	e7de      	b.n	8008490 <_malloc_r+0xa8>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	4630      	mov	r0, r6
 80084d8:	f000 f80c 	bl	80084f4 <__malloc_unlock>
 80084dc:	e794      	b.n	8008408 <_malloc_r+0x20>
 80084de:	6005      	str	r5, [r0, #0]
 80084e0:	e7d6      	b.n	8008490 <_malloc_r+0xa8>
 80084e2:	bf00      	nop
 80084e4:	200004c8 	.word	0x200004c8

080084e8 <__malloc_lock>:
 80084e8:	4801      	ldr	r0, [pc, #4]	@ (80084f0 <__malloc_lock+0x8>)
 80084ea:	f7ff b8b8 	b.w	800765e <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	200004c0 	.word	0x200004c0

080084f4 <__malloc_unlock>:
 80084f4:	4801      	ldr	r0, [pc, #4]	@ (80084fc <__malloc_unlock+0x8>)
 80084f6:	f7ff b8b3 	b.w	8007660 <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	200004c0 	.word	0x200004c0

08008500 <_Balloc>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	69c6      	ldr	r6, [r0, #28]
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	b976      	cbnz	r6, 8008528 <_Balloc+0x28>
 800850a:	2010      	movs	r0, #16
 800850c:	f7ff ff42 	bl	8008394 <malloc>
 8008510:	4602      	mov	r2, r0
 8008512:	61e0      	str	r0, [r4, #28]
 8008514:	b920      	cbnz	r0, 8008520 <_Balloc+0x20>
 8008516:	4b18      	ldr	r3, [pc, #96]	@ (8008578 <_Balloc+0x78>)
 8008518:	4818      	ldr	r0, [pc, #96]	@ (800857c <_Balloc+0x7c>)
 800851a:	216b      	movs	r1, #107	@ 0x6b
 800851c:	f000 fc3c 	bl	8008d98 <__assert_func>
 8008520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008524:	6006      	str	r6, [r0, #0]
 8008526:	60c6      	str	r6, [r0, #12]
 8008528:	69e6      	ldr	r6, [r4, #28]
 800852a:	68f3      	ldr	r3, [r6, #12]
 800852c:	b183      	cbz	r3, 8008550 <_Balloc+0x50>
 800852e:	69e3      	ldr	r3, [r4, #28]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008536:	b9b8      	cbnz	r0, 8008568 <_Balloc+0x68>
 8008538:	2101      	movs	r1, #1
 800853a:	fa01 f605 	lsl.w	r6, r1, r5
 800853e:	1d72      	adds	r2, r6, #5
 8008540:	0092      	lsls	r2, r2, #2
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fc46 	bl	8008dd4 <_calloc_r>
 8008548:	b160      	cbz	r0, 8008564 <_Balloc+0x64>
 800854a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800854e:	e00e      	b.n	800856e <_Balloc+0x6e>
 8008550:	2221      	movs	r2, #33	@ 0x21
 8008552:	2104      	movs	r1, #4
 8008554:	4620      	mov	r0, r4
 8008556:	f000 fc3d 	bl	8008dd4 <_calloc_r>
 800855a:	69e3      	ldr	r3, [r4, #28]
 800855c:	60f0      	str	r0, [r6, #12]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e4      	bne.n	800852e <_Balloc+0x2e>
 8008564:	2000      	movs	r0, #0
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	6802      	ldr	r2, [r0, #0]
 800856a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800856e:	2300      	movs	r3, #0
 8008570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008574:	e7f7      	b.n	8008566 <_Balloc+0x66>
 8008576:	bf00      	nop
 8008578:	08009449 	.word	0x08009449
 800857c:	080094c9 	.word	0x080094c9

08008580 <_Bfree>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	69c6      	ldr	r6, [r0, #28]
 8008584:	4605      	mov	r5, r0
 8008586:	460c      	mov	r4, r1
 8008588:	b976      	cbnz	r6, 80085a8 <_Bfree+0x28>
 800858a:	2010      	movs	r0, #16
 800858c:	f7ff ff02 	bl	8008394 <malloc>
 8008590:	4602      	mov	r2, r0
 8008592:	61e8      	str	r0, [r5, #28]
 8008594:	b920      	cbnz	r0, 80085a0 <_Bfree+0x20>
 8008596:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <_Bfree+0x3c>)
 8008598:	4809      	ldr	r0, [pc, #36]	@ (80085c0 <_Bfree+0x40>)
 800859a:	218f      	movs	r1, #143	@ 0x8f
 800859c:	f000 fbfc 	bl	8008d98 <__assert_func>
 80085a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a4:	6006      	str	r6, [r0, #0]
 80085a6:	60c6      	str	r6, [r0, #12]
 80085a8:	b13c      	cbz	r4, 80085ba <_Bfree+0x3a>
 80085aa:	69eb      	ldr	r3, [r5, #28]
 80085ac:	6862      	ldr	r2, [r4, #4]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085b4:	6021      	str	r1, [r4, #0]
 80085b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	08009449 	.word	0x08009449
 80085c0:	080094c9 	.word	0x080094c9

080085c4 <__multadd>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	690d      	ldr	r5, [r1, #16]
 80085ca:	4607      	mov	r7, r0
 80085cc:	460c      	mov	r4, r1
 80085ce:	461e      	mov	r6, r3
 80085d0:	f101 0c14 	add.w	ip, r1, #20
 80085d4:	2000      	movs	r0, #0
 80085d6:	f8dc 3000 	ldr.w	r3, [ip]
 80085da:	b299      	uxth	r1, r3
 80085dc:	fb02 6101 	mla	r1, r2, r1, r6
 80085e0:	0c1e      	lsrs	r6, r3, #16
 80085e2:	0c0b      	lsrs	r3, r1, #16
 80085e4:	fb02 3306 	mla	r3, r2, r6, r3
 80085e8:	b289      	uxth	r1, r1
 80085ea:	3001      	adds	r0, #1
 80085ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085f0:	4285      	cmp	r5, r0
 80085f2:	f84c 1b04 	str.w	r1, [ip], #4
 80085f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085fa:	dcec      	bgt.n	80085d6 <__multadd+0x12>
 80085fc:	b30e      	cbz	r6, 8008642 <__multadd+0x7e>
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	42ab      	cmp	r3, r5
 8008602:	dc19      	bgt.n	8008638 <__multadd+0x74>
 8008604:	6861      	ldr	r1, [r4, #4]
 8008606:	4638      	mov	r0, r7
 8008608:	3101      	adds	r1, #1
 800860a:	f7ff ff79 	bl	8008500 <_Balloc>
 800860e:	4680      	mov	r8, r0
 8008610:	b928      	cbnz	r0, 800861e <__multadd+0x5a>
 8008612:	4602      	mov	r2, r0
 8008614:	4b0c      	ldr	r3, [pc, #48]	@ (8008648 <__multadd+0x84>)
 8008616:	480d      	ldr	r0, [pc, #52]	@ (800864c <__multadd+0x88>)
 8008618:	21ba      	movs	r1, #186	@ 0xba
 800861a:	f000 fbbd 	bl	8008d98 <__assert_func>
 800861e:	6922      	ldr	r2, [r4, #16]
 8008620:	3202      	adds	r2, #2
 8008622:	f104 010c 	add.w	r1, r4, #12
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	300c      	adds	r0, #12
 800862a:	f000 fba7 	bl	8008d7c <memcpy>
 800862e:	4621      	mov	r1, r4
 8008630:	4638      	mov	r0, r7
 8008632:	f7ff ffa5 	bl	8008580 <_Bfree>
 8008636:	4644      	mov	r4, r8
 8008638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800863c:	3501      	adds	r5, #1
 800863e:	615e      	str	r6, [r3, #20]
 8008640:	6125      	str	r5, [r4, #16]
 8008642:	4620      	mov	r0, r4
 8008644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008648:	080094b8 	.word	0x080094b8
 800864c:	080094c9 	.word	0x080094c9

08008650 <__hi0bits>:
 8008650:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008654:	4603      	mov	r3, r0
 8008656:	bf36      	itet	cc
 8008658:	0403      	lslcc	r3, r0, #16
 800865a:	2000      	movcs	r0, #0
 800865c:	2010      	movcc	r0, #16
 800865e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008662:	bf3c      	itt	cc
 8008664:	021b      	lslcc	r3, r3, #8
 8008666:	3008      	addcc	r0, #8
 8008668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800866c:	bf3c      	itt	cc
 800866e:	011b      	lslcc	r3, r3, #4
 8008670:	3004      	addcc	r0, #4
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008676:	bf3c      	itt	cc
 8008678:	009b      	lslcc	r3, r3, #2
 800867a:	3002      	addcc	r0, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	db05      	blt.n	800868c <__hi0bits+0x3c>
 8008680:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008684:	f100 0001 	add.w	r0, r0, #1
 8008688:	bf08      	it	eq
 800868a:	2020      	moveq	r0, #32
 800868c:	4770      	bx	lr

0800868e <__lo0bits>:
 800868e:	6803      	ldr	r3, [r0, #0]
 8008690:	4602      	mov	r2, r0
 8008692:	f013 0007 	ands.w	r0, r3, #7
 8008696:	d00b      	beq.n	80086b0 <__lo0bits+0x22>
 8008698:	07d9      	lsls	r1, r3, #31
 800869a:	d421      	bmi.n	80086e0 <__lo0bits+0x52>
 800869c:	0798      	lsls	r0, r3, #30
 800869e:	bf49      	itett	mi
 80086a0:	085b      	lsrmi	r3, r3, #1
 80086a2:	089b      	lsrpl	r3, r3, #2
 80086a4:	2001      	movmi	r0, #1
 80086a6:	6013      	strmi	r3, [r2, #0]
 80086a8:	bf5c      	itt	pl
 80086aa:	6013      	strpl	r3, [r2, #0]
 80086ac:	2002      	movpl	r0, #2
 80086ae:	4770      	bx	lr
 80086b0:	b299      	uxth	r1, r3
 80086b2:	b909      	cbnz	r1, 80086b8 <__lo0bits+0x2a>
 80086b4:	0c1b      	lsrs	r3, r3, #16
 80086b6:	2010      	movs	r0, #16
 80086b8:	b2d9      	uxtb	r1, r3
 80086ba:	b909      	cbnz	r1, 80086c0 <__lo0bits+0x32>
 80086bc:	3008      	adds	r0, #8
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	0719      	lsls	r1, r3, #28
 80086c2:	bf04      	itt	eq
 80086c4:	091b      	lsreq	r3, r3, #4
 80086c6:	3004      	addeq	r0, #4
 80086c8:	0799      	lsls	r1, r3, #30
 80086ca:	bf04      	itt	eq
 80086cc:	089b      	lsreq	r3, r3, #2
 80086ce:	3002      	addeq	r0, #2
 80086d0:	07d9      	lsls	r1, r3, #31
 80086d2:	d403      	bmi.n	80086dc <__lo0bits+0x4e>
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	f100 0001 	add.w	r0, r0, #1
 80086da:	d003      	beq.n	80086e4 <__lo0bits+0x56>
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	4770      	bx	lr
 80086e0:	2000      	movs	r0, #0
 80086e2:	4770      	bx	lr
 80086e4:	2020      	movs	r0, #32
 80086e6:	4770      	bx	lr

080086e8 <__i2b>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	2101      	movs	r1, #1
 80086ee:	f7ff ff07 	bl	8008500 <_Balloc>
 80086f2:	4602      	mov	r2, r0
 80086f4:	b928      	cbnz	r0, 8008702 <__i2b+0x1a>
 80086f6:	4b05      	ldr	r3, [pc, #20]	@ (800870c <__i2b+0x24>)
 80086f8:	4805      	ldr	r0, [pc, #20]	@ (8008710 <__i2b+0x28>)
 80086fa:	f240 1145 	movw	r1, #325	@ 0x145
 80086fe:	f000 fb4b 	bl	8008d98 <__assert_func>
 8008702:	2301      	movs	r3, #1
 8008704:	6144      	str	r4, [r0, #20]
 8008706:	6103      	str	r3, [r0, #16]
 8008708:	bd10      	pop	{r4, pc}
 800870a:	bf00      	nop
 800870c:	080094b8 	.word	0x080094b8
 8008710:	080094c9 	.word	0x080094c9

08008714 <__multiply>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	4614      	mov	r4, r2
 800871a:	690a      	ldr	r2, [r1, #16]
 800871c:	6923      	ldr	r3, [r4, #16]
 800871e:	429a      	cmp	r2, r3
 8008720:	bfa8      	it	ge
 8008722:	4623      	movge	r3, r4
 8008724:	460f      	mov	r7, r1
 8008726:	bfa4      	itt	ge
 8008728:	460c      	movge	r4, r1
 800872a:	461f      	movge	r7, r3
 800872c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008730:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	6861      	ldr	r1, [r4, #4]
 8008738:	eb0a 0609 	add.w	r6, sl, r9
 800873c:	42b3      	cmp	r3, r6
 800873e:	b085      	sub	sp, #20
 8008740:	bfb8      	it	lt
 8008742:	3101      	addlt	r1, #1
 8008744:	f7ff fedc 	bl	8008500 <_Balloc>
 8008748:	b930      	cbnz	r0, 8008758 <__multiply+0x44>
 800874a:	4602      	mov	r2, r0
 800874c:	4b44      	ldr	r3, [pc, #272]	@ (8008860 <__multiply+0x14c>)
 800874e:	4845      	ldr	r0, [pc, #276]	@ (8008864 <__multiply+0x150>)
 8008750:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008754:	f000 fb20 	bl	8008d98 <__assert_func>
 8008758:	f100 0514 	add.w	r5, r0, #20
 800875c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008760:	462b      	mov	r3, r5
 8008762:	2200      	movs	r2, #0
 8008764:	4543      	cmp	r3, r8
 8008766:	d321      	bcc.n	80087ac <__multiply+0x98>
 8008768:	f107 0114 	add.w	r1, r7, #20
 800876c:	f104 0214 	add.w	r2, r4, #20
 8008770:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008774:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	1b13      	subs	r3, r2, r4
 800877c:	3b15      	subs	r3, #21
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	3304      	adds	r3, #4
 8008784:	f104 0715 	add.w	r7, r4, #21
 8008788:	42ba      	cmp	r2, r7
 800878a:	bf38      	it	cc
 800878c:	2304      	movcc	r3, #4
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	9b02      	ldr	r3, [sp, #8]
 8008792:	9103      	str	r1, [sp, #12]
 8008794:	428b      	cmp	r3, r1
 8008796:	d80c      	bhi.n	80087b2 <__multiply+0x9e>
 8008798:	2e00      	cmp	r6, #0
 800879a:	dd03      	ble.n	80087a4 <__multiply+0x90>
 800879c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d05b      	beq.n	800885c <__multiply+0x148>
 80087a4:	6106      	str	r6, [r0, #16]
 80087a6:	b005      	add	sp, #20
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ac:	f843 2b04 	str.w	r2, [r3], #4
 80087b0:	e7d8      	b.n	8008764 <__multiply+0x50>
 80087b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80087b6:	f1ba 0f00 	cmp.w	sl, #0
 80087ba:	d024      	beq.n	8008806 <__multiply+0xf2>
 80087bc:	f104 0e14 	add.w	lr, r4, #20
 80087c0:	46a9      	mov	r9, r5
 80087c2:	f04f 0c00 	mov.w	ip, #0
 80087c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087ca:	f8d9 3000 	ldr.w	r3, [r9]
 80087ce:	fa1f fb87 	uxth.w	fp, r7
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80087d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80087dc:	f8d9 7000 	ldr.w	r7, [r9]
 80087e0:	4463      	add	r3, ip
 80087e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80087ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087f4:	4572      	cmp	r2, lr
 80087f6:	f849 3b04 	str.w	r3, [r9], #4
 80087fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087fe:	d8e2      	bhi.n	80087c6 <__multiply+0xb2>
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	f845 c003 	str.w	ip, [r5, r3]
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800880c:	3104      	adds	r1, #4
 800880e:	f1b9 0f00 	cmp.w	r9, #0
 8008812:	d021      	beq.n	8008858 <__multiply+0x144>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	f104 0c14 	add.w	ip, r4, #20
 800881a:	46ae      	mov	lr, r5
 800881c:	f04f 0a00 	mov.w	sl, #0
 8008820:	f8bc b000 	ldrh.w	fp, [ip]
 8008824:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008828:	fb09 770b 	mla	r7, r9, fp, r7
 800882c:	4457      	add	r7, sl
 800882e:	b29b      	uxth	r3, r3
 8008830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008834:	f84e 3b04 	str.w	r3, [lr], #4
 8008838:	f85c 3b04 	ldr.w	r3, [ip], #4
 800883c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008840:	f8be 3000 	ldrh.w	r3, [lr]
 8008844:	fb09 330a 	mla	r3, r9, sl, r3
 8008848:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800884c:	4562      	cmp	r2, ip
 800884e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008852:	d8e5      	bhi.n	8008820 <__multiply+0x10c>
 8008854:	9f01      	ldr	r7, [sp, #4]
 8008856:	51eb      	str	r3, [r5, r7]
 8008858:	3504      	adds	r5, #4
 800885a:	e799      	b.n	8008790 <__multiply+0x7c>
 800885c:	3e01      	subs	r6, #1
 800885e:	e79b      	b.n	8008798 <__multiply+0x84>
 8008860:	080094b8 	.word	0x080094b8
 8008864:	080094c9 	.word	0x080094c9

08008868 <__pow5mult>:
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800886c:	4615      	mov	r5, r2
 800886e:	f012 0203 	ands.w	r2, r2, #3
 8008872:	4607      	mov	r7, r0
 8008874:	460e      	mov	r6, r1
 8008876:	d007      	beq.n	8008888 <__pow5mult+0x20>
 8008878:	4c25      	ldr	r4, [pc, #148]	@ (8008910 <__pow5mult+0xa8>)
 800887a:	3a01      	subs	r2, #1
 800887c:	2300      	movs	r3, #0
 800887e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008882:	f7ff fe9f 	bl	80085c4 <__multadd>
 8008886:	4606      	mov	r6, r0
 8008888:	10ad      	asrs	r5, r5, #2
 800888a:	d03d      	beq.n	8008908 <__pow5mult+0xa0>
 800888c:	69fc      	ldr	r4, [r7, #28]
 800888e:	b97c      	cbnz	r4, 80088b0 <__pow5mult+0x48>
 8008890:	2010      	movs	r0, #16
 8008892:	f7ff fd7f 	bl	8008394 <malloc>
 8008896:	4602      	mov	r2, r0
 8008898:	61f8      	str	r0, [r7, #28]
 800889a:	b928      	cbnz	r0, 80088a8 <__pow5mult+0x40>
 800889c:	4b1d      	ldr	r3, [pc, #116]	@ (8008914 <__pow5mult+0xac>)
 800889e:	481e      	ldr	r0, [pc, #120]	@ (8008918 <__pow5mult+0xb0>)
 80088a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088a4:	f000 fa78 	bl	8008d98 <__assert_func>
 80088a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088ac:	6004      	str	r4, [r0, #0]
 80088ae:	60c4      	str	r4, [r0, #12]
 80088b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088b8:	b94c      	cbnz	r4, 80088ce <__pow5mult+0x66>
 80088ba:	f240 2171 	movw	r1, #625	@ 0x271
 80088be:	4638      	mov	r0, r7
 80088c0:	f7ff ff12 	bl	80086e8 <__i2b>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ca:	4604      	mov	r4, r0
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	07eb      	lsls	r3, r5, #31
 80088d4:	d50a      	bpl.n	80088ec <__pow5mult+0x84>
 80088d6:	4631      	mov	r1, r6
 80088d8:	4622      	mov	r2, r4
 80088da:	4638      	mov	r0, r7
 80088dc:	f7ff ff1a 	bl	8008714 <__multiply>
 80088e0:	4631      	mov	r1, r6
 80088e2:	4680      	mov	r8, r0
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff fe4b 	bl	8008580 <_Bfree>
 80088ea:	4646      	mov	r6, r8
 80088ec:	106d      	asrs	r5, r5, #1
 80088ee:	d00b      	beq.n	8008908 <__pow5mult+0xa0>
 80088f0:	6820      	ldr	r0, [r4, #0]
 80088f2:	b938      	cbnz	r0, 8008904 <__pow5mult+0x9c>
 80088f4:	4622      	mov	r2, r4
 80088f6:	4621      	mov	r1, r4
 80088f8:	4638      	mov	r0, r7
 80088fa:	f7ff ff0b 	bl	8008714 <__multiply>
 80088fe:	6020      	str	r0, [r4, #0]
 8008900:	f8c0 9000 	str.w	r9, [r0]
 8008904:	4604      	mov	r4, r0
 8008906:	e7e4      	b.n	80088d2 <__pow5mult+0x6a>
 8008908:	4630      	mov	r0, r6
 800890a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890e:	bf00      	nop
 8008910:	08009524 	.word	0x08009524
 8008914:	08009449 	.word	0x08009449
 8008918:	080094c9 	.word	0x080094c9

0800891c <__lshift>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	460c      	mov	r4, r1
 8008922:	6849      	ldr	r1, [r1, #4]
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	4607      	mov	r7, r0
 800892e:	4691      	mov	r9, r2
 8008930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008934:	f108 0601 	add.w	r6, r8, #1
 8008938:	42b3      	cmp	r3, r6
 800893a:	db0b      	blt.n	8008954 <__lshift+0x38>
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff fddf 	bl	8008500 <_Balloc>
 8008942:	4605      	mov	r5, r0
 8008944:	b948      	cbnz	r0, 800895a <__lshift+0x3e>
 8008946:	4602      	mov	r2, r0
 8008948:	4b28      	ldr	r3, [pc, #160]	@ (80089ec <__lshift+0xd0>)
 800894a:	4829      	ldr	r0, [pc, #164]	@ (80089f0 <__lshift+0xd4>)
 800894c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008950:	f000 fa22 	bl	8008d98 <__assert_func>
 8008954:	3101      	adds	r1, #1
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	e7ee      	b.n	8008938 <__lshift+0x1c>
 800895a:	2300      	movs	r3, #0
 800895c:	f100 0114 	add.w	r1, r0, #20
 8008960:	f100 0210 	add.w	r2, r0, #16
 8008964:	4618      	mov	r0, r3
 8008966:	4553      	cmp	r3, sl
 8008968:	db33      	blt.n	80089d2 <__lshift+0xb6>
 800896a:	6920      	ldr	r0, [r4, #16]
 800896c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008970:	f104 0314 	add.w	r3, r4, #20
 8008974:	f019 091f 	ands.w	r9, r9, #31
 8008978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800897c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008980:	d02b      	beq.n	80089da <__lshift+0xbe>
 8008982:	f1c9 0e20 	rsb	lr, r9, #32
 8008986:	468a      	mov	sl, r1
 8008988:	2200      	movs	r2, #0
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	fa00 f009 	lsl.w	r0, r0, r9
 8008990:	4310      	orrs	r0, r2
 8008992:	f84a 0b04 	str.w	r0, [sl], #4
 8008996:	f853 2b04 	ldr.w	r2, [r3], #4
 800899a:	459c      	cmp	ip, r3
 800899c:	fa22 f20e 	lsr.w	r2, r2, lr
 80089a0:	d8f3      	bhi.n	800898a <__lshift+0x6e>
 80089a2:	ebac 0304 	sub.w	r3, ip, r4
 80089a6:	3b15      	subs	r3, #21
 80089a8:	f023 0303 	bic.w	r3, r3, #3
 80089ac:	3304      	adds	r3, #4
 80089ae:	f104 0015 	add.w	r0, r4, #21
 80089b2:	4584      	cmp	ip, r0
 80089b4:	bf38      	it	cc
 80089b6:	2304      	movcc	r3, #4
 80089b8:	50ca      	str	r2, [r1, r3]
 80089ba:	b10a      	cbz	r2, 80089c0 <__lshift+0xa4>
 80089bc:	f108 0602 	add.w	r6, r8, #2
 80089c0:	3e01      	subs	r6, #1
 80089c2:	4638      	mov	r0, r7
 80089c4:	612e      	str	r6, [r5, #16]
 80089c6:	4621      	mov	r1, r4
 80089c8:	f7ff fdda 	bl	8008580 <_Bfree>
 80089cc:	4628      	mov	r0, r5
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089d6:	3301      	adds	r3, #1
 80089d8:	e7c5      	b.n	8008966 <__lshift+0x4a>
 80089da:	3904      	subs	r1, #4
 80089dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80089e4:	459c      	cmp	ip, r3
 80089e6:	d8f9      	bhi.n	80089dc <__lshift+0xc0>
 80089e8:	e7ea      	b.n	80089c0 <__lshift+0xa4>
 80089ea:	bf00      	nop
 80089ec:	080094b8 	.word	0x080094b8
 80089f0:	080094c9 	.word	0x080094c9

080089f4 <__mcmp>:
 80089f4:	690a      	ldr	r2, [r1, #16]
 80089f6:	4603      	mov	r3, r0
 80089f8:	6900      	ldr	r0, [r0, #16]
 80089fa:	1a80      	subs	r0, r0, r2
 80089fc:	b530      	push	{r4, r5, lr}
 80089fe:	d10e      	bne.n	8008a1e <__mcmp+0x2a>
 8008a00:	3314      	adds	r3, #20
 8008a02:	3114      	adds	r1, #20
 8008a04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a14:	4295      	cmp	r5, r2
 8008a16:	d003      	beq.n	8008a20 <__mcmp+0x2c>
 8008a18:	d205      	bcs.n	8008a26 <__mcmp+0x32>
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1e:	bd30      	pop	{r4, r5, pc}
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	d3f3      	bcc.n	8008a0c <__mcmp+0x18>
 8008a24:	e7fb      	b.n	8008a1e <__mcmp+0x2a>
 8008a26:	2001      	movs	r0, #1
 8008a28:	e7f9      	b.n	8008a1e <__mcmp+0x2a>
	...

08008a2c <__mdiff>:
 8008a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	4689      	mov	r9, r1
 8008a32:	4606      	mov	r6, r0
 8008a34:	4611      	mov	r1, r2
 8008a36:	4648      	mov	r0, r9
 8008a38:	4614      	mov	r4, r2
 8008a3a:	f7ff ffdb 	bl	80089f4 <__mcmp>
 8008a3e:	1e05      	subs	r5, r0, #0
 8008a40:	d112      	bne.n	8008a68 <__mdiff+0x3c>
 8008a42:	4629      	mov	r1, r5
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff fd5b 	bl	8008500 <_Balloc>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	b928      	cbnz	r0, 8008a5a <__mdiff+0x2e>
 8008a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b4c <__mdiff+0x120>)
 8008a50:	f240 2137 	movw	r1, #567	@ 0x237
 8008a54:	483e      	ldr	r0, [pc, #248]	@ (8008b50 <__mdiff+0x124>)
 8008a56:	f000 f99f 	bl	8008d98 <__assert_func>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a60:	4610      	mov	r0, r2
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a68:	bfbc      	itt	lt
 8008a6a:	464b      	movlt	r3, r9
 8008a6c:	46a1      	movlt	r9, r4
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a74:	bfba      	itte	lt
 8008a76:	461c      	movlt	r4, r3
 8008a78:	2501      	movlt	r5, #1
 8008a7a:	2500      	movge	r5, #0
 8008a7c:	f7ff fd40 	bl	8008500 <_Balloc>
 8008a80:	4602      	mov	r2, r0
 8008a82:	b918      	cbnz	r0, 8008a8c <__mdiff+0x60>
 8008a84:	4b31      	ldr	r3, [pc, #196]	@ (8008b4c <__mdiff+0x120>)
 8008a86:	f240 2145 	movw	r1, #581	@ 0x245
 8008a8a:	e7e3      	b.n	8008a54 <__mdiff+0x28>
 8008a8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a90:	6926      	ldr	r6, [r4, #16]
 8008a92:	60c5      	str	r5, [r0, #12]
 8008a94:	f109 0310 	add.w	r3, r9, #16
 8008a98:	f109 0514 	add.w	r5, r9, #20
 8008a9c:	f104 0e14 	add.w	lr, r4, #20
 8008aa0:	f100 0b14 	add.w	fp, r0, #20
 8008aa4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008aa8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	46d9      	mov	r9, fp
 8008ab0:	f04f 0c00 	mov.w	ip, #0
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008aba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	fa1f f38a 	uxth.w	r3, sl
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	b283      	uxth	r3, r0
 8008ac8:	1acb      	subs	r3, r1, r3
 8008aca:	0c00      	lsrs	r0, r0, #16
 8008acc:	4463      	add	r3, ip
 8008ace:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ad2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008adc:	4576      	cmp	r6, lr
 8008ade:	f849 3b04 	str.w	r3, [r9], #4
 8008ae2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ae6:	d8e5      	bhi.n	8008ab4 <__mdiff+0x88>
 8008ae8:	1b33      	subs	r3, r6, r4
 8008aea:	3b15      	subs	r3, #21
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	3415      	adds	r4, #21
 8008af2:	3304      	adds	r3, #4
 8008af4:	42a6      	cmp	r6, r4
 8008af6:	bf38      	it	cc
 8008af8:	2304      	movcc	r3, #4
 8008afa:	441d      	add	r5, r3
 8008afc:	445b      	add	r3, fp
 8008afe:	461e      	mov	r6, r3
 8008b00:	462c      	mov	r4, r5
 8008b02:	4544      	cmp	r4, r8
 8008b04:	d30e      	bcc.n	8008b24 <__mdiff+0xf8>
 8008b06:	f108 0103 	add.w	r1, r8, #3
 8008b0a:	1b49      	subs	r1, r1, r5
 8008b0c:	f021 0103 	bic.w	r1, r1, #3
 8008b10:	3d03      	subs	r5, #3
 8008b12:	45a8      	cmp	r8, r5
 8008b14:	bf38      	it	cc
 8008b16:	2100      	movcc	r1, #0
 8008b18:	440b      	add	r3, r1
 8008b1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b1e:	b191      	cbz	r1, 8008b46 <__mdiff+0x11a>
 8008b20:	6117      	str	r7, [r2, #16]
 8008b22:	e79d      	b.n	8008a60 <__mdiff+0x34>
 8008b24:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b28:	46e6      	mov	lr, ip
 8008b2a:	0c08      	lsrs	r0, r1, #16
 8008b2c:	fa1c fc81 	uxtah	ip, ip, r1
 8008b30:	4471      	add	r1, lr
 8008b32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b36:	b289      	uxth	r1, r1
 8008b38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b3c:	f846 1b04 	str.w	r1, [r6], #4
 8008b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b44:	e7dd      	b.n	8008b02 <__mdiff+0xd6>
 8008b46:	3f01      	subs	r7, #1
 8008b48:	e7e7      	b.n	8008b1a <__mdiff+0xee>
 8008b4a:	bf00      	nop
 8008b4c:	080094b8 	.word	0x080094b8
 8008b50:	080094c9 	.word	0x080094c9

08008b54 <__d2b>:
 8008b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b58:	460f      	mov	r7, r1
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	ec59 8b10 	vmov	r8, r9, d0
 8008b60:	4616      	mov	r6, r2
 8008b62:	f7ff fccd 	bl	8008500 <_Balloc>
 8008b66:	4604      	mov	r4, r0
 8008b68:	b930      	cbnz	r0, 8008b78 <__d2b+0x24>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	4b23      	ldr	r3, [pc, #140]	@ (8008bfc <__d2b+0xa8>)
 8008b6e:	4824      	ldr	r0, [pc, #144]	@ (8008c00 <__d2b+0xac>)
 8008b70:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b74:	f000 f910 	bl	8008d98 <__assert_func>
 8008b78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b80:	b10d      	cbz	r5, 8008b86 <__d2b+0x32>
 8008b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	f1b8 0300 	subs.w	r3, r8, #0
 8008b8c:	d023      	beq.n	8008bd6 <__d2b+0x82>
 8008b8e:	4668      	mov	r0, sp
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	f7ff fd7c 	bl	800868e <__lo0bits>
 8008b96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b9a:	b1d0      	cbz	r0, 8008bd2 <__d2b+0x7e>
 8008b9c:	f1c0 0320 	rsb	r3, r0, #32
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	40c2      	lsrs	r2, r0
 8008ba8:	6163      	str	r3, [r4, #20]
 8008baa:	9201      	str	r2, [sp, #4]
 8008bac:	9b01      	ldr	r3, [sp, #4]
 8008bae:	61a3      	str	r3, [r4, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bf0c      	ite	eq
 8008bb4:	2201      	moveq	r2, #1
 8008bb6:	2202      	movne	r2, #2
 8008bb8:	6122      	str	r2, [r4, #16]
 8008bba:	b1a5      	cbz	r5, 8008be6 <__d2b+0x92>
 8008bbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bc0:	4405      	add	r5, r0
 8008bc2:	603d      	str	r5, [r7, #0]
 8008bc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bc8:	6030      	str	r0, [r6, #0]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	b003      	add	sp, #12
 8008bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	6161      	str	r1, [r4, #20]
 8008bd4:	e7ea      	b.n	8008bac <__d2b+0x58>
 8008bd6:	a801      	add	r0, sp, #4
 8008bd8:	f7ff fd59 	bl	800868e <__lo0bits>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	6163      	str	r3, [r4, #20]
 8008be0:	3020      	adds	r0, #32
 8008be2:	2201      	movs	r2, #1
 8008be4:	e7e8      	b.n	8008bb8 <__d2b+0x64>
 8008be6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bee:	6038      	str	r0, [r7, #0]
 8008bf0:	6918      	ldr	r0, [r3, #16]
 8008bf2:	f7ff fd2d 	bl	8008650 <__hi0bits>
 8008bf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bfa:	e7e5      	b.n	8008bc8 <__d2b+0x74>
 8008bfc:	080094b8 	.word	0x080094b8
 8008c00:	080094c9 	.word	0x080094c9

08008c04 <__sflush_r>:
 8008c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	0716      	lsls	r6, r2, #28
 8008c0e:	4605      	mov	r5, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	d454      	bmi.n	8008cbe <__sflush_r+0xba>
 8008c14:	684b      	ldr	r3, [r1, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dc02      	bgt.n	8008c20 <__sflush_r+0x1c>
 8008c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd48      	ble.n	8008cb2 <__sflush_r+0xae>
 8008c20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d045      	beq.n	8008cb2 <__sflush_r+0xae>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c2c:	682f      	ldr	r7, [r5, #0]
 8008c2e:	6a21      	ldr	r1, [r4, #32]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	d030      	beq.n	8008c96 <__sflush_r+0x92>
 8008c34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	0759      	lsls	r1, r3, #29
 8008c3a:	d505      	bpl.n	8008c48 <__sflush_r+0x44>
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	1ad2      	subs	r2, r2, r3
 8008c40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c42:	b10b      	cbz	r3, 8008c48 <__sflush_r+0x44>
 8008c44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c4c:	6a21      	ldr	r1, [r4, #32]
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b0      	blx	r6
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	d106      	bne.n	8008c66 <__sflush_r+0x62>
 8008c58:	6829      	ldr	r1, [r5, #0]
 8008c5a:	291d      	cmp	r1, #29
 8008c5c:	d82b      	bhi.n	8008cb6 <__sflush_r+0xb2>
 8008c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d08 <__sflush_r+0x104>)
 8008c60:	410a      	asrs	r2, r1
 8008c62:	07d6      	lsls	r6, r2, #31
 8008c64:	d427      	bmi.n	8008cb6 <__sflush_r+0xb2>
 8008c66:	2200      	movs	r2, #0
 8008c68:	6062      	str	r2, [r4, #4]
 8008c6a:	04d9      	lsls	r1, r3, #19
 8008c6c:	6922      	ldr	r2, [r4, #16]
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	d504      	bpl.n	8008c7c <__sflush_r+0x78>
 8008c72:	1c42      	adds	r2, r0, #1
 8008c74:	d101      	bne.n	8008c7a <__sflush_r+0x76>
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	b903      	cbnz	r3, 8008c7c <__sflush_r+0x78>
 8008c7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c7e:	602f      	str	r7, [r5, #0]
 8008c80:	b1b9      	cbz	r1, 8008cb2 <__sflush_r+0xae>
 8008c82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d002      	beq.n	8008c90 <__sflush_r+0x8c>
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7ff fb38 	bl	8008300 <_free_r>
 8008c90:	2300      	movs	r3, #0
 8008c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c94:	e00d      	b.n	8008cb2 <__sflush_r+0xae>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b0      	blx	r6
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	1c50      	adds	r0, r2, #1
 8008ca0:	d1c9      	bne.n	8008c36 <__sflush_r+0x32>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0c6      	beq.n	8008c36 <__sflush_r+0x32>
 8008ca8:	2b1d      	cmp	r3, #29
 8008caa:	d001      	beq.n	8008cb0 <__sflush_r+0xac>
 8008cac:	2b16      	cmp	r3, #22
 8008cae:	d11e      	bne.n	8008cee <__sflush_r+0xea>
 8008cb0:	602f      	str	r7, [r5, #0]
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e022      	b.n	8008cfc <__sflush_r+0xf8>
 8008cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cba:	b21b      	sxth	r3, r3
 8008cbc:	e01b      	b.n	8008cf6 <__sflush_r+0xf2>
 8008cbe:	690f      	ldr	r7, [r1, #16]
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	d0f6      	beq.n	8008cb2 <__sflush_r+0xae>
 8008cc4:	0793      	lsls	r3, r2, #30
 8008cc6:	680e      	ldr	r6, [r1, #0]
 8008cc8:	bf08      	it	eq
 8008cca:	694b      	ldreq	r3, [r1, #20]
 8008ccc:	600f      	str	r7, [r1, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	eba6 0807 	sub.w	r8, r6, r7
 8008cd6:	608b      	str	r3, [r1, #8]
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	dde9      	ble.n	8008cb2 <__sflush_r+0xae>
 8008cde:	6a21      	ldr	r1, [r4, #32]
 8008ce0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ce2:	4643      	mov	r3, r8
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b0      	blx	r6
 8008cea:	2800      	cmp	r0, #0
 8008cec:	dc08      	bgt.n	8008d00 <__sflush_r+0xfc>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	4407      	add	r7, r0
 8008d02:	eba8 0800 	sub.w	r8, r8, r0
 8008d06:	e7e7      	b.n	8008cd8 <__sflush_r+0xd4>
 8008d08:	dfbffffe 	.word	0xdfbffffe

08008d0c <_fflush_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b913      	cbnz	r3, 8008d1c <_fflush_r+0x10>
 8008d16:	2500      	movs	r5, #0
 8008d18:	4628      	mov	r0, r5
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	b118      	cbz	r0, 8008d26 <_fflush_r+0x1a>
 8008d1e:	6a03      	ldr	r3, [r0, #32]
 8008d20:	b90b      	cbnz	r3, 8008d26 <_fflush_r+0x1a>
 8008d22:	f7fe fba5 	bl	8007470 <__sinit>
 8008d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f3      	beq.n	8008d16 <_fflush_r+0xa>
 8008d2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d30:	07d0      	lsls	r0, r2, #31
 8008d32:	d404      	bmi.n	8008d3e <_fflush_r+0x32>
 8008d34:	0599      	lsls	r1, r3, #22
 8008d36:	d402      	bmi.n	8008d3e <_fflush_r+0x32>
 8008d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d3a:	f7fe fc90 	bl	800765e <__retarget_lock_acquire_recursive>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	4621      	mov	r1, r4
 8008d42:	f7ff ff5f 	bl	8008c04 <__sflush_r>
 8008d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d48:	07da      	lsls	r2, r3, #31
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	d4e4      	bmi.n	8008d18 <_fflush_r+0xc>
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	059b      	lsls	r3, r3, #22
 8008d52:	d4e1      	bmi.n	8008d18 <_fflush_r+0xc>
 8008d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d56:	f7fe fc83 	bl	8007660 <__retarget_lock_release_recursive>
 8008d5a:	e7dd      	b.n	8008d18 <_fflush_r+0xc>

08008d5c <_sbrk_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	@ (8008d78 <_sbrk_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7f8 fd3c 	bl	80017e4 <_sbrk>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_sbrk_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_sbrk_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	200004bc 	.word	0x200004bc

08008d7c <memcpy>:
 8008d7c:	440a      	add	r2, r1
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d84:	d100      	bne.n	8008d88 <memcpy+0xc>
 8008d86:	4770      	bx	lr
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d92:	4291      	cmp	r1, r2
 8008d94:	d1f9      	bne.n	8008d8a <memcpy+0xe>
 8008d96:	bd10      	pop	{r4, pc}

08008d98 <__assert_func>:
 8008d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <__assert_func+0x2c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4605      	mov	r5, r0
 8008da4:	68d8      	ldr	r0, [r3, #12]
 8008da6:	b954      	cbnz	r4, 8008dbe <__assert_func+0x26>
 8008da8:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <__assert_func+0x30>)
 8008daa:	461c      	mov	r4, r3
 8008dac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008db0:	9100      	str	r1, [sp, #0]
 8008db2:	462b      	mov	r3, r5
 8008db4:	4905      	ldr	r1, [pc, #20]	@ (8008dcc <__assert_func+0x34>)
 8008db6:	f000 f841 	bl	8008e3c <fiprintf>
 8008dba:	f000 f851 	bl	8008e60 <abort>
 8008dbe:	4b04      	ldr	r3, [pc, #16]	@ (8008dd0 <__assert_func+0x38>)
 8008dc0:	e7f4      	b.n	8008dac <__assert_func+0x14>
 8008dc2:	bf00      	nop
 8008dc4:	20000018 	.word	0x20000018
 8008dc8:	08009665 	.word	0x08009665
 8008dcc:	08009637 	.word	0x08009637
 8008dd0:	0800962a 	.word	0x0800962a

08008dd4 <_calloc_r>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	fba1 5402 	umull	r5, r4, r1, r2
 8008dda:	b93c      	cbnz	r4, 8008dec <_calloc_r+0x18>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	f7ff fb03 	bl	80083e8 <_malloc_r>
 8008de2:	4606      	mov	r6, r0
 8008de4:	b928      	cbnz	r0, 8008df2 <_calloc_r+0x1e>
 8008de6:	2600      	movs	r6, #0
 8008de8:	4630      	mov	r0, r6
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	220c      	movs	r2, #12
 8008dee:	6002      	str	r2, [r0, #0]
 8008df0:	e7f9      	b.n	8008de6 <_calloc_r+0x12>
 8008df2:	462a      	mov	r2, r5
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7fe fbb4 	bl	8007562 <memset>
 8008dfa:	e7f5      	b.n	8008de8 <_calloc_r+0x14>

08008dfc <__ascii_mbtowc>:
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	b901      	cbnz	r1, 8008e02 <__ascii_mbtowc+0x6>
 8008e00:	a901      	add	r1, sp, #4
 8008e02:	b142      	cbz	r2, 8008e16 <__ascii_mbtowc+0x1a>
 8008e04:	b14b      	cbz	r3, 8008e1a <__ascii_mbtowc+0x1e>
 8008e06:	7813      	ldrb	r3, [r2, #0]
 8008e08:	600b      	str	r3, [r1, #0]
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	1e10      	subs	r0, r2, #0
 8008e0e:	bf18      	it	ne
 8008e10:	2001      	movne	r0, #1
 8008e12:	b002      	add	sp, #8
 8008e14:	4770      	bx	lr
 8008e16:	4610      	mov	r0, r2
 8008e18:	e7fb      	b.n	8008e12 <__ascii_mbtowc+0x16>
 8008e1a:	f06f 0001 	mvn.w	r0, #1
 8008e1e:	e7f8      	b.n	8008e12 <__ascii_mbtowc+0x16>

08008e20 <__ascii_wctomb>:
 8008e20:	4603      	mov	r3, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	b141      	cbz	r1, 8008e38 <__ascii_wctomb+0x18>
 8008e26:	2aff      	cmp	r2, #255	@ 0xff
 8008e28:	d904      	bls.n	8008e34 <__ascii_wctomb+0x14>
 8008e2a:	228a      	movs	r2, #138	@ 0x8a
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e32:	4770      	bx	lr
 8008e34:	700a      	strb	r2, [r1, #0]
 8008e36:	2001      	movs	r0, #1
 8008e38:	4770      	bx	lr
	...

08008e3c <fiprintf>:
 8008e3c:	b40e      	push	{r1, r2, r3}
 8008e3e:	b503      	push	{r0, r1, lr}
 8008e40:	4601      	mov	r1, r0
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <fiprintf+0x20>)
 8008e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f000 f837 	bl	8008ec0 <_vfiprintf_r>
 8008e52:	b002      	add	sp, #8
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b003      	add	sp, #12
 8008e5a:	4770      	bx	lr
 8008e5c:	20000018 	.word	0x20000018

08008e60 <abort>:
 8008e60:	b508      	push	{r3, lr}
 8008e62:	2006      	movs	r0, #6
 8008e64:	f000 fa00 	bl	8009268 <raise>
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7f8 fc43 	bl	80016f4 <_exit>

08008e6e <__sfputc_r>:
 8008e6e:	6893      	ldr	r3, [r2, #8]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	b410      	push	{r4}
 8008e76:	6093      	str	r3, [r2, #8]
 8008e78:	da08      	bge.n	8008e8c <__sfputc_r+0x1e>
 8008e7a:	6994      	ldr	r4, [r2, #24]
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	db01      	blt.n	8008e84 <__sfputc_r+0x16>
 8008e80:	290a      	cmp	r1, #10
 8008e82:	d103      	bne.n	8008e8c <__sfputc_r+0x1e>
 8008e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e88:	f000 b932 	b.w	80090f0 <__swbuf_r>
 8008e8c:	6813      	ldr	r3, [r2, #0]
 8008e8e:	1c58      	adds	r0, r3, #1
 8008e90:	6010      	str	r0, [r2, #0]
 8008e92:	7019      	strb	r1, [r3, #0]
 8008e94:	4608      	mov	r0, r1
 8008e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <__sfputs_r>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	4614      	mov	r4, r2
 8008ea4:	18d5      	adds	r5, r2, r3
 8008ea6:	42ac      	cmp	r4, r5
 8008ea8:	d101      	bne.n	8008eae <__sfputs_r+0x12>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e007      	b.n	8008ebe <__sfputs_r+0x22>
 8008eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff ffda 	bl	8008e6e <__sfputc_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	d1f3      	bne.n	8008ea6 <__sfputs_r+0xa>
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ec0 <_vfiprintf_r>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	b09d      	sub	sp, #116	@ 0x74
 8008ec8:	4614      	mov	r4, r2
 8008eca:	4698      	mov	r8, r3
 8008ecc:	4606      	mov	r6, r0
 8008ece:	b118      	cbz	r0, 8008ed8 <_vfiprintf_r+0x18>
 8008ed0:	6a03      	ldr	r3, [r0, #32]
 8008ed2:	b90b      	cbnz	r3, 8008ed8 <_vfiprintf_r+0x18>
 8008ed4:	f7fe facc 	bl	8007470 <__sinit>
 8008ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eda:	07d9      	lsls	r1, r3, #31
 8008edc:	d405      	bmi.n	8008eea <_vfiprintf_r+0x2a>
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	059a      	lsls	r2, r3, #22
 8008ee2:	d402      	bmi.n	8008eea <_vfiprintf_r+0x2a>
 8008ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ee6:	f7fe fbba 	bl	800765e <__retarget_lock_acquire_recursive>
 8008eea:	89ab      	ldrh	r3, [r5, #12]
 8008eec:	071b      	lsls	r3, r3, #28
 8008eee:	d501      	bpl.n	8008ef4 <_vfiprintf_r+0x34>
 8008ef0:	692b      	ldr	r3, [r5, #16]
 8008ef2:	b99b      	cbnz	r3, 8008f1c <_vfiprintf_r+0x5c>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f938 	bl	800916c <__swsetup_r>
 8008efc:	b170      	cbz	r0, 8008f1c <_vfiprintf_r+0x5c>
 8008efe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f00:	07dc      	lsls	r4, r3, #31
 8008f02:	d504      	bpl.n	8008f0e <_vfiprintf_r+0x4e>
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	b01d      	add	sp, #116	@ 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	0598      	lsls	r0, r3, #22
 8008f12:	d4f7      	bmi.n	8008f04 <_vfiprintf_r+0x44>
 8008f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f16:	f7fe fba3 	bl	8007660 <__retarget_lock_release_recursive>
 8008f1a:	e7f3      	b.n	8008f04 <_vfiprintf_r+0x44>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f20:	2320      	movs	r3, #32
 8008f22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2a:	2330      	movs	r3, #48	@ 0x30
 8008f2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090dc <_vfiprintf_r+0x21c>
 8008f30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f34:	f04f 0901 	mov.w	r9, #1
 8008f38:	4623      	mov	r3, r4
 8008f3a:	469a      	mov	sl, r3
 8008f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f40:	b10a      	cbz	r2, 8008f46 <_vfiprintf_r+0x86>
 8008f42:	2a25      	cmp	r2, #37	@ 0x25
 8008f44:	d1f9      	bne.n	8008f3a <_vfiprintf_r+0x7a>
 8008f46:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4a:	d00b      	beq.n	8008f64 <_vfiprintf_r+0xa4>
 8008f4c:	465b      	mov	r3, fp
 8008f4e:	4622      	mov	r2, r4
 8008f50:	4629      	mov	r1, r5
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ffa2 	bl	8008e9c <__sfputs_r>
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f000 80a7 	beq.w	80090ac <_vfiprintf_r+0x1ec>
 8008f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f60:	445a      	add	r2, fp
 8008f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f64:	f89a 3000 	ldrb.w	r3, [sl]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 809f 	beq.w	80090ac <_vfiprintf_r+0x1ec>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f78:	f10a 0a01 	add.w	sl, sl, #1
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f84:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f86:	4654      	mov	r4, sl
 8008f88:	2205      	movs	r2, #5
 8008f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8e:	4853      	ldr	r0, [pc, #332]	@ (80090dc <_vfiprintf_r+0x21c>)
 8008f90:	f7f7 f91e 	bl	80001d0 <memchr>
 8008f94:	9a04      	ldr	r2, [sp, #16]
 8008f96:	b9d8      	cbnz	r0, 8008fd0 <_vfiprintf_r+0x110>
 8008f98:	06d1      	lsls	r1, r2, #27
 8008f9a:	bf44      	itt	mi
 8008f9c:	2320      	movmi	r3, #32
 8008f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fa2:	0713      	lsls	r3, r2, #28
 8008fa4:	bf44      	itt	mi
 8008fa6:	232b      	movmi	r3, #43	@ 0x2b
 8008fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fac:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fb2:	d015      	beq.n	8008fe0 <_vfiprintf_r+0x120>
 8008fb4:	9a07      	ldr	r2, [sp, #28]
 8008fb6:	4654      	mov	r4, sl
 8008fb8:	2000      	movs	r0, #0
 8008fba:	f04f 0c0a 	mov.w	ip, #10
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc4:	3b30      	subs	r3, #48	@ 0x30
 8008fc6:	2b09      	cmp	r3, #9
 8008fc8:	d94b      	bls.n	8009062 <_vfiprintf_r+0x1a2>
 8008fca:	b1b0      	cbz	r0, 8008ffa <_vfiprintf_r+0x13a>
 8008fcc:	9207      	str	r2, [sp, #28]
 8008fce:	e014      	b.n	8008ffa <_vfiprintf_r+0x13a>
 8008fd0:	eba0 0308 	sub.w	r3, r0, r8
 8008fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	46a2      	mov	sl, r4
 8008fde:	e7d2      	b.n	8008f86 <_vfiprintf_r+0xc6>
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	1d19      	adds	r1, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	9103      	str	r1, [sp, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfbb      	ittet	lt
 8008fec:	425b      	neglt	r3, r3
 8008fee:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff2:	9307      	strge	r3, [sp, #28]
 8008ff4:	9307      	strlt	r3, [sp, #28]
 8008ff6:	bfb8      	it	lt
 8008ff8:	9204      	strlt	r2, [sp, #16]
 8008ffa:	7823      	ldrb	r3, [r4, #0]
 8008ffc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ffe:	d10a      	bne.n	8009016 <_vfiprintf_r+0x156>
 8009000:	7863      	ldrb	r3, [r4, #1]
 8009002:	2b2a      	cmp	r3, #42	@ 0x2a
 8009004:	d132      	bne.n	800906c <_vfiprintf_r+0x1ac>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	1d1a      	adds	r2, r3, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	9203      	str	r2, [sp, #12]
 800900e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009012:	3402      	adds	r4, #2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090ec <_vfiprintf_r+0x22c>
 800901a:	7821      	ldrb	r1, [r4, #0]
 800901c:	2203      	movs	r2, #3
 800901e:	4650      	mov	r0, sl
 8009020:	f7f7 f8d6 	bl	80001d0 <memchr>
 8009024:	b138      	cbz	r0, 8009036 <_vfiprintf_r+0x176>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	eba0 000a 	sub.w	r0, r0, sl
 800902c:	2240      	movs	r2, #64	@ 0x40
 800902e:	4082      	lsls	r2, r0
 8009030:	4313      	orrs	r3, r2
 8009032:	3401      	adds	r4, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903a:	4829      	ldr	r0, [pc, #164]	@ (80090e0 <_vfiprintf_r+0x220>)
 800903c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009040:	2206      	movs	r2, #6
 8009042:	f7f7 f8c5 	bl	80001d0 <memchr>
 8009046:	2800      	cmp	r0, #0
 8009048:	d03f      	beq.n	80090ca <_vfiprintf_r+0x20a>
 800904a:	4b26      	ldr	r3, [pc, #152]	@ (80090e4 <_vfiprintf_r+0x224>)
 800904c:	bb1b      	cbnz	r3, 8009096 <_vfiprintf_r+0x1d6>
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	3307      	adds	r3, #7
 8009052:	f023 0307 	bic.w	r3, r3, #7
 8009056:	3308      	adds	r3, #8
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905c:	443b      	add	r3, r7
 800905e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009060:	e76a      	b.n	8008f38 <_vfiprintf_r+0x78>
 8009062:	fb0c 3202 	mla	r2, ip, r2, r3
 8009066:	460c      	mov	r4, r1
 8009068:	2001      	movs	r0, #1
 800906a:	e7a8      	b.n	8008fbe <_vfiprintf_r+0xfe>
 800906c:	2300      	movs	r3, #0
 800906e:	3401      	adds	r4, #1
 8009070:	9305      	str	r3, [sp, #20]
 8009072:	4619      	mov	r1, r3
 8009074:	f04f 0c0a 	mov.w	ip, #10
 8009078:	4620      	mov	r0, r4
 800907a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800907e:	3a30      	subs	r2, #48	@ 0x30
 8009080:	2a09      	cmp	r2, #9
 8009082:	d903      	bls.n	800908c <_vfiprintf_r+0x1cc>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0c6      	beq.n	8009016 <_vfiprintf_r+0x156>
 8009088:	9105      	str	r1, [sp, #20]
 800908a:	e7c4      	b.n	8009016 <_vfiprintf_r+0x156>
 800908c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009090:	4604      	mov	r4, r0
 8009092:	2301      	movs	r3, #1
 8009094:	e7f0      	b.n	8009078 <_vfiprintf_r+0x1b8>
 8009096:	ab03      	add	r3, sp, #12
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	462a      	mov	r2, r5
 800909c:	4b12      	ldr	r3, [pc, #72]	@ (80090e8 <_vfiprintf_r+0x228>)
 800909e:	a904      	add	r1, sp, #16
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7fd fda1 	bl	8006be8 <_printf_float>
 80090a6:	4607      	mov	r7, r0
 80090a8:	1c78      	adds	r0, r7, #1
 80090aa:	d1d6      	bne.n	800905a <_vfiprintf_r+0x19a>
 80090ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090ae:	07d9      	lsls	r1, r3, #31
 80090b0:	d405      	bmi.n	80090be <_vfiprintf_r+0x1fe>
 80090b2:	89ab      	ldrh	r3, [r5, #12]
 80090b4:	059a      	lsls	r2, r3, #22
 80090b6:	d402      	bmi.n	80090be <_vfiprintf_r+0x1fe>
 80090b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ba:	f7fe fad1 	bl	8007660 <__retarget_lock_release_recursive>
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	065b      	lsls	r3, r3, #25
 80090c2:	f53f af1f 	bmi.w	8008f04 <_vfiprintf_r+0x44>
 80090c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090c8:	e71e      	b.n	8008f08 <_vfiprintf_r+0x48>
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	462a      	mov	r2, r5
 80090d0:	4b05      	ldr	r3, [pc, #20]	@ (80090e8 <_vfiprintf_r+0x228>)
 80090d2:	a904      	add	r1, sp, #16
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7fe f81f 	bl	8007118 <_printf_i>
 80090da:	e7e4      	b.n	80090a6 <_vfiprintf_r+0x1e6>
 80090dc:	08009767 	.word	0x08009767
 80090e0:	08009771 	.word	0x08009771
 80090e4:	08006be9 	.word	0x08006be9
 80090e8:	08008e9d 	.word	0x08008e9d
 80090ec:	0800976d 	.word	0x0800976d

080090f0 <__swbuf_r>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	460e      	mov	r6, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	4605      	mov	r5, r0
 80090f8:	b118      	cbz	r0, 8009102 <__swbuf_r+0x12>
 80090fa:	6a03      	ldr	r3, [r0, #32]
 80090fc:	b90b      	cbnz	r3, 8009102 <__swbuf_r+0x12>
 80090fe:	f7fe f9b7 	bl	8007470 <__sinit>
 8009102:	69a3      	ldr	r3, [r4, #24]
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	071a      	lsls	r2, r3, #28
 800910a:	d501      	bpl.n	8009110 <__swbuf_r+0x20>
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	b943      	cbnz	r3, 8009122 <__swbuf_r+0x32>
 8009110:	4621      	mov	r1, r4
 8009112:	4628      	mov	r0, r5
 8009114:	f000 f82a 	bl	800916c <__swsetup_r>
 8009118:	b118      	cbz	r0, 8009122 <__swbuf_r+0x32>
 800911a:	f04f 37ff 	mov.w	r7, #4294967295
 800911e:	4638      	mov	r0, r7
 8009120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	1a98      	subs	r0, r3, r2
 8009128:	6963      	ldr	r3, [r4, #20]
 800912a:	b2f6      	uxtb	r6, r6
 800912c:	4283      	cmp	r3, r0
 800912e:	4637      	mov	r7, r6
 8009130:	dc05      	bgt.n	800913e <__swbuf_r+0x4e>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f7ff fde9 	bl	8008d0c <_fflush_r>
 800913a:	2800      	cmp	r0, #0
 800913c:	d1ed      	bne.n	800911a <__swbuf_r+0x2a>
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	3b01      	subs	r3, #1
 8009142:	60a3      	str	r3, [r4, #8]
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	6022      	str	r2, [r4, #0]
 800914a:	701e      	strb	r6, [r3, #0]
 800914c:	6962      	ldr	r2, [r4, #20]
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	429a      	cmp	r2, r3
 8009152:	d004      	beq.n	800915e <__swbuf_r+0x6e>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	07db      	lsls	r3, r3, #31
 8009158:	d5e1      	bpl.n	800911e <__swbuf_r+0x2e>
 800915a:	2e0a      	cmp	r6, #10
 800915c:	d1df      	bne.n	800911e <__swbuf_r+0x2e>
 800915e:	4621      	mov	r1, r4
 8009160:	4628      	mov	r0, r5
 8009162:	f7ff fdd3 	bl	8008d0c <_fflush_r>
 8009166:	2800      	cmp	r0, #0
 8009168:	d0d9      	beq.n	800911e <__swbuf_r+0x2e>
 800916a:	e7d6      	b.n	800911a <__swbuf_r+0x2a>

0800916c <__swsetup_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4b29      	ldr	r3, [pc, #164]	@ (8009214 <__swsetup_r+0xa8>)
 8009170:	4605      	mov	r5, r0
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	460c      	mov	r4, r1
 8009176:	b118      	cbz	r0, 8009180 <__swsetup_r+0x14>
 8009178:	6a03      	ldr	r3, [r0, #32]
 800917a:	b90b      	cbnz	r3, 8009180 <__swsetup_r+0x14>
 800917c:	f7fe f978 	bl	8007470 <__sinit>
 8009180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009184:	0719      	lsls	r1, r3, #28
 8009186:	d422      	bmi.n	80091ce <__swsetup_r+0x62>
 8009188:	06da      	lsls	r2, r3, #27
 800918a:	d407      	bmi.n	800919c <__swsetup_r+0x30>
 800918c:	2209      	movs	r2, #9
 800918e:	602a      	str	r2, [r5, #0]
 8009190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	f04f 30ff 	mov.w	r0, #4294967295
 800919a:	e033      	b.n	8009204 <__swsetup_r+0x98>
 800919c:	0758      	lsls	r0, r3, #29
 800919e:	d512      	bpl.n	80091c6 <__swsetup_r+0x5a>
 80091a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091a2:	b141      	cbz	r1, 80091b6 <__swsetup_r+0x4a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__swsetup_r+0x46>
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff f8a7 	bl	8008300 <_free_r>
 80091b2:	2300      	movs	r3, #0
 80091b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	2300      	movs	r3, #0
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	b94b      	cbnz	r3, 80091e6 <__swsetup_r+0x7a>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091dc:	d003      	beq.n	80091e6 <__swsetup_r+0x7a>
 80091de:	4621      	mov	r1, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 f883 	bl	80092ec <__smakebuf_r>
 80091e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ea:	f013 0201 	ands.w	r2, r3, #1
 80091ee:	d00a      	beq.n	8009206 <__swsetup_r+0x9a>
 80091f0:	2200      	movs	r2, #0
 80091f2:	60a2      	str	r2, [r4, #8]
 80091f4:	6962      	ldr	r2, [r4, #20]
 80091f6:	4252      	negs	r2, r2
 80091f8:	61a2      	str	r2, [r4, #24]
 80091fa:	6922      	ldr	r2, [r4, #16]
 80091fc:	b942      	cbnz	r2, 8009210 <__swsetup_r+0xa4>
 80091fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009202:	d1c5      	bne.n	8009190 <__swsetup_r+0x24>
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	0799      	lsls	r1, r3, #30
 8009208:	bf58      	it	pl
 800920a:	6962      	ldrpl	r2, [r4, #20]
 800920c:	60a2      	str	r2, [r4, #8]
 800920e:	e7f4      	b.n	80091fa <__swsetup_r+0x8e>
 8009210:	2000      	movs	r0, #0
 8009212:	e7f7      	b.n	8009204 <__swsetup_r+0x98>
 8009214:	20000018 	.word	0x20000018

08009218 <_raise_r>:
 8009218:	291f      	cmp	r1, #31
 800921a:	b538      	push	{r3, r4, r5, lr}
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	d904      	bls.n	800922c <_raise_r+0x14>
 8009222:	2316      	movs	r3, #22
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800922e:	b112      	cbz	r2, 8009236 <_raise_r+0x1e>
 8009230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009234:	b94b      	cbnz	r3, 800924a <_raise_r+0x32>
 8009236:	4628      	mov	r0, r5
 8009238:	f000 f830 	bl	800929c <_getpid_r>
 800923c:	4622      	mov	r2, r4
 800923e:	4601      	mov	r1, r0
 8009240:	4628      	mov	r0, r5
 8009242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009246:	f000 b817 	b.w	8009278 <_kill_r>
 800924a:	2b01      	cmp	r3, #1
 800924c:	d00a      	beq.n	8009264 <_raise_r+0x4c>
 800924e:	1c59      	adds	r1, r3, #1
 8009250:	d103      	bne.n	800925a <_raise_r+0x42>
 8009252:	2316      	movs	r3, #22
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	2001      	movs	r0, #1
 8009258:	e7e7      	b.n	800922a <_raise_r+0x12>
 800925a:	2100      	movs	r1, #0
 800925c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009260:	4620      	mov	r0, r4
 8009262:	4798      	blx	r3
 8009264:	2000      	movs	r0, #0
 8009266:	e7e0      	b.n	800922a <_raise_r+0x12>

08009268 <raise>:
 8009268:	4b02      	ldr	r3, [pc, #8]	@ (8009274 <raise+0xc>)
 800926a:	4601      	mov	r1, r0
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	f7ff bfd3 	b.w	8009218 <_raise_r>
 8009272:	bf00      	nop
 8009274:	20000018 	.word	0x20000018

08009278 <_kill_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d07      	ldr	r5, [pc, #28]	@ (8009298 <_kill_r+0x20>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	4611      	mov	r1, r2
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	f7f8 fa25 	bl	80016d4 <_kill>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	d102      	bne.n	8009294 <_kill_r+0x1c>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b103      	cbz	r3, 8009294 <_kill_r+0x1c>
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	bd38      	pop	{r3, r4, r5, pc}
 8009296:	bf00      	nop
 8009298:	200004bc 	.word	0x200004bc

0800929c <_getpid_r>:
 800929c:	f7f8 ba12 	b.w	80016c4 <_getpid>

080092a0 <__swhatbuf_r>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	460c      	mov	r4, r1
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2900      	cmp	r1, #0
 80092aa:	b096      	sub	sp, #88	@ 0x58
 80092ac:	4615      	mov	r5, r2
 80092ae:	461e      	mov	r6, r3
 80092b0:	da0d      	bge.n	80092ce <__swhatbuf_r+0x2e>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092b8:	f04f 0100 	mov.w	r1, #0
 80092bc:	bf14      	ite	ne
 80092be:	2340      	movne	r3, #64	@ 0x40
 80092c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092c4:	2000      	movs	r0, #0
 80092c6:	6031      	str	r1, [r6, #0]
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	b016      	add	sp, #88	@ 0x58
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	466a      	mov	r2, sp
 80092d0:	f000 f848 	bl	8009364 <_fstat_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dbec      	blt.n	80092b2 <__swhatbuf_r+0x12>
 80092d8:	9901      	ldr	r1, [sp, #4]
 80092da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092e2:	4259      	negs	r1, r3
 80092e4:	4159      	adcs	r1, r3
 80092e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092ea:	e7eb      	b.n	80092c4 <__swhatbuf_r+0x24>

080092ec <__smakebuf_r>:
 80092ec:	898b      	ldrh	r3, [r1, #12]
 80092ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092f0:	079d      	lsls	r5, r3, #30
 80092f2:	4606      	mov	r6, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	d507      	bpl.n	8009308 <__smakebuf_r+0x1c>
 80092f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	2301      	movs	r3, #1
 8009302:	6163      	str	r3, [r4, #20]
 8009304:	b003      	add	sp, #12
 8009306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009308:	ab01      	add	r3, sp, #4
 800930a:	466a      	mov	r2, sp
 800930c:	f7ff ffc8 	bl	80092a0 <__swhatbuf_r>
 8009310:	9f00      	ldr	r7, [sp, #0]
 8009312:	4605      	mov	r5, r0
 8009314:	4639      	mov	r1, r7
 8009316:	4630      	mov	r0, r6
 8009318:	f7ff f866 	bl	80083e8 <_malloc_r>
 800931c:	b948      	cbnz	r0, 8009332 <__smakebuf_r+0x46>
 800931e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009322:	059a      	lsls	r2, r3, #22
 8009324:	d4ee      	bmi.n	8009304 <__smakebuf_r+0x18>
 8009326:	f023 0303 	bic.w	r3, r3, #3
 800932a:	f043 0302 	orr.w	r3, r3, #2
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	e7e2      	b.n	80092f8 <__smakebuf_r+0xc>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	6020      	str	r0, [r4, #0]
 8009336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	9b01      	ldr	r3, [sp, #4]
 800933e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009342:	b15b      	cbz	r3, 800935c <__smakebuf_r+0x70>
 8009344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009348:	4630      	mov	r0, r6
 800934a:	f000 f81d 	bl	8009388 <_isatty_r>
 800934e:	b128      	cbz	r0, 800935c <__smakebuf_r+0x70>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	f043 0301 	orr.w	r3, r3, #1
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	431d      	orrs	r5, r3
 8009360:	81a5      	strh	r5, [r4, #12]
 8009362:	e7cf      	b.n	8009304 <__smakebuf_r+0x18>

08009364 <_fstat_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	@ (8009384 <_fstat_r+0x20>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	f7f8 fa0f 	bl	8001794 <_fstat>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d102      	bne.n	8009380 <_fstat_r+0x1c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b103      	cbz	r3, 8009380 <_fstat_r+0x1c>
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop
 8009384:	200004bc 	.word	0x200004bc

08009388 <_isatty_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	@ (80093a4 <_isatty_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 fa0e 	bl	80017b4 <_isatty>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_isatty_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_isatty_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	200004bc 	.word	0x200004bc

080093a8 <_init>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr

080093b4 <_fini>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	bf00      	nop
 80093b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ba:	bc08      	pop	{r3}
 80093bc:	469e      	mov	lr, r3
 80093be:	4770      	bx	lr
