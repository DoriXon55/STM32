
LICZNIK_2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052cc  080052cc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d4  080052d4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08005344  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08005344  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2df  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4e  00000000  00000000  00016377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000182c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb3  00000000  00000000  000191c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276de  00000000  00000000  00019d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145d  00000000  00000000  00041459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3f74  00000000  00000000  000528b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014682a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ac  00000000  00000000  00146870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014af1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800522c 	.word	0x0800522c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800522c 	.word	0x0800522c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
        break;
    }
  }
}
int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d102      	bne.n	8000574 <__io_putchar+0x14>
    __io_putchar('\r');
 800056e:	200d      	movs	r0, #13
 8000570:	f7ff fff6 	bl	8000560 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <__io_putchar+0x2c>)
 800057e:	f003 f9c7 	bl	8003910 <HAL_UART_Transmit>

  return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200000d0 	.word	0x200000d0

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb60 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f823 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f931 	bl	8000804 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005a2:	f000 f871 	bl	8000688 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f8fd 	bl	80007a4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005aa:	213c      	movs	r1, #60	@ 0x3c
 80005ac:	480b      	ldr	r0, [pc, #44]	@ (80005dc <main+0x4c>)
 80005ae:	f002 fa31 	bl	8002a14 <HAL_TIM_Encoder_Start>
  int16_t prev_value = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
	  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <main+0x4c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005bc:	80bb      	strh	r3, [r7, #4]
	  if (value != prev_value) {
 80005be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d0f5      	beq.n	80005b6 <main+0x26>
	    printf("value = %d\n", value);
 80005ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <main+0x50>)
 80005d2:	f003 ffbd 	bl	8004550 <iprintf>
	    prev_value = value;
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	80fb      	strh	r3, [r7, #6]
  {
 80005da:	e7ec      	b.n	80005b6 <main+0x26>
 80005dc:	20000084 	.word	0x20000084
 80005e0:	08005244 	.word	0x08005244

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	@ 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	@ 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f801 	bl	80045fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060a:	f000 fe39 	bl	8001280 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 f91a 	bl	800084c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000618:	2310      	movs	r3, #16
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	@ 0x60
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	@ 0x28
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fe6f 	bl	800132c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000654:	f000 f8fa 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2104      	movs	r1, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fa37 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800067c:	f000 f8e6 	bl	800084c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	@ 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ba:	4b38      	ldr	r3, [pc, #224]	@ (800079c <MX_TIM3_Init+0x114>)
 80006bc:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <MX_TIM3_Init+0x118>)
 80006be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80006c0:	4b36      	ldr	r3, [pc, #216]	@ (800079c <MX_TIM3_Init+0x114>)
 80006c2:	224f      	movs	r2, #79	@ 0x4f
 80006c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b35      	ldr	r3, [pc, #212]	@ (800079c <MX_TIM3_Init+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80006cc:	4b33      	ldr	r3, [pc, #204]	@ (800079c <MX_TIM3_Init+0x114>)
 80006ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b31      	ldr	r3, [pc, #196]	@ (800079c <MX_TIM3_Init+0x114>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <MX_TIM3_Init+0x114>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006e0:	482e      	ldr	r0, [pc, #184]	@ (800079c <MX_TIM3_Init+0x114>)
 80006e2:	f002 f8df 	bl	80028a4 <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006ec:	f000 f8ae 	bl	800084c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4827      	ldr	r0, [pc, #156]	@ (800079c <MX_TIM3_Init+0x114>)
 80006fe:	f002 fb2b 	bl	8002d58 <HAL_TIM_ConfigClockSource>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000708:	f000 f8a0 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800070c:	4823      	ldr	r0, [pc, #140]	@ (800079c <MX_TIM3_Init+0x114>)
 800070e:	f002 f920 	bl	8002952 <HAL_TIM_PWM_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000718:	f000 f898 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	481c      	ldr	r0, [pc, #112]	@ (800079c <MX_TIM3_Init+0x114>)
 800072c:	f003 f81a 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000736:	f000 f889 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073a:	2360      	movs	r3, #96	@ 0x60
 800073c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4812      	ldr	r0, [pc, #72]	@ (800079c <MX_TIM3_Init+0x114>)
 8000752:	f002 f9ed 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800075c:	f000 f876 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2204      	movs	r2, #4
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	@ (800079c <MX_TIM3_Init+0x114>)
 8000768:	f002 f9e2 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000772:	f000 f86b 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	2208      	movs	r2, #8
 800077a:	4619      	mov	r1, r3
 800077c:	4807      	ldr	r0, [pc, #28]	@ (800079c <MX_TIM3_Init+0x114>)
 800077e:	f002 f9d7 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000788:	f000 f860 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <MX_TIM3_Init+0x114>)
 800078e:	f000 f8a7 	bl	80008e0 <HAL_TIM_MspPostInit>

}
 8000792:	bf00      	nop
 8000794:	3738      	adds	r7, #56	@ 0x38
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000084 	.word	0x20000084
 80007a0:	40000400 	.word	0x40000400

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	f003 f844 	bl	8003874 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f82b 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000d0 	.word	0x200000d0
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x44>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <MX_GPIO_Init+0x44>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_GPIO_Init+0x44>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_GPIO_Init+0x44>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <MX_GPIO_Init+0x44>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_GPIO_Init+0x44>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_TIM_Base_MspInit+0x38>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d10b      	bne.n	80008ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_TIM_Base_MspInit+0x3c>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <HAL_TIM_Base_MspInit+0x3c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <HAL_TIM_Base_MspInit+0x3c>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40000400 	.word	0x40000400
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <HAL_TIM_MspPostInit+0x9c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d138      	bne.n	8000974 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <HAL_TIM_MspPostInit+0xa0>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a1e      	ldr	r2, [pc, #120]	@ (8000980 <HAL_TIM_MspPostInit+0xa0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <HAL_TIM_MspPostInit+0xa0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <HAL_TIM_MspPostInit+0xa0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a18      	ldr	r2, [pc, #96]	@ (8000980 <HAL_TIM_MspPostInit+0xa0>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_TIM_MspPostInit+0xa0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000932:	23c0      	movs	r3, #192	@ 0xc0
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000942:	2302      	movs	r3, #2
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f000 fade 	bl	8000f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000964:	2302      	movs	r3, #2
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <HAL_TIM_MspPostInit+0xa4>)
 8000970:	f000 face 	bl	8000f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	@ 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40000400 	.word	0x40000400
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0ac      	sub	sp, #176	@ 0xb0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2288      	movs	r2, #136	@ 0x88
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fe26 	bl	80045fa <memset>
  if(huart->Instance==USART2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <HAL_UART_MspInit+0xb0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d13b      	bne.n	8000a30 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fab1 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d0:	f7ff ff3c 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_UART_MspInit+0xb4>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d8:	4a18      	ldr	r2, [pc, #96]	@ (8000a3c <HAL_UART_MspInit+0xb4>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009de:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <HAL_UART_MspInit+0xb4>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <HAL_UART_MspInit+0xb4>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <HAL_UART_MspInit+0xb4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_UART_MspInit+0xb4>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f000 fa70 	bl	8000f10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a30:	bf00      	nop
 8000a32:	37b0      	adds	r7, #176	@ 0xb0
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a96:	f000 f935 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	e00a      	b.n	8000ac6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab0:	f3af 8000 	nop.w
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	60ba      	str	r2, [r7, #8]
 8000abc:	b2ca      	uxtb	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbf0      	blt.n	8000ab0 <_read+0x12>
  }

  return len;
 8000ace:	687b      	ldr	r3, [r7, #4]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e009      	b.n	8000afe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd34 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dbf1      	blt.n	8000aea <_write+0x12>
  }
  return len;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_close>:

int _close(int file)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b38:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_isatty>:

int _isatty(int file)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f003 fd76 	bl	8004698 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20018000 	.word	0x20018000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000158 	.word	0x20000158
 8000be0:	200002b0 	.word	0x200002b0

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 fd35 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fca9 	bl	8000590 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c4c:	080052dc 	.word	0x080052dc
  ldr r2, =_sbss
 8000c50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c54:	200002ac 	.word	0x200002ac

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f91f 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f80e 	bl	8000c8c <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fdec 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d023      	beq.n	8000ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_InitTick+0x70>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f91d 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d809      	bhi.n	8000cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f8f5 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0x74>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e007      	b.n	8000cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	2000015c 	.word	0x2000015c

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000015c 	.word	0x2000015c

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5c 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb0 	bl	8000e64 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	e17f      	b.n	8001220 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8171 	beq.w	800121a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d005      	beq.n	8000f50 <HAL_GPIO_Init+0x40>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d130      	bne.n	8000fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f86:	2201      	movs	r2, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	f003 0201 	and.w	r2, r3, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d118      	bne.n	8000ff0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	6939      	ldr	r1, [r7, #16]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80ac 	beq.w	800121a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001240 <HAL_GPIO_Init+0x330>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001240 <HAL_GPIO_Init+0x330>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <HAL_GPIO_Init+0x330>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010da:	4a5a      	ldr	r2, [pc, #360]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x242>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	@ (8001248 <HAL_GPIO_Init+0x338>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x23e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	@ (800124c <HAL_GPIO_Init+0x33c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x23a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <HAL_GPIO_Init+0x340>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x236>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4c      	ldr	r2, [pc, #304]	@ (8001254 <HAL_GPIO_Init+0x344>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x232>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	@ (8001258 <HAL_GPIO_Init+0x348>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4a      	ldr	r2, [pc, #296]	@ (800125c <HAL_GPIO_Init+0x34c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x22a>
 8001136:	2306      	movs	r3, #6
 8001138:	e00c      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800113a:	2307      	movs	r3, #7
 800113c:	e00a      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800113e:	2305      	movs	r3, #5
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x244>
 8001142:	2304      	movs	r3, #4
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x244>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x244>
 8001152:	2300      	movs	r3, #0
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001164:	4937      	ldr	r1, [pc, #220]	@ (8001244 <HAL_GPIO_Init+0x334>)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <HAL_GPIO_Init+0x350>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001196:	4a32      	ldr	r2, [pc, #200]	@ (8001260 <HAL_GPIO_Init+0x350>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_GPIO_Init+0x350>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c0:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <HAL_GPIO_Init+0x350>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	f47f ae78 	bne.w	8000f20 <HAL_GPIO_Init+0x10>
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	48000c00 	.word	0x48000c00
 8001254:	48001000 	.word	0x48001000
 8001258:	48001400 	.word	0x48001400
 800125c:	48001800 	.word	0x48001800
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <HAL_PWREx_GetVoltageRange+0x18>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40007000 	.word	0x40007000

08001280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800128e:	d130      	bne.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800129c:	d038      	beq.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2232      	movs	r2, #50	@ 0x32
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c4:	e002      	b.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d8:	d102      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f2      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ec:	d110      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e00f      	b.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fe:	d007      	beq.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000
 8001324:	20000000 	.word	0x20000000
 8001328:	431bde83 	.word	0x431bde83

0800132c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e3ca      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4b97      	ldr	r3, [pc, #604]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001348:	4b94      	ldr	r3, [pc, #592]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80e4 	beq.w	8001528 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_RCC_OscConfig+0x4a>
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	f040 808b 	bne.w	8001484 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b01      	cmp	r3, #1
 8001372:	f040 8087 	bne.w	8001484 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001376:	4b89      	ldr	r3, [pc, #548]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x62>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e3a2      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	4b82      	ldr	r3, [pc, #520]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <HAL_RCC_OscConfig+0x7c>
 800139e:	4b7f      	ldr	r3, [pc, #508]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013a6:	e005      	b.n	80013b4 <HAL_RCC_OscConfig+0x88>
 80013a8:	4b7c      	ldr	r3, [pc, #496]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d223      	bcs.n	8001400 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fd55 	bl	8001e6c <RCC_SetFlashLatencyFromMSIRange>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e383      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013cc:	4b73      	ldr	r3, [pc, #460]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a72      	ldr	r2, [pc, #456]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b70      	ldr	r3, [pc, #448]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	496d      	ldr	r1, [pc, #436]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ea:	4b6c      	ldr	r3, [pc, #432]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4968      	ldr	r1, [pc, #416]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
 80013fe:	e025      	b.n	800144c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001400:	4b66      	ldr	r3, [pc, #408]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a65      	ldr	r2, [pc, #404]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b63      	ldr	r3, [pc, #396]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4960      	ldr	r1, [pc, #384]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141e:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	495b      	ldr	r1, [pc, #364]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd15 	bl	8001e6c <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e343      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800144c:	f000 fc4a 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b52      	ldr	r3, [pc, #328]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	4950      	ldr	r1, [pc, #320]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
 8001468:	4a4e      	ldr	r2, [pc, #312]	@ (80015a4 <HAL_RCC_OscConfig+0x278>)
 800146a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800146c:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <HAL_RCC_OscConfig+0x27c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fc0b 	bl	8000c8c <HAL_InitTick>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d052      	beq.n	8001526 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	e327      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d032      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148c:	4b43      	ldr	r3, [pc, #268]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a42      	ldr	r2, [pc, #264]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc48 	bl	8000d2c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc44 	bl	8000d2c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e310      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b2:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014be:	4b37      	ldr	r3, [pc, #220]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a36      	ldr	r2, [pc, #216]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b34      	ldr	r3, [pc, #208]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4931      	ldr	r1, [pc, #196]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	492c      	ldr	r1, [pc, #176]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e01a      	b.n	8001528 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f2:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a29      	ldr	r2, [pc, #164]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fc15 	bl	8000d2c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001506:	f7ff fc11 	bl	8000d2c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e2dd      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x1da>
 8001524:	e000      	b.n	8001528 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d074      	beq.n	800161e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x21a>
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d10e      	bne.n	800155e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d10b      	bne.n	800155e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d064      	beq.n	800161c <HAL_RCC_OscConfig+0x2f0>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d160      	bne.n	800161c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e2ba      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x24a>
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e026      	b.n	80015c4 <HAL_RCC_OscConfig+0x298>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800157e:	d115      	bne.n	80015ac <HAL_RCC_OscConfig+0x280>
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a05      	ldr	r2, [pc, #20]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001586:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a02      	ldr	r2, [pc, #8]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e014      	b.n	80015c4 <HAL_RCC_OscConfig+0x298>
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	08005250 	.word	0x08005250
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004
 80015ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a9f      	ldr	r2, [pc, #636]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b9d      	ldr	r3, [pc, #628]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbae 	bl	8000d2c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fbaa 	bl	8000d2c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e276      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e6:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2a8>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb9a 	bl	8000d2c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb96 	bl	8000d2c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e262      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x2d0>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d060      	beq.n	80016ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x310>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d119      	bne.n	800166a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d116      	bne.n	800166a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163c:	4b7c      	ldr	r3, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x328>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e23f      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b76      	ldr	r3, [pc, #472]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	4973      	ldr	r1, [pc, #460]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001668:	e040      	b.n	80016ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d023      	beq.n	80016ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001672:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6e      	ldr	r2, [pc, #440]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fb55 	bl	8000d2c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fb51 	bl	8000d2c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e21d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001698:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	495f      	ldr	r1, [pc, #380]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	e018      	b.n	80016ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb31 	bl	8000d2c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb2d 	bl	8000d2c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1f9      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e0:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03c      	beq.n	8001772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01c      	beq.n	800173a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001706:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fb0c 	bl	8000d2c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fb08 	bl	8000d2c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1d4      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800172c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ef      	beq.n	8001718 <HAL_RCC_OscConfig+0x3ec>
 8001738:	e01b      	b.n	8001772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001740:	4a3b      	ldr	r2, [pc, #236]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff faef 	bl	8000d2c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff faeb 	bl	8000d2c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1b7      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001764:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ef      	bne.n	8001752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a6 	beq.w	80018cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	@ 0x58
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a8:	2301      	movs	r3, #1
 80017aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d118      	bne.n	80017ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fab2 	bl	8000d2c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017cc:	f7ff faae 	bl	8000d2c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e17a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_OscConfig+0x4d8>
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001802:	e029      	b.n	8001858 <HAL_RCC_OscConfig+0x52c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d115      	bne.n	8001838 <HAL_RCC_OscConfig+0x50c>
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182c:	e014      	b.n	8001858 <HAL_RCC_OscConfig+0x52c>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40007000 	.word	0x40007000
 8001838:	4b9c      	ldr	r3, [pc, #624]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a9b      	ldr	r2, [pc, #620]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001848:	4b98      	ldr	r3, [pc, #608]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184e:	4a97      	ldr	r2, [pc, #604]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fa64 	bl	8000d2c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fa60 	bl	8000d2c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e12a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187e:	4b8b      	ldr	r3, [pc, #556]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ed      	beq.n	8001868 <HAL_RCC_OscConfig+0x53c>
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fa4d 	bl	8000d2c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fa49 	bl	8000d2c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e113      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	4b7f      	ldr	r3, [pc, #508]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ed      	bne.n	8001896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b7a      	ldr	r3, [pc, #488]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	4a79      	ldr	r2, [pc, #484]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80fe 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018da:	2b02      	cmp	r3, #2
 80018dc:	f040 80d0 	bne.w	8001a80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018e0:	4b72      	ldr	r3, [pc, #456]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d130      	bne.n	8001956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	3b01      	subs	r3, #1
 8001900:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d127      	bne.n	8001956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001910:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11f      	bne.n	8001956 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001920:	2a07      	cmp	r2, #7
 8001922:	bf14      	ite	ne
 8001924:	2201      	movne	r2, #1
 8001926:	2200      	moveq	r2, #0
 8001928:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192a:	4293      	cmp	r3, r2
 800192c:	d113      	bne.n	8001956 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	3b01      	subs	r3, #1
 800193c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d109      	bne.n	8001956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	3b01      	subs	r3, #1
 8001950:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d06e      	beq.n	8001a34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d069      	beq.n	8001a30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001968:	4b50      	ldr	r3, [pc, #320]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0ad      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001978:	4b4c      	ldr	r3, [pc, #304]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a4b      	ldr	r2, [pc, #300]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 800197e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001984:	f7ff f9d2 	bl	8000d2c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f9ce 	bl	8000d2c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e09a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199e:	4b43      	ldr	r3, [pc, #268]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019aa:	4b40      	ldr	r3, [pc, #256]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <HAL_RCC_OscConfig+0x784>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019ba:	3a01      	subs	r2, #1
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	4311      	orrs	r1, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019c4:	0212      	lsls	r2, r2, #8
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019cc:	0852      	lsrs	r2, r2, #1
 80019ce:	3a01      	subs	r2, #1
 80019d0:	0552      	lsls	r2, r2, #21
 80019d2:	4311      	orrs	r1, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019d8:	0852      	lsrs	r2, r2, #1
 80019da:	3a01      	subs	r2, #1
 80019dc:	0652      	lsls	r2, r2, #25
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019e4:	0912      	lsrs	r2, r2, #4
 80019e6:	0452      	lsls	r2, r2, #17
 80019e8:	430a      	orrs	r2, r1
 80019ea:	4930      	ldr	r1, [pc, #192]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a2a      	ldr	r2, [pc, #168]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a08:	f7ff f990 	bl	8000d2c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f98c 	bl	8000d2c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e058      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2e:	e050      	b.n	8001ad2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e04f      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a34:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d148      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a58:	f7ff f968 	bl	8000d2c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f964 	bl	8000d2c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e030      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x734>
 8001a7e:	e028      	b.n	8001ad2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d023      	beq.n	8001ace <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <HAL_RCC_OscConfig+0x780>)
 8001a8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f94b 	bl	8000d2c <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	e00c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff f947 	bl	8000d2c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d905      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e013      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_RCC_OscConfig+0x7b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ec      	bne.n	8001a9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_RCC_OscConfig+0x7b0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4905      	ldr	r1, [pc, #20]	@ (8001adc <HAL_RCC_OscConfig+0x7b0>)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_RCC_OscConfig+0x7b4>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e001      	b.n	8001ad2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	feeefffc 	.word	0xfeeefffc

08001ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0e7      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b75      	ldr	r3, [pc, #468]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d910      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4970      	ldr	r1, [pc, #448]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0cf      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d010      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b66      	ldr	r3, [pc, #408]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d908      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b63      	ldr	r3, [pc, #396]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4960      	ldr	r1, [pc, #384]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d04c      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d121      	bne.n	8001bba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0a6      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b82:	4b54      	ldr	r3, [pc, #336]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d115      	bne.n	8001bba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e09a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e08e      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e086      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b46      	ldr	r3, [pc, #280]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4943      	ldr	r1, [pc, #268]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f8ae 	bl	8000d2c <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f8aa 	bl	8000d2c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e06e      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d208      	bcs.n	8001c2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	492b      	ldr	r1, [pc, #172]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2a:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d210      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 0207 	bic.w	r2, r3, #7
 8001c40:	4923      	ldr	r1, [pc, #140]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e036      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d008      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4918      	ldr	r1, [pc, #96]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c84:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4910      	ldr	r1, [pc, #64]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c98:	f000 f824 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	490b      	ldr	r1, [pc, #44]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a09      	ldr	r2, [pc, #36]	@ (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe ffe5 	bl	8000c8c <HAL_InitTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	08005250 	.word	0x08005250
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d11e      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d18:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e005      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d40:	4a2b      	ldr	r2, [pc, #172]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10d      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	e004      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d134      	bne.n	8001ddc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d003      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0xac>
 8001d88:	e005      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d8c:	617b      	str	r3, [r7, #20]
      break;
 8001d8e:	e005      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d92:	617b      	str	r3, [r7, #20]
      break;
 8001d94:	e002      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	617b      	str	r3, [r7, #20]
      break;
 8001d9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	3301      	adds	r3, #1
 8001da8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	fb03 f202 	mul.w	r2, r3, r2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	0e5b      	lsrs	r3, r3, #25
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08005268 	.word	0x08005268
 8001df4:	00f42400 	.word	0x00f42400
 8001df8:	007a1200 	.word	0x007a1200

08001dfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e18:	f7ff fff0 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4904      	ldr	r1, [pc, #16]	@ (8001e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08005260 	.word	0x08005260

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e44:	f7ff ffda 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0adb      	lsrs	r3, r3, #11
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4904      	ldr	r1, [pc, #16]	@ (8001e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08005260 	.word	0x08005260

08001e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff f9ee 	bl	8001264 <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
 8001e8a:	e014      	b.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	4a24      	ldr	r2, [pc, #144]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e98:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea4:	f7ff f9de 	bl	8001264 <HAL_PWREx_GetVoltageRange>
 8001ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	4a1d      	ldr	r2, [pc, #116]	@ (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ebc:	d10b      	bne.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b80      	cmp	r3, #128	@ 0x80
 8001ec2:	d919      	bls.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ec8:	d902      	bls.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eca:	2302      	movs	r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e013      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e010      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b80      	cmp	r3, #128	@ 0x80
 8001eda:	d902      	bls.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001edc:	2303      	movs	r3, #3
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e00a      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	@ 0x80
 8001ee6:	d102      	bne.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee8:	2302      	movs	r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e004      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b70      	cmp	r3, #112	@ 0x70
 8001ef2:	d101      	bne.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 0207 	bic.w	r2, r3, #7
 8001f00:	4909      	ldr	r1, [pc, #36]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f34:	2300      	movs	r3, #0
 8001f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d041      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f50:	d02a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f56:	d824      	bhi.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f5c:	d008      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f62:	d81e      	bhi.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f70:	4b86      	ldr	r3, [pc, #536]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a85      	ldr	r2, [pc, #532]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7c:	e015      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fabb 	bl	8002500 <RCCEx_PLLSAI1_Config>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8e:	e00c      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3320      	adds	r3, #32
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fba6 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa0:	e003      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001faa:	7cfb      	ldrb	r3, [r7, #19]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb0:	4b76      	ldr	r3, [pc, #472]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fbe:	4973      	ldr	r1, [pc, #460]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fc6:	e001      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d041      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fe0:	d02a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fe6:	d824      	bhi.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fec:	d008      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ff2:	d81e      	bhi.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ffc:	d010      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ffe:	e018      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002000:	4b62      	ldr	r3, [pc, #392]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a61      	ldr	r2, [pc, #388]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200c:	e015      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fa73 	bl	8002500 <RCCEx_PLLSAI1_Config>
 800201a:	4603      	mov	r3, r0
 800201c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800201e:	e00c      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3320      	adds	r3, #32
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fb5e 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002030:	e003      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	74fb      	strb	r3, [r7, #19]
      break;
 8002036:	e000      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800203a:	7cfb      	ldrb	r3, [r7, #19]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10b      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002040:	4b52      	ldr	r3, [pc, #328]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800204e:	494f      	ldr	r1, [pc, #316]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002056:	e001      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80a0 	beq.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800207e:	2300      	movs	r3, #0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00d      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b41      	ldr	r3, [pc, #260]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	4a40      	ldr	r2, [pc, #256]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002090:	4b3e      	ldr	r3, [pc, #248]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209c:	2301      	movs	r3, #1
 800209e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fe3e 	bl	8000d2c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b2:	e009      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7fe fe3a 	bl	8000d2c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d902      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	74fb      	strb	r3, [r7, #19]
        break;
 80020c6:	e005      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c8:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ef      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d15c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020da:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01f      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d019      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f8:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	4a20      	ldr	r2, [pc, #128]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002124:	4a19      	ldr	r2, [pc, #100]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fdf9 	bl	8000d2c <HAL_GetTick>
 800213a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213c:	e00b      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe fdf5 	bl	8000d2c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d902      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	74fb      	strb	r3, [r7, #19]
            break;
 8002154:	e006      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ec      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800217a:	4904      	ldr	r1, [pc, #16]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002182:	e009      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
 8002188:	e006      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b9e      	ldr	r3, [pc, #632]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	4a9d      	ldr	r2, [pc, #628]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b6:	4b98      	ldr	r3, [pc, #608]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021bc:	f023 0203 	bic.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c4:	4994      	ldr	r1, [pc, #592]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	f023 020c 	bic.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e6:	498c      	ldr	r1, [pc, #560]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021fa:	4b87      	ldr	r3, [pc, #540]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002200:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	4983      	ldr	r1, [pc, #524]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800221c:	4b7e      	ldr	r3, [pc, #504]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	497b      	ldr	r1, [pc, #492]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223e:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224c:	4972      	ldr	r1, [pc, #456]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	496a      	ldr	r1, [pc, #424]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002282:	4b65      	ldr	r3, [pc, #404]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	4961      	ldr	r1, [pc, #388]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	4959      	ldr	r1, [pc, #356]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c6:	4b54      	ldr	r3, [pc, #336]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d4:	4950      	ldr	r1, [pc, #320]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	4948      	ldr	r1, [pc, #288]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800230a:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	493f      	ldr	r1, [pc, #252]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d028      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232c:	4b3a      	ldr	r3, [pc, #232]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800233a:	4937      	ldr	r1, [pc, #220]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234a:	d106      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a31      	ldr	r2, [pc, #196]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
 8002358:	e011      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800235e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002362:	d10c      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	2101      	movs	r1, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f8c8 	bl	8002500 <RCCEx_PLLSAI1_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d028      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238a:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002398:	491f      	ldr	r1, [pc, #124]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b4:	60d3      	str	r3, [r2, #12]
 80023b6:	e011      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f899 	bl	8002500 <RCCEx_PLLSAI1_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02b      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f6:	4908      	ldr	r1, [pc, #32]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002406:	d109      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a02      	ldr	r2, [pc, #8]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002412:	60d3      	str	r3, [r2, #12]
 8002414:	e014      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002424:	d10c      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f867 	bl	8002500 <RCCEx_PLLSAI1_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800244c:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800245a:	4928      	ldr	r1, [pc, #160]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800246a:	d10d      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2102      	movs	r1, #2
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f844 	bl	8002500 <RCCEx_PLLSAI1_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	74bb      	strb	r3, [r7, #18]
 8002486:	e011      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800248c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002490:	d10c      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3320      	adds	r3, #32
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f925 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024c6:	490d      	ldr	r1, [pc, #52]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024da:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ea:	4904      	ldr	r1, [pc, #16]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800250e:	4b75      	ldr	r3, [pc, #468]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d018      	beq.n	800254c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800251a:	4b72      	ldr	r3, [pc, #456]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0203 	and.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d10d      	bne.n	8002546 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
       ||
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002532:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
       ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d047      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	e044      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d018      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x86>
 8002554:	2b03      	cmp	r3, #3
 8002556:	d825      	bhi.n	80025a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002558:	2b01      	cmp	r3, #1
 800255a:	d002      	beq.n	8002562 <RCCEx_PLLSAI1_Config+0x62>
 800255c:	2b02      	cmp	r3, #2
 800255e:	d009      	beq.n	8002574 <RCCEx_PLLSAI1_Config+0x74>
 8002560:	e020      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002562:	4b60      	ldr	r3, [pc, #384]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11d      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002572:	e01a      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002574:	4b5b      	ldr	r3, [pc, #364]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d116      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002584:	e013      	b.n	80025ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002586:	4b57      	ldr	r3, [pc, #348]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002592:	4b54      	ldr	r3, [pc, #336]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025a2:	e006      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      break;
 80025a8:	e004      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025aa:	bf00      	nop
 80025ac:	e002      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ae:	bf00      	nop
 80025b0:	e000      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10d      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ba:	4b4a      	ldr	r3, [pc, #296]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	430b      	orrs	r3, r1
 80025d0:	4944      	ldr	r1, [pc, #272]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d17d      	bne.n	80026d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025dc:	4b41      	ldr	r3, [pc, #260]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a40      	ldr	r2, [pc, #256]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e8:	f7fe fba0 	bl	8000d2c <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ee:	e009      	b.n	8002604 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f0:	f7fe fb9c 	bl	8000d2c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d902      	bls.n	8002604 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	73fb      	strb	r3, [r7, #15]
        break;
 8002602:	e005      	b.n	8002610 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ef      	bne.n	80025f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d160      	bne.n	80026d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800261c:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6892      	ldr	r2, [r2, #8]
 800262c:	0211      	lsls	r1, r2, #8
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	0912      	lsrs	r2, r2, #4
 8002634:	0452      	lsls	r2, r2, #17
 8002636:	430a      	orrs	r2, r1
 8002638:	492a      	ldr	r1, [pc, #168]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	610b      	str	r3, [r1, #16]
 800263e:	e027      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d112      	bne.n	800266c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800264e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	0211      	lsls	r1, r2, #8
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6912      	ldr	r2, [r2, #16]
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	3a01      	subs	r2, #1
 8002660:	0552      	lsls	r2, r2, #21
 8002662:	430a      	orrs	r2, r1
 8002664:	491f      	ldr	r1, [pc, #124]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	610b      	str	r3, [r1, #16]
 800266a:	e011      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002674:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6892      	ldr	r2, [r2, #8]
 800267c:	0211      	lsls	r1, r2, #8
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6952      	ldr	r2, [r2, #20]
 8002682:	0852      	lsrs	r2, r2, #1
 8002684:	3a01      	subs	r2, #1
 8002686:	0652      	lsls	r2, r2, #25
 8002688:	430a      	orrs	r2, r1
 800268a:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800269a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fb46 	bl	8000d2c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a2:	e009      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a4:	f7fe fb42 	bl	8000d2c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	73fb      	strb	r3, [r7, #15]
          break;
 80026b6:	e005      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4904      	ldr	r1, [pc, #16]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000

080026e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026f6:	4b6a      	ldr	r3, [pc, #424]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d018      	beq.n	8002734 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002702:	4b67      	ldr	r3, [pc, #412]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
       ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800271a:	4b61      	ldr	r3, [pc, #388]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
       ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d047      	beq.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e044      	b.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d018      	beq.n	800276e <RCCEx_PLLSAI2_Config+0x86>
 800273c:	2b03      	cmp	r3, #3
 800273e:	d825      	bhi.n	800278c <RCCEx_PLLSAI2_Config+0xa4>
 8002740:	2b01      	cmp	r3, #1
 8002742:	d002      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x62>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d009      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x74>
 8002748:	e020      	b.n	800278c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274a:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11d      	bne.n	8002792 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275a:	e01a      	b.n	8002792 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e013      	b.n	8002796 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800276e:	4b4c      	ldr	r3, [pc, #304]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277a:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278a:	e006      	b.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e004      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279a:	bf00      	nop
    }

    if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a2:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	430b      	orrs	r3, r1
 80027b8:	4939      	ldr	r1, [pc, #228]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d167      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027c4:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe faac 	bl	8000d2c <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d6:	e009      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d8:	f7fe faa8 	bl	8000d2c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d902      	bls.n	80027ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ea:	e005      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ec:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ef      	bne.n	80027d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d14a      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002804:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800280c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	0912      	lsrs	r2, r2, #4
 800281c:	0452      	lsls	r2, r2, #17
 800281e:	430a      	orrs	r2, r1
 8002820:	491f      	ldr	r1, [pc, #124]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	614b      	str	r3, [r1, #20]
 8002826:	e011      	b.n	800284c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002830:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6912      	ldr	r2, [r2, #16]
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	0652      	lsls	r2, r2, #25
 8002844:	430a      	orrs	r2, r1
 8002846:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fa68 	bl	8000d2c <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002860:	f7fe fa64 	bl	8000d2c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
          break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e049      	b.n	800294a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd ffe8 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fb02 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e049      	b.n	80029f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f841 	bl	8002a00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 faab 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d110      	bne.n	8002a66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a4a:	7b7b      	ldrb	r3, [r7, #13]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d001      	beq.n	8002a54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e069      	b.n	8002b28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a64:	e031      	b.n	8002aca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d110      	bne.n	8002a8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a6c:	7bbb      	ldrb	r3, [r7, #14]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a72:	7b3b      	ldrb	r3, [r7, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e055      	b.n	8002b28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a8c:	e01d      	b.n	8002aca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d108      	bne.n	8002aa6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a9a:	7b7b      	ldrb	r3, [r7, #13]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002aa0:	7b3b      	ldrb	r3, [r7, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e03e      	b.n	8002b28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_TIM_Encoder_Start+0xc4>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d008      	beq.n	8002ae8 <HAL_TIM_Encoder_Start+0xd4>
 8002ad6:	e00f      	b.n	8002af8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fe19 	bl	8003718 <TIM_CCxChannelCmd>
      break;
 8002ae6:	e016      	b.n	8002b16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	2104      	movs	r1, #4
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fe11 	bl	8003718 <TIM_CCxChannelCmd>
      break;
 8002af6:	e00e      	b.n	8002b16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fe09 	bl	8003718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fe02 	bl	8003718 <TIM_CCxChannelCmd>
      break;
 8002b14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0ff      	b.n	8002d4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b14      	cmp	r3, #20
 8002b5a:	f200 80f0 	bhi.w	8002d3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002bb9 	.word	0x08002bb9
 8002b68:	08002d3f 	.word	0x08002d3f
 8002b6c:	08002d3f 	.word	0x08002d3f
 8002b70:	08002d3f 	.word	0x08002d3f
 8002b74:	08002bf9 	.word	0x08002bf9
 8002b78:	08002d3f 	.word	0x08002d3f
 8002b7c:	08002d3f 	.word	0x08002d3f
 8002b80:	08002d3f 	.word	0x08002d3f
 8002b84:	08002c3b 	.word	0x08002c3b
 8002b88:	08002d3f 	.word	0x08002d3f
 8002b8c:	08002d3f 	.word	0x08002d3f
 8002b90:	08002d3f 	.word	0x08002d3f
 8002b94:	08002c7b 	.word	0x08002c7b
 8002b98:	08002d3f 	.word	0x08002d3f
 8002b9c:	08002d3f 	.word	0x08002d3f
 8002ba0:	08002d3f 	.word	0x08002d3f
 8002ba4:	08002cbd 	.word	0x08002cbd
 8002ba8:	08002d3f 	.word	0x08002d3f
 8002bac:	08002d3f 	.word	0x08002d3f
 8002bb0:	08002d3f 	.word	0x08002d3f
 8002bb4:	08002cfd 	.word	0x08002cfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa3a 	bl	8003038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0208 	orr.w	r2, r2, #8
 8002bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0204 	bic.w	r2, r2, #4
 8002be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6999      	ldr	r1, [r3, #24]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	619a      	str	r2, [r3, #24]
      break;
 8002bf6:	e0a5      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 faaa 	bl	8003158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	021a      	lsls	r2, r3, #8
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]
      break;
 8002c38:	e084      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fb13 	bl	800326c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0208 	orr.w	r2, r2, #8
 8002c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0204 	bic.w	r2, r2, #4
 8002c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	61da      	str	r2, [r3, #28]
      break;
 8002c78:	e064      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb7b 	bl	800337c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	021a      	lsls	r2, r3, #8
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	61da      	str	r2, [r3, #28]
      break;
 8002cba:	e043      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fbc4 	bl	8003450 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cfa:	e023      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fc08 	bl	8003518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d3c:	e002      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
      break;
 8002d42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIM_ConfigClockSource+0x1c>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0b6      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x18a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db0:	d03e      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0xd8>
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db6:	f200 8087 	bhi.w	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbe:	f000 8086 	beq.w	8002ece <HAL_TIM_ConfigClockSource+0x176>
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc6:	d87f      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002dc8:	2b70      	cmp	r3, #112	@ 0x70
 8002dca:	d01a      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0xaa>
 8002dcc:	2b70      	cmp	r3, #112	@ 0x70
 8002dce:	d87b      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002dd0:	2b60      	cmp	r3, #96	@ 0x60
 8002dd2:	d050      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x11e>
 8002dd4:	2b60      	cmp	r3, #96	@ 0x60
 8002dd6:	d877      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002dd8:	2b50      	cmp	r3, #80	@ 0x50
 8002dda:	d03c      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xfe>
 8002ddc:	2b50      	cmp	r3, #80	@ 0x50
 8002dde:	d873      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002de0:	2b40      	cmp	r3, #64	@ 0x40
 8002de2:	d058      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x13e>
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d86f      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002de8:	2b30      	cmp	r3, #48	@ 0x30
 8002dea:	d064      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002dec:	2b30      	cmp	r3, #48	@ 0x30
 8002dee:	d86b      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d060      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d867      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05c      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d05a      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e00:	e062      	b.n	8002ec8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e12:	f000 fc61 	bl	80036d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	609a      	str	r2, [r3, #8]
      break;
 8002e2e:	e04f      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e40:	f000 fc4a 	bl	80036d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e52:	609a      	str	r2, [r3, #8]
      break;
 8002e54:	e03c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	461a      	mov	r2, r3
 8002e64:	f000 fbbe 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2150      	movs	r1, #80	@ 0x50
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fc17 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8002e74:	e02c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 fbdd 	bl	8003642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2160      	movs	r1, #96	@ 0x60
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fc07 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8002e94:	e01c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 fb9e 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2140      	movs	r1, #64	@ 0x40
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fbf7 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e00c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f000 fbee 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8002ec6:	e003      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e000      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a46      	ldr	r2, [pc, #280]	@ (8003018 <TIM_Base_SetConfig+0x12c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0a:	d00f      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a43      	ldr	r2, [pc, #268]	@ (800301c <TIM_Base_SetConfig+0x130>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a42      	ldr	r2, [pc, #264]	@ (8003020 <TIM_Base_SetConfig+0x134>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a41      	ldr	r2, [pc, #260]	@ (8003024 <TIM_Base_SetConfig+0x138>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a40      	ldr	r2, [pc, #256]	@ (8003028 <TIM_Base_SetConfig+0x13c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a35      	ldr	r2, [pc, #212]	@ (8003018 <TIM_Base_SetConfig+0x12c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4c:	d01b      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a32      	ldr	r2, [pc, #200]	@ (800301c <TIM_Base_SetConfig+0x130>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d017      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <TIM_Base_SetConfig+0x134>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a30      	ldr	r2, [pc, #192]	@ (8003024 <TIM_Base_SetConfig+0x138>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2f      	ldr	r2, [pc, #188]	@ (8003028 <TIM_Base_SetConfig+0x13c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2e      	ldr	r2, [pc, #184]	@ (800302c <TIM_Base_SetConfig+0x140>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2d      	ldr	r2, [pc, #180]	@ (8003030 <TIM_Base_SetConfig+0x144>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2c      	ldr	r2, [pc, #176]	@ (8003034 <TIM_Base_SetConfig+0x148>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <TIM_Base_SetConfig+0x12c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <TIM_Base_SetConfig+0x13c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a17      	ldr	r2, [pc, #92]	@ (800302c <TIM_Base_SetConfig+0x140>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	@ (8003030 <TIM_Base_SetConfig+0x144>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a15      	ldr	r2, [pc, #84]	@ (8003034 <TIM_Base_SetConfig+0x148>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f023 0201 	bic.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]
  }
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40013400 	.word	0x40013400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800

08003038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 0201 	bic.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 0302 	bic.w	r3, r3, #2
 8003084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <TIM_OC1_SetConfig+0x10c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00f      	beq.n	80030b8 <TIM_OC1_SetConfig+0x80>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a2b      	ldr	r2, [pc, #172]	@ (8003148 <TIM_OC1_SetConfig+0x110>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00b      	beq.n	80030b8 <TIM_OC1_SetConfig+0x80>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2a      	ldr	r2, [pc, #168]	@ (800314c <TIM_OC1_SetConfig+0x114>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_OC1_SetConfig+0x80>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a29      	ldr	r2, [pc, #164]	@ (8003150 <TIM_OC1_SetConfig+0x118>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_OC1_SetConfig+0x80>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a28      	ldr	r2, [pc, #160]	@ (8003154 <TIM_OC1_SetConfig+0x11c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10c      	bne.n	80030d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0308 	bic.w	r3, r3, #8
 80030be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <TIM_OC1_SetConfig+0x10c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00f      	beq.n	80030fa <TIM_OC1_SetConfig+0xc2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <TIM_OC1_SetConfig+0x110>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00b      	beq.n	80030fa <TIM_OC1_SetConfig+0xc2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a19      	ldr	r2, [pc, #100]	@ (800314c <TIM_OC1_SetConfig+0x114>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_OC1_SetConfig+0xc2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a18      	ldr	r2, [pc, #96]	@ (8003150 <TIM_OC1_SetConfig+0x118>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_OC1_SetConfig+0xc2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <TIM_OC1_SetConfig+0x11c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d111      	bne.n	800311e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40013400 	.word	0x40013400
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800

08003158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f023 0210 	bic.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0320 	bic.w	r3, r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <TIM_OC2_SetConfig+0x100>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_OC2_SetConfig+0x6c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a27      	ldr	r2, [pc, #156]	@ (800325c <TIM_OC2_SetConfig+0x104>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10d      	bne.n	80031e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003258 <TIM_OC2_SetConfig+0x100>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00f      	beq.n	8003208 <TIM_OC2_SetConfig+0xb0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	@ (800325c <TIM_OC2_SetConfig+0x104>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_OC2_SetConfig+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <TIM_OC2_SetConfig+0x108>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_OC2_SetConfig+0xb0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <TIM_OC2_SetConfig+0x10c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC2_SetConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <TIM_OC2_SetConfig+0x110>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40013400 	.word	0x40013400
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a27      	ldr	r2, [pc, #156]	@ (8003368 <TIM_OC3_SetConfig+0xfc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_OC3_SetConfig+0x6a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a26      	ldr	r2, [pc, #152]	@ (800336c <TIM_OC3_SetConfig+0x100>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10d      	bne.n	80032f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003368 <TIM_OC3_SetConfig+0xfc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00f      	beq.n	800331a <TIM_OC3_SetConfig+0xae>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1b      	ldr	r2, [pc, #108]	@ (800336c <TIM_OC3_SetConfig+0x100>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00b      	beq.n	800331a <TIM_OC3_SetConfig+0xae>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1a      	ldr	r2, [pc, #104]	@ (8003370 <TIM_OC3_SetConfig+0x104>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <TIM_OC3_SetConfig+0xae>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <TIM_OC3_SetConfig+0x108>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_OC3_SetConfig+0xae>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <TIM_OC3_SetConfig+0x10c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d113      	bne.n	8003342 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40013400 	.word	0x40013400
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800

0800337c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	031b      	lsls	r3, r3, #12
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a18      	ldr	r2, [pc, #96]	@ (800343c <TIM_OC4_SetConfig+0xc0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00f      	beq.n	8003400 <TIM_OC4_SetConfig+0x84>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <TIM_OC4_SetConfig+0xc4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_OC4_SetConfig+0x84>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a16      	ldr	r2, [pc, #88]	@ (8003444 <TIM_OC4_SetConfig+0xc8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <TIM_OC4_SetConfig+0x84>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a15      	ldr	r2, [pc, #84]	@ (8003448 <TIM_OC4_SetConfig+0xcc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_OC4_SetConfig+0x84>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a14      	ldr	r2, [pc, #80]	@ (800344c <TIM_OC4_SetConfig+0xd0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d109      	bne.n	8003414 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40013400 	.word	0x40013400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800

08003450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003494:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <TIM_OC5_SetConfig+0xb4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_OC5_SetConfig+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <TIM_OC5_SetConfig+0xb8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_OC5_SetConfig+0x7a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a15      	ldr	r2, [pc, #84]	@ (800350c <TIM_OC5_SetConfig+0xbc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_OC5_SetConfig+0x7a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a14      	ldr	r2, [pc, #80]	@ (8003510 <TIM_OC5_SetConfig+0xc0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_OC5_SetConfig+0x7a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a13      	ldr	r2, [pc, #76]	@ (8003514 <TIM_OC5_SetConfig+0xc4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d109      	bne.n	80034de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	621a      	str	r2, [r3, #32]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40013400 	.word	0x40013400
 800350c:	40014000 	.word	0x40014000
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800

08003518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800355e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	051b      	lsls	r3, r3, #20
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a18      	ldr	r2, [pc, #96]	@ (80035d0 <TIM_OC6_SetConfig+0xb8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00f      	beq.n	8003594 <TIM_OC6_SetConfig+0x7c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <TIM_OC6_SetConfig+0xbc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_OC6_SetConfig+0x7c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <TIM_OC6_SetConfig+0xc0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <TIM_OC6_SetConfig+0x7c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <TIM_OC6_SetConfig+0xc4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_OC6_SetConfig+0x7c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a14      	ldr	r2, [pc, #80]	@ (80035e0 <TIM_OC6_SetConfig+0xc8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d109      	bne.n	80035a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 030a 	bic.w	r3, r3, #10
 8003620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f023 0210 	bic.w	r2, r3, #16
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800366c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800367e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 0307 	orr.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2201      	movs	r2, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e068      	b.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2e      	ldr	r2, [pc, #184]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80037b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1e      	ldr	r2, [pc, #120]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01d      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ee:	d018      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a18      	ldr	r2, [pc, #96]	@ (800386c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d10c      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40013400 	.word	0x40013400
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40014000 	.word	0x40014000

08003874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e040      	b.n	8003908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd f876 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	@ 0x24
 80038a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fb6a 	bl	8003f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8af 	bl	8003a24 <UART_SetConfig>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e01b      	b.n	8003908 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fbe9 	bl	80040d8 <UART_CheckIdleState>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	@ 0x28
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003924:	2b20      	cmp	r3, #32
 8003926:	d177      	bne.n	8003a18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_UART_Transmit+0x24>
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e070      	b.n	8003a1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2221      	movs	r2, #33	@ 0x21
 8003944:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003946:	f7fd f9f1 	bl	8000d2c <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x68>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003980:	e02f      	b.n	80039e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2180      	movs	r1, #128	@ 0x80
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fc4b 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e03b      	b.n	8003a1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	b292      	uxth	r2, r2
 80039b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	3302      	adds	r3, #2
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e007      	b.n	80039d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1c9      	bne.n	8003982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2140      	movs	r1, #64	@ 0x40
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fc15 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e005      	b.n	8003a1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b08a      	sub	sp, #40	@ 0x28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4ba4      	ldr	r3, [pc, #656]	@ (8003ce4 <UART_SetConfig+0x2c0>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a99      	ldr	r2, [pc, #612]	@ (8003ce8 <UART_SetConfig+0x2c4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a90      	ldr	r2, [pc, #576]	@ (8003cec <UART_SetConfig+0x2c8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d126      	bne.n	8003afc <UART_SetConfig+0xd8>
 8003aae:	4b90      	ldr	r3, [pc, #576]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d81b      	bhi.n	8003af4 <UART_SetConfig+0xd0>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <UART_SetConfig+0xa0>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e116      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003adc:	2302      	movs	r3, #2
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae2:	e112      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aea:	e10e      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003aec:	2308      	movs	r3, #8
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af2:	e10a      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003af4:	2310      	movs	r3, #16
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afa:	e106      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf4 <UART_SetConfig+0x2d0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d138      	bne.n	8003b78 <UART_SetConfig+0x154>
 8003b06:	4b7a      	ldr	r3, [pc, #488]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	d82d      	bhi.n	8003b70 <UART_SetConfig+0x14c>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <UART_SetConfig+0xf8>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003b71 	.word	0x08003b71
 8003b24:	08003b71 	.word	0x08003b71
 8003b28:	08003b71 	.word	0x08003b71
 8003b2c:	08003b61 	.word	0x08003b61
 8003b30:	08003b71 	.word	0x08003b71
 8003b34:	08003b71 	.word	0x08003b71
 8003b38:	08003b71 	.word	0x08003b71
 8003b3c:	08003b59 	.word	0x08003b59
 8003b40:	08003b71 	.word	0x08003b71
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b71 	.word	0x08003b71
 8003b4c:	08003b69 	.word	0x08003b69
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e0d8      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e0d4      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003b60:	2304      	movs	r3, #4
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e0d0      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e0cc      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003b70:	2310      	movs	r3, #16
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b76:	e0c8      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d125      	bne.n	8003bce <UART_SetConfig+0x1aa>
 8003b82:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b8c:	2b30      	cmp	r3, #48	@ 0x30
 8003b8e:	d016      	beq.n	8003bbe <UART_SetConfig+0x19a>
 8003b90:	2b30      	cmp	r3, #48	@ 0x30
 8003b92:	d818      	bhi.n	8003bc6 <UART_SetConfig+0x1a2>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d00a      	beq.n	8003bae <UART_SetConfig+0x18a>
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d814      	bhi.n	8003bc6 <UART_SetConfig+0x1a2>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <UART_SetConfig+0x182>
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d008      	beq.n	8003bb6 <UART_SetConfig+0x192>
 8003ba4:	e00f      	b.n	8003bc6 <UART_SetConfig+0x1a2>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bac:	e0ad      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb4:	e0a9      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbc:	e0a5      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc4:	e0a1      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bcc:	e09d      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003cfc <UART_SetConfig+0x2d8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d125      	bne.n	8003c24 <UART_SetConfig+0x200>
 8003bd8:	4b45      	ldr	r3, [pc, #276]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003be4:	d016      	beq.n	8003c14 <UART_SetConfig+0x1f0>
 8003be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003be8:	d818      	bhi.n	8003c1c <UART_SetConfig+0x1f8>
 8003bea:	2b80      	cmp	r3, #128	@ 0x80
 8003bec:	d00a      	beq.n	8003c04 <UART_SetConfig+0x1e0>
 8003bee:	2b80      	cmp	r3, #128	@ 0x80
 8003bf0:	d814      	bhi.n	8003c1c <UART_SetConfig+0x1f8>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <UART_SetConfig+0x1d8>
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d008      	beq.n	8003c0c <UART_SetConfig+0x1e8>
 8003bfa:	e00f      	b.n	8003c1c <UART_SetConfig+0x1f8>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e082      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e07e      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e07a      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c14:	2308      	movs	r3, #8
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e076      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c22:	e072      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a35      	ldr	r2, [pc, #212]	@ (8003d00 <UART_SetConfig+0x2dc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d12a      	bne.n	8003c84 <UART_SetConfig+0x260>
 8003c2e:	4b30      	ldr	r3, [pc, #192]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c3c:	d01a      	beq.n	8003c74 <UART_SetConfig+0x250>
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c42:	d81b      	bhi.n	8003c7c <UART_SetConfig+0x258>
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c48:	d00c      	beq.n	8003c64 <UART_SetConfig+0x240>
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4e:	d815      	bhi.n	8003c7c <UART_SetConfig+0x258>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <UART_SetConfig+0x238>
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c58:	d008      	beq.n	8003c6c <UART_SetConfig+0x248>
 8003c5a:	e00f      	b.n	8003c7c <UART_SetConfig+0x258>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e052      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c64:	2302      	movs	r3, #2
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e04e      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e04a      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c74:	2308      	movs	r3, #8
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e046      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e042      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a17      	ldr	r2, [pc, #92]	@ (8003ce8 <UART_SetConfig+0x2c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d13a      	bne.n	8003d04 <UART_SetConfig+0x2e0>
 8003c8e:	4b18      	ldr	r3, [pc, #96]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c9c:	d01a      	beq.n	8003cd4 <UART_SetConfig+0x2b0>
 8003c9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ca2:	d81b      	bhi.n	8003cdc <UART_SetConfig+0x2b8>
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca8:	d00c      	beq.n	8003cc4 <UART_SetConfig+0x2a0>
 8003caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cae:	d815      	bhi.n	8003cdc <UART_SetConfig+0x2b8>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <UART_SetConfig+0x298>
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb8:	d008      	beq.n	8003ccc <UART_SetConfig+0x2a8>
 8003cba:	e00f      	b.n	8003cdc <UART_SetConfig+0x2b8>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e022      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e01e      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e01a      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e016      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e012      	b.n	8003d0a <UART_SetConfig+0x2e6>
 8003ce4:	efff69f3 	.word	0xefff69f3
 8003ce8:	40008000 	.word	0x40008000
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40004400 	.word	0x40004400
 8003cf8:	40004800 	.word	0x40004800
 8003cfc:	40004c00 	.word	0x40004c00
 8003d00:	40005000 	.word	0x40005000
 8003d04:	2310      	movs	r3, #16
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a9f      	ldr	r2, [pc, #636]	@ (8003f8c <UART_SetConfig+0x568>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d17a      	bne.n	8003e0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d824      	bhi.n	8003d66 <UART_SetConfig+0x342>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <UART_SetConfig+0x300>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d57 	.word	0x08003d57
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d67 	.word	0x08003d67
 8003d40:	08003d67 	.word	0x08003d67
 8003d44:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7fe f864 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8003d4c:	61f8      	str	r0, [r7, #28]
        break;
 8003d4e:	e010      	b.n	8003d72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b8f      	ldr	r3, [pc, #572]	@ (8003f90 <UART_SetConfig+0x56c>)
 8003d52:	61fb      	str	r3, [r7, #28]
        break;
 8003d54:	e00d      	b.n	8003d72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7fd ffc5 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8003d5a:	61f8      	str	r0, [r7, #28]
        break;
 8003d5c:	e009      	b.n	8003d72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d62:	61fb      	str	r3, [r7, #28]
        break;
 8003d64:	e005      	b.n	8003d72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80fb 	beq.w	8003f70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d305      	bcc.n	8003d96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d903      	bls.n	8003d9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d9c:	e0e8      	b.n	8003f70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2200      	movs	r2, #0
 8003da2:	461c      	mov	r4, r3
 8003da4:	4615      	mov	r5, r2
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	022b      	lsls	r3, r5, #8
 8003db0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003db4:	0222      	lsls	r2, r4, #8
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	6849      	ldr	r1, [r1, #4]
 8003dba:	0849      	lsrs	r1, r1, #1
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	4688      	mov	r8, r1
 8003dc0:	4681      	mov	r9, r0
 8003dc2:	eb12 0a08 	adds.w	sl, r2, r8
 8003dc6:	eb43 0b09 	adc.w	fp, r3, r9
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd8:	4650      	mov	r0, sl
 8003dda:	4659      	mov	r1, fp
 8003ddc:	f7fc fa48 	bl	8000270 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dee:	d308      	bcc.n	8003e02 <UART_SetConfig+0x3de>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d204      	bcs.n	8003e02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	60da      	str	r2, [r3, #12]
 8003e00:	e0b6      	b.n	8003f70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e08:	e0b2      	b.n	8003f70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e12:	d15e      	bne.n	8003ed2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d828      	bhi.n	8003e6e <UART_SetConfig+0x44a>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x400>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e6f 	.word	0x08003e6f
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e6f 	.word	0x08003e6f
 8003e3c:	08003e6f 	.word	0x08003e6f
 8003e40:	08003e6f 	.word	0x08003e6f
 8003e44:	08003e67 	.word	0x08003e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fd ffe4 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e014      	b.n	8003e7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fd fff6 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8003e54:	61f8      	str	r0, [r7, #28]
        break;
 8003e56:	e010      	b.n	8003e7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e58:	4b4d      	ldr	r3, [pc, #308]	@ (8003f90 <UART_SetConfig+0x56c>)
 8003e5a:	61fb      	str	r3, [r7, #28]
        break;
 8003e5c:	e00d      	b.n	8003e7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7fd ff41 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8003e62:	61f8      	str	r0, [r7, #28]
        break;
 8003e64:	e009      	b.n	8003e7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6a:	61fb      	str	r3, [r7, #28]
        break;
 8003e6c:	e005      	b.n	8003e7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d077      	beq.n	8003f70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005a      	lsls	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b0f      	cmp	r3, #15
 8003e9a:	d916      	bls.n	8003eca <UART_SetConfig+0x4a6>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea2:	d212      	bcs.n	8003eca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f023 030f 	bic.w	r3, r3, #15
 8003eac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	8afb      	ldrh	r3, [r7, #22]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	8afa      	ldrh	r2, [r7, #22]
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e052      	b.n	8003f70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ed0:	e04e      	b.n	8003f70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d827      	bhi.n	8003f2a <UART_SetConfig+0x506>
 8003eda:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <UART_SetConfig+0x4bc>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f15 	.word	0x08003f15
 8003eec:	08003f2b 	.word	0x08003f2b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f2b 	.word	0x08003f2b
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f23 	.word	0x08003f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7fd ff86 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8003f08:	61f8      	str	r0, [r7, #28]
        break;
 8003f0a:	e014      	b.n	8003f36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fd ff98 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8003f10:	61f8      	str	r0, [r7, #28]
        break;
 8003f12:	e010      	b.n	8003f36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f14:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <UART_SetConfig+0x56c>)
 8003f16:	61fb      	str	r3, [r7, #28]
        break;
 8003f18:	e00d      	b.n	8003f36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1a:	f7fd fee3 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8003f1e:	61f8      	str	r0, [r7, #28]
        break;
 8003f20:	e009      	b.n	8003f36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f26:	61fb      	str	r3, [r7, #28]
        break;
 8003f28:	e005      	b.n	8003f36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f34:	bf00      	nop
    }

    if (pclk != 0U)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d019      	beq.n	8003f70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	085a      	lsrs	r2, r3, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	d909      	bls.n	8003f6a <UART_SetConfig+0x546>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5c:	d205      	bcs.n	8003f6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	e002      	b.n	8003f70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3728      	adds	r7, #40	@ 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40008000 	.word	0x40008000
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004092:	d10a      	bne.n	80040aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b098      	sub	sp, #96	@ 0x60
 80040dc:	af02      	add	r7, sp, #8
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040e8:	f7fc fe20 	bl	8000d2c <HAL_GetTick>
 80040ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d12e      	bne.n	800415a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f88c 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412a:	653b      	str	r3, [r7, #80]	@ 0x50
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004134:	647b      	str	r3, [r7, #68]	@ 0x44
 8004136:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800413a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e062      	b.n	8004220 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d149      	bne.n	80041fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f856 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d03c      	beq.n	80041fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	623b      	str	r3, [r7, #32]
   return(result);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d4:	61fa      	str	r2, [r7, #28]
 80041d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	617b      	str	r3, [r7, #20]
   return(result);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e011      	b.n	8004220 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3758      	adds	r7, #88	@ 0x58
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004238:	e04f      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d04b      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fc fd73 	bl	8000d2c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <UART_WaitOnFlagUntilTimeout+0x30>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e04e      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d037      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b80      	cmp	r3, #128	@ 0x80
 800426e:	d034      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b40      	cmp	r3, #64	@ 0x40
 8004274:	d031      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d110      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2208      	movs	r2, #8
 800428a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f838 	bl	8004302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2208      	movs	r2, #8
 8004296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e029      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b4:	d111      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f81e 	bl	8004302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e00f      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d0a0      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004302:	b480      	push	{r7}
 8004304:	b095      	sub	sp, #84	@ 0x54
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
 800432a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800432e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	61fb      	str	r3, [r7, #28]
   return(result);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800435c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004374:	2b01      	cmp	r3, #1
 8004376:	d118      	bne.n	80043aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	60bb      	str	r3, [r7, #8]
   return(result);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0310 	bic.w	r3, r3, #16
 800438c:	647b      	str	r3, [r7, #68]	@ 0x44
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	613b      	str	r3, [r7, #16]
   return(result);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e6      	bne.n	8004378 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043be:	bf00      	nop
 80043c0:	3754      	adds	r7, #84	@ 0x54
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <std>:
 80043cc:	2300      	movs	r3, #0
 80043ce:	b510      	push	{r4, lr}
 80043d0:	4604      	mov	r4, r0
 80043d2:	e9c0 3300 	strd	r3, r3, [r0]
 80043d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043da:	6083      	str	r3, [r0, #8]
 80043dc:	8181      	strh	r1, [r0, #12]
 80043de:	6643      	str	r3, [r0, #100]	@ 0x64
 80043e0:	81c2      	strh	r2, [r0, #14]
 80043e2:	6183      	str	r3, [r0, #24]
 80043e4:	4619      	mov	r1, r3
 80043e6:	2208      	movs	r2, #8
 80043e8:	305c      	adds	r0, #92	@ 0x5c
 80043ea:	f000 f906 	bl	80045fa <memset>
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <std+0x58>)
 80043f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <std+0x5c>)
 80043f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043f6:	4b0d      	ldr	r3, [pc, #52]	@ (800442c <std+0x60>)
 80043f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <std+0x64>)
 80043fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <std+0x68>)
 8004400:	6224      	str	r4, [r4, #32]
 8004402:	429c      	cmp	r4, r3
 8004404:	d006      	beq.n	8004414 <std+0x48>
 8004406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800440a:	4294      	cmp	r4, r2
 800440c:	d002      	beq.n	8004414 <std+0x48>
 800440e:	33d0      	adds	r3, #208	@ 0xd0
 8004410:	429c      	cmp	r4, r3
 8004412:	d105      	bne.n	8004420 <std+0x54>
 8004414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800441c:	f000 b966 	b.w	80046ec <__retarget_lock_init_recursive>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	08004575 	.word	0x08004575
 8004428:	08004597 	.word	0x08004597
 800442c:	080045cf 	.word	0x080045cf
 8004430:	080045f3 	.word	0x080045f3
 8004434:	20000160 	.word	0x20000160

08004438 <stdio_exit_handler>:
 8004438:	4a02      	ldr	r2, [pc, #8]	@ (8004444 <stdio_exit_handler+0xc>)
 800443a:	4903      	ldr	r1, [pc, #12]	@ (8004448 <stdio_exit_handler+0x10>)
 800443c:	4803      	ldr	r0, [pc, #12]	@ (800444c <stdio_exit_handler+0x14>)
 800443e:	f000 b869 	b.w	8004514 <_fwalk_sglue>
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c
 8004448:	08004f8d 	.word	0x08004f8d
 800444c:	2000001c 	.word	0x2000001c

08004450 <cleanup_stdio>:
 8004450:	6841      	ldr	r1, [r0, #4]
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <cleanup_stdio+0x34>)
 8004454:	4299      	cmp	r1, r3
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
 800445a:	d001      	beq.n	8004460 <cleanup_stdio+0x10>
 800445c:	f000 fd96 	bl	8004f8c <_fflush_r>
 8004460:	68a1      	ldr	r1, [r4, #8]
 8004462:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <cleanup_stdio+0x38>)
 8004464:	4299      	cmp	r1, r3
 8004466:	d002      	beq.n	800446e <cleanup_stdio+0x1e>
 8004468:	4620      	mov	r0, r4
 800446a:	f000 fd8f 	bl	8004f8c <_fflush_r>
 800446e:	68e1      	ldr	r1, [r4, #12]
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <cleanup_stdio+0x3c>)
 8004472:	4299      	cmp	r1, r3
 8004474:	d004      	beq.n	8004480 <cleanup_stdio+0x30>
 8004476:	4620      	mov	r0, r4
 8004478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447c:	f000 bd86 	b.w	8004f8c <_fflush_r>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	bf00      	nop
 8004484:	20000160 	.word	0x20000160
 8004488:	200001c8 	.word	0x200001c8
 800448c:	20000230 	.word	0x20000230

08004490 <global_stdio_init.part.0>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <global_stdio_init.part.0+0x30>)
 8004494:	4c0b      	ldr	r4, [pc, #44]	@ (80044c4 <global_stdio_init.part.0+0x34>)
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <global_stdio_init.part.0+0x38>)
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	4620      	mov	r0, r4
 800449c:	2200      	movs	r2, #0
 800449e:	2104      	movs	r1, #4
 80044a0:	f7ff ff94 	bl	80043cc <std>
 80044a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044a8:	2201      	movs	r2, #1
 80044aa:	2109      	movs	r1, #9
 80044ac:	f7ff ff8e 	bl	80043cc <std>
 80044b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044b4:	2202      	movs	r2, #2
 80044b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ba:	2112      	movs	r1, #18
 80044bc:	f7ff bf86 	b.w	80043cc <std>
 80044c0:	20000298 	.word	0x20000298
 80044c4:	20000160 	.word	0x20000160
 80044c8:	08004439 	.word	0x08004439

080044cc <__sfp_lock_acquire>:
 80044cc:	4801      	ldr	r0, [pc, #4]	@ (80044d4 <__sfp_lock_acquire+0x8>)
 80044ce:	f000 b90e 	b.w	80046ee <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	200002a1 	.word	0x200002a1

080044d8 <__sfp_lock_release>:
 80044d8:	4801      	ldr	r0, [pc, #4]	@ (80044e0 <__sfp_lock_release+0x8>)
 80044da:	f000 b909 	b.w	80046f0 <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	200002a1 	.word	0x200002a1

080044e4 <__sinit>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
 80044e8:	f7ff fff0 	bl	80044cc <__sfp_lock_acquire>
 80044ec:	6a23      	ldr	r3, [r4, #32]
 80044ee:	b11b      	cbz	r3, 80044f8 <__sinit+0x14>
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f4:	f7ff bff0 	b.w	80044d8 <__sfp_lock_release>
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <__sinit+0x28>)
 80044fa:	6223      	str	r3, [r4, #32]
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <__sinit+0x2c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f5      	bne.n	80044f0 <__sinit+0xc>
 8004504:	f7ff ffc4 	bl	8004490 <global_stdio_init.part.0>
 8004508:	e7f2      	b.n	80044f0 <__sinit+0xc>
 800450a:	bf00      	nop
 800450c:	08004451 	.word	0x08004451
 8004510:	20000298 	.word	0x20000298

08004514 <_fwalk_sglue>:
 8004514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004518:	4607      	mov	r7, r0
 800451a:	4688      	mov	r8, r1
 800451c:	4614      	mov	r4, r2
 800451e:	2600      	movs	r6, #0
 8004520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004524:	f1b9 0901 	subs.w	r9, r9, #1
 8004528:	d505      	bpl.n	8004536 <_fwalk_sglue+0x22>
 800452a:	6824      	ldr	r4, [r4, #0]
 800452c:	2c00      	cmp	r4, #0
 800452e:	d1f7      	bne.n	8004520 <_fwalk_sglue+0xc>
 8004530:	4630      	mov	r0, r6
 8004532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004536:	89ab      	ldrh	r3, [r5, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d907      	bls.n	800454c <_fwalk_sglue+0x38>
 800453c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004540:	3301      	adds	r3, #1
 8004542:	d003      	beq.n	800454c <_fwalk_sglue+0x38>
 8004544:	4629      	mov	r1, r5
 8004546:	4638      	mov	r0, r7
 8004548:	47c0      	blx	r8
 800454a:	4306      	orrs	r6, r0
 800454c:	3568      	adds	r5, #104	@ 0x68
 800454e:	e7e9      	b.n	8004524 <_fwalk_sglue+0x10>

08004550 <iprintf>:
 8004550:	b40f      	push	{r0, r1, r2, r3}
 8004552:	b507      	push	{r0, r1, r2, lr}
 8004554:	4906      	ldr	r1, [pc, #24]	@ (8004570 <iprintf+0x20>)
 8004556:	ab04      	add	r3, sp, #16
 8004558:	6808      	ldr	r0, [r1, #0]
 800455a:	f853 2b04 	ldr.w	r2, [r3], #4
 800455e:	6881      	ldr	r1, [r0, #8]
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	f000 f9e9 	bl	8004938 <_vfiprintf_r>
 8004566:	b003      	add	sp, #12
 8004568:	f85d eb04 	ldr.w	lr, [sp], #4
 800456c:	b004      	add	sp, #16
 800456e:	4770      	bx	lr
 8004570:	20000018 	.word	0x20000018

08004574 <__sread>:
 8004574:	b510      	push	{r4, lr}
 8004576:	460c      	mov	r4, r1
 8004578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457c:	f000 f868 	bl	8004650 <_read_r>
 8004580:	2800      	cmp	r0, #0
 8004582:	bfab      	itete	ge
 8004584:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004586:	89a3      	ldrhlt	r3, [r4, #12]
 8004588:	181b      	addge	r3, r3, r0
 800458a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800458e:	bfac      	ite	ge
 8004590:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004592:	81a3      	strhlt	r3, [r4, #12]
 8004594:	bd10      	pop	{r4, pc}

08004596 <__swrite>:
 8004596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459a:	461f      	mov	r7, r3
 800459c:	898b      	ldrh	r3, [r1, #12]
 800459e:	05db      	lsls	r3, r3, #23
 80045a0:	4605      	mov	r5, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	4616      	mov	r6, r2
 80045a6:	d505      	bpl.n	80045b4 <__swrite+0x1e>
 80045a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ac:	2302      	movs	r3, #2
 80045ae:	2200      	movs	r2, #0
 80045b0:	f000 f83c 	bl	800462c <_lseek_r>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	4632      	mov	r2, r6
 80045c2:	463b      	mov	r3, r7
 80045c4:	4628      	mov	r0, r5
 80045c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ca:	f000 b853 	b.w	8004674 <_write_r>

080045ce <__sseek>:
 80045ce:	b510      	push	{r4, lr}
 80045d0:	460c      	mov	r4, r1
 80045d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d6:	f000 f829 	bl	800462c <_lseek_r>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	bf15      	itete	ne
 80045e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045ea:	81a3      	strheq	r3, [r4, #12]
 80045ec:	bf18      	it	ne
 80045ee:	81a3      	strhne	r3, [r4, #12]
 80045f0:	bd10      	pop	{r4, pc}

080045f2 <__sclose>:
 80045f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f6:	f000 b809 	b.w	800460c <_close_r>

080045fa <memset>:
 80045fa:	4402      	add	r2, r0
 80045fc:	4603      	mov	r3, r0
 80045fe:	4293      	cmp	r3, r2
 8004600:	d100      	bne.n	8004604 <memset+0xa>
 8004602:	4770      	bx	lr
 8004604:	f803 1b01 	strb.w	r1, [r3], #1
 8004608:	e7f9      	b.n	80045fe <memset+0x4>
	...

0800460c <_close_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d06      	ldr	r5, [pc, #24]	@ (8004628 <_close_r+0x1c>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc fa7a 	bl	8000b10 <_close>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_close_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_close_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	2000029c 	.word	0x2000029c

0800462c <_lseek_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d07      	ldr	r5, [pc, #28]	@ (800464c <_lseek_r+0x20>)
 8004630:	4604      	mov	r4, r0
 8004632:	4608      	mov	r0, r1
 8004634:	4611      	mov	r1, r2
 8004636:	2200      	movs	r2, #0
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fc fa8f 	bl	8000b5e <_lseek>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_lseek_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_lseek_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	2000029c 	.word	0x2000029c

08004650 <_read_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4d07      	ldr	r5, [pc, #28]	@ (8004670 <_read_r+0x20>)
 8004654:	4604      	mov	r4, r0
 8004656:	4608      	mov	r0, r1
 8004658:	4611      	mov	r1, r2
 800465a:	2200      	movs	r2, #0
 800465c:	602a      	str	r2, [r5, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	f7fc fa1d 	bl	8000a9e <_read>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_read_r+0x1e>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_read_r+0x1e>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	2000029c 	.word	0x2000029c

08004674 <_write_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	@ (8004694 <_write_r+0x20>)
 8004678:	4604      	mov	r4, r0
 800467a:	4608      	mov	r0, r1
 800467c:	4611      	mov	r1, r2
 800467e:	2200      	movs	r2, #0
 8004680:	602a      	str	r2, [r5, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	f7fc fa28 	bl	8000ad8 <_write>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_write_r+0x1e>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_write_r+0x1e>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	2000029c 	.word	0x2000029c

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	@ (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000018 	.word	0x20000018

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4d0d      	ldr	r5, [pc, #52]	@ (80046dc <__libc_init_array+0x38>)
 80046a8:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2600      	movs	r6, #0
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	4d0b      	ldr	r5, [pc, #44]	@ (80046e4 <__libc_init_array+0x40>)
 80046b6:	4c0c      	ldr	r4, [pc, #48]	@ (80046e8 <__libc_init_array+0x44>)
 80046b8:	f000 fdb8 	bl	800522c <_init>
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	2600      	movs	r6, #0
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	080052d4 	.word	0x080052d4
 80046e0:	080052d4 	.word	0x080052d4
 80046e4:	080052d4 	.word	0x080052d4
 80046e8:	080052d8 	.word	0x080052d8

080046ec <__retarget_lock_init_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_acquire_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <__retarget_lock_release_recursive>:
 80046f0:	4770      	bx	lr
	...

080046f4 <_free_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4605      	mov	r5, r0
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d041      	beq.n	8004780 <_free_r+0x8c>
 80046fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004700:	1f0c      	subs	r4, r1, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfb8      	it	lt
 8004706:	18e4      	addlt	r4, r4, r3
 8004708:	f000 f8e0 	bl	80048cc <__malloc_lock>
 800470c:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <_free_r+0x90>)
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	b933      	cbnz	r3, 8004720 <_free_r+0x2c>
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	6014      	str	r4, [r2, #0]
 8004716:	4628      	mov	r0, r5
 8004718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471c:	f000 b8dc 	b.w	80048d8 <__malloc_unlock>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d908      	bls.n	8004736 <_free_r+0x42>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	1821      	adds	r1, r4, r0
 8004728:	428b      	cmp	r3, r1
 800472a:	bf01      	itttt	eq
 800472c:	6819      	ldreq	r1, [r3, #0]
 800472e:	685b      	ldreq	r3, [r3, #4]
 8004730:	1809      	addeq	r1, r1, r0
 8004732:	6021      	streq	r1, [r4, #0]
 8004734:	e7ed      	b.n	8004712 <_free_r+0x1e>
 8004736:	461a      	mov	r2, r3
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b10b      	cbz	r3, 8004740 <_free_r+0x4c>
 800473c:	42a3      	cmp	r3, r4
 800473e:	d9fa      	bls.n	8004736 <_free_r+0x42>
 8004740:	6811      	ldr	r1, [r2, #0]
 8004742:	1850      	adds	r0, r2, r1
 8004744:	42a0      	cmp	r0, r4
 8004746:	d10b      	bne.n	8004760 <_free_r+0x6c>
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	4401      	add	r1, r0
 800474c:	1850      	adds	r0, r2, r1
 800474e:	4283      	cmp	r3, r0
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	d1e0      	bne.n	8004716 <_free_r+0x22>
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	6053      	str	r3, [r2, #4]
 800475a:	4408      	add	r0, r1
 800475c:	6010      	str	r0, [r2, #0]
 800475e:	e7da      	b.n	8004716 <_free_r+0x22>
 8004760:	d902      	bls.n	8004768 <_free_r+0x74>
 8004762:	230c      	movs	r3, #12
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	e7d6      	b.n	8004716 <_free_r+0x22>
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	1821      	adds	r1, r4, r0
 800476c:	428b      	cmp	r3, r1
 800476e:	bf04      	itt	eq
 8004770:	6819      	ldreq	r1, [r3, #0]
 8004772:	685b      	ldreq	r3, [r3, #4]
 8004774:	6063      	str	r3, [r4, #4]
 8004776:	bf04      	itt	eq
 8004778:	1809      	addeq	r1, r1, r0
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	6054      	str	r4, [r2, #4]
 800477e:	e7ca      	b.n	8004716 <_free_r+0x22>
 8004780:	bd38      	pop	{r3, r4, r5, pc}
 8004782:	bf00      	nop
 8004784:	200002a8 	.word	0x200002a8

08004788 <sbrk_aligned>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4e0f      	ldr	r6, [pc, #60]	@ (80047c8 <sbrk_aligned+0x40>)
 800478c:	460c      	mov	r4, r1
 800478e:	6831      	ldr	r1, [r6, #0]
 8004790:	4605      	mov	r5, r0
 8004792:	b911      	cbnz	r1, 800479a <sbrk_aligned+0x12>
 8004794:	f000 fcb6 	bl	8005104 <_sbrk_r>
 8004798:	6030      	str	r0, [r6, #0]
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 fcb1 	bl	8005104 <_sbrk_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	d103      	bne.n	80047ae <sbrk_aligned+0x26>
 80047a6:	f04f 34ff 	mov.w	r4, #4294967295
 80047aa:	4620      	mov	r0, r4
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
 80047ae:	1cc4      	adds	r4, r0, #3
 80047b0:	f024 0403 	bic.w	r4, r4, #3
 80047b4:	42a0      	cmp	r0, r4
 80047b6:	d0f8      	beq.n	80047aa <sbrk_aligned+0x22>
 80047b8:	1a21      	subs	r1, r4, r0
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 fca2 	bl	8005104 <_sbrk_r>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d1f2      	bne.n	80047aa <sbrk_aligned+0x22>
 80047c4:	e7ef      	b.n	80047a6 <sbrk_aligned+0x1e>
 80047c6:	bf00      	nop
 80047c8:	200002a4 	.word	0x200002a4

080047cc <_malloc_r>:
 80047cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d0:	1ccd      	adds	r5, r1, #3
 80047d2:	f025 0503 	bic.w	r5, r5, #3
 80047d6:	3508      	adds	r5, #8
 80047d8:	2d0c      	cmp	r5, #12
 80047da:	bf38      	it	cc
 80047dc:	250c      	movcc	r5, #12
 80047de:	2d00      	cmp	r5, #0
 80047e0:	4606      	mov	r6, r0
 80047e2:	db01      	blt.n	80047e8 <_malloc_r+0x1c>
 80047e4:	42a9      	cmp	r1, r5
 80047e6:	d904      	bls.n	80047f2 <_malloc_r+0x26>
 80047e8:	230c      	movs	r3, #12
 80047ea:	6033      	str	r3, [r6, #0]
 80047ec:	2000      	movs	r0, #0
 80047ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048c8 <_malloc_r+0xfc>
 80047f6:	f000 f869 	bl	80048cc <__malloc_lock>
 80047fa:	f8d8 3000 	ldr.w	r3, [r8]
 80047fe:	461c      	mov	r4, r3
 8004800:	bb44      	cbnz	r4, 8004854 <_malloc_r+0x88>
 8004802:	4629      	mov	r1, r5
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff ffbf 	bl	8004788 <sbrk_aligned>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	4604      	mov	r4, r0
 800480e:	d158      	bne.n	80048c2 <_malloc_r+0xf6>
 8004810:	f8d8 4000 	ldr.w	r4, [r8]
 8004814:	4627      	mov	r7, r4
 8004816:	2f00      	cmp	r7, #0
 8004818:	d143      	bne.n	80048a2 <_malloc_r+0xd6>
 800481a:	2c00      	cmp	r4, #0
 800481c:	d04b      	beq.n	80048b6 <_malloc_r+0xea>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	4639      	mov	r1, r7
 8004822:	4630      	mov	r0, r6
 8004824:	eb04 0903 	add.w	r9, r4, r3
 8004828:	f000 fc6c 	bl	8005104 <_sbrk_r>
 800482c:	4581      	cmp	r9, r0
 800482e:	d142      	bne.n	80048b6 <_malloc_r+0xea>
 8004830:	6821      	ldr	r1, [r4, #0]
 8004832:	1a6d      	subs	r5, r5, r1
 8004834:	4629      	mov	r1, r5
 8004836:	4630      	mov	r0, r6
 8004838:	f7ff ffa6 	bl	8004788 <sbrk_aligned>
 800483c:	3001      	adds	r0, #1
 800483e:	d03a      	beq.n	80048b6 <_malloc_r+0xea>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	442b      	add	r3, r5
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	f8d8 3000 	ldr.w	r3, [r8]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	bb62      	cbnz	r2, 80048a8 <_malloc_r+0xdc>
 800484e:	f8c8 7000 	str.w	r7, [r8]
 8004852:	e00f      	b.n	8004874 <_malloc_r+0xa8>
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	1b52      	subs	r2, r2, r5
 8004858:	d420      	bmi.n	800489c <_malloc_r+0xd0>
 800485a:	2a0b      	cmp	r2, #11
 800485c:	d917      	bls.n	800488e <_malloc_r+0xc2>
 800485e:	1961      	adds	r1, r4, r5
 8004860:	42a3      	cmp	r3, r4
 8004862:	6025      	str	r5, [r4, #0]
 8004864:	bf18      	it	ne
 8004866:	6059      	strne	r1, [r3, #4]
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	bf08      	it	eq
 800486c:	f8c8 1000 	streq.w	r1, [r8]
 8004870:	5162      	str	r2, [r4, r5]
 8004872:	604b      	str	r3, [r1, #4]
 8004874:	4630      	mov	r0, r6
 8004876:	f000 f82f 	bl	80048d8 <__malloc_unlock>
 800487a:	f104 000b 	add.w	r0, r4, #11
 800487e:	1d23      	adds	r3, r4, #4
 8004880:	f020 0007 	bic.w	r0, r0, #7
 8004884:	1ac2      	subs	r2, r0, r3
 8004886:	bf1c      	itt	ne
 8004888:	1a1b      	subne	r3, r3, r0
 800488a:	50a3      	strne	r3, [r4, r2]
 800488c:	e7af      	b.n	80047ee <_malloc_r+0x22>
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	42a3      	cmp	r3, r4
 8004892:	bf0c      	ite	eq
 8004894:	f8c8 2000 	streq.w	r2, [r8]
 8004898:	605a      	strne	r2, [r3, #4]
 800489a:	e7eb      	b.n	8004874 <_malloc_r+0xa8>
 800489c:	4623      	mov	r3, r4
 800489e:	6864      	ldr	r4, [r4, #4]
 80048a0:	e7ae      	b.n	8004800 <_malloc_r+0x34>
 80048a2:	463c      	mov	r4, r7
 80048a4:	687f      	ldr	r7, [r7, #4]
 80048a6:	e7b6      	b.n	8004816 <_malloc_r+0x4a>
 80048a8:	461a      	mov	r2, r3
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	d1fb      	bne.n	80048a8 <_malloc_r+0xdc>
 80048b0:	2300      	movs	r3, #0
 80048b2:	6053      	str	r3, [r2, #4]
 80048b4:	e7de      	b.n	8004874 <_malloc_r+0xa8>
 80048b6:	230c      	movs	r3, #12
 80048b8:	6033      	str	r3, [r6, #0]
 80048ba:	4630      	mov	r0, r6
 80048bc:	f000 f80c 	bl	80048d8 <__malloc_unlock>
 80048c0:	e794      	b.n	80047ec <_malloc_r+0x20>
 80048c2:	6005      	str	r5, [r0, #0]
 80048c4:	e7d6      	b.n	8004874 <_malloc_r+0xa8>
 80048c6:	bf00      	nop
 80048c8:	200002a8 	.word	0x200002a8

080048cc <__malloc_lock>:
 80048cc:	4801      	ldr	r0, [pc, #4]	@ (80048d4 <__malloc_lock+0x8>)
 80048ce:	f7ff bf0e 	b.w	80046ee <__retarget_lock_acquire_recursive>
 80048d2:	bf00      	nop
 80048d4:	200002a0 	.word	0x200002a0

080048d8 <__malloc_unlock>:
 80048d8:	4801      	ldr	r0, [pc, #4]	@ (80048e0 <__malloc_unlock+0x8>)
 80048da:	f7ff bf09 	b.w	80046f0 <__retarget_lock_release_recursive>
 80048de:	bf00      	nop
 80048e0:	200002a0 	.word	0x200002a0

080048e4 <__sfputc_r>:
 80048e4:	6893      	ldr	r3, [r2, #8]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	b410      	push	{r4}
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	da08      	bge.n	8004902 <__sfputc_r+0x1e>
 80048f0:	6994      	ldr	r4, [r2, #24]
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	db01      	blt.n	80048fa <__sfputc_r+0x16>
 80048f6:	290a      	cmp	r1, #10
 80048f8:	d103      	bne.n	8004902 <__sfputc_r+0x1e>
 80048fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048fe:	f000 bb6d 	b.w	8004fdc <__swbuf_r>
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	1c58      	adds	r0, r3, #1
 8004906:	6010      	str	r0, [r2, #0]
 8004908:	7019      	strb	r1, [r3, #0]
 800490a:	4608      	mov	r0, r1
 800490c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004910:	4770      	bx	lr

08004912 <__sfputs_r>:
 8004912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004914:	4606      	mov	r6, r0
 8004916:	460f      	mov	r7, r1
 8004918:	4614      	mov	r4, r2
 800491a:	18d5      	adds	r5, r2, r3
 800491c:	42ac      	cmp	r4, r5
 800491e:	d101      	bne.n	8004924 <__sfputs_r+0x12>
 8004920:	2000      	movs	r0, #0
 8004922:	e007      	b.n	8004934 <__sfputs_r+0x22>
 8004924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004928:	463a      	mov	r2, r7
 800492a:	4630      	mov	r0, r6
 800492c:	f7ff ffda 	bl	80048e4 <__sfputc_r>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d1f3      	bne.n	800491c <__sfputs_r+0xa>
 8004934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004938 <_vfiprintf_r>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	460d      	mov	r5, r1
 800493e:	b09d      	sub	sp, #116	@ 0x74
 8004940:	4614      	mov	r4, r2
 8004942:	4698      	mov	r8, r3
 8004944:	4606      	mov	r6, r0
 8004946:	b118      	cbz	r0, 8004950 <_vfiprintf_r+0x18>
 8004948:	6a03      	ldr	r3, [r0, #32]
 800494a:	b90b      	cbnz	r3, 8004950 <_vfiprintf_r+0x18>
 800494c:	f7ff fdca 	bl	80044e4 <__sinit>
 8004950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004952:	07d9      	lsls	r1, r3, #31
 8004954:	d405      	bmi.n	8004962 <_vfiprintf_r+0x2a>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	059a      	lsls	r2, r3, #22
 800495a:	d402      	bmi.n	8004962 <_vfiprintf_r+0x2a>
 800495c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800495e:	f7ff fec6 	bl	80046ee <__retarget_lock_acquire_recursive>
 8004962:	89ab      	ldrh	r3, [r5, #12]
 8004964:	071b      	lsls	r3, r3, #28
 8004966:	d501      	bpl.n	800496c <_vfiprintf_r+0x34>
 8004968:	692b      	ldr	r3, [r5, #16]
 800496a:	b99b      	cbnz	r3, 8004994 <_vfiprintf_r+0x5c>
 800496c:	4629      	mov	r1, r5
 800496e:	4630      	mov	r0, r6
 8004970:	f000 fb72 	bl	8005058 <__swsetup_r>
 8004974:	b170      	cbz	r0, 8004994 <_vfiprintf_r+0x5c>
 8004976:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004978:	07dc      	lsls	r4, r3, #31
 800497a:	d504      	bpl.n	8004986 <_vfiprintf_r+0x4e>
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	b01d      	add	sp, #116	@ 0x74
 8004982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	0598      	lsls	r0, r3, #22
 800498a:	d4f7      	bmi.n	800497c <_vfiprintf_r+0x44>
 800498c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800498e:	f7ff feaf 	bl	80046f0 <__retarget_lock_release_recursive>
 8004992:	e7f3      	b.n	800497c <_vfiprintf_r+0x44>
 8004994:	2300      	movs	r3, #0
 8004996:	9309      	str	r3, [sp, #36]	@ 0x24
 8004998:	2320      	movs	r3, #32
 800499a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800499e:	f8cd 800c 	str.w	r8, [sp, #12]
 80049a2:	2330      	movs	r3, #48	@ 0x30
 80049a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b54 <_vfiprintf_r+0x21c>
 80049a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ac:	f04f 0901 	mov.w	r9, #1
 80049b0:	4623      	mov	r3, r4
 80049b2:	469a      	mov	sl, r3
 80049b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b8:	b10a      	cbz	r2, 80049be <_vfiprintf_r+0x86>
 80049ba:	2a25      	cmp	r2, #37	@ 0x25
 80049bc:	d1f9      	bne.n	80049b2 <_vfiprintf_r+0x7a>
 80049be:	ebba 0b04 	subs.w	fp, sl, r4
 80049c2:	d00b      	beq.n	80049dc <_vfiprintf_r+0xa4>
 80049c4:	465b      	mov	r3, fp
 80049c6:	4622      	mov	r2, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	4630      	mov	r0, r6
 80049cc:	f7ff ffa1 	bl	8004912 <__sfputs_r>
 80049d0:	3001      	adds	r0, #1
 80049d2:	f000 80a7 	beq.w	8004b24 <_vfiprintf_r+0x1ec>
 80049d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049d8:	445a      	add	r2, fp
 80049da:	9209      	str	r2, [sp, #36]	@ 0x24
 80049dc:	f89a 3000 	ldrb.w	r3, [sl]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 809f 	beq.w	8004b24 <_vfiprintf_r+0x1ec>
 80049e6:	2300      	movs	r3, #0
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049f0:	f10a 0a01 	add.w	sl, sl, #1
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	9307      	str	r3, [sp, #28]
 80049f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80049fe:	4654      	mov	r4, sl
 8004a00:	2205      	movs	r2, #5
 8004a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a06:	4853      	ldr	r0, [pc, #332]	@ (8004b54 <_vfiprintf_r+0x21c>)
 8004a08:	f7fb fbe2 	bl	80001d0 <memchr>
 8004a0c:	9a04      	ldr	r2, [sp, #16]
 8004a0e:	b9d8      	cbnz	r0, 8004a48 <_vfiprintf_r+0x110>
 8004a10:	06d1      	lsls	r1, r2, #27
 8004a12:	bf44      	itt	mi
 8004a14:	2320      	movmi	r3, #32
 8004a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a1a:	0713      	lsls	r3, r2, #28
 8004a1c:	bf44      	itt	mi
 8004a1e:	232b      	movmi	r3, #43	@ 0x2b
 8004a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a24:	f89a 3000 	ldrb.w	r3, [sl]
 8004a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a2a:	d015      	beq.n	8004a58 <_vfiprintf_r+0x120>
 8004a2c:	9a07      	ldr	r2, [sp, #28]
 8004a2e:	4654      	mov	r4, sl
 8004a30:	2000      	movs	r0, #0
 8004a32:	f04f 0c0a 	mov.w	ip, #10
 8004a36:	4621      	mov	r1, r4
 8004a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a3c:	3b30      	subs	r3, #48	@ 0x30
 8004a3e:	2b09      	cmp	r3, #9
 8004a40:	d94b      	bls.n	8004ada <_vfiprintf_r+0x1a2>
 8004a42:	b1b0      	cbz	r0, 8004a72 <_vfiprintf_r+0x13a>
 8004a44:	9207      	str	r2, [sp, #28]
 8004a46:	e014      	b.n	8004a72 <_vfiprintf_r+0x13a>
 8004a48:	eba0 0308 	sub.w	r3, r0, r8
 8004a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a50:	4313      	orrs	r3, r2
 8004a52:	9304      	str	r3, [sp, #16]
 8004a54:	46a2      	mov	sl, r4
 8004a56:	e7d2      	b.n	80049fe <_vfiprintf_r+0xc6>
 8004a58:	9b03      	ldr	r3, [sp, #12]
 8004a5a:	1d19      	adds	r1, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	9103      	str	r1, [sp, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bfbb      	ittet	lt
 8004a64:	425b      	neglt	r3, r3
 8004a66:	f042 0202 	orrlt.w	r2, r2, #2
 8004a6a:	9307      	strge	r3, [sp, #28]
 8004a6c:	9307      	strlt	r3, [sp, #28]
 8004a6e:	bfb8      	it	lt
 8004a70:	9204      	strlt	r2, [sp, #16]
 8004a72:	7823      	ldrb	r3, [r4, #0]
 8004a74:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a76:	d10a      	bne.n	8004a8e <_vfiprintf_r+0x156>
 8004a78:	7863      	ldrb	r3, [r4, #1]
 8004a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7c:	d132      	bne.n	8004ae4 <_vfiprintf_r+0x1ac>
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	1d1a      	adds	r2, r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	9203      	str	r2, [sp, #12]
 8004a86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a8a:	3402      	adds	r4, #2
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b64 <_vfiprintf_r+0x22c>
 8004a92:	7821      	ldrb	r1, [r4, #0]
 8004a94:	2203      	movs	r2, #3
 8004a96:	4650      	mov	r0, sl
 8004a98:	f7fb fb9a 	bl	80001d0 <memchr>
 8004a9c:	b138      	cbz	r0, 8004aae <_vfiprintf_r+0x176>
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	eba0 000a 	sub.w	r0, r0, sl
 8004aa4:	2240      	movs	r2, #64	@ 0x40
 8004aa6:	4082      	lsls	r2, r0
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	3401      	adds	r4, #1
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab2:	4829      	ldr	r0, [pc, #164]	@ (8004b58 <_vfiprintf_r+0x220>)
 8004ab4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ab8:	2206      	movs	r2, #6
 8004aba:	f7fb fb89 	bl	80001d0 <memchr>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d03f      	beq.n	8004b42 <_vfiprintf_r+0x20a>
 8004ac2:	4b26      	ldr	r3, [pc, #152]	@ (8004b5c <_vfiprintf_r+0x224>)
 8004ac4:	bb1b      	cbnz	r3, 8004b0e <_vfiprintf_r+0x1d6>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	3307      	adds	r3, #7
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	3308      	adds	r3, #8
 8004ad0:	9303      	str	r3, [sp, #12]
 8004ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ad4:	443b      	add	r3, r7
 8004ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ad8:	e76a      	b.n	80049b0 <_vfiprintf_r+0x78>
 8004ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ade:	460c      	mov	r4, r1
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e7a8      	b.n	8004a36 <_vfiprintf_r+0xfe>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	9305      	str	r3, [sp, #20]
 8004aea:	4619      	mov	r1, r3
 8004aec:	f04f 0c0a 	mov.w	ip, #10
 8004af0:	4620      	mov	r0, r4
 8004af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af6:	3a30      	subs	r2, #48	@ 0x30
 8004af8:	2a09      	cmp	r2, #9
 8004afa:	d903      	bls.n	8004b04 <_vfiprintf_r+0x1cc>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0c6      	beq.n	8004a8e <_vfiprintf_r+0x156>
 8004b00:	9105      	str	r1, [sp, #20]
 8004b02:	e7c4      	b.n	8004a8e <_vfiprintf_r+0x156>
 8004b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b08:	4604      	mov	r4, r0
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e7f0      	b.n	8004af0 <_vfiprintf_r+0x1b8>
 8004b0e:	ab03      	add	r3, sp, #12
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	462a      	mov	r2, r5
 8004b14:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <_vfiprintf_r+0x228>)
 8004b16:	a904      	add	r1, sp, #16
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f3af 8000 	nop.w
 8004b1e:	4607      	mov	r7, r0
 8004b20:	1c78      	adds	r0, r7, #1
 8004b22:	d1d6      	bne.n	8004ad2 <_vfiprintf_r+0x19a>
 8004b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_vfiprintf_r+0x1fe>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_vfiprintf_r+0x1fe>
 8004b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b32:	f7ff fddd 	bl	80046f0 <__retarget_lock_release_recursive>
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	065b      	lsls	r3, r3, #25
 8004b3a:	f53f af1f 	bmi.w	800497c <_vfiprintf_r+0x44>
 8004b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b40:	e71e      	b.n	8004980 <_vfiprintf_r+0x48>
 8004b42:	ab03      	add	r3, sp, #12
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	462a      	mov	r2, r5
 8004b48:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <_vfiprintf_r+0x228>)
 8004b4a:	a904      	add	r1, sp, #16
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f879 	bl	8004c44 <_printf_i>
 8004b52:	e7e4      	b.n	8004b1e <_vfiprintf_r+0x1e6>
 8004b54:	08005298 	.word	0x08005298
 8004b58:	080052a2 	.word	0x080052a2
 8004b5c:	00000000 	.word	0x00000000
 8004b60:	08004913 	.word	0x08004913
 8004b64:	0800529e 	.word	0x0800529e

08004b68 <_printf_common>:
 8004b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	4698      	mov	r8, r3
 8004b70:	688a      	ldr	r2, [r1, #8]
 8004b72:	690b      	ldr	r3, [r1, #16]
 8004b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	bfb8      	it	lt
 8004b7c:	4613      	movlt	r3, r2
 8004b7e:	6033      	str	r3, [r6, #0]
 8004b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b84:	4607      	mov	r7, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	b10a      	cbz	r2, 8004b8e <_printf_common+0x26>
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	0699      	lsls	r1, r3, #26
 8004b92:	bf42      	ittt	mi
 8004b94:	6833      	ldrmi	r3, [r6, #0]
 8004b96:	3302      	addmi	r3, #2
 8004b98:	6033      	strmi	r3, [r6, #0]
 8004b9a:	6825      	ldr	r5, [r4, #0]
 8004b9c:	f015 0506 	ands.w	r5, r5, #6
 8004ba0:	d106      	bne.n	8004bb0 <_printf_common+0x48>
 8004ba2:	f104 0a19 	add.w	sl, r4, #25
 8004ba6:	68e3      	ldr	r3, [r4, #12]
 8004ba8:	6832      	ldr	r2, [r6, #0]
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	42ab      	cmp	r3, r5
 8004bae:	dc26      	bgt.n	8004bfe <_printf_common+0x96>
 8004bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	3b00      	subs	r3, #0
 8004bb8:	bf18      	it	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	0692      	lsls	r2, r2, #26
 8004bbe:	d42b      	bmi.n	8004c18 <_printf_common+0xb0>
 8004bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	47c8      	blx	r9
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d01e      	beq.n	8004c0c <_printf_common+0xa4>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	f003 0306 	and.w	r3, r3, #6
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	bf02      	ittt	eq
 8004bda:	68e5      	ldreq	r5, [r4, #12]
 8004bdc:	6833      	ldreq	r3, [r6, #0]
 8004bde:	1aed      	subeq	r5, r5, r3
 8004be0:	68a3      	ldr	r3, [r4, #8]
 8004be2:	bf0c      	ite	eq
 8004be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be8:	2500      	movne	r5, #0
 8004bea:	4293      	cmp	r3, r2
 8004bec:	bfc4      	itt	gt
 8004bee:	1a9b      	subgt	r3, r3, r2
 8004bf0:	18ed      	addgt	r5, r5, r3
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	341a      	adds	r4, #26
 8004bf6:	42b5      	cmp	r5, r6
 8004bf8:	d11a      	bne.n	8004c30 <_printf_common+0xc8>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e008      	b.n	8004c10 <_printf_common+0xa8>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4652      	mov	r2, sl
 8004c02:	4641      	mov	r1, r8
 8004c04:	4638      	mov	r0, r7
 8004c06:	47c8      	blx	r9
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d103      	bne.n	8004c14 <_printf_common+0xac>
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c14:	3501      	adds	r5, #1
 8004c16:	e7c6      	b.n	8004ba6 <_printf_common+0x3e>
 8004c18:	18e1      	adds	r1, r4, r3
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	2030      	movs	r0, #48	@ 0x30
 8004c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c22:	4422      	add	r2, r4
 8004c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	e7c7      	b.n	8004bc0 <_printf_common+0x58>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4622      	mov	r2, r4
 8004c34:	4641      	mov	r1, r8
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c8      	blx	r9
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d0e6      	beq.n	8004c0c <_printf_common+0xa4>
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7d9      	b.n	8004bf6 <_printf_common+0x8e>
	...

08004c44 <_printf_i>:
 8004c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	7e0f      	ldrb	r7, [r1, #24]
 8004c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c4c:	2f78      	cmp	r7, #120	@ 0x78
 8004c4e:	4691      	mov	r9, r2
 8004c50:	4680      	mov	r8, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	469a      	mov	sl, r3
 8004c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c5a:	d807      	bhi.n	8004c6c <_printf_i+0x28>
 8004c5c:	2f62      	cmp	r7, #98	@ 0x62
 8004c5e:	d80a      	bhi.n	8004c76 <_printf_i+0x32>
 8004c60:	2f00      	cmp	r7, #0
 8004c62:	f000 80d2 	beq.w	8004e0a <_printf_i+0x1c6>
 8004c66:	2f58      	cmp	r7, #88	@ 0x58
 8004c68:	f000 80b9 	beq.w	8004dde <_printf_i+0x19a>
 8004c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c74:	e03a      	b.n	8004cec <_printf_i+0xa8>
 8004c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c7a:	2b15      	cmp	r3, #21
 8004c7c:	d8f6      	bhi.n	8004c6c <_printf_i+0x28>
 8004c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c84 <_printf_i+0x40>)
 8004c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004cf1 	.word	0x08004cf1
 8004c8c:	08004c6d 	.word	0x08004c6d
 8004c90:	08004c6d 	.word	0x08004c6d
 8004c94:	08004c6d 	.word	0x08004c6d
 8004c98:	08004c6d 	.word	0x08004c6d
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004c6d 	.word	0x08004c6d
 8004ca4:	08004c6d 	.word	0x08004c6d
 8004ca8:	08004c6d 	.word	0x08004c6d
 8004cac:	08004c6d 	.word	0x08004c6d
 8004cb0:	08004df1 	.word	0x08004df1
 8004cb4:	08004d1b 	.word	0x08004d1b
 8004cb8:	08004dab 	.word	0x08004dab
 8004cbc:	08004c6d 	.word	0x08004c6d
 8004cc0:	08004c6d 	.word	0x08004c6d
 8004cc4:	08004e13 	.word	0x08004e13
 8004cc8:	08004c6d 	.word	0x08004c6d
 8004ccc:	08004d1b 	.word	0x08004d1b
 8004cd0:	08004c6d 	.word	0x08004c6d
 8004cd4:	08004c6d 	.word	0x08004c6d
 8004cd8:	08004db3 	.word	0x08004db3
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	1d1a      	adds	r2, r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6032      	str	r2, [r6, #0]
 8004ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cec:	2301      	movs	r3, #1
 8004cee:	e09d      	b.n	8004e2c <_printf_i+0x1e8>
 8004cf0:	6833      	ldr	r3, [r6, #0]
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	6031      	str	r1, [r6, #0]
 8004cf8:	0606      	lsls	r6, r0, #24
 8004cfa:	d501      	bpl.n	8004d00 <_printf_i+0xbc>
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	e003      	b.n	8004d08 <_printf_i+0xc4>
 8004d00:	0645      	lsls	r5, r0, #25
 8004d02:	d5fb      	bpl.n	8004cfc <_printf_i+0xb8>
 8004d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	da03      	bge.n	8004d14 <_printf_i+0xd0>
 8004d0c:	232d      	movs	r3, #45	@ 0x2d
 8004d0e:	426d      	negs	r5, r5
 8004d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d14:	4859      	ldr	r0, [pc, #356]	@ (8004e7c <_printf_i+0x238>)
 8004d16:	230a      	movs	r3, #10
 8004d18:	e011      	b.n	8004d3e <_printf_i+0xfa>
 8004d1a:	6821      	ldr	r1, [r4, #0]
 8004d1c:	6833      	ldr	r3, [r6, #0]
 8004d1e:	0608      	lsls	r0, r1, #24
 8004d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d24:	d402      	bmi.n	8004d2c <_printf_i+0xe8>
 8004d26:	0649      	lsls	r1, r1, #25
 8004d28:	bf48      	it	mi
 8004d2a:	b2ad      	uxthmi	r5, r5
 8004d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d2e:	4853      	ldr	r0, [pc, #332]	@ (8004e7c <_printf_i+0x238>)
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	bf14      	ite	ne
 8004d34:	230a      	movne	r3, #10
 8004d36:	2308      	moveq	r3, #8
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d3e:	6866      	ldr	r6, [r4, #4]
 8004d40:	60a6      	str	r6, [r4, #8]
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	bfa2      	ittt	ge
 8004d46:	6821      	ldrge	r1, [r4, #0]
 8004d48:	f021 0104 	bicge.w	r1, r1, #4
 8004d4c:	6021      	strge	r1, [r4, #0]
 8004d4e:	b90d      	cbnz	r5, 8004d54 <_printf_i+0x110>
 8004d50:	2e00      	cmp	r6, #0
 8004d52:	d04b      	beq.n	8004dec <_printf_i+0x1a8>
 8004d54:	4616      	mov	r6, r2
 8004d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d5e:	5dc7      	ldrb	r7, [r0, r7]
 8004d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d64:	462f      	mov	r7, r5
 8004d66:	42bb      	cmp	r3, r7
 8004d68:	460d      	mov	r5, r1
 8004d6a:	d9f4      	bls.n	8004d56 <_printf_i+0x112>
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d10b      	bne.n	8004d88 <_printf_i+0x144>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07df      	lsls	r7, r3, #31
 8004d74:	d508      	bpl.n	8004d88 <_printf_i+0x144>
 8004d76:	6923      	ldr	r3, [r4, #16]
 8004d78:	6861      	ldr	r1, [r4, #4]
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	bfde      	ittt	le
 8004d7e:	2330      	movle	r3, #48	@ 0x30
 8004d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d88:	1b92      	subs	r2, r2, r6
 8004d8a:	6122      	str	r2, [r4, #16]
 8004d8c:	f8cd a000 	str.w	sl, [sp]
 8004d90:	464b      	mov	r3, r9
 8004d92:	aa03      	add	r2, sp, #12
 8004d94:	4621      	mov	r1, r4
 8004d96:	4640      	mov	r0, r8
 8004d98:	f7ff fee6 	bl	8004b68 <_printf_common>
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d14a      	bne.n	8004e36 <_printf_i+0x1f2>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	b004      	add	sp, #16
 8004da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f043 0320 	orr.w	r3, r3, #32
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	4833      	ldr	r0, [pc, #204]	@ (8004e80 <_printf_i+0x23c>)
 8004db4:	2778      	movs	r7, #120	@ 0x78
 8004db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	6831      	ldr	r1, [r6, #0]
 8004dbe:	061f      	lsls	r7, r3, #24
 8004dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dc4:	d402      	bmi.n	8004dcc <_printf_i+0x188>
 8004dc6:	065f      	lsls	r7, r3, #25
 8004dc8:	bf48      	it	mi
 8004dca:	b2ad      	uxthmi	r5, r5
 8004dcc:	6031      	str	r1, [r6, #0]
 8004dce:	07d9      	lsls	r1, r3, #31
 8004dd0:	bf44      	itt	mi
 8004dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004dd6:	6023      	strmi	r3, [r4, #0]
 8004dd8:	b11d      	cbz	r5, 8004de2 <_printf_i+0x19e>
 8004dda:	2310      	movs	r3, #16
 8004ddc:	e7ac      	b.n	8004d38 <_printf_i+0xf4>
 8004dde:	4827      	ldr	r0, [pc, #156]	@ (8004e7c <_printf_i+0x238>)
 8004de0:	e7e9      	b.n	8004db6 <_printf_i+0x172>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	e7f6      	b.n	8004dda <_printf_i+0x196>
 8004dec:	4616      	mov	r6, r2
 8004dee:	e7bd      	b.n	8004d6c <_printf_i+0x128>
 8004df0:	6833      	ldr	r3, [r6, #0]
 8004df2:	6825      	ldr	r5, [r4, #0]
 8004df4:	6961      	ldr	r1, [r4, #20]
 8004df6:	1d18      	adds	r0, r3, #4
 8004df8:	6030      	str	r0, [r6, #0]
 8004dfa:	062e      	lsls	r6, r5, #24
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	d501      	bpl.n	8004e04 <_printf_i+0x1c0>
 8004e00:	6019      	str	r1, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <_printf_i+0x1c6>
 8004e04:	0668      	lsls	r0, r5, #25
 8004e06:	d5fb      	bpl.n	8004e00 <_printf_i+0x1bc>
 8004e08:	8019      	strh	r1, [r3, #0]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	4616      	mov	r6, r2
 8004e10:	e7bc      	b.n	8004d8c <_printf_i+0x148>
 8004e12:	6833      	ldr	r3, [r6, #0]
 8004e14:	1d1a      	adds	r2, r3, #4
 8004e16:	6032      	str	r2, [r6, #0]
 8004e18:	681e      	ldr	r6, [r3, #0]
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f7fb f9d6 	bl	80001d0 <memchr>
 8004e24:	b108      	cbz	r0, 8004e2a <_printf_i+0x1e6>
 8004e26:	1b80      	subs	r0, r0, r6
 8004e28:	6060      	str	r0, [r4, #4]
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	6123      	str	r3, [r4, #16]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e34:	e7aa      	b.n	8004d8c <_printf_i+0x148>
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	4632      	mov	r2, r6
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	47d0      	blx	sl
 8004e40:	3001      	adds	r0, #1
 8004e42:	d0ad      	beq.n	8004da0 <_printf_i+0x15c>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	079b      	lsls	r3, r3, #30
 8004e48:	d413      	bmi.n	8004e72 <_printf_i+0x22e>
 8004e4a:	68e0      	ldr	r0, [r4, #12]
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	4298      	cmp	r0, r3
 8004e50:	bfb8      	it	lt
 8004e52:	4618      	movlt	r0, r3
 8004e54:	e7a6      	b.n	8004da4 <_printf_i+0x160>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4632      	mov	r2, r6
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	47d0      	blx	sl
 8004e60:	3001      	adds	r0, #1
 8004e62:	d09d      	beq.n	8004da0 <_printf_i+0x15c>
 8004e64:	3501      	adds	r5, #1
 8004e66:	68e3      	ldr	r3, [r4, #12]
 8004e68:	9903      	ldr	r1, [sp, #12]
 8004e6a:	1a5b      	subs	r3, r3, r1
 8004e6c:	42ab      	cmp	r3, r5
 8004e6e:	dcf2      	bgt.n	8004e56 <_printf_i+0x212>
 8004e70:	e7eb      	b.n	8004e4a <_printf_i+0x206>
 8004e72:	2500      	movs	r5, #0
 8004e74:	f104 0619 	add.w	r6, r4, #25
 8004e78:	e7f5      	b.n	8004e66 <_printf_i+0x222>
 8004e7a:	bf00      	nop
 8004e7c:	080052a9 	.word	0x080052a9
 8004e80:	080052ba 	.word	0x080052ba

08004e84 <__sflush_r>:
 8004e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	0716      	lsls	r6, r2, #28
 8004e8e:	4605      	mov	r5, r0
 8004e90:	460c      	mov	r4, r1
 8004e92:	d454      	bmi.n	8004f3e <__sflush_r+0xba>
 8004e94:	684b      	ldr	r3, [r1, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dc02      	bgt.n	8004ea0 <__sflush_r+0x1c>
 8004e9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dd48      	ble.n	8004f32 <__sflush_r+0xae>
 8004ea0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ea2:	2e00      	cmp	r6, #0
 8004ea4:	d045      	beq.n	8004f32 <__sflush_r+0xae>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004eac:	682f      	ldr	r7, [r5, #0]
 8004eae:	6a21      	ldr	r1, [r4, #32]
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	d030      	beq.n	8004f16 <__sflush_r+0x92>
 8004eb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	0759      	lsls	r1, r3, #29
 8004eba:	d505      	bpl.n	8004ec8 <__sflush_r+0x44>
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	1ad2      	subs	r2, r2, r3
 8004ec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ec2:	b10b      	cbz	r3, 8004ec8 <__sflush_r+0x44>
 8004ec4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ecc:	6a21      	ldr	r1, [r4, #32]
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b0      	blx	r6
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	d106      	bne.n	8004ee6 <__sflush_r+0x62>
 8004ed8:	6829      	ldr	r1, [r5, #0]
 8004eda:	291d      	cmp	r1, #29
 8004edc:	d82b      	bhi.n	8004f36 <__sflush_r+0xb2>
 8004ede:	4a2a      	ldr	r2, [pc, #168]	@ (8004f88 <__sflush_r+0x104>)
 8004ee0:	410a      	asrs	r2, r1
 8004ee2:	07d6      	lsls	r6, r2, #31
 8004ee4:	d427      	bmi.n	8004f36 <__sflush_r+0xb2>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	6062      	str	r2, [r4, #4]
 8004eea:	04d9      	lsls	r1, r3, #19
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	6022      	str	r2, [r4, #0]
 8004ef0:	d504      	bpl.n	8004efc <__sflush_r+0x78>
 8004ef2:	1c42      	adds	r2, r0, #1
 8004ef4:	d101      	bne.n	8004efa <__sflush_r+0x76>
 8004ef6:	682b      	ldr	r3, [r5, #0]
 8004ef8:	b903      	cbnz	r3, 8004efc <__sflush_r+0x78>
 8004efa:	6560      	str	r0, [r4, #84]	@ 0x54
 8004efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004efe:	602f      	str	r7, [r5, #0]
 8004f00:	b1b9      	cbz	r1, 8004f32 <__sflush_r+0xae>
 8004f02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f06:	4299      	cmp	r1, r3
 8004f08:	d002      	beq.n	8004f10 <__sflush_r+0x8c>
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7ff fbf2 	bl	80046f4 <_free_r>
 8004f10:	2300      	movs	r3, #0
 8004f12:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f14:	e00d      	b.n	8004f32 <__sflush_r+0xae>
 8004f16:	2301      	movs	r3, #1
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b0      	blx	r6
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	1c50      	adds	r0, r2, #1
 8004f20:	d1c9      	bne.n	8004eb6 <__sflush_r+0x32>
 8004f22:	682b      	ldr	r3, [r5, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0c6      	beq.n	8004eb6 <__sflush_r+0x32>
 8004f28:	2b1d      	cmp	r3, #29
 8004f2a:	d001      	beq.n	8004f30 <__sflush_r+0xac>
 8004f2c:	2b16      	cmp	r3, #22
 8004f2e:	d11e      	bne.n	8004f6e <__sflush_r+0xea>
 8004f30:	602f      	str	r7, [r5, #0]
 8004f32:	2000      	movs	r0, #0
 8004f34:	e022      	b.n	8004f7c <__sflush_r+0xf8>
 8004f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f3a:	b21b      	sxth	r3, r3
 8004f3c:	e01b      	b.n	8004f76 <__sflush_r+0xf2>
 8004f3e:	690f      	ldr	r7, [r1, #16]
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	d0f6      	beq.n	8004f32 <__sflush_r+0xae>
 8004f44:	0793      	lsls	r3, r2, #30
 8004f46:	680e      	ldr	r6, [r1, #0]
 8004f48:	bf08      	it	eq
 8004f4a:	694b      	ldreq	r3, [r1, #20]
 8004f4c:	600f      	str	r7, [r1, #0]
 8004f4e:	bf18      	it	ne
 8004f50:	2300      	movne	r3, #0
 8004f52:	eba6 0807 	sub.w	r8, r6, r7
 8004f56:	608b      	str	r3, [r1, #8]
 8004f58:	f1b8 0f00 	cmp.w	r8, #0
 8004f5c:	dde9      	ble.n	8004f32 <__sflush_r+0xae>
 8004f5e:	6a21      	ldr	r1, [r4, #32]
 8004f60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f62:	4643      	mov	r3, r8
 8004f64:	463a      	mov	r2, r7
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b0      	blx	r6
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	dc08      	bgt.n	8004f80 <__sflush_r+0xfc>
 8004f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	4407      	add	r7, r0
 8004f82:	eba8 0800 	sub.w	r8, r8, r0
 8004f86:	e7e7      	b.n	8004f58 <__sflush_r+0xd4>
 8004f88:	dfbffffe 	.word	0xdfbffffe

08004f8c <_fflush_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	690b      	ldr	r3, [r1, #16]
 8004f90:	4605      	mov	r5, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	b913      	cbnz	r3, 8004f9c <_fflush_r+0x10>
 8004f96:	2500      	movs	r5, #0
 8004f98:	4628      	mov	r0, r5
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	b118      	cbz	r0, 8004fa6 <_fflush_r+0x1a>
 8004f9e:	6a03      	ldr	r3, [r0, #32]
 8004fa0:	b90b      	cbnz	r3, 8004fa6 <_fflush_r+0x1a>
 8004fa2:	f7ff fa9f 	bl	80044e4 <__sinit>
 8004fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f3      	beq.n	8004f96 <_fflush_r+0xa>
 8004fae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fb0:	07d0      	lsls	r0, r2, #31
 8004fb2:	d404      	bmi.n	8004fbe <_fflush_r+0x32>
 8004fb4:	0599      	lsls	r1, r3, #22
 8004fb6:	d402      	bmi.n	8004fbe <_fflush_r+0x32>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fba:	f7ff fb98 	bl	80046ee <__retarget_lock_acquire_recursive>
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	f7ff ff5f 	bl	8004e84 <__sflush_r>
 8004fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fc8:	07da      	lsls	r2, r3, #31
 8004fca:	4605      	mov	r5, r0
 8004fcc:	d4e4      	bmi.n	8004f98 <_fflush_r+0xc>
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	059b      	lsls	r3, r3, #22
 8004fd2:	d4e1      	bmi.n	8004f98 <_fflush_r+0xc>
 8004fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fd6:	f7ff fb8b 	bl	80046f0 <__retarget_lock_release_recursive>
 8004fda:	e7dd      	b.n	8004f98 <_fflush_r+0xc>

08004fdc <__swbuf_r>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	460e      	mov	r6, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	b118      	cbz	r0, 8004fee <__swbuf_r+0x12>
 8004fe6:	6a03      	ldr	r3, [r0, #32]
 8004fe8:	b90b      	cbnz	r3, 8004fee <__swbuf_r+0x12>
 8004fea:	f7ff fa7b 	bl	80044e4 <__sinit>
 8004fee:	69a3      	ldr	r3, [r4, #24]
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	071a      	lsls	r2, r3, #28
 8004ff6:	d501      	bpl.n	8004ffc <__swbuf_r+0x20>
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	b943      	cbnz	r3, 800500e <__swbuf_r+0x32>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f82a 	bl	8005058 <__swsetup_r>
 8005004:	b118      	cbz	r0, 800500e <__swbuf_r+0x32>
 8005006:	f04f 37ff 	mov.w	r7, #4294967295
 800500a:	4638      	mov	r0, r7
 800500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	6922      	ldr	r2, [r4, #16]
 8005012:	1a98      	subs	r0, r3, r2
 8005014:	6963      	ldr	r3, [r4, #20]
 8005016:	b2f6      	uxtb	r6, r6
 8005018:	4283      	cmp	r3, r0
 800501a:	4637      	mov	r7, r6
 800501c:	dc05      	bgt.n	800502a <__swbuf_r+0x4e>
 800501e:	4621      	mov	r1, r4
 8005020:	4628      	mov	r0, r5
 8005022:	f7ff ffb3 	bl	8004f8c <_fflush_r>
 8005026:	2800      	cmp	r0, #0
 8005028:	d1ed      	bne.n	8005006 <__swbuf_r+0x2a>
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	3b01      	subs	r3, #1
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	6022      	str	r2, [r4, #0]
 8005036:	701e      	strb	r6, [r3, #0]
 8005038:	6962      	ldr	r2, [r4, #20]
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	429a      	cmp	r2, r3
 800503e:	d004      	beq.n	800504a <__swbuf_r+0x6e>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	07db      	lsls	r3, r3, #31
 8005044:	d5e1      	bpl.n	800500a <__swbuf_r+0x2e>
 8005046:	2e0a      	cmp	r6, #10
 8005048:	d1df      	bne.n	800500a <__swbuf_r+0x2e>
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f7ff ff9d 	bl	8004f8c <_fflush_r>
 8005052:	2800      	cmp	r0, #0
 8005054:	d0d9      	beq.n	800500a <__swbuf_r+0x2e>
 8005056:	e7d6      	b.n	8005006 <__swbuf_r+0x2a>

08005058 <__swsetup_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4b29      	ldr	r3, [pc, #164]	@ (8005100 <__swsetup_r+0xa8>)
 800505c:	4605      	mov	r5, r0
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	460c      	mov	r4, r1
 8005062:	b118      	cbz	r0, 800506c <__swsetup_r+0x14>
 8005064:	6a03      	ldr	r3, [r0, #32]
 8005066:	b90b      	cbnz	r3, 800506c <__swsetup_r+0x14>
 8005068:	f7ff fa3c 	bl	80044e4 <__sinit>
 800506c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005070:	0719      	lsls	r1, r3, #28
 8005072:	d422      	bmi.n	80050ba <__swsetup_r+0x62>
 8005074:	06da      	lsls	r2, r3, #27
 8005076:	d407      	bmi.n	8005088 <__swsetup_r+0x30>
 8005078:	2209      	movs	r2, #9
 800507a:	602a      	str	r2, [r5, #0]
 800507c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	e033      	b.n	80050f0 <__swsetup_r+0x98>
 8005088:	0758      	lsls	r0, r3, #29
 800508a:	d512      	bpl.n	80050b2 <__swsetup_r+0x5a>
 800508c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800508e:	b141      	cbz	r1, 80050a2 <__swsetup_r+0x4a>
 8005090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005094:	4299      	cmp	r1, r3
 8005096:	d002      	beq.n	800509e <__swsetup_r+0x46>
 8005098:	4628      	mov	r0, r5
 800509a:	f7ff fb2b 	bl	80046f4 <_free_r>
 800509e:	2300      	movs	r3, #0
 80050a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	2300      	movs	r3, #0
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	f043 0308 	orr.w	r3, r3, #8
 80050b8:	81a3      	strh	r3, [r4, #12]
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	b94b      	cbnz	r3, 80050d2 <__swsetup_r+0x7a>
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c8:	d003      	beq.n	80050d2 <__swsetup_r+0x7a>
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f84f 	bl	8005170 <__smakebuf_r>
 80050d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d6:	f013 0201 	ands.w	r2, r3, #1
 80050da:	d00a      	beq.n	80050f2 <__swsetup_r+0x9a>
 80050dc:	2200      	movs	r2, #0
 80050de:	60a2      	str	r2, [r4, #8]
 80050e0:	6962      	ldr	r2, [r4, #20]
 80050e2:	4252      	negs	r2, r2
 80050e4:	61a2      	str	r2, [r4, #24]
 80050e6:	6922      	ldr	r2, [r4, #16]
 80050e8:	b942      	cbnz	r2, 80050fc <__swsetup_r+0xa4>
 80050ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050ee:	d1c5      	bne.n	800507c <__swsetup_r+0x24>
 80050f0:	bd38      	pop	{r3, r4, r5, pc}
 80050f2:	0799      	lsls	r1, r3, #30
 80050f4:	bf58      	it	pl
 80050f6:	6962      	ldrpl	r2, [r4, #20]
 80050f8:	60a2      	str	r2, [r4, #8]
 80050fa:	e7f4      	b.n	80050e6 <__swsetup_r+0x8e>
 80050fc:	2000      	movs	r0, #0
 80050fe:	e7f7      	b.n	80050f0 <__swsetup_r+0x98>
 8005100:	20000018 	.word	0x20000018

08005104 <_sbrk_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	@ (8005120 <_sbrk_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fb fd32 	bl	8000b78 <_sbrk>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_sbrk_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_sbrk_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	2000029c 	.word	0x2000029c

08005124 <__swhatbuf_r>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	460c      	mov	r4, r1
 8005128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512c:	2900      	cmp	r1, #0
 800512e:	b096      	sub	sp, #88	@ 0x58
 8005130:	4615      	mov	r5, r2
 8005132:	461e      	mov	r6, r3
 8005134:	da0d      	bge.n	8005152 <__swhatbuf_r+0x2e>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	bf14      	ite	ne
 8005142:	2340      	movne	r3, #64	@ 0x40
 8005144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005148:	2000      	movs	r0, #0
 800514a:	6031      	str	r1, [r6, #0]
 800514c:	602b      	str	r3, [r5, #0]
 800514e:	b016      	add	sp, #88	@ 0x58
 8005150:	bd70      	pop	{r4, r5, r6, pc}
 8005152:	466a      	mov	r2, sp
 8005154:	f000 f848 	bl	80051e8 <_fstat_r>
 8005158:	2800      	cmp	r0, #0
 800515a:	dbec      	blt.n	8005136 <__swhatbuf_r+0x12>
 800515c:	9901      	ldr	r1, [sp, #4]
 800515e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005166:	4259      	negs	r1, r3
 8005168:	4159      	adcs	r1, r3
 800516a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800516e:	e7eb      	b.n	8005148 <__swhatbuf_r+0x24>

08005170 <__smakebuf_r>:
 8005170:	898b      	ldrh	r3, [r1, #12]
 8005172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005174:	079d      	lsls	r5, r3, #30
 8005176:	4606      	mov	r6, r0
 8005178:	460c      	mov	r4, r1
 800517a:	d507      	bpl.n	800518c <__smakebuf_r+0x1c>
 800517c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	2301      	movs	r3, #1
 8005186:	6163      	str	r3, [r4, #20]
 8005188:	b003      	add	sp, #12
 800518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518c:	ab01      	add	r3, sp, #4
 800518e:	466a      	mov	r2, sp
 8005190:	f7ff ffc8 	bl	8005124 <__swhatbuf_r>
 8005194:	9f00      	ldr	r7, [sp, #0]
 8005196:	4605      	mov	r5, r0
 8005198:	4639      	mov	r1, r7
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff fb16 	bl	80047cc <_malloc_r>
 80051a0:	b948      	cbnz	r0, 80051b6 <__smakebuf_r+0x46>
 80051a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a6:	059a      	lsls	r2, r3, #22
 80051a8:	d4ee      	bmi.n	8005188 <__smakebuf_r+0x18>
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	f043 0302 	orr.w	r3, r3, #2
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	e7e2      	b.n	800517c <__smakebuf_r+0xc>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	6020      	str	r0, [r4, #0]
 80051ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	9b01      	ldr	r3, [sp, #4]
 80051c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051c6:	b15b      	cbz	r3, 80051e0 <__smakebuf_r+0x70>
 80051c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051cc:	4630      	mov	r0, r6
 80051ce:	f000 f81d 	bl	800520c <_isatty_r>
 80051d2:	b128      	cbz	r0, 80051e0 <__smakebuf_r+0x70>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	431d      	orrs	r5, r3
 80051e4:	81a5      	strh	r5, [r4, #12]
 80051e6:	e7cf      	b.n	8005188 <__smakebuf_r+0x18>

080051e8 <_fstat_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	@ (8005208 <_fstat_r+0x20>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	f7fb fc97 	bl	8000b28 <_fstat>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	d102      	bne.n	8005204 <_fstat_r+0x1c>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	b103      	cbz	r3, 8005204 <_fstat_r+0x1c>
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	bd38      	pop	{r3, r4, r5, pc}
 8005206:	bf00      	nop
 8005208:	2000029c 	.word	0x2000029c

0800520c <_isatty_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d06      	ldr	r5, [pc, #24]	@ (8005228 <_isatty_r+0x1c>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	f7fb fc96 	bl	8000b48 <_isatty>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_isatty_r+0x1a>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_isatty_r+0x1a>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	2000029c 	.word	0x2000029c

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
