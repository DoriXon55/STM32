
PRZERWANIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005384  08005384  00006384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005440  08005440  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005448  08005448  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800544c  0800544c  0000644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005450  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000080  080054d0  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080054d0  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caf2  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd4  00000000  00000000  00013ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00015b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000828  00000000  00000000  00016630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a04  00000000  00000000  00016e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d16f  00000000  00000000  0003d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9904  00000000  00000000  0004a9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001342cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  00134314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013755c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800536c 	.word	0x0800536c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800536c 	.word	0x0800536c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d102      	bne.n	80005a4 <__io_putchar+0x14>
	{
		__io_putchar('\r');
 800059e:	200d      	movs	r0, #13
 80005a0:	f7ff fff6 	bl	8000590 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x2c>)
 80005ae:	f002 fb01 	bl	8002bb4 <HAL_UART_Transmit>
	return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000009c 	.word	0x2000009c

080005c0 <line_append>:

static char line_buffer[LINE_MAX_LENGTH +1];
static uint32_t line_length;
void line_append(uint8_t value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	if( value == '\r' || value == '\n')
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b0d      	cmp	r3, #13
 80005ce:	d002      	beq.n	80005d6 <line_append+0x16>
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b0a      	cmp	r3, #10
 80005d4:	d127      	bne.n	8000626 <line_append+0x66>
	{
		if(line_length > 0)
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <line_append+0x90>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d033      	beq.n	8000646 <line_append+0x86>
		{
			line_buffer[line_length] = '\0';
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <line_append+0x90>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <line_append+0x94>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	54d1      	strb	r1, [r2, r3]
			if(strcmp(line_buffer, "on") == 0)
 80005e8:	491b      	ldr	r1, [pc, #108]	@ (8000658 <line_append+0x98>)
 80005ea:	481a      	ldr	r0, [pc, #104]	@ (8000654 <line_append+0x94>)
 80005ec:	f7ff fdf0 	bl	80001d0 <strcmp>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d106      	bne.n	8000604 <line_append+0x44>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fe:	f000 ff3b 	bl	8001478 <HAL_GPIO_WritePin>
 8000602:	e00c      	b.n	800061e <line_append+0x5e>
			else if(strcmp(line_buffer, "off") == 0)
 8000604:	4915      	ldr	r1, [pc, #84]	@ (800065c <line_append+0x9c>)
 8000606:	4813      	ldr	r0, [pc, #76]	@ (8000654 <line_append+0x94>)
 8000608:	f7ff fde2 	bl	80001d0 <strcmp>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d105      	bne.n	800061e <line_append+0x5e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061a:	f000 ff2d 	bl	8001478 <HAL_GPIO_WritePin>
			line_length = 0;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <line_append+0x90>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
		if(line_length > 0)
 8000624:	e00f      	b.n	8000646 <line_append+0x86>
		}
	}
	else {
		if(line_length >= LINE_MAX_LENGTH)
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <line_append+0x90>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b4f      	cmp	r3, #79	@ 0x4f
 800062c:	d902      	bls.n	8000634 <line_append+0x74>
			line_length = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <line_append+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
		line_buffer[line_length++] = value;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <line_append+0x90>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	4905      	ldr	r1, [pc, #20]	@ (8000650 <line_append+0x90>)
 800063c:	600a      	str	r2, [r1, #0]
 800063e:	4905      	ldr	r1, [pc, #20]	@ (8000654 <line_append+0x94>)
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	54ca      	strb	r2, [r1, r3]
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000178 	.word	0x20000178
 8000654:	20000124 	.word	0x20000124
 8000658:	08005384 	.word	0x08005384
 800065c:	08005388 	.word	0x08005388

08000660 <HAL_GPIO_EXTI_Callback>:


volatile ButtonCounter button1_counter = { 0,0 };
volatile ButtonCounter button2_counter = { 0,0 };
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d008      	beq.n	8000682 <HAL_GPIO_EXTI_Callback+0x22>
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000674:	d10b      	bne.n	800068e <HAL_GPIO_EXTI_Callback+0x2e>
	{
	case USER_BUTTON_Pin:
		button1_counter.push_counter++;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a07      	ldr	r2, [pc, #28]	@ (800069c <HAL_GPIO_EXTI_Callback+0x3c>)
 800067e:	6013      	str	r3, [r2, #0]
		break;
 8000680:	e006      	b.n	8000690 <HAL_GPIO_EXTI_Callback+0x30>
	case NEW_USER_BUTTON_Pin:
		button2_counter.push_counter++;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800068a:	6013      	str	r3, [r2, #0]
		break;
 800068c:	e000      	b.n	8000690 <HAL_GPIO_EXTI_Callback+0x30>
	default:
		break;
 800068e:	bf00      	nop
	}
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	2000017c 	.word	0x2000017c
 80006a0:	20000184 	.word	0x20000184

080006a4 <send_next_message>:

sender_state message_number = MESSAGE_1;
void send_next_message(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	  static char message[] = "Hello!\r\n";
	  static char message2[] = "Skibidi\r\n";

	  switch(message_number)
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <send_next_message+0x50>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <send_next_message+0x12>
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d00e      	beq.n	80006d2 <send_next_message+0x2e>
	  case MESSAGE_2:
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
		  message_number = DONE;
		  break;
	  default:
		  break;
 80006b4:	e01b      	b.n	80006ee <send_next_message+0x4a>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
 80006b6:	4810      	ldr	r0, [pc, #64]	@ (80006f8 <send_next_message+0x54>)
 80006b8:	f7ff fd94 	bl	80001e4 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29b      	uxth	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	490d      	ldr	r1, [pc, #52]	@ (80006f8 <send_next_message+0x54>)
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <send_next_message+0x58>)
 80006c6:	f002 faff 	bl	8002cc8 <HAL_UART_Transmit_IT>
		  message_number = MESSAGE_2;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <send_next_message+0x50>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
		  break;
 80006d0:	e00d      	b.n	80006ee <send_next_message+0x4a>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <send_next_message+0x5c>)
 80006d4:	f7ff fd86 	bl	80001e4 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29b      	uxth	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	4908      	ldr	r1, [pc, #32]	@ (8000700 <send_next_message+0x5c>)
 80006e0:	4806      	ldr	r0, [pc, #24]	@ (80006fc <send_next_message+0x58>)
 80006e2:	f002 faf1 	bl	8002cc8 <HAL_UART_Transmit_IT>
		  message_number = DONE;
 80006e6:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <send_next_message+0x50>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	701a      	strb	r2, [r3, #0]
		  break;
 80006ec:	bf00      	nop
	  }
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000018c 	.word	0x2000018c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	2000000c 	.word	0x2000000c

08000704 <HAL_UART_TxCpltCallback>:

//wywołanie po wysłaniu danych
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_UART_TxCpltCallback+0x1c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d101      	bne.n	8000718 <HAL_UART_TxCpltCallback+0x14>
		send_next_message();
 8000714:	f7ff ffc6 	bl	80006a4 <send_next_message>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000009c 	.word	0x2000009c

08000724 <HAL_UART_RxCpltCallback>:

//wywołanie po odebraniu danych
uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <HAL_UART_RxCpltCallback+0x2c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d109      	bne.n	8000748 <HAL_UART_RxCpltCallback+0x24>
	{
		line_append(uart_rx_buffer);
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <HAL_UART_RxCpltCallback+0x30>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff41 	bl	80005c0 <line_append>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	4904      	ldr	r1, [pc, #16]	@ (8000754 <HAL_UART_RxCpltCallback+0x30>)
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <HAL_UART_RxCpltCallback+0x2c>)
 8000744:	f002 fb1e 	bl	8002d84 <HAL_UART_Receive_IT>
	}
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000009c 	.word	0x2000009c
 8000754:	2000018d 	.word	0x2000018d

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fadd 	bl	8000d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f838 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 f8b8 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f886 	bl	8000878 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_next_message();
 800076c:	f7ff ff9a 	bl	80006a4 <send_next_message>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	4912      	ldr	r1, [pc, #72]	@ (80007bc <main+0x64>)
 8000774:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <main+0x68>)
 8000776:	f002 fb05 	bl	8002d84 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (button1_counter.old_push_counter != button1_counter.push_counter)
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <main+0x6c>)
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <main+0x6c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d009      	beq.n	800079a <main+0x42>
	  {
		  button1_counter.old_push_counter = button1_counter.push_counter;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <main+0x6c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <main+0x6c>)
 800078c:	6053      	str	r3, [r2, #4]
		  printf("Button 1 pushed %lu times\r\n", button1_counter.push_counter);
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <main+0x6c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <main+0x70>)
 8000796:	f003 ff7b 	bl	8004690 <iprintf>
	  }
	  if (button2_counter.old_push_counter != button2_counter.push_counter)
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <main+0x74>)
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <main+0x74>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d0e9      	beq.n	800077a <main+0x22>
	  {
		  button2_counter.old_push_counter = button2_counter.push_counter;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <main+0x74>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <main+0x74>)
 80007ac:	6053      	str	r3, [r2, #4]
		  printf("Button 2 pushed %lu times\r\n", button2_counter.push_counter);
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <main+0x74>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <main+0x78>)
 80007b6:	f003 ff6b 	bl	8004690 <iprintf>
	  if (button1_counter.old_push_counter != button1_counter.push_counter)
 80007ba:	e7de      	b.n	800077a <main+0x22>
 80007bc:	2000018d 	.word	0x2000018d
 80007c0:	2000009c 	.word	0x2000009c
 80007c4:	2000017c 	.word	0x2000017c
 80007c8:	0800538c 	.word	0x0800538c
 80007cc:	20000184 	.word	0x20000184
 80007d0:	080053a8 	.word	0x080053a8

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	@ 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	@ 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 ffa9 	bl	800473a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007fa:	f000 fe7b 	bl	80014f4 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f8d4 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000808:	2310      	movs	r3, #16
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000814:	2360      	movs	r3, #96	@ 0x60
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081c:	2301      	movs	r3, #1
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000824:	2328      	movs	r3, #40	@ 0x28
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f000 feb1 	bl	80015a0 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000844:	f000 f8b4 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fa79 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800086c:	f000 f8a0 	bl	80009b0 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3758      	adds	r7, #88	@ 0x58
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	@ (80008d4 <MX_USART2_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 80008bc:	f002 f92c 	bl	8002b18 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f873 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000009c 	.word	0x2000009c
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <MX_GPIO_Init+0xd0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a2d      	ldr	r2, [pc, #180]	@ (80009a8 <MX_GPIO_Init+0xd0>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <MX_GPIO_Init+0xd0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <MX_GPIO_Init+0xd0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a27      	ldr	r2, [pc, #156]	@ (80009a8 <MX_GPIO_Init+0xd0>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <MX_GPIO_Init+0xd0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000926:	f000 fda7 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	481a      	ldr	r0, [pc, #104]	@ (80009ac <MX_GPIO_Init+0xd4>)
 8000942:	f000 fbef 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEW_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = NEW_USER_BUTTON_Pin;
 8000946:	2302      	movs	r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NEW_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	4814      	ldr	r0, [pc, #80]	@ (80009ac <MX_GPIO_Init+0xd4>)
 800095c:	f000 fbe2 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000960:	2320      	movs	r3, #32
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097a:	f000 fbd3 	bl	8001124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fb19 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000988:	2007      	movs	r0, #7
 800098a:	f000 fb32 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	2028      	movs	r0, #40	@ 0x28
 8000994:	f000 fb11 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000998:	2028      	movs	r0, #40	@ 0x28
 800099a:	f000 fb2a 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a00 <HAL_MspInit+0x44>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009de:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_MspInit+0x44>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0ac      	sub	sp, #176	@ 0xb0
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2288      	movs	r2, #136	@ 0x88
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fe88 	bl	800473a <memset>
  if(huart->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <HAL_UART_MspInit+0xc0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d143      	bne.n	8000abc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fbad 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff ffb0 	bl	80009b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a80:	230c      	movs	r3, #12
 8000a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa8:	f000 fb3c 	bl	8001124 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	210c      	movs	r1, #12
 8000ab0:	2026      	movs	r0, #38	@ 0x26
 8000ab2:	f000 fa82 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab6:	2026      	movs	r0, #38	@ 0x26
 8000ab8:	f000 fa9b 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000abc:	bf00      	nop
 8000abe:	37b0      	adds	r7, #176	@ 0xb0
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
    printf("%d\n", sysTickTimer); -> dokładniejsze
    printf("SysTick Timer: %d\n", sysTickTimer); -> o wiele mniej dokładne
    */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f94f 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NEW_USER_BUTTON_Pin);
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f000 fcba 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <USART2_IRQHandler+0x10>)
 8000b3e:	f002 f96d 	bl	8002e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000009c 	.word	0x2000009c

08000b4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000b50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b54:	f000 fca8 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
  }

  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fced 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
  }
  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f003 fdb6 	bl	80047d8 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20018000 	.word	0x20018000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000190 	.word	0x20000190
 8000ca0:	200002e8 	.word	0x200002e8

08000ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 fd75 	bl	80047e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fd2d 	bl	8000758 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d0c:	08005450 	.word	0x08005450
  ldr r2, =_sbss
 8000d10:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d14:	200002e4 	.word	0x200002e4

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>

08000d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f93d 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f80e 	bl	8000d4c <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff fe3e 	bl	80009bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f949 	bl	800100e <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f913 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000020 	.word	0x20000020
 8000dbc:	20000018 	.word	0x20000018
 8000dc0:	2000001c 	.word	0x2000001c

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000020 	.word	0x20000020
 8000de8:	20000194 	.word	0x20000194

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000194 	.word	0x20000194

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d008      	beq.n	8001050 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2204      	movs	r2, #4
 8001042:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e022      	b.n	8001096 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 020e 	bic.w	r2, r2, #14
 800105e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001074:	f003 021c 	and.w	r2, r3, #28
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d005      	beq.n	80010c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2204      	movs	r2, #4
 80010be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e029      	b.n	800111a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 020e 	bic.w	r2, r2, #14
 80010d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f003 021c 	and.w	r2, r3, #28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
    }
  }
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e17f      	b.n	8001434 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8171 	beq.w	800142e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d118      	bne.n	8001204 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	6939      	ldr	r1, [r7, #16]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80ac 	beq.w	800142e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001454 <HAL_GPIO_Init+0x330>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012da:	4a5e      	ldr	r2, [pc, #376]	@ (8001454 <HAL_GPIO_Init+0x330>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <HAL_GPIO_Init+0x330>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x242>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	@ (800145c <HAL_GPIO_Init+0x338>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <HAL_GPIO_Init+0x33c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	@ (8001464 <HAL_GPIO_Init+0x340>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	@ (8001468 <HAL_GPIO_Init+0x344>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_GPIO_Init+0x348>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	@ (8001470 <HAL_GPIO_Init+0x34c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x22a>
 800134a:	2306      	movs	r3, #6
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800134e:	2307      	movs	r3, #7
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001366:	2300      	movs	r3, #0
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001378:	4937      	ldr	r1, [pc, #220]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_GPIO_Init+0x350>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013aa:	4a32      	ldr	r2, [pc, #200]	@ (8001474 <HAL_GPIO_Init+0x350>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_GPIO_Init+0x350>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d4:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <HAL_GPIO_Init+0x350>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <HAL_GPIO_Init+0x350>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <HAL_GPIO_Init+0x350>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_GPIO_Init+0x350>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001428:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <HAL_GPIO_Init+0x350>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f ae78 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	48001400 	.word	0x48001400
 8001470:	48001800 	.word	0x48001800
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f8ca 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001502:	d130      	bne.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800150c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001510:	d038      	beq.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800151a:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001520:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001522:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2232      	movs	r2, #50	@ 0x32
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	0c9b      	lsrs	r3, r3, #18
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001538:	e002      	b.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3b01      	subs	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154c:	d102      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x60>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f2      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001560:	d110      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e00f      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800156e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001572:	d007      	beq.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001574:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800157c:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001582:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40007000 	.word	0x40007000
 8001598:	20000018 	.word	0x20000018
 800159c:	431bde83 	.word	0x431bde83

080015a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e3ca      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b2:	4b97      	ldr	r3, [pc, #604]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015bc:	4b94      	ldr	r3, [pc, #592]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80e4 	beq.w	800179c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_RCC_OscConfig+0x4a>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	f040 808b 	bne.w	80016f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f040 8087 	bne.w	80016f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ea:	4b89      	ldr	r3, [pc, #548]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x62>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e3a2      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	4b82      	ldr	r3, [pc, #520]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_RCC_OscConfig+0x7c>
 8001612:	4b7f      	ldr	r3, [pc, #508]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800161a:	e005      	b.n	8001628 <HAL_RCC_OscConfig+0x88>
 800161c:	4b7c      	ldr	r3, [pc, #496]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001628:	4293      	cmp	r3, r2
 800162a:	d223      	bcs.n	8001674 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fd55 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e383      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001640:	4b73      	ldr	r3, [pc, #460]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a72      	ldr	r2, [pc, #456]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b70      	ldr	r3, [pc, #448]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	496d      	ldr	r1, [pc, #436]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165e:	4b6c      	ldr	r3, [pc, #432]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	4968      	ldr	r1, [pc, #416]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
 8001672:	e025      	b.n	80016c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4b66      	ldr	r3, [pc, #408]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a65      	ldr	r2, [pc, #404]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4960      	ldr	r1, [pc, #384]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001692:	4b5f      	ldr	r3, [pc, #380]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	495b      	ldr	r1, [pc, #364]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fd15 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e343      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c0:	f000 fc4a 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b52      	ldr	r3, [pc, #328]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	4950      	ldr	r1, [pc, #320]	@ (8001814 <HAL_RCC_OscConfig+0x274>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001818 <HAL_RCC_OscConfig+0x278>)
 80016de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e0:	4b4e      	ldr	r3, [pc, #312]	@ (800181c <HAL_RCC_OscConfig+0x27c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb31 	bl	8000d4c <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d052      	beq.n	800179a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	e327      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d032      	beq.n	8001766 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001700:	4b43      	ldr	r3, [pc, #268]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a42      	ldr	r2, [pc, #264]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb6e 	bl	8000dec <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001714:	f7ff fb6a 	bl	8000dec <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e310      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001726:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001732:	4b37      	ldr	r3, [pc, #220]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a36      	ldr	r2, [pc, #216]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4931      	ldr	r1, [pc, #196]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001750:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	492c      	ldr	r1, [pc, #176]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e01a      	b.n	800179c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001766:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a29      	ldr	r2, [pc, #164]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb3b 	bl	8000dec <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177a:	f7ff fb37 	bl	8000dec <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e2dd      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x1da>
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d074      	beq.n	8001892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x21a>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d10e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d064      	beq.n	8001890 <HAL_RCC_OscConfig+0x2f0>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d160      	bne.n	8001890 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e2ba      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x24a>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e026      	b.n	8001838 <HAL_RCC_OscConfig+0x298>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f2:	d115      	bne.n	8001820 <HAL_RCC_OscConfig+0x280>
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a02      	ldr	r2, [pc, #8]	@ (8001810 <HAL_RCC_OscConfig+0x270>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x298>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	080053c4 	.word	0x080053c4
 8001818:	20000018 	.word	0x20000018
 800181c:	2000001c 	.word	0x2000001c
 8001820:	4ba0      	ldr	r3, [pc, #640]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a9f      	ldr	r2, [pc, #636]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b9d      	ldr	r3, [pc, #628]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a9c      	ldr	r2, [pc, #624]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fad4 	bl	8000dec <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fad0 	bl	8000dec <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e276      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4b92      	ldr	r3, [pc, #584]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x2a8>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fac0 	bl	8000dec <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fabc 	bl	8000dec <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e262      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001882:	4b88      	ldr	r3, [pc, #544]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d0>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d060      	beq.n	8001960 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x310>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d119      	bne.n	80018de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d116      	bne.n	80018de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x328>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e23f      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b76      	ldr	r3, [pc, #472]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4973      	ldr	r1, [pc, #460]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018dc:	e040      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d023      	beq.n	800192e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e6:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa7b 	bl	8000dec <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa77 	bl	8000dec <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e21d      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190c:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b62      	ldr	r3, [pc, #392]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	495f      	ldr	r1, [pc, #380]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e018      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fa57 	bl	8000dec <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fa53 	bl	8000dec <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1f9      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001974:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197a:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fa32 	bl	8000dec <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fa2e 	bl	8000dec <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1d4      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ef      	beq.n	800198c <HAL_RCC_OscConfig+0x3ec>
 80019ac:	e01b      	b.n	80019e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b4:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fa15 	bl	8000dec <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff fa11 	bl	8000dec <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1b7      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a6 	beq.w	8001b40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019f8:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a26      	ldr	r2, [pc, #152]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d118      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9d8 	bl	8000dec <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a40:	f7ff f9d4 	bl	8000dec <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e17a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4d8>
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a76:	e029      	b.n	8001acc <HAL_RCC_OscConfig+0x52c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d115      	bne.n	8001aac <HAL_RCC_OscConfig+0x50c>
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a96:	4a03      	ldr	r2, [pc, #12]	@ (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x52c>
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	4b9c      	ldr	r3, [pc, #624]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab2:	4a9b      	ldr	r2, [pc, #620]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001abc:	4b98      	ldr	r3, [pc, #608]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac2:	4a97      	ldr	r2, [pc, #604]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d016      	beq.n	8001b02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f98a 	bl	8000dec <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff f986 	bl	8000dec <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e12a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ed      	beq.n	8001adc <HAL_RCC_OscConfig+0x53c>
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff f973 	bl	8000dec <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff f96f 	bl	8000dec <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e113      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	4b7f      	ldr	r3, [pc, #508]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ed      	bne.n	8001b0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b7a      	ldr	r3, [pc, #488]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	4a79      	ldr	r2, [pc, #484]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80fe 	beq.w	8001d46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	f040 80d0 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b54:	4b72      	ldr	r3, [pc, #456]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d130      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	3b01      	subs	r3, #1
 8001b74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d127      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d11f      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b94:	2a07      	cmp	r2, #7
 8001b96:	bf14      	ite	ne
 8001b98:	2201      	movne	r2, #1
 8001b9a:	2200      	moveq	r2, #0
 8001b9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d113      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d06e      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d069      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd0:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bdc:	4b50      	ldr	r3, [pc, #320]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ad      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bec:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf8:	f7ff f8f8 	bl	8000dec <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f8f4 	bl	8000dec <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1e:	4b40      	ldr	r3, [pc, #256]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b40      	ldr	r3, [pc, #256]	@ (8001d24 <HAL_RCC_OscConfig+0x784>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c38:	0212      	lsls	r2, r2, #8
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c40:	0852      	lsrs	r2, r2, #1
 8001c42:	3a01      	subs	r2, #1
 8001c44:	0552      	lsls	r2, r2, #21
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c4c:	0852      	lsrs	r2, r2, #1
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	0652      	lsls	r2, r2, #25
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c58:	0912      	lsrs	r2, r2, #4
 8001c5a:	0452      	lsls	r2, r2, #17
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4930      	ldr	r1, [pc, #192]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c64:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2d      	ldr	r2, [pc, #180]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a2a      	ldr	r2, [pc, #168]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7c:	f7ff f8b6 	bl	8000dec <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f8b2 	bl	8000dec <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	e050      	b.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04f      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d148      	bne.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc0:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ccc:	f7ff f88e 	bl	8000dec <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f88a 	bl	8000dec <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e030      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x734>
 8001cf2:	e028      	b.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d023      	beq.n	8001d42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f871 	bl	8000dec <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	e00c      	b.n	8001d28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff f86d 	bl	8000dec <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d905      	bls.n	8001d28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e013      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_OscConfig+0x7b0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ec      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_OscConfig+0x7b0>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4905      	ldr	r1, [pc, #20]	@ (8001d50 <HAL_RCC_OscConfig+0x7b0>)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x7b4>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
 8001d40:	e001      	b.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	feeefffc 	.word	0xfeeefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e7      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b75      	ldr	r3, [pc, #468]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b72      	ldr	r3, [pc, #456]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4970      	ldr	r1, [pc, #448]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cf      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4960      	ldr	r1, [pc, #384]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04c      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b5a      	ldr	r3, [pc, #360]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0a6      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b54      	ldr	r3, [pc, #336]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e09a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e086      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4943      	ldr	r1, [pc, #268]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7fe ffd4 	bl	8000dec <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe ffd0 	bl	8000dec <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e06e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d210      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0207 	bic.w	r2, r3, #7
 8001eb4:	4923      	ldr	r1, [pc, #140]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4918      	ldr	r1, [pc, #96]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4910      	ldr	r1, [pc, #64]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 f824 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	490b      	ldr	r1, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff0b 	bl	8000d4c <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	080053c4 	.word	0x080053c4
 8001f50:	20000018 	.word	0x20000018
 8001f54:	2000001c 	.word	0x2000001c

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f8c:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d134      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xac>
 8001ffc:	e005      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e002      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0e5b      	lsrs	r3, r3, #25
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	080053dc 	.word	0x080053dc
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000018 	.word	0x20000018

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	080053d4 	.word	0x080053d4

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b8:	f7ff ffda 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	080053d4 	.word	0x080053d4

080020e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9ee 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	@ 0x58
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f9de 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002130:	d10b      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	@ 0x80
 8002136:	d919      	bls.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2ba0      	cmp	r3, #160	@ 0xa0
 800213c:	d902      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e013      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e010      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	@ 0x80
 800214e:	d902      	bls.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e00a      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	@ 0x80
 800215a:	d102      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e004      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b70      	cmp	r3, #112	@ 0x70
 8002166:	d101      	bne.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4909      	ldr	r1, [pc, #36]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800217c:	4b07      	ldr	r3, [pc, #28]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d041      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021c4:	d02a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021ca:	d824      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021d0:	d008      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021d6:	d81e      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e0:	d010      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021e2:	e018      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021e4:	4b86      	ldr	r3, [pc, #536]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a85      	ldr	r2, [pc, #532]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f0:	e015      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fabb 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002202:	e00c      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3320      	adds	r3, #32
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fba6 	bl	800295c <RCCEx_PLLSAI2_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002214:	e003      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	74fb      	strb	r3, [r7, #19]
      break;
 800221a:	e000      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800221c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002224:	4b76      	ldr	r3, [pc, #472]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002232:	4973      	ldr	r1, [pc, #460]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800223a:	e001      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d041      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002250:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002254:	d02a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002256:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800225a:	d824      	bhi.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800225c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002260:	d008      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002266:	d81e      	bhi.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002270:	d010      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002272:	e018      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002274:	4b62      	ldr	r3, [pc, #392]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a61      	ldr	r2, [pc, #388]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002280:	e015      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa73 	bl	8002774 <RCCEx_PLLSAI1_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002292:	e00c      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3320      	adds	r3, #32
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fb5e 	bl	800295c <RCCEx_PLLSAI2_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a4:	e003      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	74fb      	strb	r3, [r7, #19]
      break;
 80022aa:	e000      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022b4:	4b52      	ldr	r3, [pc, #328]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022c2:	494f      	ldr	r1, [pc, #316]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022ca:	e001      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a0 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022e2:	4b47      	ldr	r3, [pc, #284]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	4a40      	ldr	r2, [pc, #256]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	@ 0x58
 8002304:	4b3e      	ldr	r3, [pc, #248]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3a      	ldr	r2, [pc, #232]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002320:	f7fe fd64 	bl	8000dec <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002326:	e009      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe fd60 	bl	8000dec <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d902      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	74fb      	strb	r3, [r7, #19]
        break;
 800233a:	e005      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800233c:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d15c      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800234e:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002358:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01f      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	d019      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800236c:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002376:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002378:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237e:	4a20      	ldr	r2, [pc, #128]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238e:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002398:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fd1f 	bl	8000dec <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b0:	e00b      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fd1b 	bl	8000dec <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d902      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	74fb      	strb	r3, [r7, #19]
            break;
 80023c8:	e006      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ec      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ee:	4904      	ldr	r1, [pc, #16]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023f6:	e009      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
 80023fc:	e006      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240c:	7c7b      	ldrb	r3, [r7, #17]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b9e      	ldr	r3, [pc, #632]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002416:	4a9d      	ldr	r2, [pc, #628]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	4b98      	ldr	r3, [pc, #608]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002430:	f023 0203 	bic.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002438:	4994      	ldr	r1, [pc, #592]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800244c:	4b8f      	ldr	r3, [pc, #572]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 020c 	bic.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245a:	498c      	ldr	r1, [pc, #560]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800246e:	4b87      	ldr	r3, [pc, #540]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	4983      	ldr	r1, [pc, #524]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002490:	4b7e      	ldr	r3, [pc, #504]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	497b      	ldr	r1, [pc, #492]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024b2:	4b76      	ldr	r3, [pc, #472]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c0:	4972      	ldr	r1, [pc, #456]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024d4:	4b6d      	ldr	r3, [pc, #436]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	496a      	ldr	r1, [pc, #424]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f6:	4b65      	ldr	r3, [pc, #404]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	4961      	ldr	r1, [pc, #388]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002518:	4b5c      	ldr	r3, [pc, #368]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	4959      	ldr	r1, [pc, #356]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253a:	4b54      	ldr	r3, [pc, #336]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002548:	4950      	ldr	r1, [pc, #320]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800255c:	4b4b      	ldr	r3, [pc, #300]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	4948      	ldr	r1, [pc, #288]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800257e:	4b43      	ldr	r3, [pc, #268]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	493f      	ldr	r1, [pc, #252]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d028      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a0:	4b3a      	ldr	r3, [pc, #232]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ae:	4937      	ldr	r1, [pc, #220]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025be:	d106      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a31      	ldr	r2, [pc, #196]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ca:	60d3      	str	r3, [r2, #12]
 80025cc:	e011      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f8c8 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025fe:	4b23      	ldr	r3, [pc, #140]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	491f      	ldr	r1, [pc, #124]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800261c:	d106      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261e:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a1a      	ldr	r2, [pc, #104]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
 800262a:	e011      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002630:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002634:	d10c      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f899 	bl	8002774 <RCCEx_PLLSAI1_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02b      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266a:	4908      	ldr	r1, [pc, #32]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267a:	d109      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a02      	ldr	r2, [pc, #8]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	e014      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002694:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f867 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02f      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ce:	4928      	ldr	r1, [pc, #160]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026de:	d10d      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	2102      	movs	r1, #2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f844 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d014      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
 80026fa:	e011      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002704:	d10c      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3320      	adds	r3, #32
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f925 	bl	800295c <RCCEx_PLLSAI2_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800272c:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800273a:	490d      	ldr	r1, [pc, #52]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800275e:	4904      	ldr	r1, [pc, #16]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002766:	7cbb      	ldrb	r3, [r7, #18]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002782:	4b75      	ldr	r3, [pc, #468]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800278e:	4b72      	ldr	r3, [pc, #456]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10d      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
       ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
       ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d047      	beq.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d018      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x86>
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d825      	bhi.n	8002818 <RCCEx_PLLSAI1_Config+0xa4>
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x62>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d009      	beq.n	80027e8 <RCCEx_PLLSAI1_Config+0x74>
 80027d4:	e020      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d6:	4b60      	ldr	r3, [pc, #384]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e01a      	b.n	800281e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e013      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fa:	4b57      	ldr	r3, [pc, #348]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002806:	4b54      	ldr	r3, [pc, #336]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002816:	e006      	b.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e004      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002826:	bf00      	nop
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282e:	4b4a      	ldr	r3, [pc, #296]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	430b      	orrs	r3, r1
 8002844:	4944      	ldr	r1, [pc, #272]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d17d      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002850:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a40      	ldr	r2, [pc, #256]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe fac6 	bl	8000dec <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002864:	f7fe fac2 	bl	8000dec <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e005      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002878:	4b37      	ldr	r3, [pc, #220]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ef      	bne.n	8002864 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d160      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002890:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	0211      	lsls	r1, r2, #8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	0912      	lsrs	r2, r2, #4
 80028a8:	0452      	lsls	r2, r2, #17
 80028aa:	430a      	orrs	r2, r1
 80028ac:	492a      	ldr	r1, [pc, #168]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	610b      	str	r3, [r1, #16]
 80028b2:	e027      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d112      	bne.n	80028e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ba:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6892      	ldr	r2, [r2, #8]
 80028ca:	0211      	lsls	r1, r2, #8
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6912      	ldr	r2, [r2, #16]
 80028d0:	0852      	lsrs	r2, r2, #1
 80028d2:	3a01      	subs	r2, #1
 80028d4:	0552      	lsls	r2, r2, #21
 80028d6:	430a      	orrs	r2, r1
 80028d8:	491f      	ldr	r1, [pc, #124]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	610b      	str	r3, [r1, #16]
 80028de:	e011      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6892      	ldr	r2, [r2, #8]
 80028f0:	0211      	lsls	r1, r2, #8
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6952      	ldr	r2, [r2, #20]
 80028f6:	0852      	lsrs	r2, r2, #1
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0652      	lsls	r2, r2, #25
 80028fc:	430a      	orrs	r2, r1
 80028fe:	4916      	ldr	r1, [pc, #88]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002904:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800290e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fa6c 	bl	8000dec <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002916:	e009      	b.n	800292c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002918:	f7fe fa68 	bl	8000dec <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d902      	bls.n	800292c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	73fb      	strb	r3, [r7, #15]
          break;
 800292a:	e005      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4904      	ldr	r1, [pc, #16]	@ (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800296a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d018      	beq.n	80029a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002976:	4b67      	ldr	r3, [pc, #412]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0203 	and.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d10d      	bne.n	80029a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
       ||
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800298e:	4b61      	ldr	r3, [pc, #388]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
       ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d047      	beq.n	8002a32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e044      	b.n	8002a32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d018      	beq.n	80029e2 <RCCEx_PLLSAI2_Config+0x86>
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d825      	bhi.n	8002a00 <RCCEx_PLLSAI2_Config+0xa4>
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d002      	beq.n	80029be <RCCEx_PLLSAI2_Config+0x62>
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d009      	beq.n	80029d0 <RCCEx_PLLSAI2_Config+0x74>
 80029bc:	e020      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029be:	4b55      	ldr	r3, [pc, #340]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ce:	e01a      	b.n	8002a06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d116      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e013      	b.n	8002a0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ee:	4b49      	ldr	r3, [pc, #292]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029fe:	e006      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e004      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a06:	bf00      	nop
 8002a08:	e002      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a16:	4b3f      	ldr	r3, [pc, #252]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	4939      	ldr	r1, [pc, #228]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d167      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a38:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a35      	ldr	r2, [pc, #212]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe f9d2 	bl	8000dec <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a4a:	e009      	b.n	8002a60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a4c:	f7fe f9ce 	bl	8000dec <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a5e:	e005      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a60:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ef      	bne.n	8002a4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d14a      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d111      	bne.n	8002a9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a78:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6892      	ldr	r2, [r2, #8]
 8002a88:	0211      	lsls	r1, r2, #8
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	0912      	lsrs	r2, r2, #4
 8002a90:	0452      	lsls	r2, r2, #17
 8002a92:	430a      	orrs	r2, r1
 8002a94:	491f      	ldr	r1, [pc, #124]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	614b      	str	r3, [r1, #20]
 8002a9a:	e011      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002aa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	0211      	lsls	r1, r2, #8
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6912      	ldr	r2, [r2, #16]
 8002ab2:	0852      	lsrs	r2, r2, #1
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	0652      	lsls	r2, r2, #25
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe f98e 	bl	8000dec <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad2:	e009      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ad4:	f7fe f98a 	bl	8000dec <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d902      	bls.n	8002ae8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae6:	e005      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4904      	ldr	r1, [pc, #16]	@ (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e040      	b.n	8002bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd ff62 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	@ 0x24
 8002b44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 ff30 	bl	80039c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fc75 	bl	8003454 <UART_SetConfig>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e01b      	b.n	8002bac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 ffaf 	bl	8003b08 <UART_CheckIdleState>
 8002baa:	4603      	mov	r3, r0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	@ 0x28
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d177      	bne.n	8002cbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_UART_Transmit+0x24>
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e070      	b.n	8002cbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2221      	movs	r2, #33	@ 0x21
 8002be8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bea:	f7fe f8ff 	bl	8000dec <HAL_GetTick>
 8002bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c08:	d108      	bne.n	8002c1c <HAL_UART_Transmit+0x68>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e003      	b.n	8002c24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c24:	e02f      	b.n	8002c86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2180      	movs	r1, #128	@ 0x80
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f001 f811 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e03b      	b.n	8002cbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e007      	b.n	8002c74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1c9      	bne.n	8002c26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2140      	movs	r1, #64	@ 0x40
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 ffdb 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d004      	beq.n	8002cb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e005      	b.n	8002cbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b08b      	sub	sp, #44	@ 0x2c
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d147      	bne.n	8002d6e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_UART_Transmit_IT+0x22>
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e040      	b.n	8002d70 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	@ 0x21
 8002d16:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d20:	d107      	bne.n	8002d32 <HAL_UART_Transmit_IT+0x6a>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <HAL_UART_Transmit_IT+0xb4>)
 8002d2e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002d30:	e002      	b.n	8002d38 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <HAL_UART_Transmit_IT+0xb8>)
 8002d36:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	613b      	str	r3, [r7, #16]
   return(result);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	69f9      	ldr	r1, [r7, #28]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e6      	bne.n	8002d38 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	372c      	adds	r7, #44	@ 0x2c
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	0800406b 	.word	0x0800406b
 8002d80:	08003fb5 	.word	0x08003fb5

08002d84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d137      	bne.n	8002e0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_UART_Receive_IT+0x24>
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e030      	b.n	8002e0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <HAL_UART_Receive_IT+0x94>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01f      	beq.n	8002dfc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	69f9      	ldr	r1, [r7, #28]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e6      	bne.n	8002dca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 ff96 	bl	8003d34 <UART_Start_Receive_IT>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	e000      	b.n	8002e0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40008000 	.word	0x40008000

08002e1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002e46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d115      	bne.n	8002e84 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00f      	beq.n	8002e84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 82ca 	beq.w	800340e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
      }
      return;
 8002e82:	e2c4      	b.n	800340e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8117 	beq.w	80030bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002e9e:	4b85      	ldr	r3, [pc, #532]	@ (80030b4 <HAL_UART_IRQHandler+0x298>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 810a 	beq.w	80030bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d011      	beq.n	8002ed8 <HAL_UART_IRQHandler+0xbc>
 8002eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d011      	beq.n	8002f08 <HAL_UART_IRQHandler+0xec>
 8002ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <HAL_UART_IRQHandler+0x11c>
 8002f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2e:	f043 0202 	orr.w	r2, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2208      	movs	r2, #8
 8002f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f6a:	f043 0208 	orr.w	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d012      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x18a>
 8002f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8230 	beq.w	8003412 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b40      	cmp	r3, #64	@ 0x40
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04f      	beq.n	800309e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 ff5e 	bl	8003ec0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d141      	bne.n	8003096 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3308      	adds	r3, #8
 8003018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800302c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800303e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800304a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1d9      	bne.n	8003012 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003062:	2b00      	cmp	r3, #0
 8003064:	d013      	beq.n	800308e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306a:	4a13      	ldr	r2, [pc, #76]	@ (80030b8 <HAL_UART_IRQHandler+0x29c>)
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f815 	bl	80010a2 <HAL_DMA_Abort_IT>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d017      	beq.n	80030ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e00f      	b.n	80030ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9ca 	bl	8003428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e00b      	b.n	80030ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9c6 	bl	8003428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e007      	b.n	80030ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9c2 	bl	8003428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80030ac:	e1b1      	b.n	8003412 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ae:	bf00      	nop
    return;
 80030b0:	e1af      	b.n	8003412 <HAL_UART_IRQHandler+0x5f6>
 80030b2:	bf00      	nop
 80030b4:	04000120 	.word	0x04000120
 80030b8:	08003f89 	.word	0x08003f89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 816a 	bne.w	800339a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8163 	beq.w	800339a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 815c 	beq.w	800339a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b40      	cmp	r3, #64	@ 0x40
 80030f6:	f040 80d4 	bne.w	80032a2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003106:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80ad 	beq.w	800326a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800311a:	429a      	cmp	r2, r3
 800311c:	f080 80a5 	bcs.w	800326a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003126:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 8086 	bne.w	8003248 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800316a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1da      	bne.n	800313c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3308      	adds	r3, #8
 800318c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3308      	adds	r3, #8
 80031a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e1      	bne.n	8003186 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3308      	adds	r3, #8
 80031e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e3      	bne.n	80031c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003218:	f023 0310 	bic.w	r3, r3, #16
 800321c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800322a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800322c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e4      	bne.n	8003208 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd feef 	bl	8001026 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800325a:	b29b      	uxth	r3, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	b29b      	uxth	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8ea 	bl	800343c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003268:	e0d5      	b.n	8003416 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 80ce 	bne.w	8003416 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 80c5 	bne.w	8003416 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8ce 	bl	800343c <HAL_UARTEx_RxEventCallback>
      return;
 80032a0:	e0b9      	b.n	8003416 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80ab 	beq.w	800341a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80032c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a6 	beq.w	800341a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e4      	bne.n	80032ce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3308      	adds	r3, #8
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	623b      	str	r3, [r7, #32]
   return(result);
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3308      	adds	r3, #8
 8003324:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003328:	633a      	str	r2, [r7, #48]	@ 0x30
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800332e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e3      	bne.n	8003304 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	60fb      	str	r3, [r7, #12]
   return(result);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f023 0310 	bic.w	r3, r3, #16
 8003364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	617b      	str	r3, [r7, #20]
   return(result);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e4      	bne.n	8003350 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800338c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f852 	bl	800343c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003398:	e03f      	b.n	800341a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800339a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <HAL_UART_IRQHandler+0x5a8>
 80033a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80033ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f001 f89b 	bl	80044f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033c2:	e02d      	b.n	8003420 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01c      	beq.n	800341e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
    }
    return;
 80033ec:	e017      	b.n	800341e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d012      	beq.n	8003420 <HAL_UART_IRQHandler+0x604>
 80033fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fe8f 	bl	800412a <UART_EndTransmit_IT>
    return;
 800340c:	e008      	b.n	8003420 <HAL_UART_IRQHandler+0x604>
      return;
 800340e:	bf00      	nop
 8003410:	e006      	b.n	8003420 <HAL_UART_IRQHandler+0x604>
    return;
 8003412:	bf00      	nop
 8003414:	e004      	b.n	8003420 <HAL_UART_IRQHandler+0x604>
      return;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <HAL_UART_IRQHandler+0x604>
      return;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_UART_IRQHandler+0x604>
    return;
 800341e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003420:	37e8      	adds	r7, #232	@ 0xe8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003458:	b08a      	sub	sp, #40	@ 0x28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4ba4      	ldr	r3, [pc, #656]	@ (8003714 <UART_SetConfig+0x2c0>)
 8003484:	4013      	ands	r3, r2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a99      	ldr	r2, [pc, #612]	@ (8003718 <UART_SetConfig+0x2c4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034bc:	4313      	orrs	r3, r2
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	430a      	orrs	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a90      	ldr	r2, [pc, #576]	@ (800371c <UART_SetConfig+0x2c8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d126      	bne.n	800352c <UART_SetConfig+0xd8>
 80034de:	4b90      	ldr	r3, [pc, #576]	@ (8003720 <UART_SetConfig+0x2cc>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d81b      	bhi.n	8003524 <UART_SetConfig+0xd0>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <UART_SetConfig+0xa0>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003515 	.word	0x08003515
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	0800351d 	.word	0x0800351d
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350a:	e116      	b.n	800373a <UART_SetConfig+0x2e6>
 800350c:	2302      	movs	r3, #2
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e112      	b.n	800373a <UART_SetConfig+0x2e6>
 8003514:	2304      	movs	r3, #4
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e10e      	b.n	800373a <UART_SetConfig+0x2e6>
 800351c:	2308      	movs	r3, #8
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e10a      	b.n	800373a <UART_SetConfig+0x2e6>
 8003524:	2310      	movs	r3, #16
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e106      	b.n	800373a <UART_SetConfig+0x2e6>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7c      	ldr	r2, [pc, #496]	@ (8003724 <UART_SetConfig+0x2d0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d138      	bne.n	80035a8 <UART_SetConfig+0x154>
 8003536:	4b7a      	ldr	r3, [pc, #488]	@ (8003720 <UART_SetConfig+0x2cc>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d82d      	bhi.n	80035a0 <UART_SetConfig+0x14c>
 8003544:	a201      	add	r2, pc, #4	@ (adr r2, 800354c <UART_SetConfig+0xf8>)
 8003546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354a:	bf00      	nop
 800354c:	08003581 	.word	0x08003581
 8003550:	080035a1 	.word	0x080035a1
 8003554:	080035a1 	.word	0x080035a1
 8003558:	080035a1 	.word	0x080035a1
 800355c:	08003591 	.word	0x08003591
 8003560:	080035a1 	.word	0x080035a1
 8003564:	080035a1 	.word	0x080035a1
 8003568:	080035a1 	.word	0x080035a1
 800356c:	08003589 	.word	0x08003589
 8003570:	080035a1 	.word	0x080035a1
 8003574:	080035a1 	.word	0x080035a1
 8003578:	080035a1 	.word	0x080035a1
 800357c:	08003599 	.word	0x08003599
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003586:	e0d8      	b.n	800373a <UART_SetConfig+0x2e6>
 8003588:	2302      	movs	r3, #2
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358e:	e0d4      	b.n	800373a <UART_SetConfig+0x2e6>
 8003590:	2304      	movs	r3, #4
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e0d0      	b.n	800373a <UART_SetConfig+0x2e6>
 8003598:	2308      	movs	r3, #8
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359e:	e0cc      	b.n	800373a <UART_SetConfig+0x2e6>
 80035a0:	2310      	movs	r3, #16
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e0c8      	b.n	800373a <UART_SetConfig+0x2e6>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003728 <UART_SetConfig+0x2d4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d125      	bne.n	80035fe <UART_SetConfig+0x1aa>
 80035b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <UART_SetConfig+0x2cc>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035bc:	2b30      	cmp	r3, #48	@ 0x30
 80035be:	d016      	beq.n	80035ee <UART_SetConfig+0x19a>
 80035c0:	2b30      	cmp	r3, #48	@ 0x30
 80035c2:	d818      	bhi.n	80035f6 <UART_SetConfig+0x1a2>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d00a      	beq.n	80035de <UART_SetConfig+0x18a>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d814      	bhi.n	80035f6 <UART_SetConfig+0x1a2>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <UART_SetConfig+0x182>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d008      	beq.n	80035e6 <UART_SetConfig+0x192>
 80035d4:	e00f      	b.n	80035f6 <UART_SetConfig+0x1a2>
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035dc:	e0ad      	b.n	800373a <UART_SetConfig+0x2e6>
 80035de:	2302      	movs	r3, #2
 80035e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e4:	e0a9      	b.n	800373a <UART_SetConfig+0x2e6>
 80035e6:	2304      	movs	r3, #4
 80035e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ec:	e0a5      	b.n	800373a <UART_SetConfig+0x2e6>
 80035ee:	2308      	movs	r3, #8
 80035f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f4:	e0a1      	b.n	800373a <UART_SetConfig+0x2e6>
 80035f6:	2310      	movs	r3, #16
 80035f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fc:	e09d      	b.n	800373a <UART_SetConfig+0x2e6>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a4a      	ldr	r2, [pc, #296]	@ (800372c <UART_SetConfig+0x2d8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <UART_SetConfig+0x200>
 8003608:	4b45      	ldr	r3, [pc, #276]	@ (8003720 <UART_SetConfig+0x2cc>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003612:	2bc0      	cmp	r3, #192	@ 0xc0
 8003614:	d016      	beq.n	8003644 <UART_SetConfig+0x1f0>
 8003616:	2bc0      	cmp	r3, #192	@ 0xc0
 8003618:	d818      	bhi.n	800364c <UART_SetConfig+0x1f8>
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d00a      	beq.n	8003634 <UART_SetConfig+0x1e0>
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d814      	bhi.n	800364c <UART_SetConfig+0x1f8>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <UART_SetConfig+0x1d8>
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	d008      	beq.n	800363c <UART_SetConfig+0x1e8>
 800362a:	e00f      	b.n	800364c <UART_SetConfig+0x1f8>
 800362c:	2300      	movs	r3, #0
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003632:	e082      	b.n	800373a <UART_SetConfig+0x2e6>
 8003634:	2302      	movs	r3, #2
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800363a:	e07e      	b.n	800373a <UART_SetConfig+0x2e6>
 800363c:	2304      	movs	r3, #4
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003642:	e07a      	b.n	800373a <UART_SetConfig+0x2e6>
 8003644:	2308      	movs	r3, #8
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364a:	e076      	b.n	800373a <UART_SetConfig+0x2e6>
 800364c:	2310      	movs	r3, #16
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003652:	e072      	b.n	800373a <UART_SetConfig+0x2e6>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a35      	ldr	r2, [pc, #212]	@ (8003730 <UART_SetConfig+0x2dc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d12a      	bne.n	80036b4 <UART_SetConfig+0x260>
 800365e:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <UART_SetConfig+0x2cc>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003668:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800366c:	d01a      	beq.n	80036a4 <UART_SetConfig+0x250>
 800366e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003672:	d81b      	bhi.n	80036ac <UART_SetConfig+0x258>
 8003674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003678:	d00c      	beq.n	8003694 <UART_SetConfig+0x240>
 800367a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367e:	d815      	bhi.n	80036ac <UART_SetConfig+0x258>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <UART_SetConfig+0x238>
 8003684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003688:	d008      	beq.n	800369c <UART_SetConfig+0x248>
 800368a:	e00f      	b.n	80036ac <UART_SetConfig+0x258>
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003692:	e052      	b.n	800373a <UART_SetConfig+0x2e6>
 8003694:	2302      	movs	r3, #2
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369a:	e04e      	b.n	800373a <UART_SetConfig+0x2e6>
 800369c:	2304      	movs	r3, #4
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a2:	e04a      	b.n	800373a <UART_SetConfig+0x2e6>
 80036a4:	2308      	movs	r3, #8
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036aa:	e046      	b.n	800373a <UART_SetConfig+0x2e6>
 80036ac:	2310      	movs	r3, #16
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b2:	e042      	b.n	800373a <UART_SetConfig+0x2e6>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <UART_SetConfig+0x2c4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d13a      	bne.n	8003734 <UART_SetConfig+0x2e0>
 80036be:	4b18      	ldr	r3, [pc, #96]	@ (8003720 <UART_SetConfig+0x2cc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036cc:	d01a      	beq.n	8003704 <UART_SetConfig+0x2b0>
 80036ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d2:	d81b      	bhi.n	800370c <UART_SetConfig+0x2b8>
 80036d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d8:	d00c      	beq.n	80036f4 <UART_SetConfig+0x2a0>
 80036da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036de:	d815      	bhi.n	800370c <UART_SetConfig+0x2b8>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <UART_SetConfig+0x298>
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e8:	d008      	beq.n	80036fc <UART_SetConfig+0x2a8>
 80036ea:	e00f      	b.n	800370c <UART_SetConfig+0x2b8>
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f2:	e022      	b.n	800373a <UART_SetConfig+0x2e6>
 80036f4:	2302      	movs	r3, #2
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fa:	e01e      	b.n	800373a <UART_SetConfig+0x2e6>
 80036fc:	2304      	movs	r3, #4
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003702:	e01a      	b.n	800373a <UART_SetConfig+0x2e6>
 8003704:	2308      	movs	r3, #8
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370a:	e016      	b.n	800373a <UART_SetConfig+0x2e6>
 800370c:	2310      	movs	r3, #16
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003712:	e012      	b.n	800373a <UART_SetConfig+0x2e6>
 8003714:	efff69f3 	.word	0xefff69f3
 8003718:	40008000 	.word	0x40008000
 800371c:	40013800 	.word	0x40013800
 8003720:	40021000 	.word	0x40021000
 8003724:	40004400 	.word	0x40004400
 8003728:	40004800 	.word	0x40004800
 800372c:	40004c00 	.word	0x40004c00
 8003730:	40005000 	.word	0x40005000
 8003734:	2310      	movs	r3, #16
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a9f      	ldr	r2, [pc, #636]	@ (80039bc <UART_SetConfig+0x568>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d17a      	bne.n	800383a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003748:	2b08      	cmp	r3, #8
 800374a:	d824      	bhi.n	8003796 <UART_SetConfig+0x342>
 800374c:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <UART_SetConfig+0x300>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003779 	.word	0x08003779
 8003758:	08003797 	.word	0x08003797
 800375c:	08003781 	.word	0x08003781
 8003760:	08003797 	.word	0x08003797
 8003764:	08003787 	.word	0x08003787
 8003768:	08003797 	.word	0x08003797
 800376c:	08003797 	.word	0x08003797
 8003770:	08003797 	.word	0x08003797
 8003774:	0800378f 	.word	0x0800378f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003778:	f7fe fc86 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 800377c:	61f8      	str	r0, [r7, #28]
        break;
 800377e:	e010      	b.n	80037a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003780:	4b8f      	ldr	r3, [pc, #572]	@ (80039c0 <UART_SetConfig+0x56c>)
 8003782:	61fb      	str	r3, [r7, #28]
        break;
 8003784:	e00d      	b.n	80037a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7fe fbe7 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800378a:	61f8      	str	r0, [r7, #28]
        break;
 800378c:	e009      	b.n	80037a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003792:	61fb      	str	r3, [r7, #28]
        break;
 8003794:	e005      	b.n	80037a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80fb 	beq.w	80039a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d305      	bcc.n	80037c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d903      	bls.n	80037ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037cc:	e0e8      	b.n	80039a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2200      	movs	r2, #0
 80037d2:	461c      	mov	r4, r3
 80037d4:	4615      	mov	r5, r2
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	022b      	lsls	r3, r5, #8
 80037e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037e4:	0222      	lsls	r2, r4, #8
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	6849      	ldr	r1, [r1, #4]
 80037ea:	0849      	lsrs	r1, r1, #1
 80037ec:	2000      	movs	r0, #0
 80037ee:	4688      	mov	r8, r1
 80037f0:	4681      	mov	r9, r0
 80037f2:	eb12 0a08 	adds.w	sl, r2, r8
 80037f6:	eb43 0b09 	adc.w	fp, r3, r9
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003808:	4650      	mov	r0, sl
 800380a:	4659      	mov	r1, fp
 800380c:	f7fc fd48 	bl	80002a0 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381e:	d308      	bcc.n	8003832 <UART_SetConfig+0x3de>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003826:	d204      	bcs.n	8003832 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	e0b6      	b.n	80039a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003838:	e0b2      	b.n	80039a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003842:	d15e      	bne.n	8003902 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003844:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003848:	2b08      	cmp	r3, #8
 800384a:	d828      	bhi.n	800389e <UART_SetConfig+0x44a>
 800384c:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <UART_SetConfig+0x400>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003879 	.word	0x08003879
 8003858:	08003881 	.word	0x08003881
 800385c:	08003889 	.word	0x08003889
 8003860:	0800389f 	.word	0x0800389f
 8003864:	0800388f 	.word	0x0800388f
 8003868:	0800389f 	.word	0x0800389f
 800386c:	0800389f 	.word	0x0800389f
 8003870:	0800389f 	.word	0x0800389f
 8003874:	08003897 	.word	0x08003897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7fe fc06 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 800387c:	61f8      	str	r0, [r7, #28]
        break;
 800387e:	e014      	b.n	80038aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7fe fc18 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003884:	61f8      	str	r0, [r7, #28]
        break;
 8003886:	e010      	b.n	80038aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003888:	4b4d      	ldr	r3, [pc, #308]	@ (80039c0 <UART_SetConfig+0x56c>)
 800388a:	61fb      	str	r3, [r7, #28]
        break;
 800388c:	e00d      	b.n	80038aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388e:	f7fe fb63 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8003892:	61f8      	str	r0, [r7, #28]
        break;
 8003894:	e009      	b.n	80038aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800389a:	61fb      	str	r3, [r7, #28]
        break;
 800389c:	e005      	b.n	80038aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d077      	beq.n	80039a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005a      	lsls	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d916      	bls.n	80038fa <UART_SetConfig+0x4a6>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d2:	d212      	bcs.n	80038fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f023 030f 	bic.w	r3, r3, #15
 80038dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	8afa      	ldrh	r2, [r7, #22]
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	e052      	b.n	80039a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003900:	e04e      	b.n	80039a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003902:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003906:	2b08      	cmp	r3, #8
 8003908:	d827      	bhi.n	800395a <UART_SetConfig+0x506>
 800390a:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <UART_SetConfig+0x4bc>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003935 	.word	0x08003935
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003945 	.word	0x08003945
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7fe fba8 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8003938:	61f8      	str	r0, [r7, #28]
        break;
 800393a:	e014      	b.n	8003966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7fe fbba 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003940:	61f8      	str	r0, [r7, #28]
        break;
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b1e      	ldr	r3, [pc, #120]	@ (80039c0 <UART_SetConfig+0x56c>)
 8003946:	61fb      	str	r3, [r7, #28]
        break;
 8003948:	e00d      	b.n	8003966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fb05 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800394e:	61f8      	str	r0, [r7, #28]
        break;
 8003950:	e009      	b.n	8003966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	61fb      	str	r3, [r7, #28]
        break;
 8003958:	e005      	b.n	8003966 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003964:	bf00      	nop
    }

    if (pclk != 0U)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d019      	beq.n	80039a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	085a      	lsrs	r2, r3, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	441a      	add	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d909      	bls.n	800399a <UART_SetConfig+0x546>
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398c:	d205      	bcs.n	800399a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e002      	b.n	80039a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ba:	bf00      	nop
 80039bc:	40008000 	.word	0x40008000
 80039c0:	00f42400 	.word	0x00f42400

080039c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01a      	beq.n	8003ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac2:	d10a      	bne.n	8003ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b098      	sub	sp, #96	@ 0x60
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b18:	f7fd f968 	bl	8000dec <HAL_GetTick>
 8003b1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d12e      	bne.n	8003b8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f88c 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d021      	beq.n	8003b8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e062      	b.n	8003c50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d149      	bne.n	8003c2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f856 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03c      	beq.n	8003c2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e6      	bne.n	8003bb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c04:	61fa      	str	r2, [r7, #28]
 8003c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	617b      	str	r3, [r7, #20]
   return(result);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e011      	b.n	8003c50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3758      	adds	r7, #88	@ 0x58
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	e04f      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d04b      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fd f8bb 	bl	8000dec <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e04e      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d037      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b80      	cmp	r3, #128	@ 0x80
 8003c9e:	d034      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d031      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d110      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8ff 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e029      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce4:	d111      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f8e5 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00f      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d0a0      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b097      	sub	sp, #92	@ 0x5c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d66:	d10e      	bne.n	8003d86 <UART_Start_Receive_IT+0x52>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <UART_Start_Receive_IT+0x48>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003d76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d7a:	e02d      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	22ff      	movs	r2, #255	@ 0xff
 8003d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d84:	e028      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <UART_Start_Receive_IT+0x76>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <UART_Start_Receive_IT+0x6c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	22ff      	movs	r2, #255	@ 0xff
 8003d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d9e:	e01b      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	227f      	movs	r2, #127	@ 0x7f
 8003da4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003da8:	e016      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003db2:	d10d      	bne.n	8003dd0 <UART_Start_Receive_IT+0x9c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <UART_Start_Receive_IT+0x92>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	227f      	movs	r2, #127	@ 0x7f
 8003dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003dc4:	e008      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	223f      	movs	r2, #63	@ 0x3f
 8003dca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003dce:	e003      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2222      	movs	r2, #34	@ 0x22
 8003de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003e0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e24:	d107      	bne.n	8003e36 <UART_Start_Receive_IT+0x102>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <UART_Start_Receive_IT+0x184>)
 8003e32:	669a      	str	r2, [r3, #104]	@ 0x68
 8003e34:	e002      	b.n	8003e3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a20      	ldr	r2, [pc, #128]	@ (8003ebc <UART_Start_Receive_IT+0x188>)
 8003e3a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d019      	beq.n	8003e78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e64:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e6      	bne.n	8003e44 <UART_Start_Receive_IT+0x110>
 8003e76:	e018      	b.n	8003eaa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	375c      	adds	r7, #92	@ 0x5c
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	0800433d 	.word	0x0800433d
 8003ebc:	08004181 	.word	0x08004181

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b095      	sub	sp, #84	@ 0x54
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f7c:	bf00      	nop
 8003f7e:	3754      	adds	r7, #84	@ 0x54
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff fa3e 	bl	8003428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b08f      	sub	sp, #60	@ 0x3c
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fc0:	2b21      	cmp	r3, #33	@ 0x21
 8003fc2:	d14c      	bne.n	800405e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d132      	bne.n	8004036 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004034:	e013      	b.n	800405e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800405e:	bf00      	nop
 8004060:	373c      	adds	r7, #60	@ 0x3c
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800406a:	b480      	push	{r7}
 800406c:	b091      	sub	sp, #68	@ 0x44
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004076:	2b21      	cmp	r3, #33	@ 0x21
 8004078:	d151      	bne.n	800411e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d132      	bne.n	80040ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	623b      	str	r3, [r7, #32]
   return(result);
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e6      	bne.n	8004086 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	617b      	str	r3, [r7, #20]
   return(result);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e6      	bne.n	80040b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80040ea:	e018      	b.n	800411e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80040f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f4:	881a      	ldrh	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fe:	b292      	uxth	r2, r2
 8004100:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	1c9a      	adds	r2, r3, #2
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800411e:	bf00      	nop
 8004120:	3744      	adds	r7, #68	@ 0x44
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6979      	ldr	r1, [r7, #20]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	613b      	str	r3, [r7, #16]
   return(result);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fc fac7 	bl	8000704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004176:	bf00      	nop
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b09c      	sub	sp, #112	@ 0x70
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800418e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004198:	2b22      	cmp	r3, #34	@ 0x22
 800419a:	f040 80be 	bne.w	800431a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80041a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041ac:	b2d9      	uxtb	r1, r3
 80041ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b8:	400a      	ands	r2, r1
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 80a3 	bne.w	800432e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004208:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800420c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e6      	bne.n	80041e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	667b      	str	r3, [r7, #100]	@ 0x64
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800423a:	647a      	str	r2, [r7, #68]	@ 0x44
 800423c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a34      	ldr	r2, [pc, #208]	@ (8004338 <UART_RxISR_8BIT+0x1b8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d01f      	beq.n	80042ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	623b      	str	r3, [r7, #32]
   return(result);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800428e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
 800429a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800429e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e6      	bne.n	800427a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d12e      	bne.n	8004312 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	617b      	str	r3, [r7, #20]
   return(result);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e6      	bne.n	80042ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d103      	bne.n	8004302 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff f896 	bl	800343c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004310:	e00d      	b.n	800432e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc fa06 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8004318:	e009      	b.n	800432e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	8b1b      	ldrh	r3, [r3, #24]
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	b292      	uxth	r2, r2
 800432c:	831a      	strh	r2, [r3, #24]
}
 800432e:	bf00      	nop
 8004330:	3770      	adds	r7, #112	@ 0x70
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40008000 	.word	0x40008000

0800433c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b09c      	sub	sp, #112	@ 0x70
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800434a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004354:	2b22      	cmp	r3, #34	@ 0x22
 8004356:	f040 80be 	bne.w	80044d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004360:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004368:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800436a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800436e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004372:	4013      	ands	r3, r2
 8004374:	b29a      	uxth	r2, r3
 8004376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 80a3 	bne.w	80044ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80043b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80043c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80043d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e6      	bne.n	80043a4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80043f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a34      	ldr	r2, [pc, #208]	@ (80044f4 <UART_RxISR_16BIT+0x1b8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01f      	beq.n	8004468 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	61fb      	str	r3, [r7, #28]
   return(result);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800444a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e6      	bne.n	8004436 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446c:	2b01      	cmp	r3, #1
 800446e:	d12e      	bne.n	80044ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60bb      	str	r3, [r7, #8]
   return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	613b      	str	r3, [r7, #16]
   return(result);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d103      	bne.n	80044be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fe ffb8 	bl	800343c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044cc:	e00d      	b.n	80044ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc f928 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 80044d4:	e009      	b.n	80044ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	8b1b      	ldrh	r3, [r3, #24]
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	b292      	uxth	r2, r2
 80044e8:	831a      	strh	r2, [r3, #24]
}
 80044ea:	bf00      	nop
 80044ec:	3770      	adds	r7, #112	@ 0x70
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40008000 	.word	0x40008000

080044f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <std>:
 800450c:	2300      	movs	r3, #0
 800450e:	b510      	push	{r4, lr}
 8004510:	4604      	mov	r4, r0
 8004512:	e9c0 3300 	strd	r3, r3, [r0]
 8004516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800451a:	6083      	str	r3, [r0, #8]
 800451c:	8181      	strh	r1, [r0, #12]
 800451e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004520:	81c2      	strh	r2, [r0, #14]
 8004522:	6183      	str	r3, [r0, #24]
 8004524:	4619      	mov	r1, r3
 8004526:	2208      	movs	r2, #8
 8004528:	305c      	adds	r0, #92	@ 0x5c
 800452a:	f000 f906 	bl	800473a <memset>
 800452e:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <std+0x58>)
 8004530:	6263      	str	r3, [r4, #36]	@ 0x24
 8004532:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <std+0x5c>)
 8004534:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004536:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <std+0x60>)
 8004538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800453a:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <std+0x64>)
 800453c:	6323      	str	r3, [r4, #48]	@ 0x30
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <std+0x68>)
 8004540:	6224      	str	r4, [r4, #32]
 8004542:	429c      	cmp	r4, r3
 8004544:	d006      	beq.n	8004554 <std+0x48>
 8004546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800454a:	4294      	cmp	r4, r2
 800454c:	d002      	beq.n	8004554 <std+0x48>
 800454e:	33d0      	adds	r3, #208	@ 0xd0
 8004550:	429c      	cmp	r4, r3
 8004552:	d105      	bne.n	8004560 <std+0x54>
 8004554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800455c:	f000 b966 	b.w	800482c <__retarget_lock_init_recursive>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	bf00      	nop
 8004564:	080046b5 	.word	0x080046b5
 8004568:	080046d7 	.word	0x080046d7
 800456c:	0800470f 	.word	0x0800470f
 8004570:	08004733 	.word	0x08004733
 8004574:	20000198 	.word	0x20000198

08004578 <stdio_exit_handler>:
 8004578:	4a02      	ldr	r2, [pc, #8]	@ (8004584 <stdio_exit_handler+0xc>)
 800457a:	4903      	ldr	r1, [pc, #12]	@ (8004588 <stdio_exit_handler+0x10>)
 800457c:	4803      	ldr	r0, [pc, #12]	@ (800458c <stdio_exit_handler+0x14>)
 800457e:	f000 b869 	b.w	8004654 <_fwalk_sglue>
 8004582:	bf00      	nop
 8004584:	20000024 	.word	0x20000024
 8004588:	080050cd 	.word	0x080050cd
 800458c:	20000034 	.word	0x20000034

08004590 <cleanup_stdio>:
 8004590:	6841      	ldr	r1, [r0, #4]
 8004592:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <cleanup_stdio+0x34>)
 8004594:	4299      	cmp	r1, r3
 8004596:	b510      	push	{r4, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	d001      	beq.n	80045a0 <cleanup_stdio+0x10>
 800459c:	f000 fd96 	bl	80050cc <_fflush_r>
 80045a0:	68a1      	ldr	r1, [r4, #8]
 80045a2:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <cleanup_stdio+0x38>)
 80045a4:	4299      	cmp	r1, r3
 80045a6:	d002      	beq.n	80045ae <cleanup_stdio+0x1e>
 80045a8:	4620      	mov	r0, r4
 80045aa:	f000 fd8f 	bl	80050cc <_fflush_r>
 80045ae:	68e1      	ldr	r1, [r4, #12]
 80045b0:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <cleanup_stdio+0x3c>)
 80045b2:	4299      	cmp	r1, r3
 80045b4:	d004      	beq.n	80045c0 <cleanup_stdio+0x30>
 80045b6:	4620      	mov	r0, r4
 80045b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045bc:	f000 bd86 	b.w	80050cc <_fflush_r>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	bf00      	nop
 80045c4:	20000198 	.word	0x20000198
 80045c8:	20000200 	.word	0x20000200
 80045cc:	20000268 	.word	0x20000268

080045d0 <global_stdio_init.part.0>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <global_stdio_init.part.0+0x30>)
 80045d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004604 <global_stdio_init.part.0+0x34>)
 80045d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004608 <global_stdio_init.part.0+0x38>)
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	4620      	mov	r0, r4
 80045dc:	2200      	movs	r2, #0
 80045de:	2104      	movs	r1, #4
 80045e0:	f7ff ff94 	bl	800450c <std>
 80045e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045e8:	2201      	movs	r2, #1
 80045ea:	2109      	movs	r1, #9
 80045ec:	f7ff ff8e 	bl	800450c <std>
 80045f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045f4:	2202      	movs	r2, #2
 80045f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045fa:	2112      	movs	r1, #18
 80045fc:	f7ff bf86 	b.w	800450c <std>
 8004600:	200002d0 	.word	0x200002d0
 8004604:	20000198 	.word	0x20000198
 8004608:	08004579 	.word	0x08004579

0800460c <__sfp_lock_acquire>:
 800460c:	4801      	ldr	r0, [pc, #4]	@ (8004614 <__sfp_lock_acquire+0x8>)
 800460e:	f000 b90e 	b.w	800482e <__retarget_lock_acquire_recursive>
 8004612:	bf00      	nop
 8004614:	200002d9 	.word	0x200002d9

08004618 <__sfp_lock_release>:
 8004618:	4801      	ldr	r0, [pc, #4]	@ (8004620 <__sfp_lock_release+0x8>)
 800461a:	f000 b909 	b.w	8004830 <__retarget_lock_release_recursive>
 800461e:	bf00      	nop
 8004620:	200002d9 	.word	0x200002d9

08004624 <__sinit>:
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	f7ff fff0 	bl	800460c <__sfp_lock_acquire>
 800462c:	6a23      	ldr	r3, [r4, #32]
 800462e:	b11b      	cbz	r3, 8004638 <__sinit+0x14>
 8004630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004634:	f7ff bff0 	b.w	8004618 <__sfp_lock_release>
 8004638:	4b04      	ldr	r3, [pc, #16]	@ (800464c <__sinit+0x28>)
 800463a:	6223      	str	r3, [r4, #32]
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <__sinit+0x2c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f5      	bne.n	8004630 <__sinit+0xc>
 8004644:	f7ff ffc4 	bl	80045d0 <global_stdio_init.part.0>
 8004648:	e7f2      	b.n	8004630 <__sinit+0xc>
 800464a:	bf00      	nop
 800464c:	08004591 	.word	0x08004591
 8004650:	200002d0 	.word	0x200002d0

08004654 <_fwalk_sglue>:
 8004654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004658:	4607      	mov	r7, r0
 800465a:	4688      	mov	r8, r1
 800465c:	4614      	mov	r4, r2
 800465e:	2600      	movs	r6, #0
 8004660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004664:	f1b9 0901 	subs.w	r9, r9, #1
 8004668:	d505      	bpl.n	8004676 <_fwalk_sglue+0x22>
 800466a:	6824      	ldr	r4, [r4, #0]
 800466c:	2c00      	cmp	r4, #0
 800466e:	d1f7      	bne.n	8004660 <_fwalk_sglue+0xc>
 8004670:	4630      	mov	r0, r6
 8004672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d907      	bls.n	800468c <_fwalk_sglue+0x38>
 800467c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004680:	3301      	adds	r3, #1
 8004682:	d003      	beq.n	800468c <_fwalk_sglue+0x38>
 8004684:	4629      	mov	r1, r5
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	4306      	orrs	r6, r0
 800468c:	3568      	adds	r5, #104	@ 0x68
 800468e:	e7e9      	b.n	8004664 <_fwalk_sglue+0x10>

08004690 <iprintf>:
 8004690:	b40f      	push	{r0, r1, r2, r3}
 8004692:	b507      	push	{r0, r1, r2, lr}
 8004694:	4906      	ldr	r1, [pc, #24]	@ (80046b0 <iprintf+0x20>)
 8004696:	ab04      	add	r3, sp, #16
 8004698:	6808      	ldr	r0, [r1, #0]
 800469a:	f853 2b04 	ldr.w	r2, [r3], #4
 800469e:	6881      	ldr	r1, [r0, #8]
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	f000 f9e9 	bl	8004a78 <_vfiprintf_r>
 80046a6:	b003      	add	sp, #12
 80046a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ac:	b004      	add	sp, #16
 80046ae:	4770      	bx	lr
 80046b0:	20000030 	.word	0x20000030

080046b4 <__sread>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	460c      	mov	r4, r1
 80046b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046bc:	f000 f868 	bl	8004790 <_read_r>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	bfab      	itete	ge
 80046c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046c6:	89a3      	ldrhlt	r3, [r4, #12]
 80046c8:	181b      	addge	r3, r3, r0
 80046ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046ce:	bfac      	ite	ge
 80046d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046d2:	81a3      	strhlt	r3, [r4, #12]
 80046d4:	bd10      	pop	{r4, pc}

080046d6 <__swrite>:
 80046d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046da:	461f      	mov	r7, r3
 80046dc:	898b      	ldrh	r3, [r1, #12]
 80046de:	05db      	lsls	r3, r3, #23
 80046e0:	4605      	mov	r5, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	4616      	mov	r6, r2
 80046e6:	d505      	bpl.n	80046f4 <__swrite+0x1e>
 80046e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ec:	2302      	movs	r3, #2
 80046ee:	2200      	movs	r2, #0
 80046f0:	f000 f83c 	bl	800476c <_lseek_r>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	4632      	mov	r2, r6
 8004702:	463b      	mov	r3, r7
 8004704:	4628      	mov	r0, r5
 8004706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800470a:	f000 b853 	b.w	80047b4 <_write_r>

0800470e <__sseek>:
 800470e:	b510      	push	{r4, lr}
 8004710:	460c      	mov	r4, r1
 8004712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004716:	f000 f829 	bl	800476c <_lseek_r>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	bf15      	itete	ne
 8004720:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004722:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004726:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800472a:	81a3      	strheq	r3, [r4, #12]
 800472c:	bf18      	it	ne
 800472e:	81a3      	strhne	r3, [r4, #12]
 8004730:	bd10      	pop	{r4, pc}

08004732 <__sclose>:
 8004732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004736:	f000 b809 	b.w	800474c <_close_r>

0800473a <memset>:
 800473a:	4402      	add	r2, r0
 800473c:	4603      	mov	r3, r0
 800473e:	4293      	cmp	r3, r2
 8004740:	d100      	bne.n	8004744 <memset+0xa>
 8004742:	4770      	bx	lr
 8004744:	f803 1b01 	strb.w	r1, [r3], #1
 8004748:	e7f9      	b.n	800473e <memset+0x4>
	...

0800474c <_close_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	@ (8004768 <_close_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fc fa39 	bl	8000bce <_close>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_close_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_close_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	200002d4 	.word	0x200002d4

0800476c <_lseek_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d07      	ldr	r5, [pc, #28]	@ (800478c <_lseek_r+0x20>)
 8004770:	4604      	mov	r4, r0
 8004772:	4608      	mov	r0, r1
 8004774:	4611      	mov	r1, r2
 8004776:	2200      	movs	r2, #0
 8004778:	602a      	str	r2, [r5, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f7fc fa4e 	bl	8000c1c <_lseek>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_lseek_r+0x1e>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_lseek_r+0x1e>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	200002d4 	.word	0x200002d4

08004790 <_read_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d07      	ldr	r5, [pc, #28]	@ (80047b0 <_read_r+0x20>)
 8004794:	4604      	mov	r4, r0
 8004796:	4608      	mov	r0, r1
 8004798:	4611      	mov	r1, r2
 800479a:	2200      	movs	r2, #0
 800479c:	602a      	str	r2, [r5, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f7fc f9dc 	bl	8000b5c <_read>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_read_r+0x1e>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_read_r+0x1e>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	200002d4 	.word	0x200002d4

080047b4 <_write_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d07      	ldr	r5, [pc, #28]	@ (80047d4 <_write_r+0x20>)
 80047b8:	4604      	mov	r4, r0
 80047ba:	4608      	mov	r0, r1
 80047bc:	4611      	mov	r1, r2
 80047be:	2200      	movs	r2, #0
 80047c0:	602a      	str	r2, [r5, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f7fc f9e7 	bl	8000b96 <_write>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_write_r+0x1e>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_write_r+0x1e>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	200002d4 	.word	0x200002d4

080047d8 <__errno>:
 80047d8:	4b01      	ldr	r3, [pc, #4]	@ (80047e0 <__errno+0x8>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000030 	.word	0x20000030

080047e4 <__libc_init_array>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	4d0d      	ldr	r5, [pc, #52]	@ (800481c <__libc_init_array+0x38>)
 80047e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004820 <__libc_init_array+0x3c>)
 80047ea:	1b64      	subs	r4, r4, r5
 80047ec:	10a4      	asrs	r4, r4, #2
 80047ee:	2600      	movs	r6, #0
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	d109      	bne.n	8004808 <__libc_init_array+0x24>
 80047f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004824 <__libc_init_array+0x40>)
 80047f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004828 <__libc_init_array+0x44>)
 80047f8:	f000 fdb8 	bl	800536c <_init>
 80047fc:	1b64      	subs	r4, r4, r5
 80047fe:	10a4      	asrs	r4, r4, #2
 8004800:	2600      	movs	r6, #0
 8004802:	42a6      	cmp	r6, r4
 8004804:	d105      	bne.n	8004812 <__libc_init_array+0x2e>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	f855 3b04 	ldr.w	r3, [r5], #4
 800480c:	4798      	blx	r3
 800480e:	3601      	adds	r6, #1
 8004810:	e7ee      	b.n	80047f0 <__libc_init_array+0xc>
 8004812:	f855 3b04 	ldr.w	r3, [r5], #4
 8004816:	4798      	blx	r3
 8004818:	3601      	adds	r6, #1
 800481a:	e7f2      	b.n	8004802 <__libc_init_array+0x1e>
 800481c:	08005448 	.word	0x08005448
 8004820:	08005448 	.word	0x08005448
 8004824:	08005448 	.word	0x08005448
 8004828:	0800544c 	.word	0x0800544c

0800482c <__retarget_lock_init_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_acquire_recursive>:
 800482e:	4770      	bx	lr

08004830 <__retarget_lock_release_recursive>:
 8004830:	4770      	bx	lr
	...

08004834 <_free_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4605      	mov	r5, r0
 8004838:	2900      	cmp	r1, #0
 800483a:	d041      	beq.n	80048c0 <_free_r+0x8c>
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f0c      	subs	r4, r1, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	18e4      	addlt	r4, r4, r3
 8004848:	f000 f8e0 	bl	8004a0c <__malloc_lock>
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <_free_r+0x90>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	b933      	cbnz	r3, 8004860 <_free_r+0x2c>
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	6014      	str	r4, [r2, #0]
 8004856:	4628      	mov	r0, r5
 8004858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485c:	f000 b8dc 	b.w	8004a18 <__malloc_unlock>
 8004860:	42a3      	cmp	r3, r4
 8004862:	d908      	bls.n	8004876 <_free_r+0x42>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf01      	itttt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	1809      	addeq	r1, r1, r0
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	e7ed      	b.n	8004852 <_free_r+0x1e>
 8004876:	461a      	mov	r2, r3
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b10b      	cbz	r3, 8004880 <_free_r+0x4c>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d9fa      	bls.n	8004876 <_free_r+0x42>
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	1850      	adds	r0, r2, r1
 8004884:	42a0      	cmp	r0, r4
 8004886:	d10b      	bne.n	80048a0 <_free_r+0x6c>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	4401      	add	r1, r0
 800488c:	1850      	adds	r0, r2, r1
 800488e:	4283      	cmp	r3, r0
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	d1e0      	bne.n	8004856 <_free_r+0x22>
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	6053      	str	r3, [r2, #4]
 800489a:	4408      	add	r0, r1
 800489c:	6010      	str	r0, [r2, #0]
 800489e:	e7da      	b.n	8004856 <_free_r+0x22>
 80048a0:	d902      	bls.n	80048a8 <_free_r+0x74>
 80048a2:	230c      	movs	r3, #12
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	e7d6      	b.n	8004856 <_free_r+0x22>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	1821      	adds	r1, r4, r0
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf04      	itt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	bf04      	itt	eq
 80048b8:	1809      	addeq	r1, r1, r0
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	6054      	str	r4, [r2, #4]
 80048be:	e7ca      	b.n	8004856 <_free_r+0x22>
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
 80048c2:	bf00      	nop
 80048c4:	200002e0 	.word	0x200002e0

080048c8 <sbrk_aligned>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004908 <sbrk_aligned+0x40>)
 80048cc:	460c      	mov	r4, r1
 80048ce:	6831      	ldr	r1, [r6, #0]
 80048d0:	4605      	mov	r5, r0
 80048d2:	b911      	cbnz	r1, 80048da <sbrk_aligned+0x12>
 80048d4:	f000 fcb6 	bl	8005244 <_sbrk_r>
 80048d8:	6030      	str	r0, [r6, #0]
 80048da:	4621      	mov	r1, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 fcb1 	bl	8005244 <_sbrk_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d103      	bne.n	80048ee <sbrk_aligned+0x26>
 80048e6:	f04f 34ff 	mov.w	r4, #4294967295
 80048ea:	4620      	mov	r0, r4
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d0f8      	beq.n	80048ea <sbrk_aligned+0x22>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 fca2 	bl	8005244 <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1f2      	bne.n	80048ea <sbrk_aligned+0x22>
 8004904:	e7ef      	b.n	80048e6 <sbrk_aligned+0x1e>
 8004906:	bf00      	nop
 8004908:	200002dc 	.word	0x200002dc

0800490c <_malloc_r>:
 800490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004910:	1ccd      	adds	r5, r1, #3
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	2d00      	cmp	r5, #0
 8004920:	4606      	mov	r6, r0
 8004922:	db01      	blt.n	8004928 <_malloc_r+0x1c>
 8004924:	42a9      	cmp	r1, r5
 8004926:	d904      	bls.n	8004932 <_malloc_r+0x26>
 8004928:	230c      	movs	r3, #12
 800492a:	6033      	str	r3, [r6, #0]
 800492c:	2000      	movs	r0, #0
 800492e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a08 <_malloc_r+0xfc>
 8004936:	f000 f869 	bl	8004a0c <__malloc_lock>
 800493a:	f8d8 3000 	ldr.w	r3, [r8]
 800493e:	461c      	mov	r4, r3
 8004940:	bb44      	cbnz	r4, 8004994 <_malloc_r+0x88>
 8004942:	4629      	mov	r1, r5
 8004944:	4630      	mov	r0, r6
 8004946:	f7ff ffbf 	bl	80048c8 <sbrk_aligned>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	4604      	mov	r4, r0
 800494e:	d158      	bne.n	8004a02 <_malloc_r+0xf6>
 8004950:	f8d8 4000 	ldr.w	r4, [r8]
 8004954:	4627      	mov	r7, r4
 8004956:	2f00      	cmp	r7, #0
 8004958:	d143      	bne.n	80049e2 <_malloc_r+0xd6>
 800495a:	2c00      	cmp	r4, #0
 800495c:	d04b      	beq.n	80049f6 <_malloc_r+0xea>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	eb04 0903 	add.w	r9, r4, r3
 8004968:	f000 fc6c 	bl	8005244 <_sbrk_r>
 800496c:	4581      	cmp	r9, r0
 800496e:	d142      	bne.n	80049f6 <_malloc_r+0xea>
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	1a6d      	subs	r5, r5, r1
 8004974:	4629      	mov	r1, r5
 8004976:	4630      	mov	r0, r6
 8004978:	f7ff ffa6 	bl	80048c8 <sbrk_aligned>
 800497c:	3001      	adds	r0, #1
 800497e:	d03a      	beq.n	80049f6 <_malloc_r+0xea>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	442b      	add	r3, r5
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	f8d8 3000 	ldr.w	r3, [r8]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	bb62      	cbnz	r2, 80049e8 <_malloc_r+0xdc>
 800498e:	f8c8 7000 	str.w	r7, [r8]
 8004992:	e00f      	b.n	80049b4 <_malloc_r+0xa8>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	1b52      	subs	r2, r2, r5
 8004998:	d420      	bmi.n	80049dc <_malloc_r+0xd0>
 800499a:	2a0b      	cmp	r2, #11
 800499c:	d917      	bls.n	80049ce <_malloc_r+0xc2>
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	bf18      	it	ne
 80049a6:	6059      	strne	r1, [r3, #4]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	bf08      	it	eq
 80049ac:	f8c8 1000 	streq.w	r1, [r8]
 80049b0:	5162      	str	r2, [r4, r5]
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f82f 	bl	8004a18 <__malloc_unlock>
 80049ba:	f104 000b 	add.w	r0, r4, #11
 80049be:	1d23      	adds	r3, r4, #4
 80049c0:	f020 0007 	bic.w	r0, r0, #7
 80049c4:	1ac2      	subs	r2, r0, r3
 80049c6:	bf1c      	itt	ne
 80049c8:	1a1b      	subne	r3, r3, r0
 80049ca:	50a3      	strne	r3, [r4, r2]
 80049cc:	e7af      	b.n	800492e <_malloc_r+0x22>
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	bf0c      	ite	eq
 80049d4:	f8c8 2000 	streq.w	r2, [r8]
 80049d8:	605a      	strne	r2, [r3, #4]
 80049da:	e7eb      	b.n	80049b4 <_malloc_r+0xa8>
 80049dc:	4623      	mov	r3, r4
 80049de:	6864      	ldr	r4, [r4, #4]
 80049e0:	e7ae      	b.n	8004940 <_malloc_r+0x34>
 80049e2:	463c      	mov	r4, r7
 80049e4:	687f      	ldr	r7, [r7, #4]
 80049e6:	e7b6      	b.n	8004956 <_malloc_r+0x4a>
 80049e8:	461a      	mov	r2, r3
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d1fb      	bne.n	80049e8 <_malloc_r+0xdc>
 80049f0:	2300      	movs	r3, #0
 80049f2:	6053      	str	r3, [r2, #4]
 80049f4:	e7de      	b.n	80049b4 <_malloc_r+0xa8>
 80049f6:	230c      	movs	r3, #12
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	4630      	mov	r0, r6
 80049fc:	f000 f80c 	bl	8004a18 <__malloc_unlock>
 8004a00:	e794      	b.n	800492c <_malloc_r+0x20>
 8004a02:	6005      	str	r5, [r0, #0]
 8004a04:	e7d6      	b.n	80049b4 <_malloc_r+0xa8>
 8004a06:	bf00      	nop
 8004a08:	200002e0 	.word	0x200002e0

08004a0c <__malloc_lock>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	@ (8004a14 <__malloc_lock+0x8>)
 8004a0e:	f7ff bf0e 	b.w	800482e <__retarget_lock_acquire_recursive>
 8004a12:	bf00      	nop
 8004a14:	200002d8 	.word	0x200002d8

08004a18 <__malloc_unlock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	@ (8004a20 <__malloc_unlock+0x8>)
 8004a1a:	f7ff bf09 	b.w	8004830 <__retarget_lock_release_recursive>
 8004a1e:	bf00      	nop
 8004a20:	200002d8 	.word	0x200002d8

08004a24 <__sfputc_r>:
 8004a24:	6893      	ldr	r3, [r2, #8]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	b410      	push	{r4}
 8004a2c:	6093      	str	r3, [r2, #8]
 8004a2e:	da08      	bge.n	8004a42 <__sfputc_r+0x1e>
 8004a30:	6994      	ldr	r4, [r2, #24]
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	db01      	blt.n	8004a3a <__sfputc_r+0x16>
 8004a36:	290a      	cmp	r1, #10
 8004a38:	d103      	bne.n	8004a42 <__sfputc_r+0x1e>
 8004a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a3e:	f000 bb6d 	b.w	800511c <__swbuf_r>
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	1c58      	adds	r0, r3, #1
 8004a46:	6010      	str	r0, [r2, #0]
 8004a48:	7019      	strb	r1, [r3, #0]
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <__sfputs_r>:
 8004a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a54:	4606      	mov	r6, r0
 8004a56:	460f      	mov	r7, r1
 8004a58:	4614      	mov	r4, r2
 8004a5a:	18d5      	adds	r5, r2, r3
 8004a5c:	42ac      	cmp	r4, r5
 8004a5e:	d101      	bne.n	8004a64 <__sfputs_r+0x12>
 8004a60:	2000      	movs	r0, #0
 8004a62:	e007      	b.n	8004a74 <__sfputs_r+0x22>
 8004a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a68:	463a      	mov	r2, r7
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f7ff ffda 	bl	8004a24 <__sfputc_r>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d1f3      	bne.n	8004a5c <__sfputs_r+0xa>
 8004a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a78 <_vfiprintf_r>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	460d      	mov	r5, r1
 8004a7e:	b09d      	sub	sp, #116	@ 0x74
 8004a80:	4614      	mov	r4, r2
 8004a82:	4698      	mov	r8, r3
 8004a84:	4606      	mov	r6, r0
 8004a86:	b118      	cbz	r0, 8004a90 <_vfiprintf_r+0x18>
 8004a88:	6a03      	ldr	r3, [r0, #32]
 8004a8a:	b90b      	cbnz	r3, 8004a90 <_vfiprintf_r+0x18>
 8004a8c:	f7ff fdca 	bl	8004624 <__sinit>
 8004a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a92:	07d9      	lsls	r1, r3, #31
 8004a94:	d405      	bmi.n	8004aa2 <_vfiprintf_r+0x2a>
 8004a96:	89ab      	ldrh	r3, [r5, #12]
 8004a98:	059a      	lsls	r2, r3, #22
 8004a9a:	d402      	bmi.n	8004aa2 <_vfiprintf_r+0x2a>
 8004a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a9e:	f7ff fec6 	bl	800482e <__retarget_lock_acquire_recursive>
 8004aa2:	89ab      	ldrh	r3, [r5, #12]
 8004aa4:	071b      	lsls	r3, r3, #28
 8004aa6:	d501      	bpl.n	8004aac <_vfiprintf_r+0x34>
 8004aa8:	692b      	ldr	r3, [r5, #16]
 8004aaa:	b99b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x5c>
 8004aac:	4629      	mov	r1, r5
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f000 fb72 	bl	8005198 <__swsetup_r>
 8004ab4:	b170      	cbz	r0, 8004ad4 <_vfiprintf_r+0x5c>
 8004ab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ab8:	07dc      	lsls	r4, r3, #31
 8004aba:	d504      	bpl.n	8004ac6 <_vfiprintf_r+0x4e>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	b01d      	add	sp, #116	@ 0x74
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	0598      	lsls	r0, r3, #22
 8004aca:	d4f7      	bmi.n	8004abc <_vfiprintf_r+0x44>
 8004acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ace:	f7ff feaf 	bl	8004830 <__retarget_lock_release_recursive>
 8004ad2:	e7f3      	b.n	8004abc <_vfiprintf_r+0x44>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ad8:	2320      	movs	r3, #32
 8004ada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ae2:	2330      	movs	r3, #48	@ 0x30
 8004ae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c94 <_vfiprintf_r+0x21c>
 8004ae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004aec:	f04f 0901 	mov.w	r9, #1
 8004af0:	4623      	mov	r3, r4
 8004af2:	469a      	mov	sl, r3
 8004af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004af8:	b10a      	cbz	r2, 8004afe <_vfiprintf_r+0x86>
 8004afa:	2a25      	cmp	r2, #37	@ 0x25
 8004afc:	d1f9      	bne.n	8004af2 <_vfiprintf_r+0x7a>
 8004afe:	ebba 0b04 	subs.w	fp, sl, r4
 8004b02:	d00b      	beq.n	8004b1c <_vfiprintf_r+0xa4>
 8004b04:	465b      	mov	r3, fp
 8004b06:	4622      	mov	r2, r4
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7ff ffa1 	bl	8004a52 <__sfputs_r>
 8004b10:	3001      	adds	r0, #1
 8004b12:	f000 80a7 	beq.w	8004c64 <_vfiprintf_r+0x1ec>
 8004b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b18:	445a      	add	r2, fp
 8004b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 809f 	beq.w	8004c64 <_vfiprintf_r+0x1ec>
 8004b26:	2300      	movs	r3, #0
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b30:	f10a 0a01 	add.w	sl, sl, #1
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	9307      	str	r3, [sp, #28]
 8004b38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b3e:	4654      	mov	r4, sl
 8004b40:	2205      	movs	r2, #5
 8004b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b46:	4853      	ldr	r0, [pc, #332]	@ (8004c94 <_vfiprintf_r+0x21c>)
 8004b48:	f7fb fb5a 	bl	8000200 <memchr>
 8004b4c:	9a04      	ldr	r2, [sp, #16]
 8004b4e:	b9d8      	cbnz	r0, 8004b88 <_vfiprintf_r+0x110>
 8004b50:	06d1      	lsls	r1, r2, #27
 8004b52:	bf44      	itt	mi
 8004b54:	2320      	movmi	r3, #32
 8004b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b5a:	0713      	lsls	r3, r2, #28
 8004b5c:	bf44      	itt	mi
 8004b5e:	232b      	movmi	r3, #43	@ 0x2b
 8004b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b64:	f89a 3000 	ldrb.w	r3, [sl]
 8004b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b6a:	d015      	beq.n	8004b98 <_vfiprintf_r+0x120>
 8004b6c:	9a07      	ldr	r2, [sp, #28]
 8004b6e:	4654      	mov	r4, sl
 8004b70:	2000      	movs	r0, #0
 8004b72:	f04f 0c0a 	mov.w	ip, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b7c:	3b30      	subs	r3, #48	@ 0x30
 8004b7e:	2b09      	cmp	r3, #9
 8004b80:	d94b      	bls.n	8004c1a <_vfiprintf_r+0x1a2>
 8004b82:	b1b0      	cbz	r0, 8004bb2 <_vfiprintf_r+0x13a>
 8004b84:	9207      	str	r2, [sp, #28]
 8004b86:	e014      	b.n	8004bb2 <_vfiprintf_r+0x13a>
 8004b88:	eba0 0308 	sub.w	r3, r0, r8
 8004b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	46a2      	mov	sl, r4
 8004b96:	e7d2      	b.n	8004b3e <_vfiprintf_r+0xc6>
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	1d19      	adds	r1, r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	9103      	str	r1, [sp, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfbb      	ittet	lt
 8004ba4:	425b      	neglt	r3, r3
 8004ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8004baa:	9307      	strge	r3, [sp, #28]
 8004bac:	9307      	strlt	r3, [sp, #28]
 8004bae:	bfb8      	it	lt
 8004bb0:	9204      	strlt	r2, [sp, #16]
 8004bb2:	7823      	ldrb	r3, [r4, #0]
 8004bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bb6:	d10a      	bne.n	8004bce <_vfiprintf_r+0x156>
 8004bb8:	7863      	ldrb	r3, [r4, #1]
 8004bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bbc:	d132      	bne.n	8004c24 <_vfiprintf_r+0x1ac>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	9203      	str	r2, [sp, #12]
 8004bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bca:	3402      	adds	r4, #2
 8004bcc:	9305      	str	r3, [sp, #20]
 8004bce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ca4 <_vfiprintf_r+0x22c>
 8004bd2:	7821      	ldrb	r1, [r4, #0]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4650      	mov	r0, sl
 8004bd8:	f7fb fb12 	bl	8000200 <memchr>
 8004bdc:	b138      	cbz	r0, 8004bee <_vfiprintf_r+0x176>
 8004bde:	9b04      	ldr	r3, [sp, #16]
 8004be0:	eba0 000a 	sub.w	r0, r0, sl
 8004be4:	2240      	movs	r2, #64	@ 0x40
 8004be6:	4082      	lsls	r2, r0
 8004be8:	4313      	orrs	r3, r2
 8004bea:	3401      	adds	r4, #1
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf2:	4829      	ldr	r0, [pc, #164]	@ (8004c98 <_vfiprintf_r+0x220>)
 8004bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bf8:	2206      	movs	r2, #6
 8004bfa:	f7fb fb01 	bl	8000200 <memchr>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d03f      	beq.n	8004c82 <_vfiprintf_r+0x20a>
 8004c02:	4b26      	ldr	r3, [pc, #152]	@ (8004c9c <_vfiprintf_r+0x224>)
 8004c04:	bb1b      	cbnz	r3, 8004c4e <_vfiprintf_r+0x1d6>
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	3307      	adds	r3, #7
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	3308      	adds	r3, #8
 8004c10:	9303      	str	r3, [sp, #12]
 8004c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c14:	443b      	add	r3, r7
 8004c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c18:	e76a      	b.n	8004af0 <_vfiprintf_r+0x78>
 8004c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c1e:	460c      	mov	r4, r1
 8004c20:	2001      	movs	r0, #1
 8004c22:	e7a8      	b.n	8004b76 <_vfiprintf_r+0xfe>
 8004c24:	2300      	movs	r3, #0
 8004c26:	3401      	adds	r4, #1
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f04f 0c0a 	mov.w	ip, #10
 8004c30:	4620      	mov	r0, r4
 8004c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c36:	3a30      	subs	r2, #48	@ 0x30
 8004c38:	2a09      	cmp	r2, #9
 8004c3a:	d903      	bls.n	8004c44 <_vfiprintf_r+0x1cc>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0c6      	beq.n	8004bce <_vfiprintf_r+0x156>
 8004c40:	9105      	str	r1, [sp, #20]
 8004c42:	e7c4      	b.n	8004bce <_vfiprintf_r+0x156>
 8004c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c48:	4604      	mov	r4, r0
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e7f0      	b.n	8004c30 <_vfiprintf_r+0x1b8>
 8004c4e:	ab03      	add	r3, sp, #12
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	462a      	mov	r2, r5
 8004c54:	4b12      	ldr	r3, [pc, #72]	@ (8004ca0 <_vfiprintf_r+0x228>)
 8004c56:	a904      	add	r1, sp, #16
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f3af 8000 	nop.w
 8004c5e:	4607      	mov	r7, r0
 8004c60:	1c78      	adds	r0, r7, #1
 8004c62:	d1d6      	bne.n	8004c12 <_vfiprintf_r+0x19a>
 8004c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c66:	07d9      	lsls	r1, r3, #31
 8004c68:	d405      	bmi.n	8004c76 <_vfiprintf_r+0x1fe>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	059a      	lsls	r2, r3, #22
 8004c6e:	d402      	bmi.n	8004c76 <_vfiprintf_r+0x1fe>
 8004c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c72:	f7ff fddd 	bl	8004830 <__retarget_lock_release_recursive>
 8004c76:	89ab      	ldrh	r3, [r5, #12]
 8004c78:	065b      	lsls	r3, r3, #25
 8004c7a:	f53f af1f 	bmi.w	8004abc <_vfiprintf_r+0x44>
 8004c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c80:	e71e      	b.n	8004ac0 <_vfiprintf_r+0x48>
 8004c82:	ab03      	add	r3, sp, #12
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	462a      	mov	r2, r5
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <_vfiprintf_r+0x228>)
 8004c8a:	a904      	add	r1, sp, #16
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f000 f879 	bl	8004d84 <_printf_i>
 8004c92:	e7e4      	b.n	8004c5e <_vfiprintf_r+0x1e6>
 8004c94:	0800540c 	.word	0x0800540c
 8004c98:	08005416 	.word	0x08005416
 8004c9c:	00000000 	.word	0x00000000
 8004ca0:	08004a53 	.word	0x08004a53
 8004ca4:	08005412 	.word	0x08005412

08004ca8 <_printf_common>:
 8004ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	4616      	mov	r6, r2
 8004cae:	4698      	mov	r8, r3
 8004cb0:	688a      	ldr	r2, [r1, #8]
 8004cb2:	690b      	ldr	r3, [r1, #16]
 8004cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bfb8      	it	lt
 8004cbc:	4613      	movlt	r3, r2
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	b10a      	cbz	r2, 8004cce <_printf_common+0x26>
 8004cca:	3301      	adds	r3, #1
 8004ccc:	6033      	str	r3, [r6, #0]
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	0699      	lsls	r1, r3, #26
 8004cd2:	bf42      	ittt	mi
 8004cd4:	6833      	ldrmi	r3, [r6, #0]
 8004cd6:	3302      	addmi	r3, #2
 8004cd8:	6033      	strmi	r3, [r6, #0]
 8004cda:	6825      	ldr	r5, [r4, #0]
 8004cdc:	f015 0506 	ands.w	r5, r5, #6
 8004ce0:	d106      	bne.n	8004cf0 <_printf_common+0x48>
 8004ce2:	f104 0a19 	add.w	sl, r4, #25
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	6832      	ldr	r2, [r6, #0]
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dc26      	bgt.n	8004d3e <_printf_common+0x96>
 8004cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	3b00      	subs	r3, #0
 8004cf8:	bf18      	it	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	0692      	lsls	r2, r2, #26
 8004cfe:	d42b      	bmi.n	8004d58 <_printf_common+0xb0>
 8004d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d04:	4641      	mov	r1, r8
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c8      	blx	r9
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d01e      	beq.n	8004d4c <_printf_common+0xa4>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	6922      	ldr	r2, [r4, #16]
 8004d12:	f003 0306 	and.w	r3, r3, #6
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	bf02      	ittt	eq
 8004d1a:	68e5      	ldreq	r5, [r4, #12]
 8004d1c:	6833      	ldreq	r3, [r6, #0]
 8004d1e:	1aed      	subeq	r5, r5, r3
 8004d20:	68a3      	ldr	r3, [r4, #8]
 8004d22:	bf0c      	ite	eq
 8004d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d28:	2500      	movne	r5, #0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bfc4      	itt	gt
 8004d2e:	1a9b      	subgt	r3, r3, r2
 8004d30:	18ed      	addgt	r5, r5, r3
 8004d32:	2600      	movs	r6, #0
 8004d34:	341a      	adds	r4, #26
 8004d36:	42b5      	cmp	r5, r6
 8004d38:	d11a      	bne.n	8004d70 <_printf_common+0xc8>
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	e008      	b.n	8004d50 <_printf_common+0xa8>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4652      	mov	r2, sl
 8004d42:	4641      	mov	r1, r8
 8004d44:	4638      	mov	r0, r7
 8004d46:	47c8      	blx	r9
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d103      	bne.n	8004d54 <_printf_common+0xac>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d54:	3501      	adds	r5, #1
 8004d56:	e7c6      	b.n	8004ce6 <_printf_common+0x3e>
 8004d58:	18e1      	adds	r1, r4, r3
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	2030      	movs	r0, #48	@ 0x30
 8004d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d62:	4422      	add	r2, r4
 8004d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	e7c7      	b.n	8004d00 <_printf_common+0x58>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4622      	mov	r2, r4
 8004d74:	4641      	mov	r1, r8
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c8      	blx	r9
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d0e6      	beq.n	8004d4c <_printf_common+0xa4>
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7d9      	b.n	8004d36 <_printf_common+0x8e>
	...

08004d84 <_printf_i>:
 8004d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	7e0f      	ldrb	r7, [r1, #24]
 8004d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d8c:	2f78      	cmp	r7, #120	@ 0x78
 8004d8e:	4691      	mov	r9, r2
 8004d90:	4680      	mov	r8, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	469a      	mov	sl, r3
 8004d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d9a:	d807      	bhi.n	8004dac <_printf_i+0x28>
 8004d9c:	2f62      	cmp	r7, #98	@ 0x62
 8004d9e:	d80a      	bhi.n	8004db6 <_printf_i+0x32>
 8004da0:	2f00      	cmp	r7, #0
 8004da2:	f000 80d2 	beq.w	8004f4a <_printf_i+0x1c6>
 8004da6:	2f58      	cmp	r7, #88	@ 0x58
 8004da8:	f000 80b9 	beq.w	8004f1e <_printf_i+0x19a>
 8004dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004db4:	e03a      	b.n	8004e2c <_printf_i+0xa8>
 8004db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dba:	2b15      	cmp	r3, #21
 8004dbc:	d8f6      	bhi.n	8004dac <_printf_i+0x28>
 8004dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8004dc4 <_printf_i+0x40>)
 8004dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004dad 	.word	0x08004dad
 8004dd0:	08004dad 	.word	0x08004dad
 8004dd4:	08004dad 	.word	0x08004dad
 8004dd8:	08004dad 	.word	0x08004dad
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004dad 	.word	0x08004dad
 8004de4:	08004dad 	.word	0x08004dad
 8004de8:	08004dad 	.word	0x08004dad
 8004dec:	08004dad 	.word	0x08004dad
 8004df0:	08004f31 	.word	0x08004f31
 8004df4:	08004e5b 	.word	0x08004e5b
 8004df8:	08004eeb 	.word	0x08004eeb
 8004dfc:	08004dad 	.word	0x08004dad
 8004e00:	08004dad 	.word	0x08004dad
 8004e04:	08004f53 	.word	0x08004f53
 8004e08:	08004dad 	.word	0x08004dad
 8004e0c:	08004e5b 	.word	0x08004e5b
 8004e10:	08004dad 	.word	0x08004dad
 8004e14:	08004dad 	.word	0x08004dad
 8004e18:	08004ef3 	.word	0x08004ef3
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6032      	str	r2, [r6, #0]
 8004e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e09d      	b.n	8004f6c <_printf_i+0x1e8>
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	1d19      	adds	r1, r3, #4
 8004e36:	6031      	str	r1, [r6, #0]
 8004e38:	0606      	lsls	r6, r0, #24
 8004e3a:	d501      	bpl.n	8004e40 <_printf_i+0xbc>
 8004e3c:	681d      	ldr	r5, [r3, #0]
 8004e3e:	e003      	b.n	8004e48 <_printf_i+0xc4>
 8004e40:	0645      	lsls	r5, r0, #25
 8004e42:	d5fb      	bpl.n	8004e3c <_printf_i+0xb8>
 8004e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	da03      	bge.n	8004e54 <_printf_i+0xd0>
 8004e4c:	232d      	movs	r3, #45	@ 0x2d
 8004e4e:	426d      	negs	r5, r5
 8004e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e54:	4859      	ldr	r0, [pc, #356]	@ (8004fbc <_printf_i+0x238>)
 8004e56:	230a      	movs	r3, #10
 8004e58:	e011      	b.n	8004e7e <_printf_i+0xfa>
 8004e5a:	6821      	ldr	r1, [r4, #0]
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	0608      	lsls	r0, r1, #24
 8004e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e64:	d402      	bmi.n	8004e6c <_printf_i+0xe8>
 8004e66:	0649      	lsls	r1, r1, #25
 8004e68:	bf48      	it	mi
 8004e6a:	b2ad      	uxthmi	r5, r5
 8004e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e6e:	4853      	ldr	r0, [pc, #332]	@ (8004fbc <_printf_i+0x238>)
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	bf14      	ite	ne
 8004e74:	230a      	movne	r3, #10
 8004e76:	2308      	moveq	r3, #8
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e7e:	6866      	ldr	r6, [r4, #4]
 8004e80:	60a6      	str	r6, [r4, #8]
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	bfa2      	ittt	ge
 8004e86:	6821      	ldrge	r1, [r4, #0]
 8004e88:	f021 0104 	bicge.w	r1, r1, #4
 8004e8c:	6021      	strge	r1, [r4, #0]
 8004e8e:	b90d      	cbnz	r5, 8004e94 <_printf_i+0x110>
 8004e90:	2e00      	cmp	r6, #0
 8004e92:	d04b      	beq.n	8004f2c <_printf_i+0x1a8>
 8004e94:	4616      	mov	r6, r2
 8004e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ea4:	462f      	mov	r7, r5
 8004ea6:	42bb      	cmp	r3, r7
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	d9f4      	bls.n	8004e96 <_printf_i+0x112>
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d10b      	bne.n	8004ec8 <_printf_i+0x144>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	07df      	lsls	r7, r3, #31
 8004eb4:	d508      	bpl.n	8004ec8 <_printf_i+0x144>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	6861      	ldr	r1, [r4, #4]
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	bfde      	ittt	le
 8004ebe:	2330      	movle	r3, #48	@ 0x30
 8004ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ec8:	1b92      	subs	r2, r2, r6
 8004eca:	6122      	str	r2, [r4, #16]
 8004ecc:	f8cd a000 	str.w	sl, [sp]
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	aa03      	add	r2, sp, #12
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fee6 	bl	8004ca8 <_printf_common>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d14a      	bne.n	8004f76 <_printf_i+0x1f2>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	b004      	add	sp, #16
 8004ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f043 0320 	orr.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	4833      	ldr	r0, [pc, #204]	@ (8004fc0 <_printf_i+0x23c>)
 8004ef4:	2778      	movs	r7, #120	@ 0x78
 8004ef6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	6831      	ldr	r1, [r6, #0]
 8004efe:	061f      	lsls	r7, r3, #24
 8004f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f04:	d402      	bmi.n	8004f0c <_printf_i+0x188>
 8004f06:	065f      	lsls	r7, r3, #25
 8004f08:	bf48      	it	mi
 8004f0a:	b2ad      	uxthmi	r5, r5
 8004f0c:	6031      	str	r1, [r6, #0]
 8004f0e:	07d9      	lsls	r1, r3, #31
 8004f10:	bf44      	itt	mi
 8004f12:	f043 0320 	orrmi.w	r3, r3, #32
 8004f16:	6023      	strmi	r3, [r4, #0]
 8004f18:	b11d      	cbz	r5, 8004f22 <_printf_i+0x19e>
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	e7ac      	b.n	8004e78 <_printf_i+0xf4>
 8004f1e:	4827      	ldr	r0, [pc, #156]	@ (8004fbc <_printf_i+0x238>)
 8004f20:	e7e9      	b.n	8004ef6 <_printf_i+0x172>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f023 0320 	bic.w	r3, r3, #32
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	e7f6      	b.n	8004f1a <_printf_i+0x196>
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	e7bd      	b.n	8004eac <_printf_i+0x128>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	6825      	ldr	r5, [r4, #0]
 8004f34:	6961      	ldr	r1, [r4, #20]
 8004f36:	1d18      	adds	r0, r3, #4
 8004f38:	6030      	str	r0, [r6, #0]
 8004f3a:	062e      	lsls	r6, r5, #24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	d501      	bpl.n	8004f44 <_printf_i+0x1c0>
 8004f40:	6019      	str	r1, [r3, #0]
 8004f42:	e002      	b.n	8004f4a <_printf_i+0x1c6>
 8004f44:	0668      	lsls	r0, r5, #25
 8004f46:	d5fb      	bpl.n	8004f40 <_printf_i+0x1bc>
 8004f48:	8019      	strh	r1, [r3, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	4616      	mov	r6, r2
 8004f50:	e7bc      	b.n	8004ecc <_printf_i+0x148>
 8004f52:	6833      	ldr	r3, [r6, #0]
 8004f54:	1d1a      	adds	r2, r3, #4
 8004f56:	6032      	str	r2, [r6, #0]
 8004f58:	681e      	ldr	r6, [r3, #0]
 8004f5a:	6862      	ldr	r2, [r4, #4]
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7fb f94e 	bl	8000200 <memchr>
 8004f64:	b108      	cbz	r0, 8004f6a <_printf_i+0x1e6>
 8004f66:	1b80      	subs	r0, r0, r6
 8004f68:	6060      	str	r0, [r4, #4]
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f74:	e7aa      	b.n	8004ecc <_printf_i+0x148>
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	47d0      	blx	sl
 8004f80:	3001      	adds	r0, #1
 8004f82:	d0ad      	beq.n	8004ee0 <_printf_i+0x15c>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	079b      	lsls	r3, r3, #30
 8004f88:	d413      	bmi.n	8004fb2 <_printf_i+0x22e>
 8004f8a:	68e0      	ldr	r0, [r4, #12]
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	4298      	cmp	r0, r3
 8004f90:	bfb8      	it	lt
 8004f92:	4618      	movlt	r0, r3
 8004f94:	e7a6      	b.n	8004ee4 <_printf_i+0x160>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	47d0      	blx	sl
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d09d      	beq.n	8004ee0 <_printf_i+0x15c>
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	9903      	ldr	r1, [sp, #12]
 8004faa:	1a5b      	subs	r3, r3, r1
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dcf2      	bgt.n	8004f96 <_printf_i+0x212>
 8004fb0:	e7eb      	b.n	8004f8a <_printf_i+0x206>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	f104 0619 	add.w	r6, r4, #25
 8004fb8:	e7f5      	b.n	8004fa6 <_printf_i+0x222>
 8004fba:	bf00      	nop
 8004fbc:	0800541d 	.word	0x0800541d
 8004fc0:	0800542e 	.word	0x0800542e

08004fc4 <__sflush_r>:
 8004fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	0716      	lsls	r6, r2, #28
 8004fce:	4605      	mov	r5, r0
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	d454      	bmi.n	800507e <__sflush_r+0xba>
 8004fd4:	684b      	ldr	r3, [r1, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dc02      	bgt.n	8004fe0 <__sflush_r+0x1c>
 8004fda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dd48      	ble.n	8005072 <__sflush_r+0xae>
 8004fe0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fe2:	2e00      	cmp	r6, #0
 8004fe4:	d045      	beq.n	8005072 <__sflush_r+0xae>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fec:	682f      	ldr	r7, [r5, #0]
 8004fee:	6a21      	ldr	r1, [r4, #32]
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	d030      	beq.n	8005056 <__sflush_r+0x92>
 8004ff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	0759      	lsls	r1, r3, #29
 8004ffa:	d505      	bpl.n	8005008 <__sflush_r+0x44>
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005002:	b10b      	cbz	r3, 8005008 <__sflush_r+0x44>
 8005004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800500c:	6a21      	ldr	r1, [r4, #32]
 800500e:	4628      	mov	r0, r5
 8005010:	47b0      	blx	r6
 8005012:	1c43      	adds	r3, r0, #1
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	d106      	bne.n	8005026 <__sflush_r+0x62>
 8005018:	6829      	ldr	r1, [r5, #0]
 800501a:	291d      	cmp	r1, #29
 800501c:	d82b      	bhi.n	8005076 <__sflush_r+0xb2>
 800501e:	4a2a      	ldr	r2, [pc, #168]	@ (80050c8 <__sflush_r+0x104>)
 8005020:	410a      	asrs	r2, r1
 8005022:	07d6      	lsls	r6, r2, #31
 8005024:	d427      	bmi.n	8005076 <__sflush_r+0xb2>
 8005026:	2200      	movs	r2, #0
 8005028:	6062      	str	r2, [r4, #4]
 800502a:	04d9      	lsls	r1, r3, #19
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	6022      	str	r2, [r4, #0]
 8005030:	d504      	bpl.n	800503c <__sflush_r+0x78>
 8005032:	1c42      	adds	r2, r0, #1
 8005034:	d101      	bne.n	800503a <__sflush_r+0x76>
 8005036:	682b      	ldr	r3, [r5, #0]
 8005038:	b903      	cbnz	r3, 800503c <__sflush_r+0x78>
 800503a:	6560      	str	r0, [r4, #84]	@ 0x54
 800503c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800503e:	602f      	str	r7, [r5, #0]
 8005040:	b1b9      	cbz	r1, 8005072 <__sflush_r+0xae>
 8005042:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005046:	4299      	cmp	r1, r3
 8005048:	d002      	beq.n	8005050 <__sflush_r+0x8c>
 800504a:	4628      	mov	r0, r5
 800504c:	f7ff fbf2 	bl	8004834 <_free_r>
 8005050:	2300      	movs	r3, #0
 8005052:	6363      	str	r3, [r4, #52]	@ 0x34
 8005054:	e00d      	b.n	8005072 <__sflush_r+0xae>
 8005056:	2301      	movs	r3, #1
 8005058:	4628      	mov	r0, r5
 800505a:	47b0      	blx	r6
 800505c:	4602      	mov	r2, r0
 800505e:	1c50      	adds	r0, r2, #1
 8005060:	d1c9      	bne.n	8004ff6 <__sflush_r+0x32>
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0c6      	beq.n	8004ff6 <__sflush_r+0x32>
 8005068:	2b1d      	cmp	r3, #29
 800506a:	d001      	beq.n	8005070 <__sflush_r+0xac>
 800506c:	2b16      	cmp	r3, #22
 800506e:	d11e      	bne.n	80050ae <__sflush_r+0xea>
 8005070:	602f      	str	r7, [r5, #0]
 8005072:	2000      	movs	r0, #0
 8005074:	e022      	b.n	80050bc <__sflush_r+0xf8>
 8005076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800507a:	b21b      	sxth	r3, r3
 800507c:	e01b      	b.n	80050b6 <__sflush_r+0xf2>
 800507e:	690f      	ldr	r7, [r1, #16]
 8005080:	2f00      	cmp	r7, #0
 8005082:	d0f6      	beq.n	8005072 <__sflush_r+0xae>
 8005084:	0793      	lsls	r3, r2, #30
 8005086:	680e      	ldr	r6, [r1, #0]
 8005088:	bf08      	it	eq
 800508a:	694b      	ldreq	r3, [r1, #20]
 800508c:	600f      	str	r7, [r1, #0]
 800508e:	bf18      	it	ne
 8005090:	2300      	movne	r3, #0
 8005092:	eba6 0807 	sub.w	r8, r6, r7
 8005096:	608b      	str	r3, [r1, #8]
 8005098:	f1b8 0f00 	cmp.w	r8, #0
 800509c:	dde9      	ble.n	8005072 <__sflush_r+0xae>
 800509e:	6a21      	ldr	r1, [r4, #32]
 80050a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050a2:	4643      	mov	r3, r8
 80050a4:	463a      	mov	r2, r7
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b0      	blx	r6
 80050aa:	2800      	cmp	r0, #0
 80050ac:	dc08      	bgt.n	80050c0 <__sflush_r+0xfc>
 80050ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	4407      	add	r7, r0
 80050c2:	eba8 0800 	sub.w	r8, r8, r0
 80050c6:	e7e7      	b.n	8005098 <__sflush_r+0xd4>
 80050c8:	dfbffffe 	.word	0xdfbffffe

080050cc <_fflush_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	690b      	ldr	r3, [r1, #16]
 80050d0:	4605      	mov	r5, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	b913      	cbnz	r3, 80050dc <_fflush_r+0x10>
 80050d6:	2500      	movs	r5, #0
 80050d8:	4628      	mov	r0, r5
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	b118      	cbz	r0, 80050e6 <_fflush_r+0x1a>
 80050de:	6a03      	ldr	r3, [r0, #32]
 80050e0:	b90b      	cbnz	r3, 80050e6 <_fflush_r+0x1a>
 80050e2:	f7ff fa9f 	bl	8004624 <__sinit>
 80050e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f3      	beq.n	80050d6 <_fflush_r+0xa>
 80050ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050f0:	07d0      	lsls	r0, r2, #31
 80050f2:	d404      	bmi.n	80050fe <_fflush_r+0x32>
 80050f4:	0599      	lsls	r1, r3, #22
 80050f6:	d402      	bmi.n	80050fe <_fflush_r+0x32>
 80050f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050fa:	f7ff fb98 	bl	800482e <__retarget_lock_acquire_recursive>
 80050fe:	4628      	mov	r0, r5
 8005100:	4621      	mov	r1, r4
 8005102:	f7ff ff5f 	bl	8004fc4 <__sflush_r>
 8005106:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005108:	07da      	lsls	r2, r3, #31
 800510a:	4605      	mov	r5, r0
 800510c:	d4e4      	bmi.n	80050d8 <_fflush_r+0xc>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	059b      	lsls	r3, r3, #22
 8005112:	d4e1      	bmi.n	80050d8 <_fflush_r+0xc>
 8005114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005116:	f7ff fb8b 	bl	8004830 <__retarget_lock_release_recursive>
 800511a:	e7dd      	b.n	80050d8 <_fflush_r+0xc>

0800511c <__swbuf_r>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	460e      	mov	r6, r1
 8005120:	4614      	mov	r4, r2
 8005122:	4605      	mov	r5, r0
 8005124:	b118      	cbz	r0, 800512e <__swbuf_r+0x12>
 8005126:	6a03      	ldr	r3, [r0, #32]
 8005128:	b90b      	cbnz	r3, 800512e <__swbuf_r+0x12>
 800512a:	f7ff fa7b 	bl	8004624 <__sinit>
 800512e:	69a3      	ldr	r3, [r4, #24]
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	071a      	lsls	r2, r3, #28
 8005136:	d501      	bpl.n	800513c <__swbuf_r+0x20>
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	b943      	cbnz	r3, 800514e <__swbuf_r+0x32>
 800513c:	4621      	mov	r1, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f82a 	bl	8005198 <__swsetup_r>
 8005144:	b118      	cbz	r0, 800514e <__swbuf_r+0x32>
 8005146:	f04f 37ff 	mov.w	r7, #4294967295
 800514a:	4638      	mov	r0, r7
 800514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	1a98      	subs	r0, r3, r2
 8005154:	6963      	ldr	r3, [r4, #20]
 8005156:	b2f6      	uxtb	r6, r6
 8005158:	4283      	cmp	r3, r0
 800515a:	4637      	mov	r7, r6
 800515c:	dc05      	bgt.n	800516a <__swbuf_r+0x4e>
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff ffb3 	bl	80050cc <_fflush_r>
 8005166:	2800      	cmp	r0, #0
 8005168:	d1ed      	bne.n	8005146 <__swbuf_r+0x2a>
 800516a:	68a3      	ldr	r3, [r4, #8]
 800516c:	3b01      	subs	r3, #1
 800516e:	60a3      	str	r3, [r4, #8]
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	6022      	str	r2, [r4, #0]
 8005176:	701e      	strb	r6, [r3, #0]
 8005178:	6962      	ldr	r2, [r4, #20]
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	429a      	cmp	r2, r3
 800517e:	d004      	beq.n	800518a <__swbuf_r+0x6e>
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	07db      	lsls	r3, r3, #31
 8005184:	d5e1      	bpl.n	800514a <__swbuf_r+0x2e>
 8005186:	2e0a      	cmp	r6, #10
 8005188:	d1df      	bne.n	800514a <__swbuf_r+0x2e>
 800518a:	4621      	mov	r1, r4
 800518c:	4628      	mov	r0, r5
 800518e:	f7ff ff9d 	bl	80050cc <_fflush_r>
 8005192:	2800      	cmp	r0, #0
 8005194:	d0d9      	beq.n	800514a <__swbuf_r+0x2e>
 8005196:	e7d6      	b.n	8005146 <__swbuf_r+0x2a>

08005198 <__swsetup_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4b29      	ldr	r3, [pc, #164]	@ (8005240 <__swsetup_r+0xa8>)
 800519c:	4605      	mov	r5, r0
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	460c      	mov	r4, r1
 80051a2:	b118      	cbz	r0, 80051ac <__swsetup_r+0x14>
 80051a4:	6a03      	ldr	r3, [r0, #32]
 80051a6:	b90b      	cbnz	r3, 80051ac <__swsetup_r+0x14>
 80051a8:	f7ff fa3c 	bl	8004624 <__sinit>
 80051ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b0:	0719      	lsls	r1, r3, #28
 80051b2:	d422      	bmi.n	80051fa <__swsetup_r+0x62>
 80051b4:	06da      	lsls	r2, r3, #27
 80051b6:	d407      	bmi.n	80051c8 <__swsetup_r+0x30>
 80051b8:	2209      	movs	r2, #9
 80051ba:	602a      	str	r2, [r5, #0]
 80051bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	e033      	b.n	8005230 <__swsetup_r+0x98>
 80051c8:	0758      	lsls	r0, r3, #29
 80051ca:	d512      	bpl.n	80051f2 <__swsetup_r+0x5a>
 80051cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051ce:	b141      	cbz	r1, 80051e2 <__swsetup_r+0x4a>
 80051d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051d4:	4299      	cmp	r1, r3
 80051d6:	d002      	beq.n	80051de <__swsetup_r+0x46>
 80051d8:	4628      	mov	r0, r5
 80051da:	f7ff fb2b 	bl	8004834 <_free_r>
 80051de:	2300      	movs	r3, #0
 80051e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	2300      	movs	r3, #0
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f043 0308 	orr.w	r3, r3, #8
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	6923      	ldr	r3, [r4, #16]
 80051fc:	b94b      	cbnz	r3, 8005212 <__swsetup_r+0x7a>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005208:	d003      	beq.n	8005212 <__swsetup_r+0x7a>
 800520a:	4621      	mov	r1, r4
 800520c:	4628      	mov	r0, r5
 800520e:	f000 f84f 	bl	80052b0 <__smakebuf_r>
 8005212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005216:	f013 0201 	ands.w	r2, r3, #1
 800521a:	d00a      	beq.n	8005232 <__swsetup_r+0x9a>
 800521c:	2200      	movs	r2, #0
 800521e:	60a2      	str	r2, [r4, #8]
 8005220:	6962      	ldr	r2, [r4, #20]
 8005222:	4252      	negs	r2, r2
 8005224:	61a2      	str	r2, [r4, #24]
 8005226:	6922      	ldr	r2, [r4, #16]
 8005228:	b942      	cbnz	r2, 800523c <__swsetup_r+0xa4>
 800522a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800522e:	d1c5      	bne.n	80051bc <__swsetup_r+0x24>
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	0799      	lsls	r1, r3, #30
 8005234:	bf58      	it	pl
 8005236:	6962      	ldrpl	r2, [r4, #20]
 8005238:	60a2      	str	r2, [r4, #8]
 800523a:	e7f4      	b.n	8005226 <__swsetup_r+0x8e>
 800523c:	2000      	movs	r0, #0
 800523e:	e7f7      	b.n	8005230 <__swsetup_r+0x98>
 8005240:	20000030 	.word	0x20000030

08005244 <_sbrk_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d06      	ldr	r5, [pc, #24]	@ (8005260 <_sbrk_r+0x1c>)
 8005248:	2300      	movs	r3, #0
 800524a:	4604      	mov	r4, r0
 800524c:	4608      	mov	r0, r1
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	f7fb fcf2 	bl	8000c38 <_sbrk>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_sbrk_r+0x1a>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_sbrk_r+0x1a>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	200002d4 	.word	0x200002d4

08005264 <__swhatbuf_r>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	460c      	mov	r4, r1
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	2900      	cmp	r1, #0
 800526e:	b096      	sub	sp, #88	@ 0x58
 8005270:	4615      	mov	r5, r2
 8005272:	461e      	mov	r6, r3
 8005274:	da0d      	bge.n	8005292 <__swhatbuf_r+0x2e>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	bf14      	ite	ne
 8005282:	2340      	movne	r3, #64	@ 0x40
 8005284:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005288:	2000      	movs	r0, #0
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	b016      	add	sp, #88	@ 0x58
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	466a      	mov	r2, sp
 8005294:	f000 f848 	bl	8005328 <_fstat_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	dbec      	blt.n	8005276 <__swhatbuf_r+0x12>
 800529c:	9901      	ldr	r1, [sp, #4]
 800529e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052a6:	4259      	negs	r1, r3
 80052a8:	4159      	adcs	r1, r3
 80052aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052ae:	e7eb      	b.n	8005288 <__swhatbuf_r+0x24>

080052b0 <__smakebuf_r>:
 80052b0:	898b      	ldrh	r3, [r1, #12]
 80052b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b4:	079d      	lsls	r5, r3, #30
 80052b6:	4606      	mov	r6, r0
 80052b8:	460c      	mov	r4, r1
 80052ba:	d507      	bpl.n	80052cc <__smakebuf_r+0x1c>
 80052bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	2301      	movs	r3, #1
 80052c6:	6163      	str	r3, [r4, #20]
 80052c8:	b003      	add	sp, #12
 80052ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052cc:	ab01      	add	r3, sp, #4
 80052ce:	466a      	mov	r2, sp
 80052d0:	f7ff ffc8 	bl	8005264 <__swhatbuf_r>
 80052d4:	9f00      	ldr	r7, [sp, #0]
 80052d6:	4605      	mov	r5, r0
 80052d8:	4639      	mov	r1, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff fb16 	bl	800490c <_malloc_r>
 80052e0:	b948      	cbnz	r0, 80052f6 <__smakebuf_r+0x46>
 80052e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e6:	059a      	lsls	r2, r3, #22
 80052e8:	d4ee      	bmi.n	80052c8 <__smakebuf_r+0x18>
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	f043 0302 	orr.w	r3, r3, #2
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	e7e2      	b.n	80052bc <__smakebuf_r+0xc>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	6020      	str	r0, [r4, #0]
 80052fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	9b01      	ldr	r3, [sp, #4]
 8005302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005306:	b15b      	cbz	r3, 8005320 <__smakebuf_r+0x70>
 8005308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530c:	4630      	mov	r0, r6
 800530e:	f000 f81d 	bl	800534c <_isatty_r>
 8005312:	b128      	cbz	r0, 8005320 <__smakebuf_r+0x70>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	431d      	orrs	r5, r3
 8005324:	81a5      	strh	r5, [r4, #12]
 8005326:	e7cf      	b.n	80052c8 <__smakebuf_r+0x18>

08005328 <_fstat_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d07      	ldr	r5, [pc, #28]	@ (8005348 <_fstat_r+0x20>)
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	4608      	mov	r0, r1
 8005332:	4611      	mov	r1, r2
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	f7fb fc56 	bl	8000be6 <_fstat>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	d102      	bne.n	8005344 <_fstat_r+0x1c>
 800533e:	682b      	ldr	r3, [r5, #0]
 8005340:	b103      	cbz	r3, 8005344 <_fstat_r+0x1c>
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	bd38      	pop	{r3, r4, r5, pc}
 8005346:	bf00      	nop
 8005348:	200002d4 	.word	0x200002d4

0800534c <_isatty_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4d06      	ldr	r5, [pc, #24]	@ (8005368 <_isatty_r+0x1c>)
 8005350:	2300      	movs	r3, #0
 8005352:	4604      	mov	r4, r0
 8005354:	4608      	mov	r0, r1
 8005356:	602b      	str	r3, [r5, #0]
 8005358:	f7fb fc55 	bl	8000c06 <_isatty>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_isatty_r+0x1a>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b103      	cbz	r3, 8005366 <_isatty_r+0x1a>
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	200002d4 	.word	0x200002d4

0800536c <_init>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr

08005378 <_fini>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr
