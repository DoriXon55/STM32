
LICZNIK_HOMEWORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006510  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080066a0  080066a0  000076a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006734  08006734  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006734  08006734  00007734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800673c  0800673c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0000773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006740  08006740  00007740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006744  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000070  080067b4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080067b4  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001187a  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002573  00000000  00000000  0001991a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbe  00000000  00000000  0001cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c1b  00000000  00000000  0001dba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013085  00000000  00000000  000457c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c94  00000000  00000000  00058846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d4da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  0014d520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00152124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006688 	.word	0x08006688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006688 	.word	0x08006688

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <START_TIMERS>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void START_TIMERS()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim6);
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <START_TIMERS+0x34>)
 8000566:	f002 fd47 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 800056a:	480b      	ldr	r0, [pc, #44]	@ (8000598 <START_TIMERS+0x38>)
 800056c:	f002 fd44 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3);
 8000570:	480a      	ldr	r0, [pc, #40]	@ (800059c <START_TIMERS+0x3c>)
 8000572:	f002 fd41 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4808      	ldr	r0, [pc, #32]	@ (800059c <START_TIMERS+0x3c>)
 800057a:	f002 fe0f 	bl	800319c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800057e:	2108      	movs	r1, #8
 8000580:	4806      	ldr	r0, [pc, #24]	@ (800059c <START_TIMERS+0x3c>)
 8000582:	f002 fe0b 	bl	800319c <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000586:	213c      	movs	r1, #60	@ 0x3c
 8000588:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <START_TIMERS+0x40>)
 800058a:	f002 ffb3 	bl	80034f4 <HAL_TIM_Encoder_Start>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000124 	.word	0x20000124
 8000598:	20000170 	.word	0x20000170
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	200000d8 	.word	0x200000d8

080005a4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a3b      	ldr	r2, [pc, #236]	@ (80006a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d15f      	bne.n	8000676 <HAL_TIM_PeriodElapsedCallback+0xd2>
	    {

	        if (direction == 1)
 80005b6:	4b3b      	ldr	r3, [pc, #236]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005b8:	f993 3000 	ldrsb.w	r3, [r3]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d125      	bne.n	800060c <HAL_TIM_PeriodElapsedCallback+0x68>
	        {
	            if (red_pwm_value > 0)
 80005c0:	4b39      	ldr	r3, [pc, #228]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d007      	beq.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x34>
	            {
	                red_pwm_value -= step_size;
 80005c8:	4b37      	ldr	r3, [pc, #220]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005ca:	881a      	ldrh	r2, [r3, #0]
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b34      	ldr	r3, [pc, #208]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005d6:	801a      	strh	r2, [r3, #0]
	            }
	            if (blue_pwm_value < 1000)
 80005d8:	4b35      	ldr	r3, [pc, #212]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005e0:	d207      	bcs.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	            {
	                blue_pwm_value += step_size;
 80005e2:	4b33      	ldr	r3, [pc, #204]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b30      	ldr	r3, [pc, #192]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80005f0:	801a      	strh	r2, [r3, #0]
	            }

	            if (red_pwm_value <= 0 && blue_pwm_value >= 1000)
 80005f2:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d133      	bne.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xbe>
 80005fa:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000602:	d32e      	bcc.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xbe>
	            {
	                direction = -1;
 8000604:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000606:	22ff      	movs	r2, #255	@ 0xff
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	e02a      	b.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xbe>
	            }
	        }
	        else if (direction == -1)
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800060e:	f993 3000 	ldrsb.w	r3, [r3]
 8000612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000616:	d124      	bne.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xbe>
	        {
	            if (blue_pwm_value > 0)
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x8c>
	            {
	                blue_pwm_value -= step_size;
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800062e:	801a      	strh	r2, [r3, #0]
	            }
	            if (red_pwm_value < 1000)
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000638:	d207      	bcs.n	800064a <HAL_TIM_PeriodElapsedCallback+0xa6>
	            {
	                red_pwm_value += step_size;
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000648:	801a      	strh	r2, [r3, #0]
	            }


	            if (blue_pwm_value <= 0 && red_pwm_value >= 1000)
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d107      	bne.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xbe>
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800065a:	d302      	bcc.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xbe>
	            {
	                direction = 1;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
	            }
	        }


	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, red_pwm_value);
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000664:	881a      	ldrh	r2, [r3, #0]
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	635a      	str	r2, [r3, #52]	@ 0x34
	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, blue_pwm_value);
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	63da      	str	r2, [r3, #60]	@ 0x3c
	    }

	if (htim == &htim6)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0f      	ldr	r2, [pc, #60]	@ (80006b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d103      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0xe2>
		HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 800067e:	2102      	movs	r1, #2
 8000680:	480e      	ldr	r0, [pc, #56]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000682:	f001 f927 	bl	80018d4 <HAL_GPIO_TogglePin>

	if(htim == &htim7)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d103      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0xf2>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800068e:	2101      	movs	r1, #1
 8000690:	480a      	ldr	r0, [pc, #40]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000692:	f001 f91f 	bl	80018d4 <HAL_GPIO_TogglePin>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40000400 	.word	0x40000400
 80006a4:	20000002 	.word	0x20000002
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000004 	.word	0x20000004
 80006b0:	20000244 	.word	0x20000244
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	20000124 	.word	0x20000124
 80006bc:	48000800 	.word	0x48000800
 80006c0:	20000170 	.word	0x20000170

080006c4 <__io_putchar>:
    if (value > 1000) value = 1000;
    return (uint16_t)value;
}
*/
int __io_putchar(int ch)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	d102      	bne.n	80006d8 <__io_putchar+0x14>
	{
		__io_putchar('\r');
 80006d2:	200d      	movs	r0, #13
 80006d4:	f7ff fff6 	bl	80006c4 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006d8:	1d39      	adds	r1, r7, #4
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	2201      	movs	r2, #1
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <__io_putchar+0x2c>)
 80006e2:	f003 ffd3 	bl	800468c <HAL_UART_Transmit>
	return 1;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001bc 	.word	0x200001bc

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fd24 	bl	8001146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f837 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 fa09 	bl	8000b18 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000706:	f000 f967 	bl	80009d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800070a:	f000 f99d 	bl	8000a48 <MX_TIM7_Init>
  MX_TIM3_Init();
 800070e:	f000 f881 	bl	8000814 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000712:	f000 f90d 	bl	8000930 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000716:	f000 f9cf 	bl	8000ab8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  START_TIMERS();
 800071a:	f7ff ff21 	bl	8000560 <START_TIMERS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint16_t encoder_counter = __HAL_TIM_GET_COUNTER(&htim4);
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <main+0x6c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000724:	80fb      	strh	r3, [r7, #6]
	  printf("encoder_value: %lu \n", encoder_counter);
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4619      	mov	r1, r3
 800072a:	480e      	ldr	r0, [pc, #56]	@ (8000764 <main+0x70>)
 800072c:	f005 f93e 	bl	80059ac <iprintf>
	  step_size = (encoder_counter / 10);
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <main+0x74>)
 8000734:	fba2 2303 	umull	r2, r3, r2, r3
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	b29a      	uxth	r2, r3
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <main+0x78>)
 800073e:	801a      	strh	r2, [r3, #0]
	  if (step_size < 1)
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <main+0x78>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <main+0x5a>
		  step_size = 1;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <main+0x78>)
 800074a:	2201      	movs	r2, #1
 800074c:	801a      	strh	r2, [r3, #0]
	  if(step_size > 100)
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <main+0x78>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2b64      	cmp	r3, #100	@ 0x64
 8000754:	d9e3      	bls.n	800071e <main+0x2a>
		  step_size = 100;
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <main+0x78>)
 8000758:	2264      	movs	r2, #100	@ 0x64
 800075a:	801a      	strh	r2, [r3, #0]
  {
 800075c:	e7df      	b.n	800071e <main+0x2a>
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8
 8000764:	080066a0 	.word	0x080066a0
 8000768:	cccccccd 	.word	0xcccccccd
 800076c:	20000004 	.word	0x20000004

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	@ 0x58
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2244      	movs	r2, #68	@ 0x44
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 f969 	bl	8005a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000792:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000796:	f001 f8c5 	bl	8001924 <HAL_PWREx_ControlVoltageScaling>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a0:	f000 fa04 	bl	8000bac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007a4:	2310      	movs	r3, #16
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b0:	2360      	movs	r3, #96	@ 0x60
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b8:	2301      	movs	r3, #1
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007c0:	2328      	movs	r3, #40	@ 0x28
 80007c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f8fb 	bl	80019d0 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007e0:	f000 f9e4 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2303      	movs	r3, #3
 80007ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2104      	movs	r1, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fcc3 	bl	8002188 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000808:	f000 f9d0 	bl	8000bac <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	@ 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000846:	4b38      	ldr	r3, [pc, #224]	@ (8000928 <MX_TIM3_Init+0x114>)
 8000848:	4a38      	ldr	r2, [pc, #224]	@ (800092c <MX_TIM3_Init+0x118>)
 800084a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800084c:	4b36      	ldr	r3, [pc, #216]	@ (8000928 <MX_TIM3_Init+0x114>)
 800084e:	224f      	movs	r2, #79	@ 0x4f
 8000850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b35      	ldr	r3, [pc, #212]	@ (8000928 <MX_TIM3_Init+0x114>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000858:	4b33      	ldr	r3, [pc, #204]	@ (8000928 <MX_TIM3_Init+0x114>)
 800085a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800085e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <MX_TIM3_Init+0x114>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <MX_TIM3_Init+0x114>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800086c:	482e      	ldr	r0, [pc, #184]	@ (8000928 <MX_TIM3_Init+0x114>)
 800086e:	f002 fb6b 	bl	8002f48 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000878:	f000 f998 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000886:	4619      	mov	r1, r3
 8000888:	4827      	ldr	r0, [pc, #156]	@ (8000928 <MX_TIM3_Init+0x114>)
 800088a:	f003 f8dd 	bl	8003a48 <HAL_TIM_ConfigClockSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000894:	f000 f98a 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_TIM3_Init+0x114>)
 800089a:	f002 fc1d 	bl	80030d8 <HAL_TIM_PWM_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008a4:	f000 f982 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481c      	ldr	r0, [pc, #112]	@ (8000928 <MX_TIM3_Init+0x114>)
 80008b8:	f003 fdf4 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008c2:	f000 f973 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2360      	movs	r3, #96	@ 0x60
 80008c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_TIM3_Init+0x114>)
 80008de:	f002 ff9f 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008e8:	f000 f960 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	2204      	movs	r2, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_TIM3_Init+0x114>)
 80008f4:	f002 ff94 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80008fe:	f000 f955 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2208      	movs	r2, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM3_Init+0x114>)
 800090a:	f002 ff89 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000914:	f000 f94a 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM3_Init+0x114>)
 800091a:	f000 fa1b 	bl	8000d54 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	@ 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000008c 	.word	0x2000008c
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2224      	movs	r2, #36	@ 0x24
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f005 f889 	bl	8005a56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800094e:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 8000950:	4a20      	ldr	r2, [pc, #128]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 8000962:	2227      	movs	r2, #39	@ 0x27
 8000964:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000972:	2301      	movs	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800097a:	2301      	movs	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800098a:	2301      	movs	r3, #1
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 800099e:	f002 fd03 	bl	80033a8 <HAL_TIM_Encoder_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f900 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_TIM4_Init+0xa0>)
 80009ba:	f003 fd73 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009c4:	f000 f8f2 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	@ 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000d8 	.word	0x200000d8
 80009d4:	40000800 	.word	0x40000800

080009d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_TIM6_Init+0x68>)
 80009ea:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <MX_TIM6_Init+0x6c>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_TIM6_Init+0x68>)
 80009f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_TIM6_Init+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80009fc:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_TIM6_Init+0x68>)
 80009fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_TIM6_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_TIM6_Init+0x68>)
 8000a0c:	f002 fa9c 	bl	8002f48 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a16:	f000 f8c9 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_TIM6_Init+0x68>)
 8000a28:	f003 fd3c 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000a32:	f000 f8bb 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000124 	.word	0x20000124
 8000a44:	40001000 	.word	0x40001000

08000a48 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a5a:	4a16      	ldr	r2, [pc, #88]	@ (8000ab4 <MX_TIM7_Init+0x6c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a60:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000a64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a6e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a72:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a7c:	f002 fa64 	bl	8002f48 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000a86:	f000 f891 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <MX_TIM7_Init+0x68>)
 8000a98:	f003 fd04 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000aa2:	f000 f883 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000170 	.word	0x20000170
 8000ab4:	40001400 	.word	0x40001400

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <MX_USART2_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000afc:	f003 fd78 	bl	80045f0 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f851 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001bc 	.word	0x200001bc
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a10      	ldr	r2, [pc, #64]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2103      	movs	r1, #3
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b7c:	f000 fe92 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|YELLOW_LED_Pin;
 8000b80:	2303      	movs	r3, #3
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b98:	f000 fcda 	bl	8001550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000800 	.word	0x48000800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <HAL_TIM_Base_MspInit+0xac>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d114      	bne.n	8000c3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c12:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 8, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	201d      	movs	r0, #29
 8000c30:	f000 fbd9 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c34:	201d      	movs	r0, #29
 8000c36:	f000 fbf2 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000c3a:	e032      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d114      	bne.n	8000c70 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210a      	movs	r1, #10
 8000c62:	2036      	movs	r0, #54	@ 0x36
 8000c64:	f000 fbbf 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c68:	2036      	movs	r0, #54	@ 0x36
 8000c6a:	f000 fbd8 	bl	800141e <HAL_NVIC_EnableIRQ>
}
 8000c6e:	e018      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d113      	bne.n	8000ca2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c80:	f043 0320 	orr.w	r3, r3, #32
 8000c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	f003 0320 	and.w	r3, r3, #32
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 11, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	210b      	movs	r1, #11
 8000c96:	2037      	movs	r0, #55	@ 0x37
 8000c98:	f000 fba5 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c9c:	2037      	movs	r0, #55	@ 0x37
 8000c9e:	f000 fbbe 	bl	800141e <HAL_NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40000400 	.word	0x40000400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40001000 	.word	0x40001000
 8000cb8:	40001400 	.word	0x40001400

08000cbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12f      	bne.n	8000d3e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x90>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x90>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x90>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x90>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x90>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x90>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23c0      	movs	r3, #192	@ 0xc0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <HAL_TIM_Encoder_MspInit+0x94>)
 8000d2a:	f000 fc11 	bl	8001550 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2109      	movs	r1, #9
 8000d32:	201e      	movs	r0, #30
 8000d34:	f000 fb57 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d38:	201e      	movs	r0, #30
 8000d3a:	f000 fb70 	bl	800141e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1f      	ldr	r2, [pc, #124]	@ (8000df0 <HAL_TIM_MspPostInit+0x9c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d138      	bne.n	8000de8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_TIM_MspPostInit+0xa0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000df4 <HAL_TIM_MspPostInit+0xa0>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_TIM_MspPostInit+0xa0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_TIM_MspPostInit+0xa0>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <HAL_TIM_MspPostInit+0xa0>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <HAL_TIM_MspPostInit+0xa0>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000da6:	23c0      	movs	r3, #192	@ 0xc0
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000db6:	2302      	movs	r3, #2
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f000 fbc4 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <HAL_TIM_MspPostInit+0xa4>)
 8000de4:	f000 fbb4 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ac      	sub	sp, #176	@ 0xb0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2288      	movs	r2, #136	@ 0x88
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fe1a 	bl	8005a56 <memset>
  if(huart->Instance==USART2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a25      	ldr	r2, [pc, #148]	@ (8000ebc <HAL_UART_MspInit+0xc0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d143      	bne.n	8000eb4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fbc9 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e44:	f7ff feb2 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e64:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea0:	f000 fb56 	bl	8001550 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	210c      	movs	r1, #12
 8000ea8:	2026      	movs	r0, #38	@ 0x26
 8000eaa:	f000 fa9c 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eae:	2026      	movs	r0, #38	@ 0x26
 8000eb0:	f000 fab5 	bl	800141e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	37b0      	adds	r7, #176	@ 0xb0
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f969 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <TIM3_IRQHandler+0x10>)
 8000f2a:	f002 fb71 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000008c 	.word	0x2000008c

08000f38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <TIM4_IRQHandler+0x10>)
 8000f3e:	f002 fb67 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000d8 	.word	0x200000d8

08000f4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <USART2_IRQHandler+0x10>)
 8000f52:	f003 fc25 	bl	80047a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001bc 	.word	0x200001bc

08000f60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <TIM6_DAC_IRQHandler+0x10>)
 8000f66:	f002 fb53 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000124 	.word	0x20000124

08000f74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <TIM7_IRQHandler+0x10>)
 8000f7a:	f002 fb49 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000170 	.word	0x20000170

08000f88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e00a      	b.n	8000fb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f9a:	f3af 8000 	nop.w
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf0      	blt.n	8000f9a <_read+0x12>
  }

  return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fb71 	bl	80006c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf1      	blt.n	8000fd4 <_write+0x12>
  }
  return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:

int _close(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001022:	605a      	str	r2, [r3, #4]
  return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_isatty>:

int _isatty(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f004 fd2e 	bl	8005af4 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20018000 	.word	0x20018000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	20000248 	.word	0x20000248
 80010cc:	200003a0 	.word	0x200003a0

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800112c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f8:	f7ff ffea 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	@ (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <LoopForever+0xe>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	@ (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001122:	f004 fced 	bl	8005b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fae5 	bl	80006f4 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001138:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 800113c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001140:	2000039c 	.word	0x2000039c

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>

08001146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f93d 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001156:	200f      	movs	r0, #15
 8001158:	f000 f80e 	bl	8001178 <HAL_InitTick>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e001      	b.n	800116c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001168:	f7ff fd26 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116c:	79fb      	ldrb	r3, [r7, #7]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_InitTick+0x6c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d023      	beq.n	80011d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_InitTick+0x70>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f949 	bl	800143a <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10f      	bne.n	80011ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d809      	bhi.n	80011c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f913 	bl	80013e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <HAL_InitTick+0x74>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e007      	b.n	80011d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e004      	b.n	80011d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e001      	b.n	80011d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000010 	.word	0x20000010
 80011e8:	20000008 	.word	0x20000008
 80011ec:	2000000c 	.word	0x2000000c

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000010 	.word	0x20000010
 8001214:	2000024c 	.word	0x2000024c

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000024c 	.word	0x2000024c

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	@ (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d008      	beq.n	800147c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e022      	b.n	80014c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020e 	bic.w	r2, r2, #14
 800148a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	f003 021c 	and.w	r2, r3, #28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d005      	beq.n	80014f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2204      	movs	r2, #4
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e029      	b.n	8001546 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 020e 	bic.w	r2, r2, #14
 8001500:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f003 021c 	and.w	r2, r3, #28
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
    }
  }
  return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e17f      	b.n	8001860 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8171 	beq.w	800185a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_GPIO_Init+0x40>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 0201 	and.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d118      	bne.n	8001630 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001604:	2201      	movs	r2, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	f003 0201 	and.w	r2, r3, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b03      	cmp	r3, #3
 800163a:	d017      	beq.n	800166c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d123      	bne.n	80016c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	08da      	lsrs	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3208      	adds	r2, #8
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	6939      	ldr	r1, [r7, #16]
 80016bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80ac 	beq.w	800185a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b5f      	ldr	r3, [pc, #380]	@ (8001880 <HAL_GPIO_Init+0x330>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	4a5e      	ldr	r2, [pc, #376]	@ (8001880 <HAL_GPIO_Init+0x330>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6613      	str	r3, [r2, #96]	@ 0x60
 800170e:	4b5c      	ldr	r3, [pc, #368]	@ (8001880 <HAL_GPIO_Init+0x330>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800171a:	4a5a      	ldr	r2, [pc, #360]	@ (8001884 <HAL_GPIO_Init+0x334>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x242>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	@ (8001888 <HAL_GPIO_Init+0x338>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x23e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4e      	ldr	r2, [pc, #312]	@ (800188c <HAL_GPIO_Init+0x33c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x23a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4d      	ldr	r2, [pc, #308]	@ (8001890 <HAL_GPIO_Init+0x340>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x236>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4c      	ldr	r2, [pc, #304]	@ (8001894 <HAL_GPIO_Init+0x344>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x232>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4b      	ldr	r2, [pc, #300]	@ (8001898 <HAL_GPIO_Init+0x348>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x22e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4a      	ldr	r2, [pc, #296]	@ (800189c <HAL_GPIO_Init+0x34c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x22a>
 8001776:	2306      	movs	r3, #6
 8001778:	e00c      	b.n	8001794 <HAL_GPIO_Init+0x244>
 800177a:	2307      	movs	r3, #7
 800177c:	e00a      	b.n	8001794 <HAL_GPIO_Init+0x244>
 800177e:	2305      	movs	r3, #5
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x244>
 8001782:	2304      	movs	r3, #4
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x244>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x244>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x244>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x244>
 8001792:	2300      	movs	r3, #0
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a4:	4937      	ldr	r1, [pc, #220]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d6:	4a32      	ldr	r2, [pc, #200]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017dc:	4b30      	ldr	r3, [pc, #192]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001800:	4a27      	ldr	r2, [pc, #156]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800182a:	4a1d      	ldr	r2, [pc, #116]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <HAL_GPIO_Init+0x350>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	f47f ae78 	bne.w	8001560 <HAL_GPIO_Init+0x10>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	48000c00 	.word	0x48000c00
 8001894:	48001000 	.word	0x48001000
 8001898:	48001400 	.word	0x48001400
 800189c:	48001800 	.word	0x48001800
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43d9      	mvns	r1, r3
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	400b      	ands	r3, r1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <HAL_PWREx_GetVoltageRange+0x18>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40007000 	.word	0x40007000

08001924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001932:	d130      	bne.n	8001996 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800193c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001940:	d038      	beq.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2232      	movs	r2, #50	@ 0x32
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001968:	e002      	b.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3b01      	subs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197c:	d102      	bne.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x60>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f2      	bne.n	800196a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001990:	d110      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e00f      	b.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019a2:	d007      	beq.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ac:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e3ca      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4b97      	ldr	r3, [pc, #604]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	4b94      	ldr	r3, [pc, #592]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80e4 	beq.w	8001bcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4a>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	f040 808b 	bne.w	8001b28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 8087 	bne.w	8001b28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a1a:	4b89      	ldr	r3, [pc, #548]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e3a2      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	4b82      	ldr	r3, [pc, #520]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_RCC_OscConfig+0x7c>
 8001a42:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4a:	e005      	b.n	8001a58 <HAL_RCC_OscConfig+0x88>
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d223      	bcs.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fd55 	bl	8002510 <RCC_SetFlashLatencyFromMSIRange>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e383      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a70:	4b73      	ldr	r3, [pc, #460]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a72      	ldr	r2, [pc, #456]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b70      	ldr	r3, [pc, #448]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	496d      	ldr	r1, [pc, #436]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	4968      	ldr	r1, [pc, #416]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
 8001aa2:	e025      	b.n	8001af0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa4:	4b66      	ldr	r3, [pc, #408]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a65      	ldr	r2, [pc, #404]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b63      	ldr	r3, [pc, #396]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4960      	ldr	r1, [pc, #384]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	495b      	ldr	r1, [pc, #364]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fd15 	bl	8002510 <RCC_SetFlashLatencyFromMSIRange>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e343      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af0:	f000 fc4a 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b52      	ldr	r3, [pc, #328]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	4950      	ldr	r1, [pc, #320]	@ (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c48 <HAL_RCC_OscConfig+0x278>)
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b10:	4b4e      	ldr	r3, [pc, #312]	@ (8001c4c <HAL_RCC_OscConfig+0x27c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb2f 	bl	8001178 <HAL_InitTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d052      	beq.n	8001bca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	e327      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b30:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb6c 	bl	8001218 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b44:	f7ff fb68 	bl	8001218 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e310      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b62:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4931      	ldr	r1, [pc, #196]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	492c      	ldr	r1, [pc, #176]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
 8001b94:	e01a      	b.n	8001bcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b96:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb39 	bl	8001218 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001baa:	f7ff fb35 	bl	8001218 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e2dd      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bbc:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x1da>
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d074      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x21a>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d064      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d160      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e2ba      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x24a>
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e026      	b.n	8001c68 <HAL_RCC_OscConfig+0x298>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c22:	d115      	bne.n	8001c50 <HAL_RCC_OscConfig+0x280>
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a02      	ldr	r2, [pc, #8]	@ (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x298>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	080066b8 	.word	0x080066b8
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	4ba0      	ldr	r3, [pc, #640]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a9f      	ldr	r2, [pc, #636]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a9c      	ldr	r2, [pc, #624]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fad2 	bl	8001218 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff face 	bl	8001218 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e276      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b92      	ldr	r3, [pc, #584]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2a8>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fabe 	bl	8001218 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff faba 	bl	8001218 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e262      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cb2:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2d0>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d060      	beq.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x310>
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d119      	bne.n	8001d0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d116      	bne.n	8001d0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x328>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e23f      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b76      	ldr	r3, [pc, #472]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	4973      	ldr	r1, [pc, #460]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d0c:	e040      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d023      	beq.n	8001d5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d16:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff fa79 	bl	8001218 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fa75 	bl	8001218 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e21d      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3c:	4b65      	ldr	r3, [pc, #404]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b62      	ldr	r3, [pc, #392]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	495f      	ldr	r1, [pc, #380]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e018      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fa55 	bl	8001218 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fa51 	bl	8001218 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1f9      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d84:	4b53      	ldr	r3, [pc, #332]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d03c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01c      	beq.n	8001dde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001daa:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff fa30 	bl	8001218 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fa2c 	bl	8001218 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1d4      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dce:	4b41      	ldr	r3, [pc, #260]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ef      	beq.n	8001dbc <HAL_RCC_OscConfig+0x3ec>
 8001ddc:	e01b      	b.n	8001e16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff fa13 	bl	8001218 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff fa0f 	bl	8001218 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e1b7      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e08:	4b32      	ldr	r3, [pc, #200]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ef      	bne.n	8001df6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80a6 	beq.w	8001f70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	4a26      	ldr	r2, [pc, #152]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_OscConfig+0x508>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d118      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <HAL_RCC_OscConfig+0x508>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_RCC_OscConfig+0x508>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e68:	f7ff f9d6 	bl	8001218 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7ff f9d2 	bl	8001218 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e17a      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_RCC_OscConfig+0x508>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4d8>
 8001e96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea6:	e029      	b.n	8001efc <HAL_RCC_OscConfig+0x52c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d115      	bne.n	8001edc <HAL_RCC_OscConfig+0x50c>
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb6:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	4a03      	ldr	r2, [pc, #12]	@ (8001ed4 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x52c>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	4b9c      	ldr	r3, [pc, #624]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee2:	4a9b      	ldr	r2, [pc, #620]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eec:	4b98      	ldr	r3, [pc, #608]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	4a97      	ldr	r2, [pc, #604]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d016      	beq.n	8001f32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f988 	bl	8001218 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f984 	bl	8001218 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e12a      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f22:	4b8b      	ldr	r3, [pc, #556]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ed      	beq.n	8001f0c <HAL_RCC_OscConfig+0x53c>
 8001f30:	e015      	b.n	8001f5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7ff f971 	bl	8001218 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f96d 	bl	8001218 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e113      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f50:	4b7f      	ldr	r3, [pc, #508]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ed      	bne.n	8001f3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5e:	7ffb      	ldrb	r3, [r7, #31]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	4b7a      	ldr	r3, [pc, #488]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a79      	ldr	r2, [pc, #484]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80fe 	beq.w	8002176 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	f040 80d0 	bne.w	8002124 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f84:	4b72      	ldr	r3, [pc, #456]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d130      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d127      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d11f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fc4:	2a07      	cmp	r2, #7
 8001fc6:	bf14      	ite	ne
 8001fc8:	2201      	movne	r2, #1
 8001fca:	2200      	moveq	r2, #0
 8001fcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d113      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d06e      	beq.n	80020d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d069      	beq.n	80020d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800200c:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0ad      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800201c:	4b4c      	ldr	r3, [pc, #304]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002028:	f7ff f8f6 	bl	8001218 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff f8f2 	bl	8001218 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e09a      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002042:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204e:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	4b40      	ldr	r3, [pc, #256]	@ (8002154 <HAL_RCC_OscConfig+0x784>)
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800205e:	3a01      	subs	r2, #1
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002068:	0212      	lsls	r2, r2, #8
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002070:	0852      	lsrs	r2, r2, #1
 8002072:	3a01      	subs	r2, #1
 8002074:	0552      	lsls	r2, r2, #21
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800207c:	0852      	lsrs	r2, r2, #1
 800207e:	3a01      	subs	r2, #1
 8002080:	0652      	lsls	r2, r2, #25
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002088:	0912      	lsrs	r2, r2, #4
 800208a:	0452      	lsls	r2, r2, #17
 800208c:	430a      	orrs	r2, r1
 800208e:	4930      	ldr	r1, [pc, #192]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002090:	4313      	orrs	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002094:	4b2e      	ldr	r3, [pc, #184]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2d      	ldr	r2, [pc, #180]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ac:	f7ff f8b4 	bl	8001218 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f8b0 	bl	8001218 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e058      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c6:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d2:	e050      	b.n	8002176 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e04f      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d148      	bne.n	8002176 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f0:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a16      	ldr	r2, [pc, #88]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020fc:	f7ff f88c 	bl	8001218 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff f888 	bl	8001218 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e030      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x734>
 8002122:	e028      	b.n	8002176 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d023      	beq.n	8002172 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <HAL_RCC_OscConfig+0x780>)
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff f86f 	bl	8001218 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	e00c      	b.n	8002158 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff f86b 	bl	8001218 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d905      	bls.n	8002158 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e013      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
 8002150:	40021000 	.word	0x40021000
 8002154:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_RCC_OscConfig+0x7b0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ec      	bne.n	800213e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_RCC_OscConfig+0x7b0>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4905      	ldr	r1, [pc, #20]	@ (8002180 <HAL_RCC_OscConfig+0x7b0>)
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x7b4>)
 800216c:	4013      	ands	r3, r2
 800216e:	60cb      	str	r3, [r1, #12]
 8002170:	e001      	b.n	8002176 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	feeefffc 	.word	0xfeeefffc

08002188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0e7      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b75      	ldr	r3, [pc, #468]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b72      	ldr	r3, [pc, #456]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4970      	ldr	r1, [pc, #448]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cf      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d010      	beq.n	80021fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d908      	bls.n	80021fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b63      	ldr	r3, [pc, #396]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4960      	ldr	r1, [pc, #384]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04c      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d121      	bne.n	800225e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0a6      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d115      	bne.n	800225e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e09a      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223e:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e08e      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e086      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b46      	ldr	r3, [pc, #280]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4943      	ldr	r1, [pc, #268]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7fe ffd2 	bl	8001218 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe ffce 	bl	8001218 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e06e      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b3a      	ldr	r3, [pc, #232]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d208      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	492b      	ldr	r1, [pc, #172]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ce:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d210      	bcs.n	80022fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022dc:	4b25      	ldr	r3, [pc, #148]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 0207 	bic.w	r2, r3, #7
 80022e4:	4923      	ldr	r1, [pc, #140]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ec:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <HAL_RCC_ClockConfig+0x1ec>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e036      	b.n	800236c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230a:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4918      	ldr	r1, [pc, #96]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4910      	ldr	r1, [pc, #64]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800233c:	f000 f824 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	490b      	ldr	r1, [pc, #44]	@ (800237c <HAL_RCC_ClockConfig+0x1f4>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	4a09      	ldr	r2, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1f8>)
 800235a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_RCC_ClockConfig+0x1fc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff09 	bl	8001178 <HAL_InitTick>
 8002366:	4603      	mov	r3, r0
 8002368:	72fb      	strb	r3, [r7, #11]

  return status;
 800236a:	7afb      	ldrb	r3, [r7, #11]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40022000 	.word	0x40022000
 8002378:	40021000 	.word	0x40021000
 800237c:	080066b8 	.word	0x080066b8
 8002380:	20000008 	.word	0x20000008
 8002384:	2000000c 	.word	0x2000000c

08002388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	@ 0x24
 800238c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	4b3e      	ldr	r3, [pc, #248]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x34>
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d121      	bne.n	80023fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d11e      	bne.n	80023fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023bc:	4b34      	ldr	r3, [pc, #208]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c8:	4b31      	ldr	r3, [pc, #196]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e005      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10d      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x110>)
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	e004      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d101      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800240c:	4b23      	ldr	r3, [pc, #140]	@ (800249c <HAL_RCC_GetSysClockFreq+0x114>)
 800240e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d134      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002416:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0xa6>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d003      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xac>
 800242c:	e005      	b.n	800243a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800242e:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x110>)
 8002430:	617b      	str	r3, [r7, #20]
      break;
 8002432:	e005      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_RCC_GetSysClockFreq+0x114>)
 8002436:	617b      	str	r3, [r7, #20]
      break;
 8002438:	e002      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	617b      	str	r3, [r7, #20]
      break;
 800243e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	3301      	adds	r3, #1
 800244c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	fb03 f202 	mul.w	r2, r3, r2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x108>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	0e5b      	lsrs	r3, r3, #25
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	3301      	adds	r3, #1
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002480:	69bb      	ldr	r3, [r7, #24]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	@ 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	080066d0 	.word	0x080066d0
 8002498:	00f42400 	.word	0x00f42400
 800249c:	007a1200 	.word	0x007a1200

080024a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000008 	.word	0x20000008

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4904      	ldr	r1, [pc, #16]	@ (80024e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	080066c8 	.word	0x080066c8

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e8:	f7ff ffda 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0adb      	lsrs	r3, r3, #11
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4904      	ldr	r1, [pc, #16]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	080066c8 	.word	0x080066c8

08002510 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800251c:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002528:	f7ff f9ee 	bl	8001908 <HAL_PWREx_GetVoltageRange>
 800252c:	6178      	str	r0, [r7, #20]
 800252e:	e014      	b.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4a24      	ldr	r2, [pc, #144]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	@ 0x58
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002548:	f7ff f9de 	bl	8001908 <HAL_PWREx_GetVoltageRange>
 800254c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d10b      	bne.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d919      	bls.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2ba0      	cmp	r3, #160	@ 0xa0
 800256c:	d902      	bls.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256e:	2302      	movs	r3, #2
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e013      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e010      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	@ 0x80
 800257e:	d902      	bls.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002580:	2303      	movs	r3, #3
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e00a      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	@ 0x80
 800258a:	d102      	bne.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800258c:	2302      	movs	r3, #2
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e004      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b70      	cmp	r3, #112	@ 0x70
 8002596:	d101      	bne.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002598:	2301      	movs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 0207 	bic.w	r2, r3, #7
 80025a4:	4909      	ldr	r1, [pc, #36]	@ (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025dc:	2300      	movs	r3, #0
 80025de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d041      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025f4:	d02a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025fa:	d824      	bhi.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002600:	d008      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002602:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002606:	d81e      	bhi.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002610:	d010      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002612:	e018      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002614:	4b86      	ldr	r3, [pc, #536]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a85      	ldr	r2, [pc, #532]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002620:	e015      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fabb 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002632:	e00c      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3320      	adds	r3, #32
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fba6 	bl	8002d8c <RCCEx_PLLSAI2_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002644:	e003      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	74fb      	strb	r3, [r7, #19]
      break;
 800264a:	e000      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800264c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002654:	4b76      	ldr	r3, [pc, #472]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002662:	4973      	ldr	r1, [pc, #460]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800266a:	e001      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d041      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002680:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002684:	d02a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002686:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800268a:	d824      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800268c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002696:	d81e      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a0:	d010      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026a2:	e018      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a4:	4b62      	ldr	r3, [pc, #392]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a61      	ldr	r2, [pc, #388]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b0:	e015      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa73 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c2:	e00c      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3320      	adds	r3, #32
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fb5e 	bl	8002d8c <RCCEx_PLLSAI2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d4:	e003      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	74fb      	strb	r3, [r7, #19]
      break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e4:	4b52      	ldr	r3, [pc, #328]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026f2:	494f      	ldr	r1, [pc, #316]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026fa:	e001      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a0 	beq.w	800284e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002712:	4b47      	ldr	r3, [pc, #284]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	4a40      	ldr	r2, [pc, #256]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	@ 0x58
 8002734:	4b3e      	ldr	r3, [pc, #248]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002740:	2301      	movs	r3, #1
 8002742:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002744:	4b3b      	ldr	r3, [pc, #236]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3a      	ldr	r2, [pc, #232]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002750:	f7fe fd62 	bl	8001218 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002756:	e009      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe fd5e 	bl	8001218 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	74fb      	strb	r3, [r7, #19]
        break;
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800276c:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d15c      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800277e:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002788:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01f      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	d019      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a8:	4b21      	ldr	r3, [pc, #132]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	4a20      	ldr	r2, [pc, #128]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fd1d 	bl	8001218 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e0:	e00b      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe fd19 	bl	8001218 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d902      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	74fb      	strb	r3, [r7, #19]
            break;
 80027f8:	e006      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ec      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002814:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281e:	4904      	ldr	r1, [pc, #16]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002826:	e009      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
 800282c:	e006      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283c:	7c7b      	ldrb	r3, [r7, #17]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b9e      	ldr	r3, [pc, #632]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	4a9d      	ldr	r2, [pc, #628]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800285a:	4b98      	ldr	r3, [pc, #608]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	f023 0203 	bic.w	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	4994      	ldr	r1, [pc, #592]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800287c:	4b8f      	ldr	r3, [pc, #572]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f023 020c 	bic.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288a:	498c      	ldr	r1, [pc, #560]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800289e:	4b87      	ldr	r3, [pc, #540]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	4983      	ldr	r1, [pc, #524]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	497b      	ldr	r1, [pc, #492]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028e2:	4b76      	ldr	r3, [pc, #472]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f0:	4972      	ldr	r1, [pc, #456]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002904:	4b6d      	ldr	r3, [pc, #436]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	496a      	ldr	r1, [pc, #424]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002926:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	4961      	ldr	r1, [pc, #388]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002948:	4b5c      	ldr	r3, [pc, #368]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	4959      	ldr	r1, [pc, #356]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296a:	4b54      	ldr	r3, [pc, #336]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002970:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002978:	4950      	ldr	r1, [pc, #320]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800298c:	4b4b      	ldr	r3, [pc, #300]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	4948      	ldr	r1, [pc, #288]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ae:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	493f      	ldr	r1, [pc, #252]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d028      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d0:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029de:	4937      	ldr	r1, [pc, #220]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ee:	d106      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a31      	ldr	r2, [pc, #196]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]
 80029fc:	e011      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a06:	d10c      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f8c8 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a2e:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	491f      	ldr	r1, [pc, #124]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a58:	60d3      	str	r3, [r2, #12]
 8002a5a:	e011      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f899 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02b      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9a:	4908      	ldr	r1, [pc, #32]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a02      	ldr	r2, [pc, #8]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	e014      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f867 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02f      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002afe:	4928      	ldr	r1, [pc, #160]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f844 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
 8002b2a:	e011      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3320      	adds	r3, #32
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f925 	bl	8002d8c <RCCEx_PLLSAI2_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b6a:	490d      	ldr	r1, [pc, #52]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b8e:	4904      	ldr	r1, [pc, #16]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb2:	4b75      	ldr	r3, [pc, #468]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bbe:	4b72      	ldr	r3, [pc, #456]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10d      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
       ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d047      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e044      	b.n	8002c7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d018      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0x86>
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d825      	bhi.n	8002c48 <RCCEx_PLLSAI1_Config+0xa4>
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0x62>
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d009      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x74>
 8002c04:	e020      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c06:	4b60      	ldr	r3, [pc, #384]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11d      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e01a      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c18:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e013      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c2a:	4b57      	ldr	r3, [pc, #348]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c36:	4b54      	ldr	r3, [pc, #336]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c46:	e006      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4c:	e004      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	430b      	orrs	r3, r1
 8002c74:	4944      	ldr	r1, [pc, #272]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d17d      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c80:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a40      	ldr	r2, [pc, #256]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fac4 	bl	8001218 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c94:	f7fe fac0 	bl	8001218 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ca8:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ef      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d160      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc0:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	0912      	lsrs	r2, r2, #4
 8002cd8:	0452      	lsls	r2, r2, #17
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	492a      	ldr	r1, [pc, #168]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	610b      	str	r3, [r1, #16]
 8002ce2:	e027      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d112      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cea:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cf2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6892      	ldr	r2, [r2, #8]
 8002cfa:	0211      	lsls	r1, r2, #8
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6912      	ldr	r2, [r2, #16]
 8002d00:	0852      	lsrs	r2, r2, #1
 8002d02:	3a01      	subs	r2, #1
 8002d04:	0552      	lsls	r2, r2, #21
 8002d06:	430a      	orrs	r2, r1
 8002d08:	491f      	ldr	r1, [pc, #124]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	610b      	str	r3, [r1, #16]
 8002d0e:	e011      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d10:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	0211      	lsls	r1, r2, #8
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6952      	ldr	r2, [r2, #20]
 8002d26:	0852      	lsrs	r2, r2, #1
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0652      	lsls	r2, r2, #25
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	4916      	ldr	r1, [pc, #88]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d34:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a13      	ldr	r2, [pc, #76]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fa6a 	bl	8001218 <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d46:	e009      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d48:	f7fe fa66 	bl	8001218 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d902      	bls.n	8002d5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	73fb      	strb	r3, [r7, #15]
          break;
 8002d5a:	e005      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ef      	beq.n	8002d48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	4904      	ldr	r1, [pc, #16]	@ (8002d88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000

08002d8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d018      	beq.n	8002dd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002da6:	4b67      	ldr	r3, [pc, #412]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d10d      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dbe:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d047      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e044      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d018      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0x86>
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d825      	bhi.n	8002e30 <RCCEx_PLLSAI2_Config+0xa4>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <RCCEx_PLLSAI2_Config+0x62>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d009      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x74>
 8002dec:	e020      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dee:	4b55      	ldr	r3, [pc, #340]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11d      	bne.n	8002e36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfe:	e01a      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e00:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d116      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e013      	b.n	8002e3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e12:	4b4c      	ldr	r3, [pc, #304]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e1e:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e2e:	e006      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	e004      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	4939      	ldr	r1, [pc, #228]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d167      	bne.n	8002f38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e68:	4b36      	ldr	r3, [pc, #216]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a35      	ldr	r2, [pc, #212]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe f9d0 	bl	8001218 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e7a:	e009      	b.n	8002e90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e7c:	f7fe f9cc 	bl	8001218 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d902      	bls.n	8002e90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e8e:	e005      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e90:	4b2c      	ldr	r3, [pc, #176]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ef      	bne.n	8002e7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d14a      	bne.n	8002f38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea8:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	0211      	lsls	r1, r2, #8
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	0912      	lsrs	r2, r2, #4
 8002ec0:	0452      	lsls	r2, r2, #17
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	491f      	ldr	r1, [pc, #124]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	614b      	str	r3, [r1, #20]
 8002eca:	e011      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ed4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	0211      	lsls	r1, r2, #8
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6912      	ldr	r2, [r2, #16]
 8002ee2:	0852      	lsrs	r2, r2, #1
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	0652      	lsls	r2, r2, #25
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	4916      	ldr	r1, [pc, #88]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ef0:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe f98c 	bl	8001218 <HAL_GetTick>
 8002f00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f02:	e009      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f04:	f7fe f988 	bl	8001218 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d902      	bls.n	8002f18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	73fb      	strb	r3, [r7, #15]
          break;
 8002f16:	e005      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ef      	beq.n	8002f04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4904      	ldr	r1, [pc, #16]	@ (8002f44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e049      	b.n	8002fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fe46 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 fe50 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04f      	b.n	80030b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <HAL_TIM_Base_Start_IT+0xc4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01d      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x76>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d018      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x76>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x76>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00e      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x76>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d009      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x76>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x76>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d115      	bne.n	800309a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d015      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d011      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	e008      	b.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e000      	b.n	80030ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40013400 	.word	0x40013400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	00010007 	.word	0x00010007

080030d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e049      	b.n	800317e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f841 	bl	8003186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fd88 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_TIM_PWM_Start+0x24>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e03c      	b.n	800323a <HAL_TIM_PWM_Start+0x9e>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d109      	bne.n	80031da <HAL_TIM_PWM_Start+0x3e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e02f      	b.n	800323a <HAL_TIM_PWM_Start+0x9e>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d109      	bne.n	80031f4 <HAL_TIM_PWM_Start+0x58>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e022      	b.n	800323a <HAL_TIM_PWM_Start+0x9e>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d109      	bne.n	800320e <HAL_TIM_PWM_Start+0x72>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	e015      	b.n	800323a <HAL_TIM_PWM_Start+0x9e>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b10      	cmp	r3, #16
 8003212:	d109      	bne.n	8003228 <HAL_TIM_PWM_Start+0x8c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e008      	b.n	800323a <HAL_TIM_PWM_Start+0x9e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e09c      	b.n	800337c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <HAL_TIM_PWM_Start+0xb6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003250:	e023      	b.n	800329a <HAL_TIM_PWM_Start+0xfe>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d104      	bne.n	8003262 <HAL_TIM_PWM_Start+0xc6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003260:	e01b      	b.n	800329a <HAL_TIM_PWM_Start+0xfe>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0xd6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003270:	e013      	b.n	800329a <HAL_TIM_PWM_Start+0xfe>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0xe6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003280:	e00b      	b.n	800329a <HAL_TIM_PWM_Start+0xfe>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b10      	cmp	r3, #16
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xf6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003290:	e003      	b.n	800329a <HAL_TIM_PWM_Start+0xfe>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f8d8 	bl	8004458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a35      	ldr	r2, [pc, #212]	@ (8003384 <HAL_TIM_PWM_Start+0x1e8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_TIM_PWM_Start+0x13e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a34      	ldr	r2, [pc, #208]	@ (8003388 <HAL_TIM_PWM_Start+0x1ec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_TIM_PWM_Start+0x13e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a32      	ldr	r2, [pc, #200]	@ (800338c <HAL_TIM_PWM_Start+0x1f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_TIM_PWM_Start+0x13e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a31      	ldr	r2, [pc, #196]	@ (8003390 <HAL_TIM_PWM_Start+0x1f4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIM_PWM_Start+0x13e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003394 <HAL_TIM_PWM_Start+0x1f8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_Start+0x142>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_TIM_PWM_Start+0x144>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a22      	ldr	r2, [pc, #136]	@ (8003384 <HAL_TIM_PWM_Start+0x1e8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01d      	beq.n	800333a <HAL_TIM_PWM_Start+0x19e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003306:	d018      	beq.n	800333a <HAL_TIM_PWM_Start+0x19e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a22      	ldr	r2, [pc, #136]	@ (8003398 <HAL_TIM_PWM_Start+0x1fc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_TIM_PWM_Start+0x19e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a21      	ldr	r2, [pc, #132]	@ (800339c <HAL_TIM_PWM_Start+0x200>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00e      	beq.n	800333a <HAL_TIM_PWM_Start+0x19e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1f      	ldr	r2, [pc, #124]	@ (80033a0 <HAL_TIM_PWM_Start+0x204>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_TIM_PWM_Start+0x19e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <HAL_TIM_PWM_Start+0x1ec>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_TIM_PWM_Start+0x19e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a15      	ldr	r2, [pc, #84]	@ (800338c <HAL_TIM_PWM_Start+0x1f0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d115      	bne.n	8003366 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <HAL_TIM_PWM_Start+0x208>)
 8003342:	4013      	ands	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b06      	cmp	r3, #6
 800334a:	d015      	beq.n	8003378 <HAL_TIM_PWM_Start+0x1dc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003352:	d011      	beq.n	8003378 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003364:	e008      	b.n	8003378 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e000      	b.n	800337a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40013400 	.word	0x40013400
 800338c:	40014000 	.word	0x40014000
 8003390:	40014400 	.word	0x40014400
 8003394:	40014800 	.word	0x40014800
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	00010007 	.word	0x00010007

080033a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e097      	b.n	80034ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fc73 	bl	8000cbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80033ec:	f023 0307 	bic.w	r3, r3, #7
 80033f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fc15 	bl	8003c2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4313      	orrs	r3, r2
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003448:	f023 030c 	bic.w	r3, r3, #12
 800344c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003454:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	4313      	orrs	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	011a      	lsls	r2, r3, #4
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	031b      	lsls	r3, r3, #12
 8003478:	4313      	orrs	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4313      	orrs	r3, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003504:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800350c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003514:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800351c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d110      	bne.n	8003546 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800352a:	7b7b      	ldrb	r3, [r7, #13]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e069      	b.n	8003608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003544:	e031      	b.n	80035aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d110      	bne.n	800356e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800354c:	7bbb      	ldrb	r3, [r7, #14]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003552:	7b3b      	ldrb	r3, [r7, #12]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e055      	b.n	8003608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800356c:	e01d      	b.n	80035aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d108      	bne.n	8003586 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	7b7b      	ldrb	r3, [r7, #13]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003580:	7b3b      	ldrb	r3, [r7, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e03e      	b.n	8003608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_TIM_Encoder_Start+0xc4>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d008      	beq.n	80035c8 <HAL_TIM_Encoder_Start+0xd4>
 80035b6:	e00f      	b.n	80035d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 ff49 	bl	8004458 <TIM_CCxChannelCmd>
      break;
 80035c6:	e016      	b.n	80035f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	2104      	movs	r1, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 ff41 	bl	8004458 <TIM_CCxChannelCmd>
      break;
 80035d6:	e00e      	b.n	80035f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 ff39 	bl	8004458 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	2104      	movs	r1, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 ff32 	bl	8004458 <TIM_CCxChannelCmd>
      break;
 80035f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0202 	mvn.w	r2, #2
 8003644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fac7 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fab9 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 faca 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0204 	mvn.w	r2, #4
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 faa1 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa93 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 faa4 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0208 	mvn.w	r2, #8
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2204      	movs	r2, #4
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa7b 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa6d 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa7e 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0210 	mvn.w	r2, #16
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2208      	movs	r2, #8
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa55 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa47 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa58 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0201 	mvn.w	r2, #1
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fc ff14 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00c      	beq.n	80037aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 ff0f 	bl	80045c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 ff07 	bl	80045dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00c      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fa12 	bl	8003c16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0220 	mvn.w	r2, #32
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fecf 	bl	80045b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ff      	b.n	8003a3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b14      	cmp	r3, #20
 800384a:	f200 80f0 	bhi.w	8003a2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800384e:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	080038a9 	.word	0x080038a9
 8003858:	08003a2f 	.word	0x08003a2f
 800385c:	08003a2f 	.word	0x08003a2f
 8003860:	08003a2f 	.word	0x08003a2f
 8003864:	080038e9 	.word	0x080038e9
 8003868:	08003a2f 	.word	0x08003a2f
 800386c:	08003a2f 	.word	0x08003a2f
 8003870:	08003a2f 	.word	0x08003a2f
 8003874:	0800392b 	.word	0x0800392b
 8003878:	08003a2f 	.word	0x08003a2f
 800387c:	08003a2f 	.word	0x08003a2f
 8003880:	08003a2f 	.word	0x08003a2f
 8003884:	0800396b 	.word	0x0800396b
 8003888:	08003a2f 	.word	0x08003a2f
 800388c:	08003a2f 	.word	0x08003a2f
 8003890:	08003a2f 	.word	0x08003a2f
 8003894:	080039ad 	.word	0x080039ad
 8003898:	08003a2f 	.word	0x08003a2f
 800389c:	08003a2f 	.word	0x08003a2f
 80038a0:	08003a2f 	.word	0x08003a2f
 80038a4:	080039ed 	.word	0x080039ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fa62 	bl	8003d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	619a      	str	r2, [r3, #24]
      break;
 80038e6:	e0a5      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fad2 	bl	8003e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	619a      	str	r2, [r3, #24]
      break;
 8003928:	e084      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fb3b 	bl	8003fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0208 	orr.w	r2, r2, #8
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0204 	bic.w	r2, r2, #4
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
      break;
 8003968:	e064      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fba3 	bl	80040bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	61da      	str	r2, [r3, #28]
      break;
 80039aa:	e043      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fbec 	bl	8004190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0208 	orr.w	r2, r2, #8
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039ea:	e023      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fc30 	bl	8004258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a2c:	e002      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
      break;
 8003a32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIM_ConfigClockSource+0x1c>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e0b6      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x18a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa0:	d03e      	beq.n	8003b20 <HAL_TIM_ConfigClockSource+0xd8>
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa6:	f200 8087 	bhi.w	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aae:	f000 8086 	beq.w	8003bbe <HAL_TIM_ConfigClockSource+0x176>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab6:	d87f      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ab8:	2b70      	cmp	r3, #112	@ 0x70
 8003aba:	d01a      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0xaa>
 8003abc:	2b70      	cmp	r3, #112	@ 0x70
 8003abe:	d87b      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ac0:	2b60      	cmp	r3, #96	@ 0x60
 8003ac2:	d050      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x11e>
 8003ac4:	2b60      	cmp	r3, #96	@ 0x60
 8003ac6:	d877      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ac8:	2b50      	cmp	r3, #80	@ 0x50
 8003aca:	d03c      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0xfe>
 8003acc:	2b50      	cmp	r3, #80	@ 0x50
 8003ace:	d873      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d058      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x13e>
 8003ad4:	2b40      	cmp	r3, #64	@ 0x40
 8003ad6:	d86f      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ad8:	2b30      	cmp	r3, #48	@ 0x30
 8003ada:	d064      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8003adc:	2b30      	cmp	r3, #48	@ 0x30
 8003ade:	d86b      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d060      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d867      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05c      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d05a      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8003af0:	e062      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	f000 fc89 	bl	8004418 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	609a      	str	r2, [r3, #8]
      break;
 8003b1e:	e04f      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	f000 fc72 	bl	8004418 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b42:	609a      	str	r2, [r3, #8]
      break;
 8003b44:	e03c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 fbe6 	bl	8004324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2150      	movs	r1, #80	@ 0x50
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fc3f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003b64:	e02c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 fc05 	bl	8004382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2160      	movs	r1, #96	@ 0x60
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fc2f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003b84:	e01c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 fbc6 	bl	8004324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2140      	movs	r1, #64	@ 0x40
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fc1f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e00c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f000 fc16 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003bb6:	e003      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      break;
 8003bbc:	e000      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a46      	ldr	r2, [pc, #280]	@ (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a43      	ldr	r2, [pc, #268]	@ (8003d5c <TIM_Base_SetConfig+0x130>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a42      	ldr	r2, [pc, #264]	@ (8003d60 <TIM_Base_SetConfig+0x134>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a41      	ldr	r2, [pc, #260]	@ (8003d64 <TIM_Base_SetConfig+0x138>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a40      	ldr	r2, [pc, #256]	@ (8003d68 <TIM_Base_SetConfig+0x13c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a35      	ldr	r2, [pc, #212]	@ (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d01b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a32      	ldr	r2, [pc, #200]	@ (8003d5c <TIM_Base_SetConfig+0x130>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d017      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a31      	ldr	r2, [pc, #196]	@ (8003d60 <TIM_Base_SetConfig+0x134>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a30      	ldr	r2, [pc, #192]	@ (8003d64 <TIM_Base_SetConfig+0x138>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00f      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2f      	ldr	r2, [pc, #188]	@ (8003d68 <TIM_Base_SetConfig+0x13c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d6c <TIM_Base_SetConfig+0x140>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d70 <TIM_Base_SetConfig+0x144>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d74 <TIM_Base_SetConfig+0x148>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <TIM_Base_SetConfig+0x13c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <TIM_Base_SetConfig+0x140>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a16      	ldr	r2, [pc, #88]	@ (8003d70 <TIM_Base_SetConfig+0x144>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <TIM_Base_SetConfig+0x148>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d105      	bne.n	8003d4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f023 0201 	bic.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <TIM_OC1_SetConfig+0x10c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00f      	beq.n	8003df8 <TIM_OC1_SetConfig+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <TIM_OC1_SetConfig+0x110>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_OC1_SetConfig+0x80>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e8c <TIM_OC1_SetConfig+0x114>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_OC1_SetConfig+0x80>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a29      	ldr	r2, [pc, #164]	@ (8003e90 <TIM_OC1_SetConfig+0x118>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_OC1_SetConfig+0x80>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <TIM_OC1_SetConfig+0x11c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10c      	bne.n	8003e12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0308 	bic.w	r3, r3, #8
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	@ (8003e84 <TIM_OC1_SetConfig+0x10c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_OC1_SetConfig+0xc2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e88 <TIM_OC1_SetConfig+0x110>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_OC1_SetConfig+0xc2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <TIM_OC1_SetConfig+0x114>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_OC1_SetConfig+0xc2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	@ (8003e90 <TIM_OC1_SetConfig+0x118>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC1_SetConfig+0xc2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a17      	ldr	r2, [pc, #92]	@ (8003e94 <TIM_OC1_SetConfig+0x11c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d111      	bne.n	8003e5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	621a      	str	r2, [r3, #32]
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40013400 	.word	0x40013400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f023 0210 	bic.w	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0320 	bic.w	r3, r3, #32
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a28      	ldr	r2, [pc, #160]	@ (8003f98 <TIM_OC2_SetConfig+0x100>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_OC2_SetConfig+0x6c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a27      	ldr	r2, [pc, #156]	@ (8003f9c <TIM_OC2_SetConfig+0x104>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10d      	bne.n	8003f20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <TIM_OC2_SetConfig+0x100>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <TIM_OC2_SetConfig+0xb0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f9c <TIM_OC2_SetConfig+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <TIM_OC2_SetConfig+0xb0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <TIM_OC2_SetConfig+0x108>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_OC2_SetConfig+0xb0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa4 <TIM_OC2_SetConfig+0x10c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_OC2_SetConfig+0xb0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <TIM_OC2_SetConfig+0x110>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d113      	bne.n	8003f70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40013400 	.word	0x40013400
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <TIM_OC3_SetConfig+0xfc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_OC3_SetConfig+0x6a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <TIM_OC3_SetConfig+0x100>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10d      	bne.n	8004032 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800401c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <TIM_OC3_SetConfig+0xfc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00f      	beq.n	800405a <TIM_OC3_SetConfig+0xae>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <TIM_OC3_SetConfig+0x100>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00b      	beq.n	800405a <TIM_OC3_SetConfig+0xae>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <TIM_OC3_SetConfig+0x104>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_OC3_SetConfig+0xae>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <TIM_OC3_SetConfig+0x108>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC3_SetConfig+0xae>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a18      	ldr	r2, [pc, #96]	@ (80040b8 <TIM_OC3_SetConfig+0x10c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d113      	bne.n	8004082 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	621a      	str	r2, [r3, #32]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800

080040bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	031b      	lsls	r3, r3, #12
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a18      	ldr	r2, [pc, #96]	@ (800417c <TIM_OC4_SetConfig+0xc0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00f      	beq.n	8004140 <TIM_OC4_SetConfig+0x84>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <TIM_OC4_SetConfig+0xc4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_OC4_SetConfig+0x84>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	@ (8004184 <TIM_OC4_SetConfig+0xc8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC4_SetConfig+0x84>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <TIM_OC4_SetConfig+0xcc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC4_SetConfig+0x84>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a14      	ldr	r2, [pc, #80]	@ (800418c <TIM_OC4_SetConfig+0xd0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <TIM_OC5_SetConfig+0xb4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_OC5_SetConfig+0x7a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <TIM_OC5_SetConfig+0xb8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_OC5_SetConfig+0x7a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a15      	ldr	r2, [pc, #84]	@ (800424c <TIM_OC5_SetConfig+0xbc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_OC5_SetConfig+0x7a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a14      	ldr	r2, [pc, #80]	@ (8004250 <TIM_OC5_SetConfig+0xc0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_OC5_SetConfig+0x7a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a13      	ldr	r2, [pc, #76]	@ (8004254 <TIM_OC5_SetConfig+0xc4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d109      	bne.n	800421e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800

08004258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	051b      	lsls	r3, r3, #20
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a18      	ldr	r2, [pc, #96]	@ (8004310 <TIM_OC6_SetConfig+0xb8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_OC6_SetConfig+0x7c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a17      	ldr	r2, [pc, #92]	@ (8004314 <TIM_OC6_SetConfig+0xbc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_OC6_SetConfig+0x7c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <TIM_OC6_SetConfig+0xc0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_OC6_SetConfig+0x7c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a15      	ldr	r2, [pc, #84]	@ (800431c <TIM_OC6_SetConfig+0xc4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC6_SetConfig+0x7c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <TIM_OC6_SetConfig+0xc8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d109      	bne.n	80042e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40013400 	.word	0x40013400
 8004318:	40014000 	.word	0x40014000
 800431c:	40014400 	.word	0x40014400
 8004320:	40014800 	.word	0x40014800

08004324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0201 	bic.w	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 030a 	bic.w	r3, r3, #10
 8004360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004382:	b480      	push	{r7}
 8004384:	b087      	sub	sp, #28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f023 0210 	bic.w	r2, r3, #16
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	f043 0307 	orr.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2201      	movs	r2, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e068      	b.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2e      	ldr	r2, [pc, #184]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2d      	ldr	r2, [pc, #180]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004508:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1e      	ldr	r2, [pc, #120]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01d      	beq.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d018      	beq.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1a      	ldr	r2, [pc, #104]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00e      	beq.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a13      	ldr	r2, [pc, #76]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d004      	beq.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10c      	bne.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4313      	orrs	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40013400 	.word	0x40013400
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40014000 	.word	0x40014000

080045b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e040      	b.n	8004684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fbf2 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	@ 0x24
 800461c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fe90 	bl	800535c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fbd5 	bl	8004dec <UART_SetConfig>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e01b      	b.n	8004684 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800465a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800466a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 ff0f 	bl	80054a0 <UART_CheckIdleState>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	@ 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d177      	bne.n	8004794 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x24>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e070      	b.n	8004796 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2221      	movs	r2, #33	@ 0x21
 80046c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c2:	f7fc fda9 	bl	8001218 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e0:	d108      	bne.n	80046f4 <HAL_UART_Transmit+0x68>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e003      	b.n	80046fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046fc:	e02f      	b.n	800475e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2200      	movs	r2, #0
 8004706:	2180      	movs	r1, #128	@ 0x80
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 ff71 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e03b      	b.n	8004796 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	881a      	ldrh	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	b292      	uxth	r2, r2
 8004732:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3302      	adds	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e007      	b.n	800474c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1c9      	bne.n	80046fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	@ 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 ff3b 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e005      	b.n	8004796 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b0ba      	sub	sp, #232	@ 0xe8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047ce:	4013      	ands	r3, r2
 80047d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d115      	bne.n	8004808 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 82ca 	beq.w	8004d92 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
      }
      return;
 8004806:	e2c4      	b.n	8004d92 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8117 	beq.w	8004a40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800481e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004822:	4b85      	ldr	r3, [pc, #532]	@ (8004a38 <HAL_UART_IRQHandler+0x298>)
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 810a 	beq.w	8004a40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_UART_IRQHandler+0xbc>
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <HAL_UART_IRQHandler+0xec>
 8004868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2202      	movs	r2, #2
 800487a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004882:	f043 0204 	orr.w	r2, r3, #4
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
 8004898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2204      	movs	r2, #4
 80048aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d017      	beq.n	80048f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2208      	movs	r2, #8
 80048e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ee:	f043 0208 	orr.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_UART_IRQHandler+0x18a>
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004908:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00c      	beq.n	800492a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8230 	beq.w	8004d96 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004964:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d005      	beq.n	8004982 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04f      	beq.n	8004a22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fea1 	bl	80056ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004992:	2b40      	cmp	r3, #64	@ 0x40
 8004994:	d141      	bne.n	8004a1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1d9      	bne.n	8004996 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <HAL_UART_IRQHandler+0x29c>)
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc fd69 	bl	80014ce <HAL_DMA_Abort_IT>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d017      	beq.n	8004a32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	e00f      	b.n	8004a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9d4 	bl	8004dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	e00b      	b.n	8004a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9d0 	bl	8004dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	e007      	b.n	8004a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9cc 	bl	8004dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a30:	e1b1      	b.n	8004d96 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a32:	bf00      	nop
    return;
 8004a34:	e1af      	b.n	8004d96 <HAL_UART_IRQHandler+0x5f6>
 8004a36:	bf00      	nop
 8004a38:	04000120 	.word	0x04000120
 8004a3c:	08005793 	.word	0x08005793

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	f040 816a 	bne.w	8004d1e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8163 	beq.w	8004d1e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 815c 	beq.w	8004d1e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b40      	cmp	r3, #64	@ 0x40
 8004a7a:	f040 80d4 	bne.w	8004c26 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80ad 	beq.w	8004bee <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	f080 80a5 	bcs.w	8004bee <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 8086 	bne.w	8004bcc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004aee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1da      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e1      	bne.n	8004b0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e3      	bne.n	8004b46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b9c:	f023 0310 	bic.w	r3, r3, #16
 8004ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e4      	bne.n	8004b8c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc fc43 	bl	8001452 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8f4 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bec:	e0d5      	b.n	8004d9a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	f040 80ce 	bne.w	8004d9a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	f040 80c5 	bne.w	8004d9a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8d8 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
      return;
 8004c24:	e0b9      	b.n	8004d9a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80ab 	beq.w	8004d9e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a6 	beq.w	8004d9e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e4      	bne.n	8004c52 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	623b      	str	r3, [r7, #32]
   return(result);
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cac:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e3      	bne.n	8004c88 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f023 0310 	bic.w	r3, r3, #16
 8004ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	69b9      	ldr	r1, [r7, #24]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	617b      	str	r3, [r7, #20]
   return(result);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e4      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f85c 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d1c:	e03f      	b.n	8004d9e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <HAL_UART_IRQHandler+0x5a8>
 8004d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fd66 	bl	8005812 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d46:	e02d      	b.n	8004da4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01c      	beq.n	8004da2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
    }
    return;
 8004d70:	e017      	b.n	8004da2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d012      	beq.n	8004da4 <HAL_UART_IRQHandler+0x604>
 8004d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fd17 	bl	80057be <UART_EndTransmit_IT>
    return;
 8004d90:	e008      	b.n	8004da4 <HAL_UART_IRQHandler+0x604>
      return;
 8004d92:	bf00      	nop
 8004d94:	e006      	b.n	8004da4 <HAL_UART_IRQHandler+0x604>
    return;
 8004d96:	bf00      	nop
 8004d98:	e004      	b.n	8004da4 <HAL_UART_IRQHandler+0x604>
      return;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <HAL_UART_IRQHandler+0x604>
      return;
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <HAL_UART_IRQHandler+0x604>
    return;
 8004da2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004da4:	37e8      	adds	r7, #232	@ 0xe8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop

08004dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df0:	b08a      	sub	sp, #40	@ 0x28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4ba4      	ldr	r3, [pc, #656]	@ (80050ac <UART_SetConfig+0x2c0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a99      	ldr	r2, [pc, #612]	@ (80050b0 <UART_SetConfig+0x2c4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	4313      	orrs	r3, r2
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a90      	ldr	r2, [pc, #576]	@ (80050b4 <UART_SetConfig+0x2c8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d126      	bne.n	8004ec4 <UART_SetConfig+0xd8>
 8004e76:	4b90      	ldr	r3, [pc, #576]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d81b      	bhi.n	8004ebc <UART_SetConfig+0xd0>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <UART_SetConfig+0xa0>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e116      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e112      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb2:	e10e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eba:	e10a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec2:	e106      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80050bc <UART_SetConfig+0x2d0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d138      	bne.n	8004f40 <UART_SetConfig+0x154>
 8004ece:	4b7a      	ldr	r3, [pc, #488]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f003 030c 	and.w	r3, r3, #12
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d82d      	bhi.n	8004f38 <UART_SetConfig+0x14c>
 8004edc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <UART_SetConfig+0xf8>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	08004f39 	.word	0x08004f39
 8004eec:	08004f39 	.word	0x08004f39
 8004ef0:	08004f39 	.word	0x08004f39
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f39 	.word	0x08004f39
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f39 	.word	0x08004f39
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	08004f39 	.word	0x08004f39
 8004f14:	08004f31 	.word	0x08004f31
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e0d8      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f20:	2302      	movs	r3, #2
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e0d4      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e0d0      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e0cc      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e0c8      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5e      	ldr	r2, [pc, #376]	@ (80050c0 <UART_SetConfig+0x2d4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d125      	bne.n	8004f96 <UART_SetConfig+0x1aa>
 8004f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d016      	beq.n	8004f86 <UART_SetConfig+0x19a>
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d818      	bhi.n	8004f8e <UART_SetConfig+0x1a2>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d00a      	beq.n	8004f76 <UART_SetConfig+0x18a>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d814      	bhi.n	8004f8e <UART_SetConfig+0x1a2>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <UART_SetConfig+0x182>
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d008      	beq.n	8004f7e <UART_SetConfig+0x192>
 8004f6c:	e00f      	b.n	8004f8e <UART_SetConfig+0x1a2>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f74:	e0ad      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f76:	2302      	movs	r3, #2
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7c:	e0a9      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f7e:	2304      	movs	r3, #4
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f84:	e0a5      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f86:	2308      	movs	r3, #8
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8c:	e0a1      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f8e:	2310      	movs	r3, #16
 8004f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f94:	e09d      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80050c4 <UART_SetConfig+0x2d8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d125      	bne.n	8004fec <UART_SetConfig+0x200>
 8004fa0:	4b45      	ldr	r3, [pc, #276]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fac:	d016      	beq.n	8004fdc <UART_SetConfig+0x1f0>
 8004fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb0:	d818      	bhi.n	8004fe4 <UART_SetConfig+0x1f8>
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d00a      	beq.n	8004fcc <UART_SetConfig+0x1e0>
 8004fb6:	2b80      	cmp	r3, #128	@ 0x80
 8004fb8:	d814      	bhi.n	8004fe4 <UART_SetConfig+0x1f8>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <UART_SetConfig+0x1d8>
 8004fbe:	2b40      	cmp	r3, #64	@ 0x40
 8004fc0:	d008      	beq.n	8004fd4 <UART_SetConfig+0x1e8>
 8004fc2:	e00f      	b.n	8004fe4 <UART_SetConfig+0x1f8>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e082      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e07e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e07a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e076      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fea:	e072      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <UART_SetConfig+0x2dc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d12a      	bne.n	800504c <UART_SetConfig+0x260>
 8004ff6:	4b30      	ldr	r3, [pc, #192]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005004:	d01a      	beq.n	800503c <UART_SetConfig+0x250>
 8005006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800500a:	d81b      	bhi.n	8005044 <UART_SetConfig+0x258>
 800500c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005010:	d00c      	beq.n	800502c <UART_SetConfig+0x240>
 8005012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005016:	d815      	bhi.n	8005044 <UART_SetConfig+0x258>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <UART_SetConfig+0x238>
 800501c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005020:	d008      	beq.n	8005034 <UART_SetConfig+0x248>
 8005022:	e00f      	b.n	8005044 <UART_SetConfig+0x258>
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e052      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e04e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e04a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e046      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504a:	e042      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <UART_SetConfig+0x2c4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d13a      	bne.n	80050cc <UART_SetConfig+0x2e0>
 8005056:	4b18      	ldr	r3, [pc, #96]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005064:	d01a      	beq.n	800509c <UART_SetConfig+0x2b0>
 8005066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800506a:	d81b      	bhi.n	80050a4 <UART_SetConfig+0x2b8>
 800506c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005070:	d00c      	beq.n	800508c <UART_SetConfig+0x2a0>
 8005072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005076:	d815      	bhi.n	80050a4 <UART_SetConfig+0x2b8>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <UART_SetConfig+0x298>
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005080:	d008      	beq.n	8005094 <UART_SetConfig+0x2a8>
 8005082:	e00f      	b.n	80050a4 <UART_SetConfig+0x2b8>
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e022      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800508c:	2302      	movs	r3, #2
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e01e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e01a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e016      	b.n	80050d2 <UART_SetConfig+0x2e6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050aa:	e012      	b.n	80050d2 <UART_SetConfig+0x2e6>
 80050ac:	efff69f3 	.word	0xefff69f3
 80050b0:	40008000 	.word	0x40008000
 80050b4:	40013800 	.word	0x40013800
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40004800 	.word	0x40004800
 80050c4:	40004c00 	.word	0x40004c00
 80050c8:	40005000 	.word	0x40005000
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a9f      	ldr	r2, [pc, #636]	@ (8005354 <UART_SetConfig+0x568>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d17a      	bne.n	80051d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d824      	bhi.n	800512e <UART_SetConfig+0x342>
 80050e4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x300>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005111 	.word	0x08005111
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	08005119 	.word	0x08005119
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800511f 	.word	0x0800511f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800512f 	.word	0x0800512f
 800510c:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fd f9d2 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8005114:	61f8      	str	r0, [r7, #28]
        break;
 8005116:	e010      	b.n	800513a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b8f      	ldr	r3, [pc, #572]	@ (8005358 <UART_SetConfig+0x56c>)
 800511a:	61fb      	str	r3, [r7, #28]
        break;
 800511c:	e00d      	b.n	800513a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fd f933 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8005122:	61f8      	str	r0, [r7, #28]
        break;
 8005124:	e009      	b.n	800513a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512a:	61fb      	str	r3, [r7, #28]
        break;
 800512c:	e005      	b.n	800513a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80fb 	beq.w	8005338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	429a      	cmp	r2, r3
 8005150:	d305      	bcc.n	800515e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005164:	e0e8      	b.n	8005338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2200      	movs	r2, #0
 800516a:	461c      	mov	r4, r3
 800516c:	4615      	mov	r5, r2
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	022b      	lsls	r3, r5, #8
 8005178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800517c:	0222      	lsls	r2, r4, #8
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	6849      	ldr	r1, [r1, #4]
 8005182:	0849      	lsrs	r1, r1, #1
 8005184:	2000      	movs	r0, #0
 8005186:	4688      	mov	r8, r1
 8005188:	4681      	mov	r9, r0
 800518a:	eb12 0a08 	adds.w	sl, r2, r8
 800518e:	eb43 0b09 	adc.w	fp, r3, r9
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	4650      	mov	r0, sl
 80051a2:	4659      	mov	r1, fp
 80051a4:	f7fb f864 	bl	8000270 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4613      	mov	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b6:	d308      	bcc.n	80051ca <UART_SetConfig+0x3de>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051be:	d204      	bcs.n	80051ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	e0b6      	b.n	8005338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d0:	e0b2      	b.n	8005338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051da:	d15e      	bne.n	800529a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d828      	bhi.n	8005236 <UART_SetConfig+0x44a>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <UART_SetConfig+0x400>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005221 	.word	0x08005221
 80051f8:	08005237 	.word	0x08005237
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005237 	.word	0x08005237
 8005204:	08005237 	.word	0x08005237
 8005208:	08005237 	.word	0x08005237
 800520c:	0800522f 	.word	0x0800522f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7fd f952 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e014      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fd f964 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 800521c:	61f8      	str	r0, [r7, #28]
        break;
 800521e:	e010      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005220:	4b4d      	ldr	r3, [pc, #308]	@ (8005358 <UART_SetConfig+0x56c>)
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e00d      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005226:	f7fd f8af 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800522a:	61f8      	str	r0, [r7, #28]
        break;
 800522c:	e009      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005232:	61fb      	str	r3, [r7, #28]
        break;
 8005234:	e005      	b.n	8005242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d077      	beq.n	8005338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005a      	lsls	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	441a      	add	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d916      	bls.n	8005292 <UART_SetConfig+0x4a6>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526a:	d212      	bcs.n	8005292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f023 030f 	bic.w	r3, r3, #15
 8005274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	b29a      	uxth	r2, r3
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	4313      	orrs	r3, r2
 8005286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	8afa      	ldrh	r2, [r7, #22]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e052      	b.n	8005338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005298:	e04e      	b.n	8005338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d827      	bhi.n	80052f2 <UART_SetConfig+0x506>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <UART_SetConfig+0x4bc>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	080052f3 	.word	0x080052f3
 80052b8:	080052e3 	.word	0x080052e3
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	080052eb 	.word	0x080052eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fd f8f4 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 80052d0:	61f8      	str	r0, [r7, #28]
        break;
 80052d2:	e014      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7fd f906 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 80052d8:	61f8      	str	r0, [r7, #28]
        break;
 80052da:	e010      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <UART_SetConfig+0x56c>)
 80052de:	61fb      	str	r3, [r7, #28]
        break;
 80052e0:	e00d      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e2:	f7fd f851 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 80052e6:	61f8      	str	r0, [r7, #28]
        break;
 80052e8:	e009      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ee:	61fb      	str	r3, [r7, #28]
        break;
 80052f0:	e005      	b.n	80052fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052fc:	bf00      	nop
    }

    if (pclk != 0U)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d019      	beq.n	8005338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	085a      	lsrs	r2, r3, #1
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b0f      	cmp	r3, #15
 800531c:	d909      	bls.n	8005332 <UART_SetConfig+0x546>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005324:	d205      	bcs.n	8005332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e002      	b.n	8005338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	@ 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	40008000 	.word	0x40008000
 8005358:	00f42400 	.word	0x00f42400

0800535c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01a      	beq.n	8005472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800545a:	d10a      	bne.n	8005472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b098      	sub	sp, #96	@ 0x60
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b0:	f7fb feb2 	bl	8001218 <HAL_GetTick>
 80054b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d12e      	bne.n	8005522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f88c 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d021      	beq.n	8005522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e062      	b.n	80055e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b04      	cmp	r3, #4
 800552e:	d149      	bne.n	80055c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f856 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03c      	beq.n	80055c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	623b      	str	r3, [r7, #32]
   return(result);
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005568:	633b      	str	r3, [r7, #48]	@ 0x30
 800556a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800556e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60fb      	str	r3, [r7, #12]
   return(result);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e011      	b.n	80055e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3758      	adds	r7, #88	@ 0x58
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	e04f      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d04b      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fb fe05 	bl	8001218 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <UART_WaitOnFlagUntilTimeout+0x30>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e04e      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d037      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b80      	cmp	r3, #128	@ 0x80
 8005636:	d034      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b40      	cmp	r3, #64	@ 0x40
 800563c:	d031      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d110      	bne.n	800566e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f838 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2208      	movs	r2, #8
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e029      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800567c:	d111      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f81e 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e00f      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	bf0c      	ite	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	2300      	movne	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d0a0      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b095      	sub	sp, #84	@ 0x54
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	61fb      	str	r3, [r7, #28]
   return(result);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800572a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573c:	2b01      	cmp	r3, #1
 800573e:	d118      	bne.n	8005772 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	60bb      	str	r3, [r7, #8]
   return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	647b      	str	r3, [r7, #68]	@ 0x44
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	613b      	str	r3, [r7, #16]
   return(result);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005786:	bf00      	nop
 8005788:	3754      	adds	r7, #84	@ 0x54
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff fb05 	bl	8004dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b088      	sub	sp, #32
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	613b      	str	r3, [r7, #16]
   return(result);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fad1 	bl	8004dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800580a:	bf00      	nop
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <std>:
 8005828:	2300      	movs	r3, #0
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
 800582e:	e9c0 3300 	strd	r3, r3, [r0]
 8005832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005836:	6083      	str	r3, [r0, #8]
 8005838:	8181      	strh	r1, [r0, #12]
 800583a:	6643      	str	r3, [r0, #100]	@ 0x64
 800583c:	81c2      	strh	r2, [r0, #14]
 800583e:	6183      	str	r3, [r0, #24]
 8005840:	4619      	mov	r1, r3
 8005842:	2208      	movs	r2, #8
 8005844:	305c      	adds	r0, #92	@ 0x5c
 8005846:	f000 f906 	bl	8005a56 <memset>
 800584a:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <std+0x58>)
 800584c:	6263      	str	r3, [r4, #36]	@ 0x24
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <std+0x5c>)
 8005850:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <std+0x60>)
 8005854:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x64>)
 8005858:	6323      	str	r3, [r4, #48]	@ 0x30
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <std+0x68>)
 800585c:	6224      	str	r4, [r4, #32]
 800585e:	429c      	cmp	r4, r3
 8005860:	d006      	beq.n	8005870 <std+0x48>
 8005862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005866:	4294      	cmp	r4, r2
 8005868:	d002      	beq.n	8005870 <std+0x48>
 800586a:	33d0      	adds	r3, #208	@ 0xd0
 800586c:	429c      	cmp	r4, r3
 800586e:	d105      	bne.n	800587c <std+0x54>
 8005870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005878:	f000 b966 	b.w	8005b48 <__retarget_lock_init_recursive>
 800587c:	bd10      	pop	{r4, pc}
 800587e:	bf00      	nop
 8005880:	080059d1 	.word	0x080059d1
 8005884:	080059f3 	.word	0x080059f3
 8005888:	08005a2b 	.word	0x08005a2b
 800588c:	08005a4f 	.word	0x08005a4f
 8005890:	20000250 	.word	0x20000250

08005894 <stdio_exit_handler>:
 8005894:	4a02      	ldr	r2, [pc, #8]	@ (80058a0 <stdio_exit_handler+0xc>)
 8005896:	4903      	ldr	r1, [pc, #12]	@ (80058a4 <stdio_exit_handler+0x10>)
 8005898:	4803      	ldr	r0, [pc, #12]	@ (80058a8 <stdio_exit_handler+0x14>)
 800589a:	f000 b869 	b.w	8005970 <_fwalk_sglue>
 800589e:	bf00      	nop
 80058a0:	20000014 	.word	0x20000014
 80058a4:	080063e9 	.word	0x080063e9
 80058a8:	20000024 	.word	0x20000024

080058ac <cleanup_stdio>:
 80058ac:	6841      	ldr	r1, [r0, #4]
 80058ae:	4b0c      	ldr	r3, [pc, #48]	@ (80058e0 <cleanup_stdio+0x34>)
 80058b0:	4299      	cmp	r1, r3
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
 80058b6:	d001      	beq.n	80058bc <cleanup_stdio+0x10>
 80058b8:	f000 fd96 	bl	80063e8 <_fflush_r>
 80058bc:	68a1      	ldr	r1, [r4, #8]
 80058be:	4b09      	ldr	r3, [pc, #36]	@ (80058e4 <cleanup_stdio+0x38>)
 80058c0:	4299      	cmp	r1, r3
 80058c2:	d002      	beq.n	80058ca <cleanup_stdio+0x1e>
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fd8f 	bl	80063e8 <_fflush_r>
 80058ca:	68e1      	ldr	r1, [r4, #12]
 80058cc:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <cleanup_stdio+0x3c>)
 80058ce:	4299      	cmp	r1, r3
 80058d0:	d004      	beq.n	80058dc <cleanup_stdio+0x30>
 80058d2:	4620      	mov	r0, r4
 80058d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d8:	f000 bd86 	b.w	80063e8 <_fflush_r>
 80058dc:	bd10      	pop	{r4, pc}
 80058de:	bf00      	nop
 80058e0:	20000250 	.word	0x20000250
 80058e4:	200002b8 	.word	0x200002b8
 80058e8:	20000320 	.word	0x20000320

080058ec <global_stdio_init.part.0>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <global_stdio_init.part.0+0x30>)
 80058f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005920 <global_stdio_init.part.0+0x34>)
 80058f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005924 <global_stdio_init.part.0+0x38>)
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	4620      	mov	r0, r4
 80058f8:	2200      	movs	r2, #0
 80058fa:	2104      	movs	r1, #4
 80058fc:	f7ff ff94 	bl	8005828 <std>
 8005900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005904:	2201      	movs	r2, #1
 8005906:	2109      	movs	r1, #9
 8005908:	f7ff ff8e 	bl	8005828 <std>
 800590c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005910:	2202      	movs	r2, #2
 8005912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005916:	2112      	movs	r1, #18
 8005918:	f7ff bf86 	b.w	8005828 <std>
 800591c:	20000388 	.word	0x20000388
 8005920:	20000250 	.word	0x20000250
 8005924:	08005895 	.word	0x08005895

08005928 <__sfp_lock_acquire>:
 8005928:	4801      	ldr	r0, [pc, #4]	@ (8005930 <__sfp_lock_acquire+0x8>)
 800592a:	f000 b90e 	b.w	8005b4a <__retarget_lock_acquire_recursive>
 800592e:	bf00      	nop
 8005930:	20000391 	.word	0x20000391

08005934 <__sfp_lock_release>:
 8005934:	4801      	ldr	r0, [pc, #4]	@ (800593c <__sfp_lock_release+0x8>)
 8005936:	f000 b909 	b.w	8005b4c <__retarget_lock_release_recursive>
 800593a:	bf00      	nop
 800593c:	20000391 	.word	0x20000391

08005940 <__sinit>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4604      	mov	r4, r0
 8005944:	f7ff fff0 	bl	8005928 <__sfp_lock_acquire>
 8005948:	6a23      	ldr	r3, [r4, #32]
 800594a:	b11b      	cbz	r3, 8005954 <__sinit+0x14>
 800594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005950:	f7ff bff0 	b.w	8005934 <__sfp_lock_release>
 8005954:	4b04      	ldr	r3, [pc, #16]	@ (8005968 <__sinit+0x28>)
 8005956:	6223      	str	r3, [r4, #32]
 8005958:	4b04      	ldr	r3, [pc, #16]	@ (800596c <__sinit+0x2c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1f5      	bne.n	800594c <__sinit+0xc>
 8005960:	f7ff ffc4 	bl	80058ec <global_stdio_init.part.0>
 8005964:	e7f2      	b.n	800594c <__sinit+0xc>
 8005966:	bf00      	nop
 8005968:	080058ad 	.word	0x080058ad
 800596c:	20000388 	.word	0x20000388

08005970 <_fwalk_sglue>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	4607      	mov	r7, r0
 8005976:	4688      	mov	r8, r1
 8005978:	4614      	mov	r4, r2
 800597a:	2600      	movs	r6, #0
 800597c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005980:	f1b9 0901 	subs.w	r9, r9, #1
 8005984:	d505      	bpl.n	8005992 <_fwalk_sglue+0x22>
 8005986:	6824      	ldr	r4, [r4, #0]
 8005988:	2c00      	cmp	r4, #0
 800598a:	d1f7      	bne.n	800597c <_fwalk_sglue+0xc>
 800598c:	4630      	mov	r0, r6
 800598e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d907      	bls.n	80059a8 <_fwalk_sglue+0x38>
 8005998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800599c:	3301      	adds	r3, #1
 800599e:	d003      	beq.n	80059a8 <_fwalk_sglue+0x38>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4638      	mov	r0, r7
 80059a4:	47c0      	blx	r8
 80059a6:	4306      	orrs	r6, r0
 80059a8:	3568      	adds	r5, #104	@ 0x68
 80059aa:	e7e9      	b.n	8005980 <_fwalk_sglue+0x10>

080059ac <iprintf>:
 80059ac:	b40f      	push	{r0, r1, r2, r3}
 80059ae:	b507      	push	{r0, r1, r2, lr}
 80059b0:	4906      	ldr	r1, [pc, #24]	@ (80059cc <iprintf+0x20>)
 80059b2:	ab04      	add	r3, sp, #16
 80059b4:	6808      	ldr	r0, [r1, #0]
 80059b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ba:	6881      	ldr	r1, [r0, #8]
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	f000 f9e9 	bl	8005d94 <_vfiprintf_r>
 80059c2:	b003      	add	sp, #12
 80059c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c8:	b004      	add	sp, #16
 80059ca:	4770      	bx	lr
 80059cc:	20000020 	.word	0x20000020

080059d0 <__sread>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	460c      	mov	r4, r1
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	f000 f868 	bl	8005aac <_read_r>
 80059dc:	2800      	cmp	r0, #0
 80059de:	bfab      	itete	ge
 80059e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059e2:	89a3      	ldrhlt	r3, [r4, #12]
 80059e4:	181b      	addge	r3, r3, r0
 80059e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059ea:	bfac      	ite	ge
 80059ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ee:	81a3      	strhlt	r3, [r4, #12]
 80059f0:	bd10      	pop	{r4, pc}

080059f2 <__swrite>:
 80059f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	461f      	mov	r7, r3
 80059f8:	898b      	ldrh	r3, [r1, #12]
 80059fa:	05db      	lsls	r3, r3, #23
 80059fc:	4605      	mov	r5, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	4616      	mov	r6, r2
 8005a02:	d505      	bpl.n	8005a10 <__swrite+0x1e>
 8005a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a08:	2302      	movs	r3, #2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f000 f83c 	bl	8005a88 <_lseek_r>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a1a:	81a3      	strh	r3, [r4, #12]
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4628      	mov	r0, r5
 8005a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a26:	f000 b853 	b.w	8005ad0 <_write_r>

08005a2a <__sseek>:
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a32:	f000 f829 	bl	8005a88 <_lseek_r>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	bf15      	itete	ne
 8005a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a46:	81a3      	strheq	r3, [r4, #12]
 8005a48:	bf18      	it	ne
 8005a4a:	81a3      	strhne	r3, [r4, #12]
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <__sclose>:
 8005a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a52:	f000 b809 	b.w	8005a68 <_close_r>

08005a56 <memset>:
 8005a56:	4402      	add	r2, r0
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d100      	bne.n	8005a60 <memset+0xa>
 8005a5e:	4770      	bx	lr
 8005a60:	f803 1b01 	strb.w	r1, [r3], #1
 8005a64:	e7f9      	b.n	8005a5a <memset+0x4>
	...

08005a68 <_close_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d06      	ldr	r5, [pc, #24]	@ (8005a84 <_close_r+0x1c>)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f7fb fac1 	bl	8000ffa <_close>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_close_r+0x1a>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_close_r+0x1a>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	2000038c 	.word	0x2000038c

08005a88 <_lseek_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d07      	ldr	r5, [pc, #28]	@ (8005aa8 <_lseek_r+0x20>)
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	4608      	mov	r0, r1
 8005a90:	4611      	mov	r1, r2
 8005a92:	2200      	movs	r2, #0
 8005a94:	602a      	str	r2, [r5, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f7fb fad6 	bl	8001048 <_lseek>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_lseek_r+0x1e>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_lseek_r+0x1e>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	2000038c 	.word	0x2000038c

08005aac <_read_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	@ (8005acc <_read_r+0x20>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fb fa64 	bl	8000f88 <_read>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_read_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_read_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	2000038c 	.word	0x2000038c

08005ad0 <_write_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d07      	ldr	r5, [pc, #28]	@ (8005af0 <_write_r+0x20>)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	4611      	mov	r1, r2
 8005ada:	2200      	movs	r2, #0
 8005adc:	602a      	str	r2, [r5, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f7fb fa6f 	bl	8000fc2 <_write>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_write_r+0x1e>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_write_r+0x1e>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	2000038c 	.word	0x2000038c

08005af4 <__errno>:
 8005af4:	4b01      	ldr	r3, [pc, #4]	@ (8005afc <__errno+0x8>)
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	20000020 	.word	0x20000020

08005b00 <__libc_init_array>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4d0d      	ldr	r5, [pc, #52]	@ (8005b38 <__libc_init_array+0x38>)
 8005b04:	4c0d      	ldr	r4, [pc, #52]	@ (8005b3c <__libc_init_array+0x3c>)
 8005b06:	1b64      	subs	r4, r4, r5
 8005b08:	10a4      	asrs	r4, r4, #2
 8005b0a:	2600      	movs	r6, #0
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	d109      	bne.n	8005b24 <__libc_init_array+0x24>
 8005b10:	4d0b      	ldr	r5, [pc, #44]	@ (8005b40 <__libc_init_array+0x40>)
 8005b12:	4c0c      	ldr	r4, [pc, #48]	@ (8005b44 <__libc_init_array+0x44>)
 8005b14:	f000 fdb8 	bl	8006688 <_init>
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	42a6      	cmp	r6, r4
 8005b20:	d105      	bne.n	8005b2e <__libc_init_array+0x2e>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b28:	4798      	blx	r3
 8005b2a:	3601      	adds	r6, #1
 8005b2c:	e7ee      	b.n	8005b0c <__libc_init_array+0xc>
 8005b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b32:	4798      	blx	r3
 8005b34:	3601      	adds	r6, #1
 8005b36:	e7f2      	b.n	8005b1e <__libc_init_array+0x1e>
 8005b38:	0800673c 	.word	0x0800673c
 8005b3c:	0800673c 	.word	0x0800673c
 8005b40:	0800673c 	.word	0x0800673c
 8005b44:	08006740 	.word	0x08006740

08005b48 <__retarget_lock_init_recursive>:
 8005b48:	4770      	bx	lr

08005b4a <__retarget_lock_acquire_recursive>:
 8005b4a:	4770      	bx	lr

08005b4c <__retarget_lock_release_recursive>:
 8005b4c:	4770      	bx	lr
	...

08005b50 <_free_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4605      	mov	r5, r0
 8005b54:	2900      	cmp	r1, #0
 8005b56:	d041      	beq.n	8005bdc <_free_r+0x8c>
 8005b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5c:	1f0c      	subs	r4, r1, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bfb8      	it	lt
 8005b62:	18e4      	addlt	r4, r4, r3
 8005b64:	f000 f8e0 	bl	8005d28 <__malloc_lock>
 8005b68:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <_free_r+0x90>)
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	b933      	cbnz	r3, 8005b7c <_free_r+0x2c>
 8005b6e:	6063      	str	r3, [r4, #4]
 8005b70:	6014      	str	r4, [r2, #0]
 8005b72:	4628      	mov	r0, r5
 8005b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b78:	f000 b8dc 	b.w	8005d34 <__malloc_unlock>
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	d908      	bls.n	8005b92 <_free_r+0x42>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	1821      	adds	r1, r4, r0
 8005b84:	428b      	cmp	r3, r1
 8005b86:	bf01      	itttt	eq
 8005b88:	6819      	ldreq	r1, [r3, #0]
 8005b8a:	685b      	ldreq	r3, [r3, #4]
 8005b8c:	1809      	addeq	r1, r1, r0
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	e7ed      	b.n	8005b6e <_free_r+0x1e>
 8005b92:	461a      	mov	r2, r3
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	b10b      	cbz	r3, 8005b9c <_free_r+0x4c>
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d9fa      	bls.n	8005b92 <_free_r+0x42>
 8005b9c:	6811      	ldr	r1, [r2, #0]
 8005b9e:	1850      	adds	r0, r2, r1
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d10b      	bne.n	8005bbc <_free_r+0x6c>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	4401      	add	r1, r0
 8005ba8:	1850      	adds	r0, r2, r1
 8005baa:	4283      	cmp	r3, r0
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	d1e0      	bne.n	8005b72 <_free_r+0x22>
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	6053      	str	r3, [r2, #4]
 8005bb6:	4408      	add	r0, r1
 8005bb8:	6010      	str	r0, [r2, #0]
 8005bba:	e7da      	b.n	8005b72 <_free_r+0x22>
 8005bbc:	d902      	bls.n	8005bc4 <_free_r+0x74>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	602b      	str	r3, [r5, #0]
 8005bc2:	e7d6      	b.n	8005b72 <_free_r+0x22>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	1821      	adds	r1, r4, r0
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf04      	itt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	bf04      	itt	eq
 8005bd4:	1809      	addeq	r1, r1, r0
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	6054      	str	r4, [r2, #4]
 8005bda:	e7ca      	b.n	8005b72 <_free_r+0x22>
 8005bdc:	bd38      	pop	{r3, r4, r5, pc}
 8005bde:	bf00      	nop
 8005be0:	20000398 	.word	0x20000398

08005be4 <sbrk_aligned>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	4e0f      	ldr	r6, [pc, #60]	@ (8005c24 <sbrk_aligned+0x40>)
 8005be8:	460c      	mov	r4, r1
 8005bea:	6831      	ldr	r1, [r6, #0]
 8005bec:	4605      	mov	r5, r0
 8005bee:	b911      	cbnz	r1, 8005bf6 <sbrk_aligned+0x12>
 8005bf0:	f000 fcb6 	bl	8006560 <_sbrk_r>
 8005bf4:	6030      	str	r0, [r6, #0]
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f000 fcb1 	bl	8006560 <_sbrk_r>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d103      	bne.n	8005c0a <sbrk_aligned+0x26>
 8005c02:	f04f 34ff 	mov.w	r4, #4294967295
 8005c06:	4620      	mov	r0, r4
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	1cc4      	adds	r4, r0, #3
 8005c0c:	f024 0403 	bic.w	r4, r4, #3
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d0f8      	beq.n	8005c06 <sbrk_aligned+0x22>
 8005c14:	1a21      	subs	r1, r4, r0
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 fca2 	bl	8006560 <_sbrk_r>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d1f2      	bne.n	8005c06 <sbrk_aligned+0x22>
 8005c20:	e7ef      	b.n	8005c02 <sbrk_aligned+0x1e>
 8005c22:	bf00      	nop
 8005c24:	20000394 	.word	0x20000394

08005c28 <_malloc_r>:
 8005c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	1ccd      	adds	r5, r1, #3
 8005c2e:	f025 0503 	bic.w	r5, r5, #3
 8005c32:	3508      	adds	r5, #8
 8005c34:	2d0c      	cmp	r5, #12
 8005c36:	bf38      	it	cc
 8005c38:	250c      	movcc	r5, #12
 8005c3a:	2d00      	cmp	r5, #0
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	db01      	blt.n	8005c44 <_malloc_r+0x1c>
 8005c40:	42a9      	cmp	r1, r5
 8005c42:	d904      	bls.n	8005c4e <_malloc_r+0x26>
 8005c44:	230c      	movs	r3, #12
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d24 <_malloc_r+0xfc>
 8005c52:	f000 f869 	bl	8005d28 <__malloc_lock>
 8005c56:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5a:	461c      	mov	r4, r3
 8005c5c:	bb44      	cbnz	r4, 8005cb0 <_malloc_r+0x88>
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4630      	mov	r0, r6
 8005c62:	f7ff ffbf 	bl	8005be4 <sbrk_aligned>
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	4604      	mov	r4, r0
 8005c6a:	d158      	bne.n	8005d1e <_malloc_r+0xf6>
 8005c6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c70:	4627      	mov	r7, r4
 8005c72:	2f00      	cmp	r7, #0
 8005c74:	d143      	bne.n	8005cfe <_malloc_r+0xd6>
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	d04b      	beq.n	8005d12 <_malloc_r+0xea>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	4630      	mov	r0, r6
 8005c80:	eb04 0903 	add.w	r9, r4, r3
 8005c84:	f000 fc6c 	bl	8006560 <_sbrk_r>
 8005c88:	4581      	cmp	r9, r0
 8005c8a:	d142      	bne.n	8005d12 <_malloc_r+0xea>
 8005c8c:	6821      	ldr	r1, [r4, #0]
 8005c8e:	1a6d      	subs	r5, r5, r1
 8005c90:	4629      	mov	r1, r5
 8005c92:	4630      	mov	r0, r6
 8005c94:	f7ff ffa6 	bl	8005be4 <sbrk_aligned>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d03a      	beq.n	8005d12 <_malloc_r+0xea>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	442b      	add	r3, r5
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	bb62      	cbnz	r2, 8005d04 <_malloc_r+0xdc>
 8005caa:	f8c8 7000 	str.w	r7, [r8]
 8005cae:	e00f      	b.n	8005cd0 <_malloc_r+0xa8>
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	1b52      	subs	r2, r2, r5
 8005cb4:	d420      	bmi.n	8005cf8 <_malloc_r+0xd0>
 8005cb6:	2a0b      	cmp	r2, #11
 8005cb8:	d917      	bls.n	8005cea <_malloc_r+0xc2>
 8005cba:	1961      	adds	r1, r4, r5
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	6025      	str	r5, [r4, #0]
 8005cc0:	bf18      	it	ne
 8005cc2:	6059      	strne	r1, [r3, #4]
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	bf08      	it	eq
 8005cc8:	f8c8 1000 	streq.w	r1, [r8]
 8005ccc:	5162      	str	r2, [r4, r5]
 8005cce:	604b      	str	r3, [r1, #4]
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f000 f82f 	bl	8005d34 <__malloc_unlock>
 8005cd6:	f104 000b 	add.w	r0, r4, #11
 8005cda:	1d23      	adds	r3, r4, #4
 8005cdc:	f020 0007 	bic.w	r0, r0, #7
 8005ce0:	1ac2      	subs	r2, r0, r3
 8005ce2:	bf1c      	itt	ne
 8005ce4:	1a1b      	subne	r3, r3, r0
 8005ce6:	50a3      	strne	r3, [r4, r2]
 8005ce8:	e7af      	b.n	8005c4a <_malloc_r+0x22>
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	bf0c      	ite	eq
 8005cf0:	f8c8 2000 	streq.w	r2, [r8]
 8005cf4:	605a      	strne	r2, [r3, #4]
 8005cf6:	e7eb      	b.n	8005cd0 <_malloc_r+0xa8>
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	6864      	ldr	r4, [r4, #4]
 8005cfc:	e7ae      	b.n	8005c5c <_malloc_r+0x34>
 8005cfe:	463c      	mov	r4, r7
 8005d00:	687f      	ldr	r7, [r7, #4]
 8005d02:	e7b6      	b.n	8005c72 <_malloc_r+0x4a>
 8005d04:	461a      	mov	r2, r3
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	d1fb      	bne.n	8005d04 <_malloc_r+0xdc>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6053      	str	r3, [r2, #4]
 8005d10:	e7de      	b.n	8005cd0 <_malloc_r+0xa8>
 8005d12:	230c      	movs	r3, #12
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	4630      	mov	r0, r6
 8005d18:	f000 f80c 	bl	8005d34 <__malloc_unlock>
 8005d1c:	e794      	b.n	8005c48 <_malloc_r+0x20>
 8005d1e:	6005      	str	r5, [r0, #0]
 8005d20:	e7d6      	b.n	8005cd0 <_malloc_r+0xa8>
 8005d22:	bf00      	nop
 8005d24:	20000398 	.word	0x20000398

08005d28 <__malloc_lock>:
 8005d28:	4801      	ldr	r0, [pc, #4]	@ (8005d30 <__malloc_lock+0x8>)
 8005d2a:	f7ff bf0e 	b.w	8005b4a <__retarget_lock_acquire_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20000390 	.word	0x20000390

08005d34 <__malloc_unlock>:
 8005d34:	4801      	ldr	r0, [pc, #4]	@ (8005d3c <__malloc_unlock+0x8>)
 8005d36:	f7ff bf09 	b.w	8005b4c <__retarget_lock_release_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	20000390 	.word	0x20000390

08005d40 <__sfputc_r>:
 8005d40:	6893      	ldr	r3, [r2, #8]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	b410      	push	{r4}
 8005d48:	6093      	str	r3, [r2, #8]
 8005d4a:	da08      	bge.n	8005d5e <__sfputc_r+0x1e>
 8005d4c:	6994      	ldr	r4, [r2, #24]
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	db01      	blt.n	8005d56 <__sfputc_r+0x16>
 8005d52:	290a      	cmp	r1, #10
 8005d54:	d103      	bne.n	8005d5e <__sfputc_r+0x1e>
 8005d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5a:	f000 bb6d 	b.w	8006438 <__swbuf_r>
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	1c58      	adds	r0, r3, #1
 8005d62:	6010      	str	r0, [r2, #0]
 8005d64:	7019      	strb	r1, [r3, #0]
 8005d66:	4608      	mov	r0, r1
 8005d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <__sfputs_r>:
 8005d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d70:	4606      	mov	r6, r0
 8005d72:	460f      	mov	r7, r1
 8005d74:	4614      	mov	r4, r2
 8005d76:	18d5      	adds	r5, r2, r3
 8005d78:	42ac      	cmp	r4, r5
 8005d7a:	d101      	bne.n	8005d80 <__sfputs_r+0x12>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e007      	b.n	8005d90 <__sfputs_r+0x22>
 8005d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d84:	463a      	mov	r2, r7
 8005d86:	4630      	mov	r0, r6
 8005d88:	f7ff ffda 	bl	8005d40 <__sfputc_r>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d1f3      	bne.n	8005d78 <__sfputs_r+0xa>
 8005d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d94 <_vfiprintf_r>:
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	460d      	mov	r5, r1
 8005d9a:	b09d      	sub	sp, #116	@ 0x74
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	4698      	mov	r8, r3
 8005da0:	4606      	mov	r6, r0
 8005da2:	b118      	cbz	r0, 8005dac <_vfiprintf_r+0x18>
 8005da4:	6a03      	ldr	r3, [r0, #32]
 8005da6:	b90b      	cbnz	r3, 8005dac <_vfiprintf_r+0x18>
 8005da8:	f7ff fdca 	bl	8005940 <__sinit>
 8005dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dae:	07d9      	lsls	r1, r3, #31
 8005db0:	d405      	bmi.n	8005dbe <_vfiprintf_r+0x2a>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	059a      	lsls	r2, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_vfiprintf_r+0x2a>
 8005db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dba:	f7ff fec6 	bl	8005b4a <__retarget_lock_acquire_recursive>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	071b      	lsls	r3, r3, #28
 8005dc2:	d501      	bpl.n	8005dc8 <_vfiprintf_r+0x34>
 8005dc4:	692b      	ldr	r3, [r5, #16]
 8005dc6:	b99b      	cbnz	r3, 8005df0 <_vfiprintf_r+0x5c>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f000 fb72 	bl	80064b4 <__swsetup_r>
 8005dd0:	b170      	cbz	r0, 8005df0 <_vfiprintf_r+0x5c>
 8005dd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dd4:	07dc      	lsls	r4, r3, #31
 8005dd6:	d504      	bpl.n	8005de2 <_vfiprintf_r+0x4e>
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	b01d      	add	sp, #116	@ 0x74
 8005dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	0598      	lsls	r0, r3, #22
 8005de6:	d4f7      	bmi.n	8005dd8 <_vfiprintf_r+0x44>
 8005de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dea:	f7ff feaf 	bl	8005b4c <__retarget_lock_release_recursive>
 8005dee:	e7f3      	b.n	8005dd8 <_vfiprintf_r+0x44>
 8005df0:	2300      	movs	r3, #0
 8005df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df4:	2320      	movs	r3, #32
 8005df6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dfe:	2330      	movs	r3, #48	@ 0x30
 8005e00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fb0 <_vfiprintf_r+0x21c>
 8005e04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e08:	f04f 0901 	mov.w	r9, #1
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	469a      	mov	sl, r3
 8005e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e14:	b10a      	cbz	r2, 8005e1a <_vfiprintf_r+0x86>
 8005e16:	2a25      	cmp	r2, #37	@ 0x25
 8005e18:	d1f9      	bne.n	8005e0e <_vfiprintf_r+0x7a>
 8005e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e1e:	d00b      	beq.n	8005e38 <_vfiprintf_r+0xa4>
 8005e20:	465b      	mov	r3, fp
 8005e22:	4622      	mov	r2, r4
 8005e24:	4629      	mov	r1, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ffa1 	bl	8005d6e <__sfputs_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f000 80a7 	beq.w	8005f80 <_vfiprintf_r+0x1ec>
 8005e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e34:	445a      	add	r2, fp
 8005e36:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e38:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 809f 	beq.w	8005f80 <_vfiprintf_r+0x1ec>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e4c:	f10a 0a01 	add.w	sl, sl, #1
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	9307      	str	r3, [sp, #28]
 8005e54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e58:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e5a:	4654      	mov	r4, sl
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e62:	4853      	ldr	r0, [pc, #332]	@ (8005fb0 <_vfiprintf_r+0x21c>)
 8005e64:	f7fa f9b4 	bl	80001d0 <memchr>
 8005e68:	9a04      	ldr	r2, [sp, #16]
 8005e6a:	b9d8      	cbnz	r0, 8005ea4 <_vfiprintf_r+0x110>
 8005e6c:	06d1      	lsls	r1, r2, #27
 8005e6e:	bf44      	itt	mi
 8005e70:	2320      	movmi	r3, #32
 8005e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e76:	0713      	lsls	r3, r2, #28
 8005e78:	bf44      	itt	mi
 8005e7a:	232b      	movmi	r3, #43	@ 0x2b
 8005e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e80:	f89a 3000 	ldrb.w	r3, [sl]
 8005e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e86:	d015      	beq.n	8005eb4 <_vfiprintf_r+0x120>
 8005e88:	9a07      	ldr	r2, [sp, #28]
 8005e8a:	4654      	mov	r4, sl
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f04f 0c0a 	mov.w	ip, #10
 8005e92:	4621      	mov	r1, r4
 8005e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e98:	3b30      	subs	r3, #48	@ 0x30
 8005e9a:	2b09      	cmp	r3, #9
 8005e9c:	d94b      	bls.n	8005f36 <_vfiprintf_r+0x1a2>
 8005e9e:	b1b0      	cbz	r0, 8005ece <_vfiprintf_r+0x13a>
 8005ea0:	9207      	str	r2, [sp, #28]
 8005ea2:	e014      	b.n	8005ece <_vfiprintf_r+0x13a>
 8005ea4:	eba0 0308 	sub.w	r3, r0, r8
 8005ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8005eac:	4313      	orrs	r3, r2
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	46a2      	mov	sl, r4
 8005eb2:	e7d2      	b.n	8005e5a <_vfiprintf_r+0xc6>
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	1d19      	adds	r1, r3, #4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	9103      	str	r1, [sp, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfbb      	ittet	lt
 8005ec0:	425b      	neglt	r3, r3
 8005ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec6:	9307      	strge	r3, [sp, #28]
 8005ec8:	9307      	strlt	r3, [sp, #28]
 8005eca:	bfb8      	it	lt
 8005ecc:	9204      	strlt	r2, [sp, #16]
 8005ece:	7823      	ldrb	r3, [r4, #0]
 8005ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed2:	d10a      	bne.n	8005eea <_vfiprintf_r+0x156>
 8005ed4:	7863      	ldrb	r3, [r4, #1]
 8005ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed8:	d132      	bne.n	8005f40 <_vfiprintf_r+0x1ac>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	1d1a      	adds	r2, r3, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	9203      	str	r2, [sp, #12]
 8005ee2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ee6:	3402      	adds	r4, #2
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fc0 <_vfiprintf_r+0x22c>
 8005eee:	7821      	ldrb	r1, [r4, #0]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	f7fa f96c 	bl	80001d0 <memchr>
 8005ef8:	b138      	cbz	r0, 8005f0a <_vfiprintf_r+0x176>
 8005efa:	9b04      	ldr	r3, [sp, #16]
 8005efc:	eba0 000a 	sub.w	r0, r0, sl
 8005f00:	2240      	movs	r2, #64	@ 0x40
 8005f02:	4082      	lsls	r2, r0
 8005f04:	4313      	orrs	r3, r2
 8005f06:	3401      	adds	r4, #1
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0e:	4829      	ldr	r0, [pc, #164]	@ (8005fb4 <_vfiprintf_r+0x220>)
 8005f10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f14:	2206      	movs	r2, #6
 8005f16:	f7fa f95b 	bl	80001d0 <memchr>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d03f      	beq.n	8005f9e <_vfiprintf_r+0x20a>
 8005f1e:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <_vfiprintf_r+0x224>)
 8005f20:	bb1b      	cbnz	r3, 8005f6a <_vfiprintf_r+0x1d6>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	3307      	adds	r3, #7
 8005f26:	f023 0307 	bic.w	r3, r3, #7
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	9303      	str	r3, [sp, #12]
 8005f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f30:	443b      	add	r3, r7
 8005f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f34:	e76a      	b.n	8005e0c <_vfiprintf_r+0x78>
 8005f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	e7a8      	b.n	8005e92 <_vfiprintf_r+0xfe>
 8005f40:	2300      	movs	r3, #0
 8005f42:	3401      	adds	r4, #1
 8005f44:	9305      	str	r3, [sp, #20]
 8005f46:	4619      	mov	r1, r3
 8005f48:	f04f 0c0a 	mov.w	ip, #10
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f52:	3a30      	subs	r2, #48	@ 0x30
 8005f54:	2a09      	cmp	r2, #9
 8005f56:	d903      	bls.n	8005f60 <_vfiprintf_r+0x1cc>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0c6      	beq.n	8005eea <_vfiprintf_r+0x156>
 8005f5c:	9105      	str	r1, [sp, #20]
 8005f5e:	e7c4      	b.n	8005eea <_vfiprintf_r+0x156>
 8005f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f64:	4604      	mov	r4, r0
 8005f66:	2301      	movs	r3, #1
 8005f68:	e7f0      	b.n	8005f4c <_vfiprintf_r+0x1b8>
 8005f6a:	ab03      	add	r3, sp, #12
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	462a      	mov	r2, r5
 8005f70:	4b12      	ldr	r3, [pc, #72]	@ (8005fbc <_vfiprintf_r+0x228>)
 8005f72:	a904      	add	r1, sp, #16
 8005f74:	4630      	mov	r0, r6
 8005f76:	f3af 8000 	nop.w
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	1c78      	adds	r0, r7, #1
 8005f7e:	d1d6      	bne.n	8005f2e <_vfiprintf_r+0x19a>
 8005f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	d405      	bmi.n	8005f92 <_vfiprintf_r+0x1fe>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	059a      	lsls	r2, r3, #22
 8005f8a:	d402      	bmi.n	8005f92 <_vfiprintf_r+0x1fe>
 8005f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f8e:	f7ff fddd 	bl	8005b4c <__retarget_lock_release_recursive>
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	065b      	lsls	r3, r3, #25
 8005f96:	f53f af1f 	bmi.w	8005dd8 <_vfiprintf_r+0x44>
 8005f9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f9c:	e71e      	b.n	8005ddc <_vfiprintf_r+0x48>
 8005f9e:	ab03      	add	r3, sp, #12
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	462a      	mov	r2, r5
 8005fa4:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <_vfiprintf_r+0x228>)
 8005fa6:	a904      	add	r1, sp, #16
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f000 f879 	bl	80060a0 <_printf_i>
 8005fae:	e7e4      	b.n	8005f7a <_vfiprintf_r+0x1e6>
 8005fb0:	08006700 	.word	0x08006700
 8005fb4:	0800670a 	.word	0x0800670a
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	08005d6f 	.word	0x08005d6f
 8005fc0:	08006706 	.word	0x08006706

08005fc4 <_printf_common>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	4616      	mov	r6, r2
 8005fca:	4698      	mov	r8, r3
 8005fcc:	688a      	ldr	r2, [r1, #8]
 8005fce:	690b      	ldr	r3, [r1, #16]
 8005fd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	bfb8      	it	lt
 8005fd8:	4613      	movlt	r3, r2
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b10a      	cbz	r2, 8005fea <_printf_common+0x26>
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	0699      	lsls	r1, r3, #26
 8005fee:	bf42      	ittt	mi
 8005ff0:	6833      	ldrmi	r3, [r6, #0]
 8005ff2:	3302      	addmi	r3, #2
 8005ff4:	6033      	strmi	r3, [r6, #0]
 8005ff6:	6825      	ldr	r5, [r4, #0]
 8005ff8:	f015 0506 	ands.w	r5, r5, #6
 8005ffc:	d106      	bne.n	800600c <_printf_common+0x48>
 8005ffe:	f104 0a19 	add.w	sl, r4, #25
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	6832      	ldr	r2, [r6, #0]
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	42ab      	cmp	r3, r5
 800600a:	dc26      	bgt.n	800605a <_printf_common+0x96>
 800600c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	3b00      	subs	r3, #0
 8006014:	bf18      	it	ne
 8006016:	2301      	movne	r3, #1
 8006018:	0692      	lsls	r2, r2, #26
 800601a:	d42b      	bmi.n	8006074 <_printf_common+0xb0>
 800601c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006020:	4641      	mov	r1, r8
 8006022:	4638      	mov	r0, r7
 8006024:	47c8      	blx	r9
 8006026:	3001      	adds	r0, #1
 8006028:	d01e      	beq.n	8006068 <_printf_common+0xa4>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	6922      	ldr	r2, [r4, #16]
 800602e:	f003 0306 	and.w	r3, r3, #6
 8006032:	2b04      	cmp	r3, #4
 8006034:	bf02      	ittt	eq
 8006036:	68e5      	ldreq	r5, [r4, #12]
 8006038:	6833      	ldreq	r3, [r6, #0]
 800603a:	1aed      	subeq	r5, r5, r3
 800603c:	68a3      	ldr	r3, [r4, #8]
 800603e:	bf0c      	ite	eq
 8006040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006044:	2500      	movne	r5, #0
 8006046:	4293      	cmp	r3, r2
 8006048:	bfc4      	itt	gt
 800604a:	1a9b      	subgt	r3, r3, r2
 800604c:	18ed      	addgt	r5, r5, r3
 800604e:	2600      	movs	r6, #0
 8006050:	341a      	adds	r4, #26
 8006052:	42b5      	cmp	r5, r6
 8006054:	d11a      	bne.n	800608c <_printf_common+0xc8>
 8006056:	2000      	movs	r0, #0
 8006058:	e008      	b.n	800606c <_printf_common+0xa8>
 800605a:	2301      	movs	r3, #1
 800605c:	4652      	mov	r2, sl
 800605e:	4641      	mov	r1, r8
 8006060:	4638      	mov	r0, r7
 8006062:	47c8      	blx	r9
 8006064:	3001      	adds	r0, #1
 8006066:	d103      	bne.n	8006070 <_printf_common+0xac>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	3501      	adds	r5, #1
 8006072:	e7c6      	b.n	8006002 <_printf_common+0x3e>
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	2030      	movs	r0, #48	@ 0x30
 800607a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800607e:	4422      	add	r2, r4
 8006080:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006088:	3302      	adds	r3, #2
 800608a:	e7c7      	b.n	800601c <_printf_common+0x58>
 800608c:	2301      	movs	r3, #1
 800608e:	4622      	mov	r2, r4
 8006090:	4641      	mov	r1, r8
 8006092:	4638      	mov	r0, r7
 8006094:	47c8      	blx	r9
 8006096:	3001      	adds	r0, #1
 8006098:	d0e6      	beq.n	8006068 <_printf_common+0xa4>
 800609a:	3601      	adds	r6, #1
 800609c:	e7d9      	b.n	8006052 <_printf_common+0x8e>
	...

080060a0 <_printf_i>:
 80060a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	7e0f      	ldrb	r7, [r1, #24]
 80060a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060a8:	2f78      	cmp	r7, #120	@ 0x78
 80060aa:	4691      	mov	r9, r2
 80060ac:	4680      	mov	r8, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	469a      	mov	sl, r3
 80060b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060b6:	d807      	bhi.n	80060c8 <_printf_i+0x28>
 80060b8:	2f62      	cmp	r7, #98	@ 0x62
 80060ba:	d80a      	bhi.n	80060d2 <_printf_i+0x32>
 80060bc:	2f00      	cmp	r7, #0
 80060be:	f000 80d2 	beq.w	8006266 <_printf_i+0x1c6>
 80060c2:	2f58      	cmp	r7, #88	@ 0x58
 80060c4:	f000 80b9 	beq.w	800623a <_printf_i+0x19a>
 80060c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060d0:	e03a      	b.n	8006148 <_printf_i+0xa8>
 80060d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060d6:	2b15      	cmp	r3, #21
 80060d8:	d8f6      	bhi.n	80060c8 <_printf_i+0x28>
 80060da:	a101      	add	r1, pc, #4	@ (adr r1, 80060e0 <_printf_i+0x40>)
 80060dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e0:	08006139 	.word	0x08006139
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	080060c9 	.word	0x080060c9
 80060ec:	080060c9 	.word	0x080060c9
 80060f0:	080060c9 	.word	0x080060c9
 80060f4:	080060c9 	.word	0x080060c9
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080060c9 	.word	0x080060c9
 8006100:	080060c9 	.word	0x080060c9
 8006104:	080060c9 	.word	0x080060c9
 8006108:	080060c9 	.word	0x080060c9
 800610c:	0800624d 	.word	0x0800624d
 8006110:	08006177 	.word	0x08006177
 8006114:	08006207 	.word	0x08006207
 8006118:	080060c9 	.word	0x080060c9
 800611c:	080060c9 	.word	0x080060c9
 8006120:	0800626f 	.word	0x0800626f
 8006124:	080060c9 	.word	0x080060c9
 8006128:	08006177 	.word	0x08006177
 800612c:	080060c9 	.word	0x080060c9
 8006130:	080060c9 	.word	0x080060c9
 8006134:	0800620f 	.word	0x0800620f
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	1d1a      	adds	r2, r3, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6032      	str	r2, [r6, #0]
 8006140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006144:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006148:	2301      	movs	r3, #1
 800614a:	e09d      	b.n	8006288 <_printf_i+0x1e8>
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	6031      	str	r1, [r6, #0]
 8006154:	0606      	lsls	r6, r0, #24
 8006156:	d501      	bpl.n	800615c <_printf_i+0xbc>
 8006158:	681d      	ldr	r5, [r3, #0]
 800615a:	e003      	b.n	8006164 <_printf_i+0xc4>
 800615c:	0645      	lsls	r5, r0, #25
 800615e:	d5fb      	bpl.n	8006158 <_printf_i+0xb8>
 8006160:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006164:	2d00      	cmp	r5, #0
 8006166:	da03      	bge.n	8006170 <_printf_i+0xd0>
 8006168:	232d      	movs	r3, #45	@ 0x2d
 800616a:	426d      	negs	r5, r5
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006170:	4859      	ldr	r0, [pc, #356]	@ (80062d8 <_printf_i+0x238>)
 8006172:	230a      	movs	r3, #10
 8006174:	e011      	b.n	800619a <_printf_i+0xfa>
 8006176:	6821      	ldr	r1, [r4, #0]
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	0608      	lsls	r0, r1, #24
 800617c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006180:	d402      	bmi.n	8006188 <_printf_i+0xe8>
 8006182:	0649      	lsls	r1, r1, #25
 8006184:	bf48      	it	mi
 8006186:	b2ad      	uxthmi	r5, r5
 8006188:	2f6f      	cmp	r7, #111	@ 0x6f
 800618a:	4853      	ldr	r0, [pc, #332]	@ (80062d8 <_printf_i+0x238>)
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	bf14      	ite	ne
 8006190:	230a      	movne	r3, #10
 8006192:	2308      	moveq	r3, #8
 8006194:	2100      	movs	r1, #0
 8006196:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800619a:	6866      	ldr	r6, [r4, #4]
 800619c:	60a6      	str	r6, [r4, #8]
 800619e:	2e00      	cmp	r6, #0
 80061a0:	bfa2      	ittt	ge
 80061a2:	6821      	ldrge	r1, [r4, #0]
 80061a4:	f021 0104 	bicge.w	r1, r1, #4
 80061a8:	6021      	strge	r1, [r4, #0]
 80061aa:	b90d      	cbnz	r5, 80061b0 <_printf_i+0x110>
 80061ac:	2e00      	cmp	r6, #0
 80061ae:	d04b      	beq.n	8006248 <_printf_i+0x1a8>
 80061b0:	4616      	mov	r6, r2
 80061b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061b6:	fb03 5711 	mls	r7, r3, r1, r5
 80061ba:	5dc7      	ldrb	r7, [r0, r7]
 80061bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061c0:	462f      	mov	r7, r5
 80061c2:	42bb      	cmp	r3, r7
 80061c4:	460d      	mov	r5, r1
 80061c6:	d9f4      	bls.n	80061b2 <_printf_i+0x112>
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d10b      	bne.n	80061e4 <_printf_i+0x144>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	07df      	lsls	r7, r3, #31
 80061d0:	d508      	bpl.n	80061e4 <_printf_i+0x144>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	6861      	ldr	r1, [r4, #4]
 80061d6:	4299      	cmp	r1, r3
 80061d8:	bfde      	ittt	le
 80061da:	2330      	movle	r3, #48	@ 0x30
 80061dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061e4:	1b92      	subs	r2, r2, r6
 80061e6:	6122      	str	r2, [r4, #16]
 80061e8:	f8cd a000 	str.w	sl, [sp]
 80061ec:	464b      	mov	r3, r9
 80061ee:	aa03      	add	r2, sp, #12
 80061f0:	4621      	mov	r1, r4
 80061f2:	4640      	mov	r0, r8
 80061f4:	f7ff fee6 	bl	8005fc4 <_printf_common>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d14a      	bne.n	8006292 <_printf_i+0x1f2>
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006200:	b004      	add	sp, #16
 8006202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	f043 0320 	orr.w	r3, r3, #32
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	4833      	ldr	r0, [pc, #204]	@ (80062dc <_printf_i+0x23c>)
 8006210:	2778      	movs	r7, #120	@ 0x78
 8006212:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	6831      	ldr	r1, [r6, #0]
 800621a:	061f      	lsls	r7, r3, #24
 800621c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006220:	d402      	bmi.n	8006228 <_printf_i+0x188>
 8006222:	065f      	lsls	r7, r3, #25
 8006224:	bf48      	it	mi
 8006226:	b2ad      	uxthmi	r5, r5
 8006228:	6031      	str	r1, [r6, #0]
 800622a:	07d9      	lsls	r1, r3, #31
 800622c:	bf44      	itt	mi
 800622e:	f043 0320 	orrmi.w	r3, r3, #32
 8006232:	6023      	strmi	r3, [r4, #0]
 8006234:	b11d      	cbz	r5, 800623e <_printf_i+0x19e>
 8006236:	2310      	movs	r3, #16
 8006238:	e7ac      	b.n	8006194 <_printf_i+0xf4>
 800623a:	4827      	ldr	r0, [pc, #156]	@ (80062d8 <_printf_i+0x238>)
 800623c:	e7e9      	b.n	8006212 <_printf_i+0x172>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f023 0320 	bic.w	r3, r3, #32
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	e7f6      	b.n	8006236 <_printf_i+0x196>
 8006248:	4616      	mov	r6, r2
 800624a:	e7bd      	b.n	80061c8 <_printf_i+0x128>
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	6825      	ldr	r5, [r4, #0]
 8006250:	6961      	ldr	r1, [r4, #20]
 8006252:	1d18      	adds	r0, r3, #4
 8006254:	6030      	str	r0, [r6, #0]
 8006256:	062e      	lsls	r6, r5, #24
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	d501      	bpl.n	8006260 <_printf_i+0x1c0>
 800625c:	6019      	str	r1, [r3, #0]
 800625e:	e002      	b.n	8006266 <_printf_i+0x1c6>
 8006260:	0668      	lsls	r0, r5, #25
 8006262:	d5fb      	bpl.n	800625c <_printf_i+0x1bc>
 8006264:	8019      	strh	r1, [r3, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	4616      	mov	r6, r2
 800626c:	e7bc      	b.n	80061e8 <_printf_i+0x148>
 800626e:	6833      	ldr	r3, [r6, #0]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	6032      	str	r2, [r6, #0]
 8006274:	681e      	ldr	r6, [r3, #0]
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	2100      	movs	r1, #0
 800627a:	4630      	mov	r0, r6
 800627c:	f7f9 ffa8 	bl	80001d0 <memchr>
 8006280:	b108      	cbz	r0, 8006286 <_printf_i+0x1e6>
 8006282:	1b80      	subs	r0, r0, r6
 8006284:	6060      	str	r0, [r4, #4]
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	2300      	movs	r3, #0
 800628c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006290:	e7aa      	b.n	80061e8 <_printf_i+0x148>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	4632      	mov	r2, r6
 8006296:	4649      	mov	r1, r9
 8006298:	4640      	mov	r0, r8
 800629a:	47d0      	blx	sl
 800629c:	3001      	adds	r0, #1
 800629e:	d0ad      	beq.n	80061fc <_printf_i+0x15c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	079b      	lsls	r3, r3, #30
 80062a4:	d413      	bmi.n	80062ce <_printf_i+0x22e>
 80062a6:	68e0      	ldr	r0, [r4, #12]
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	4298      	cmp	r0, r3
 80062ac:	bfb8      	it	lt
 80062ae:	4618      	movlt	r0, r3
 80062b0:	e7a6      	b.n	8006200 <_printf_i+0x160>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4632      	mov	r2, r6
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	47d0      	blx	sl
 80062bc:	3001      	adds	r0, #1
 80062be:	d09d      	beq.n	80061fc <_printf_i+0x15c>
 80062c0:	3501      	adds	r5, #1
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	1a5b      	subs	r3, r3, r1
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	dcf2      	bgt.n	80062b2 <_printf_i+0x212>
 80062cc:	e7eb      	b.n	80062a6 <_printf_i+0x206>
 80062ce:	2500      	movs	r5, #0
 80062d0:	f104 0619 	add.w	r6, r4, #25
 80062d4:	e7f5      	b.n	80062c2 <_printf_i+0x222>
 80062d6:	bf00      	nop
 80062d8:	08006711 	.word	0x08006711
 80062dc:	08006722 	.word	0x08006722

080062e0 <__sflush_r>:
 80062e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e8:	0716      	lsls	r6, r2, #28
 80062ea:	4605      	mov	r5, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	d454      	bmi.n	800639a <__sflush_r+0xba>
 80062f0:	684b      	ldr	r3, [r1, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	dc02      	bgt.n	80062fc <__sflush_r+0x1c>
 80062f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dd48      	ble.n	800638e <__sflush_r+0xae>
 80062fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062fe:	2e00      	cmp	r6, #0
 8006300:	d045      	beq.n	800638e <__sflush_r+0xae>
 8006302:	2300      	movs	r3, #0
 8006304:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006308:	682f      	ldr	r7, [r5, #0]
 800630a:	6a21      	ldr	r1, [r4, #32]
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	d030      	beq.n	8006372 <__sflush_r+0x92>
 8006310:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	0759      	lsls	r1, r3, #29
 8006316:	d505      	bpl.n	8006324 <__sflush_r+0x44>
 8006318:	6863      	ldr	r3, [r4, #4]
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800631e:	b10b      	cbz	r3, 8006324 <__sflush_r+0x44>
 8006320:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	2300      	movs	r3, #0
 8006326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006328:	6a21      	ldr	r1, [r4, #32]
 800632a:	4628      	mov	r0, r5
 800632c:	47b0      	blx	r6
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	d106      	bne.n	8006342 <__sflush_r+0x62>
 8006334:	6829      	ldr	r1, [r5, #0]
 8006336:	291d      	cmp	r1, #29
 8006338:	d82b      	bhi.n	8006392 <__sflush_r+0xb2>
 800633a:	4a2a      	ldr	r2, [pc, #168]	@ (80063e4 <__sflush_r+0x104>)
 800633c:	410a      	asrs	r2, r1
 800633e:	07d6      	lsls	r6, r2, #31
 8006340:	d427      	bmi.n	8006392 <__sflush_r+0xb2>
 8006342:	2200      	movs	r2, #0
 8006344:	6062      	str	r2, [r4, #4]
 8006346:	04d9      	lsls	r1, r3, #19
 8006348:	6922      	ldr	r2, [r4, #16]
 800634a:	6022      	str	r2, [r4, #0]
 800634c:	d504      	bpl.n	8006358 <__sflush_r+0x78>
 800634e:	1c42      	adds	r2, r0, #1
 8006350:	d101      	bne.n	8006356 <__sflush_r+0x76>
 8006352:	682b      	ldr	r3, [r5, #0]
 8006354:	b903      	cbnz	r3, 8006358 <__sflush_r+0x78>
 8006356:	6560      	str	r0, [r4, #84]	@ 0x54
 8006358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800635a:	602f      	str	r7, [r5, #0]
 800635c:	b1b9      	cbz	r1, 800638e <__sflush_r+0xae>
 800635e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006362:	4299      	cmp	r1, r3
 8006364:	d002      	beq.n	800636c <__sflush_r+0x8c>
 8006366:	4628      	mov	r0, r5
 8006368:	f7ff fbf2 	bl	8005b50 <_free_r>
 800636c:	2300      	movs	r3, #0
 800636e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006370:	e00d      	b.n	800638e <__sflush_r+0xae>
 8006372:	2301      	movs	r3, #1
 8006374:	4628      	mov	r0, r5
 8006376:	47b0      	blx	r6
 8006378:	4602      	mov	r2, r0
 800637a:	1c50      	adds	r0, r2, #1
 800637c:	d1c9      	bne.n	8006312 <__sflush_r+0x32>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0c6      	beq.n	8006312 <__sflush_r+0x32>
 8006384:	2b1d      	cmp	r3, #29
 8006386:	d001      	beq.n	800638c <__sflush_r+0xac>
 8006388:	2b16      	cmp	r3, #22
 800638a:	d11e      	bne.n	80063ca <__sflush_r+0xea>
 800638c:	602f      	str	r7, [r5, #0]
 800638e:	2000      	movs	r0, #0
 8006390:	e022      	b.n	80063d8 <__sflush_r+0xf8>
 8006392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006396:	b21b      	sxth	r3, r3
 8006398:	e01b      	b.n	80063d2 <__sflush_r+0xf2>
 800639a:	690f      	ldr	r7, [r1, #16]
 800639c:	2f00      	cmp	r7, #0
 800639e:	d0f6      	beq.n	800638e <__sflush_r+0xae>
 80063a0:	0793      	lsls	r3, r2, #30
 80063a2:	680e      	ldr	r6, [r1, #0]
 80063a4:	bf08      	it	eq
 80063a6:	694b      	ldreq	r3, [r1, #20]
 80063a8:	600f      	str	r7, [r1, #0]
 80063aa:	bf18      	it	ne
 80063ac:	2300      	movne	r3, #0
 80063ae:	eba6 0807 	sub.w	r8, r6, r7
 80063b2:	608b      	str	r3, [r1, #8]
 80063b4:	f1b8 0f00 	cmp.w	r8, #0
 80063b8:	dde9      	ble.n	800638e <__sflush_r+0xae>
 80063ba:	6a21      	ldr	r1, [r4, #32]
 80063bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063be:	4643      	mov	r3, r8
 80063c0:	463a      	mov	r2, r7
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b0      	blx	r6
 80063c6:	2800      	cmp	r0, #0
 80063c8:	dc08      	bgt.n	80063dc <__sflush_r+0xfc>
 80063ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063dc:	4407      	add	r7, r0
 80063de:	eba8 0800 	sub.w	r8, r8, r0
 80063e2:	e7e7      	b.n	80063b4 <__sflush_r+0xd4>
 80063e4:	dfbffffe 	.word	0xdfbffffe

080063e8 <_fflush_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	4605      	mov	r5, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	b913      	cbnz	r3, 80063f8 <_fflush_r+0x10>
 80063f2:	2500      	movs	r5, #0
 80063f4:	4628      	mov	r0, r5
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	b118      	cbz	r0, 8006402 <_fflush_r+0x1a>
 80063fa:	6a03      	ldr	r3, [r0, #32]
 80063fc:	b90b      	cbnz	r3, 8006402 <_fflush_r+0x1a>
 80063fe:	f7ff fa9f 	bl	8005940 <__sinit>
 8006402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f3      	beq.n	80063f2 <_fflush_r+0xa>
 800640a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800640c:	07d0      	lsls	r0, r2, #31
 800640e:	d404      	bmi.n	800641a <_fflush_r+0x32>
 8006410:	0599      	lsls	r1, r3, #22
 8006412:	d402      	bmi.n	800641a <_fflush_r+0x32>
 8006414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006416:	f7ff fb98 	bl	8005b4a <__retarget_lock_acquire_recursive>
 800641a:	4628      	mov	r0, r5
 800641c:	4621      	mov	r1, r4
 800641e:	f7ff ff5f 	bl	80062e0 <__sflush_r>
 8006422:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006424:	07da      	lsls	r2, r3, #31
 8006426:	4605      	mov	r5, r0
 8006428:	d4e4      	bmi.n	80063f4 <_fflush_r+0xc>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	059b      	lsls	r3, r3, #22
 800642e:	d4e1      	bmi.n	80063f4 <_fflush_r+0xc>
 8006430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006432:	f7ff fb8b 	bl	8005b4c <__retarget_lock_release_recursive>
 8006436:	e7dd      	b.n	80063f4 <_fflush_r+0xc>

08006438 <__swbuf_r>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	460e      	mov	r6, r1
 800643c:	4614      	mov	r4, r2
 800643e:	4605      	mov	r5, r0
 8006440:	b118      	cbz	r0, 800644a <__swbuf_r+0x12>
 8006442:	6a03      	ldr	r3, [r0, #32]
 8006444:	b90b      	cbnz	r3, 800644a <__swbuf_r+0x12>
 8006446:	f7ff fa7b 	bl	8005940 <__sinit>
 800644a:	69a3      	ldr	r3, [r4, #24]
 800644c:	60a3      	str	r3, [r4, #8]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	071a      	lsls	r2, r3, #28
 8006452:	d501      	bpl.n	8006458 <__swbuf_r+0x20>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	b943      	cbnz	r3, 800646a <__swbuf_r+0x32>
 8006458:	4621      	mov	r1, r4
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f82a 	bl	80064b4 <__swsetup_r>
 8006460:	b118      	cbz	r0, 800646a <__swbuf_r+0x32>
 8006462:	f04f 37ff 	mov.w	r7, #4294967295
 8006466:	4638      	mov	r0, r7
 8006468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	6922      	ldr	r2, [r4, #16]
 800646e:	1a98      	subs	r0, r3, r2
 8006470:	6963      	ldr	r3, [r4, #20]
 8006472:	b2f6      	uxtb	r6, r6
 8006474:	4283      	cmp	r3, r0
 8006476:	4637      	mov	r7, r6
 8006478:	dc05      	bgt.n	8006486 <__swbuf_r+0x4e>
 800647a:	4621      	mov	r1, r4
 800647c:	4628      	mov	r0, r5
 800647e:	f7ff ffb3 	bl	80063e8 <_fflush_r>
 8006482:	2800      	cmp	r0, #0
 8006484:	d1ed      	bne.n	8006462 <__swbuf_r+0x2a>
 8006486:	68a3      	ldr	r3, [r4, #8]
 8006488:	3b01      	subs	r3, #1
 800648a:	60a3      	str	r3, [r4, #8]
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	6022      	str	r2, [r4, #0]
 8006492:	701e      	strb	r6, [r3, #0]
 8006494:	6962      	ldr	r2, [r4, #20]
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	429a      	cmp	r2, r3
 800649a:	d004      	beq.n	80064a6 <__swbuf_r+0x6e>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	07db      	lsls	r3, r3, #31
 80064a0:	d5e1      	bpl.n	8006466 <__swbuf_r+0x2e>
 80064a2:	2e0a      	cmp	r6, #10
 80064a4:	d1df      	bne.n	8006466 <__swbuf_r+0x2e>
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f7ff ff9d 	bl	80063e8 <_fflush_r>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d0d9      	beq.n	8006466 <__swbuf_r+0x2e>
 80064b2:	e7d6      	b.n	8006462 <__swbuf_r+0x2a>

080064b4 <__swsetup_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4b29      	ldr	r3, [pc, #164]	@ (800655c <__swsetup_r+0xa8>)
 80064b8:	4605      	mov	r5, r0
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	460c      	mov	r4, r1
 80064be:	b118      	cbz	r0, 80064c8 <__swsetup_r+0x14>
 80064c0:	6a03      	ldr	r3, [r0, #32]
 80064c2:	b90b      	cbnz	r3, 80064c8 <__swsetup_r+0x14>
 80064c4:	f7ff fa3c 	bl	8005940 <__sinit>
 80064c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064cc:	0719      	lsls	r1, r3, #28
 80064ce:	d422      	bmi.n	8006516 <__swsetup_r+0x62>
 80064d0:	06da      	lsls	r2, r3, #27
 80064d2:	d407      	bmi.n	80064e4 <__swsetup_r+0x30>
 80064d4:	2209      	movs	r2, #9
 80064d6:	602a      	str	r2, [r5, #0]
 80064d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	e033      	b.n	800654c <__swsetup_r+0x98>
 80064e4:	0758      	lsls	r0, r3, #29
 80064e6:	d512      	bpl.n	800650e <__swsetup_r+0x5a>
 80064e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ea:	b141      	cbz	r1, 80064fe <__swsetup_r+0x4a>
 80064ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064f0:	4299      	cmp	r1, r3
 80064f2:	d002      	beq.n	80064fa <__swsetup_r+0x46>
 80064f4:	4628      	mov	r0, r5
 80064f6:	f7ff fb2b 	bl	8005b50 <_free_r>
 80064fa:	2300      	movs	r3, #0
 80064fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	2300      	movs	r3, #0
 8006508:	6063      	str	r3, [r4, #4]
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f043 0308 	orr.w	r3, r3, #8
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	b94b      	cbnz	r3, 800652e <__swsetup_r+0x7a>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006524:	d003      	beq.n	800652e <__swsetup_r+0x7a>
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f000 f84f 	bl	80065cc <__smakebuf_r>
 800652e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006532:	f013 0201 	ands.w	r2, r3, #1
 8006536:	d00a      	beq.n	800654e <__swsetup_r+0x9a>
 8006538:	2200      	movs	r2, #0
 800653a:	60a2      	str	r2, [r4, #8]
 800653c:	6962      	ldr	r2, [r4, #20]
 800653e:	4252      	negs	r2, r2
 8006540:	61a2      	str	r2, [r4, #24]
 8006542:	6922      	ldr	r2, [r4, #16]
 8006544:	b942      	cbnz	r2, 8006558 <__swsetup_r+0xa4>
 8006546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800654a:	d1c5      	bne.n	80064d8 <__swsetup_r+0x24>
 800654c:	bd38      	pop	{r3, r4, r5, pc}
 800654e:	0799      	lsls	r1, r3, #30
 8006550:	bf58      	it	pl
 8006552:	6962      	ldrpl	r2, [r4, #20]
 8006554:	60a2      	str	r2, [r4, #8]
 8006556:	e7f4      	b.n	8006542 <__swsetup_r+0x8e>
 8006558:	2000      	movs	r0, #0
 800655a:	e7f7      	b.n	800654c <__swsetup_r+0x98>
 800655c:	20000020 	.word	0x20000020

08006560 <_sbrk_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d06      	ldr	r5, [pc, #24]	@ (800657c <_sbrk_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f7fa fd7a 	bl	8001064 <_sbrk>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_sbrk_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_sbrk_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	2000038c 	.word	0x2000038c

08006580 <__swhatbuf_r>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	460c      	mov	r4, r1
 8006584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006588:	2900      	cmp	r1, #0
 800658a:	b096      	sub	sp, #88	@ 0x58
 800658c:	4615      	mov	r5, r2
 800658e:	461e      	mov	r6, r3
 8006590:	da0d      	bge.n	80065ae <__swhatbuf_r+0x2e>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006598:	f04f 0100 	mov.w	r1, #0
 800659c:	bf14      	ite	ne
 800659e:	2340      	movne	r3, #64	@ 0x40
 80065a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065a4:	2000      	movs	r0, #0
 80065a6:	6031      	str	r1, [r6, #0]
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	b016      	add	sp, #88	@ 0x58
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	466a      	mov	r2, sp
 80065b0:	f000 f848 	bl	8006644 <_fstat_r>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	dbec      	blt.n	8006592 <__swhatbuf_r+0x12>
 80065b8:	9901      	ldr	r1, [sp, #4]
 80065ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065c2:	4259      	negs	r1, r3
 80065c4:	4159      	adcs	r1, r3
 80065c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ca:	e7eb      	b.n	80065a4 <__swhatbuf_r+0x24>

080065cc <__smakebuf_r>:
 80065cc:	898b      	ldrh	r3, [r1, #12]
 80065ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d0:	079d      	lsls	r5, r3, #30
 80065d2:	4606      	mov	r6, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d507      	bpl.n	80065e8 <__smakebuf_r+0x1c>
 80065d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	2301      	movs	r3, #1
 80065e2:	6163      	str	r3, [r4, #20]
 80065e4:	b003      	add	sp, #12
 80065e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e8:	ab01      	add	r3, sp, #4
 80065ea:	466a      	mov	r2, sp
 80065ec:	f7ff ffc8 	bl	8006580 <__swhatbuf_r>
 80065f0:	9f00      	ldr	r7, [sp, #0]
 80065f2:	4605      	mov	r5, r0
 80065f4:	4639      	mov	r1, r7
 80065f6:	4630      	mov	r0, r6
 80065f8:	f7ff fb16 	bl	8005c28 <_malloc_r>
 80065fc:	b948      	cbnz	r0, 8006612 <__smakebuf_r+0x46>
 80065fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006602:	059a      	lsls	r2, r3, #22
 8006604:	d4ee      	bmi.n	80065e4 <__smakebuf_r+0x18>
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	e7e2      	b.n	80065d8 <__smakebuf_r+0xc>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	6020      	str	r0, [r4, #0]
 8006616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	9b01      	ldr	r3, [sp, #4]
 800661e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006622:	b15b      	cbz	r3, 800663c <__smakebuf_r+0x70>
 8006624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006628:	4630      	mov	r0, r6
 800662a:	f000 f81d 	bl	8006668 <_isatty_r>
 800662e:	b128      	cbz	r0, 800663c <__smakebuf_r+0x70>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	431d      	orrs	r5, r3
 8006640:	81a5      	strh	r5, [r4, #12]
 8006642:	e7cf      	b.n	80065e4 <__smakebuf_r+0x18>

08006644 <_fstat_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4d07      	ldr	r5, [pc, #28]	@ (8006664 <_fstat_r+0x20>)
 8006648:	2300      	movs	r3, #0
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	4611      	mov	r1, r2
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	f7fa fcde 	bl	8001012 <_fstat>
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d102      	bne.n	8006660 <_fstat_r+0x1c>
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	b103      	cbz	r3, 8006660 <_fstat_r+0x1c>
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	bd38      	pop	{r3, r4, r5, pc}
 8006662:	bf00      	nop
 8006664:	2000038c 	.word	0x2000038c

08006668 <_isatty_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	@ (8006684 <_isatty_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fa fcdd 	bl	8001032 <_isatty>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_isatty_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_isatty_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	2000038c 	.word	0x2000038c

08006688 <_init>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr

08006694 <_fini>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr
