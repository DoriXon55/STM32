
LICZNIK_HOMEWORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08006080  08006080  00007080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006498  08006498  00007498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a0  080064a0  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080064a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000010  080064b8  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080064b8  000081ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001110c  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232a  00000000  00000000  0001914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c39  00000000  00000000  0001c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c46  00000000  00000000  0001d049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001223c  00000000  00000000  00043c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2baa  00000000  00000000  00055ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148a75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  00148ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006068 	.word	0x08006068

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006068 	.word	0x08006068

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <START_TIMERS>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void START_TIMERS()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim6);
 80004bc:	480b      	ldr	r0, [pc, #44]	@ (80004ec <START_TIMERS+0x34>)
 80004be:	f002 fcdf 	bl	8002e80 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 80004c2:	480b      	ldr	r0, [pc, #44]	@ (80004f0 <START_TIMERS+0x38>)
 80004c4:	f002 fcdc 	bl	8002e80 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3);
 80004c8:	480a      	ldr	r0, [pc, #40]	@ (80004f4 <START_TIMERS+0x3c>)
 80004ca:	f002 fcd9 	bl	8002e80 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004ce:	2100      	movs	r1, #0
 80004d0:	4808      	ldr	r0, [pc, #32]	@ (80004f4 <START_TIMERS+0x3c>)
 80004d2:	f002 fda7 	bl	8003024 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004d6:	2108      	movs	r1, #8
 80004d8:	4806      	ldr	r0, [pc, #24]	@ (80004f4 <START_TIMERS+0x3c>)
 80004da:	f002 fda3 	bl	8003024 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80004de:	213c      	movs	r1, #60	@ 0x3c
 80004e0:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <START_TIMERS+0x40>)
 80004e2:	f002 ff4b 	bl	800337c <HAL_TIM_Encoder_Start>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000c4 	.word	0x200000c4
 80004f0:	20000110 	.word	0x20000110
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000078 	.word	0x20000078

080004fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a32      	ldr	r2, [pc, #200]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d14e      	bne.n	80005ac <HAL_TIM_PeriodElapsedCallback+0xb0>
	    {
		float r = 1000 * (1.0f + sinf(counter/50.0f));
 800050e:	4b32      	ldr	r3, [pc, #200]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000510:	edd3 7a00 	vldr	s15, [r3]
 8000514:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80005dc <HAL_TIM_PeriodElapsedCallback+0xe0>
 8000518:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800051c:	eeb0 0a47 	vmov.f32	s0, s14
 8000520:	f005 f868 	bl	80055f4 <sinf>
 8000524:	eef0 7a40 	vmov.f32	s15, s0
 8000528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800052c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000530:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80005e0 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8000534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000538:	edc7 7a03 	vstr	s15, [r7, #12]
		float b = 1000 * (1.0f + sinf((counter + 180.0f) / 50.0f));
 800053c:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800053e:	edd3 7a00 	vldr	s15, [r3]
 8000542:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80005e4 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800054a:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80005dc <HAL_TIM_PeriodElapsedCallback+0xe0>
 800054e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000552:	eeb0 0a47 	vmov.f32	s0, s14
 8000556:	f005 f84d 	bl	80055f4 <sinf>
 800055a:	eef0 7a40 	vmov.f32	s15, s0
 800055e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000566:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80005e0 <HAL_TIM_PeriodElapsedCallback+0xe4>
 800056a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800056e:	edc7 7a02 	vstr	s15, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(r));
 8000572:	ed97 0a03 	vldr	s0, [r7, #12]
 8000576:	f000 f841 	bl	80005fc <calc_pwm>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(b));
 8000584:	ed97 0a02 	vldr	s0, [r7, #8]
 8000588:	f000 f838 	bl	80005fc <calc_pwm>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	63da      	str	r2, [r3, #60]	@ 0x3c

		counter += increment;
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000598:	ed93 7a00 	vldr	s14, [r3]
 800059c:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800059e:	edd3 7a00 	vldr	s15, [r3]
 80005a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80005a8:	edc3 7a00 	vstr	s15, [r3]
	    }

	if (htim == &htim6)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a10      	ldr	r2, [pc, #64]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d103      	bne.n	80005bc <HAL_TIM_PeriodElapsedCallback+0xc0>
		HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 80005b4:	2102      	movs	r1, #2
 80005b6:	480f      	ldr	r0, [pc, #60]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80005b8:	f001 f8d0 	bl	800175c <HAL_GPIO_TogglePin>

	if(htim == &htim7)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d103      	bne.n	80005cc <HAL_TIM_PeriodElapsedCallback+0xd0>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80005c4:	2101      	movs	r1, #1
 80005c6:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80005c8:	f001 f8c8 	bl	800175c <HAL_GPIO_TogglePin>

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40000400 	.word	0x40000400
 80005d8:	200001e4 	.word	0x200001e4
 80005dc:	42480000 	.word	0x42480000
 80005e0:	447a0000 	.word	0x447a0000
 80005e4:	43340000 	.word	0x43340000
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200000c4 	.word	0x200000c4
 80005f4:	48000800 	.word	0x48000800
 80005f8:	20000110 	.word	0x20000110

080005fc <calc_pwm>:

uint16_t calc_pwm(float value)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	ed87 0a01 	vstr	s0, [r7, #4]

    if (value < 0) value = 0;
 8000606:	edd7 7a01 	vldr	s15, [r7, #4]
 800060a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000612:	d502      	bpl.n	800061a <calc_pwm+0x1e>
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
    if (value > 1000) value = 1000;
 800061a:	edd7 7a01 	vldr	s15, [r7, #4]
 800061e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800064c <calc_pwm+0x50>
 8000622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062a:	dd01      	ble.n	8000630 <calc_pwm+0x34>
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <calc_pwm+0x54>)
 800062e:	607b      	str	r3, [r7, #4]
    return (uint16_t)value;
 8000630:	edd7 7a01 	vldr	s15, [r7, #4]
 8000634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000638:	ee17 3a90 	vmov	r3, s15
 800063c:	b29b      	uxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	447a0000 	.word	0x447a0000
 8000650:	447a0000 	.word	0x447a0000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fc94 	bl	8000f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f849 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fa1d 	bl	8000aa0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000666:	f000 f97b 	bl	8000960 <MX_TIM6_Init>
  MX_TIM7_Init();
 800066a:	f000 f9b1 	bl	80009d0 <MX_TIM7_Init>
  MX_TIM3_Init();
 800066e:	f000 f893 	bl	8000798 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000672:	f000 f91f 	bl	80008b4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000676:	f000 f9e3 	bl	8000a40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  START_TIMERS();
 800067a:	f7ff ff1d 	bl	80004b8 <START_TIMERS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int16_t encoder_value = __HAL_TIM_GET_COUNTER(&htim4);
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <main+0x88>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000684:	80fb      	strh	r3, [r7, #6]
	  increment = (float)(encoder_value) / 100.0f;
 8000686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800068a:	ee07 3a90 	vmov	s15, r3
 800068e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000692:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80006e0 <main+0x8c>
 8000696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <main+0x90>)
 800069c:	edc3 7a00 	vstr	s15, [r3]
	  if(increment < 0.1f)
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <main+0x90>)
 80006a2:	edd3 7a00 	vldr	s15, [r3]
 80006a6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80006e8 <main+0x94>
 80006aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b2:	d502      	bpl.n	80006ba <main+0x66>
		  increment = 0.1f;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <main+0x90>)
 80006b6:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <main+0x98>)
 80006b8:	601a      	str	r2, [r3, #0]
	  if(increment > 100.0f)
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <main+0x90>)
 80006bc:	edd3 7a00 	vldr	s15, [r3]
 80006c0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80006e0 <main+0x8c>
 80006c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006cc:	dd02      	ble.n	80006d4 <main+0x80>
		  increment = 100.0f;
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <main+0x90>)
 80006d0:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <main+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]

	  HAL_Delay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f000 fccb 	bl	8001070 <HAL_Delay>
  {
 80006da:	e7d0      	b.n	800067e <main+0x2a>
 80006dc:	20000078 	.word	0x20000078
 80006e0:	42c80000 	.word	0x42c80000
 80006e4:	20000000 	.word	0x20000000
 80006e8:	3dcccccd 	.word	0x3dcccccd
 80006ec:	3dcccccd 	.word	0x3dcccccd
 80006f0:	42c80000 	.word	0x42c80000

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	@ 0x58
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2244      	movs	r2, #68	@ 0x44
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 ff49 	bl	800559a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000716:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800071a:	f001 f847 	bl	80017ac <HAL_PWREx_ControlVoltageScaling>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000724:	f000 fa06 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000728:	2310      	movs	r3, #16
 800072a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000734:	2360      	movs	r3, #96	@ 0x60
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800073c:	2301      	movs	r3, #1
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000744:	2328      	movs	r3, #40	@ 0x28
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000748:	2307      	movs	r3, #7
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f87d 	bl	8001858 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000764:	f000 f9e6 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2303      	movs	r3, #3
 800076e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	2104      	movs	r1, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fc45 	bl	8002010 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800078c:	f000 f9d2 	bl	8000b34 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3758      	adds	r7, #88	@ 0x58
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	@ 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ca:	4b38      	ldr	r3, [pc, #224]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007cc:	4a38      	ldr	r2, [pc, #224]	@ (80008b0 <MX_TIM3_Init+0x118>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80007d0:	4b36      	ldr	r3, [pc, #216]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007d2:	224f      	movs	r2, #79	@ 0x4f
 80007d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b35      	ldr	r3, [pc, #212]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007dc:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f0:	482e      	ldr	r0, [pc, #184]	@ (80008ac <MX_TIM3_Init+0x114>)
 80007f2:	f002 faed 	bl	8002dd0 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f99a 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800080a:	4619      	mov	r1, r3
 800080c:	4827      	ldr	r0, [pc, #156]	@ (80008ac <MX_TIM3_Init+0x114>)
 800080e:	f003 f85f 	bl	80038d0 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000818:	f000 f98c 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800081c:	4823      	ldr	r0, [pc, #140]	@ (80008ac <MX_TIM3_Init+0x114>)
 800081e:	f002 fb9f 	bl	8002f60 <HAL_TIM_PWM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000828:	f000 f984 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	481c      	ldr	r0, [pc, #112]	@ (80008ac <MX_TIM3_Init+0x114>)
 800083c:	f003 fd76 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 f975 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	@ 0x60
 800084c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4812      	ldr	r0, [pc, #72]	@ (80008ac <MX_TIM3_Init+0x114>)
 8000862:	f002 ff21 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800086c:	f000 f962 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2204      	movs	r2, #4
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_TIM3_Init+0x114>)
 8000878:	f002 ff16 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000882:	f000 f957 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_TIM3_Init+0x114>)
 800088e:	f002 ff0b 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000898:	f000 f94c 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <MX_TIM3_Init+0x114>)
 800089e:	f000 fa1d 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80008a2:	bf00      	nop
 80008a4:	3738      	adds	r7, #56	@ 0x38
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2224      	movs	r2, #36	@ 0x24
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fe69 	bl	800559a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_TIM4_Init+0xa4>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <MX_TIM4_Init+0xa8>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_TIM4_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_TIM4_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_TIM4_Init+0xa4>)
 80008e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_TIM4_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_TIM4_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000910:	2301      	movs	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <MX_TIM4_Init+0xa4>)
 8000924:	f002 fc84 	bl	8003230 <HAL_TIM_Encoder_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800092e:	f000 f901 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <MX_TIM4_Init+0xa4>)
 8000940:	f003 fcf4 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800094a:	f000 f8f3 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	@ 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000078 	.word	0x20000078
 800095c:	40000800 	.word	0x40000800

08000960 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_TIM6_Init+0x68>)
 8000972:	4a16      	ldr	r2, [pc, #88]	@ (80009cc <MX_TIM6_Init+0x6c>)
 8000974:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_TIM6_Init+0x68>)
 8000978:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800097c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_TIM6_Init+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_TIM6_Init+0x68>)
 8000986:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800098a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_TIM6_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_TIM6_Init+0x68>)
 8000994:	f002 fa1c 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800099e:	f000 f8c9 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <MX_TIM6_Init+0x68>)
 80009b0:	f003 fcbc 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80009ba:	f000 f8bb 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000c4 	.word	0x200000c4
 80009cc:	40001000 	.word	0x40001000

080009d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM7_Init+0x68>)
 80009e2:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <MX_TIM7_Init+0x6c>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_TIM7_Init+0x68>)
 80009e8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80009ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_TIM7_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80009f4:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_TIM7_Init+0x68>)
 80009f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009fa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_TIM7_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <MX_TIM7_Init+0x68>)
 8000a04:	f002 f9e4 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000a0e:	f000 f891 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_TIM7_Init+0x68>)
 8000a20:	f003 fc84 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 f883 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000110 	.word	0x20000110
 8000a3c:	40001400 	.word	0x40001400

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <MX_USART2_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a84:	f003 fcf8 	bl	8004478 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f851 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000015c 	.word	0x2000015c
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	4a16      	ldr	r2, [pc, #88]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_GPIO_Init+0x8c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2103      	movs	r1, #3
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_GPIO_Init+0x90>)
 8000b04:	f000 fe12 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|YELLOW_LED_Pin;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_GPIO_Init+0x90>)
 8000b20:	f000 fc5a 	bl	80013d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000800 	.word	0x48000800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a27      	ldr	r2, [pc, #156]	@ (8000c34 <HAL_TIM_Base_MspInit+0xac>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d114      	bne.n	8000bc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9a:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 8, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	201d      	movs	r0, #29
 8000bb8:	f000 fb59 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bbc:	201d      	movs	r0, #29
 8000bbe:	f000 fb72 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000bc2:	e032      	b.n	8000c2a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <HAL_TIM_Base_MspInit+0xb4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d114      	bne.n	8000bf8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd2:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	210a      	movs	r1, #10
 8000bea:	2036      	movs	r0, #54	@ 0x36
 8000bec:	f000 fb3f 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf0:	2036      	movs	r0, #54	@ 0x36
 8000bf2:	f000 fb58 	bl	80012a6 <HAL_NVIC_EnableIRQ>
}
 8000bf6:	e018      	b.n	8000c2a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <HAL_TIM_Base_MspInit+0xb8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_TIM_Base_MspInit+0xb0>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 11, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210b      	movs	r1, #11
 8000c1e:	2037      	movs	r0, #55	@ 0x37
 8000c20:	f000 fb25 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c24:	2037      	movs	r0, #55	@ 0x37
 8000c26:	f000 fb3e 	bl	80012a6 <HAL_NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40001000 	.word	0x40001000
 8000c40:	40001400 	.word	0x40001400

08000c44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12f      	bne.n	8000cc6 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8000cb2:	f000 fb91 	bl	80013d8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2109      	movs	r1, #9
 8000cba:	201e      	movs	r0, #30
 8000cbc:	f000 fad7 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cc0:	201e      	movs	r0, #30
 8000cc2:	f000 faf0 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40000800 	.word	0x40000800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d78 <HAL_TIM_MspPostInit+0x9c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d138      	bne.n	8000d70 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <HAL_TIM_MspPostInit+0xa0>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a1e      	ldr	r2, [pc, #120]	@ (8000d7c <HAL_TIM_MspPostInit+0xa0>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_TIM_MspPostInit+0xa0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_TIM_MspPostInit+0xa0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a18      	ldr	r2, [pc, #96]	@ (8000d7c <HAL_TIM_MspPostInit+0xa0>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_TIM_MspPostInit+0xa0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	@ 0xc0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 fb44 	bl	80013d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d50:	2301      	movs	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d60:	2302      	movs	r3, #2
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_TIM_MspPostInit+0xa4>)
 8000d6c:	f000 fb34 	bl	80013d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40000400 	.word	0x40000400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ac      	sub	sp, #176	@ 0xb0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2288      	movs	r2, #136	@ 0x88
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fbf8 	bl	800559a <memset>
  if(huart->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a25      	ldr	r2, [pc, #148]	@ (8000e44 <HAL_UART_MspInit+0xc0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d143      	bne.n	8000e3c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fb49 	bl	8002458 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff feb2 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	4a16      	ldr	r2, [pc, #88]	@ (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <HAL_UART_MspInit+0xc4>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e00:	230c      	movs	r3, #12
 8000e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f000 fad6 	bl	80013d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	210c      	movs	r1, #12
 8000e30:	2026      	movs	r0, #38	@ 0x26
 8000e32:	f000 fa1c 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e36:	2026      	movs	r0, #38	@ 0x26
 8000e38:	f000 fa35 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e3c:	bf00      	nop
 8000e3e:	37b0      	adds	r7, #176	@ 0xb0
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40021000 	.word	0x40021000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <NMI_Handler+0x4>

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <MemManage_Handler+0x4>

08000e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea2:	f000 f8c5 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <TIM3_IRQHandler+0x10>)
 8000eb2:	f002 faf1 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000002c 	.word	0x2000002c

08000ec0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <TIM4_IRQHandler+0x10>)
 8000ec6:	f002 fae7 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000078 	.word	0x20000078

08000ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <USART2_IRQHandler+0x10>)
 8000eda:	f003 fb1b 	bl	8004514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000015c 	.word	0x2000015c

08000ee8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM6_DAC_IRQHandler+0x10>)
 8000eee:	f002 fad3 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000c4 	.word	0x200000c4

08000efc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <TIM7_IRQHandler+0x10>)
 8000f02:	f002 fac9 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000110 	.word	0x20000110

08000f10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f004 fb23 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff fb75 	bl	8000654 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f78:	080064a8 	.word	0x080064a8
  ldr r2, =_sbss
 8000f7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f80:	200001ec 	.word	0x200001ec

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>

08000f86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f961 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 f80e 	bl	8000fb8 <HAL_InitTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e001      	b.n	8000fac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa8:	f7ff fdca 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HAL_InitTick+0x6c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d023      	beq.n	8001014 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fcc:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <HAL_InitTick+0x70>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_InitTick+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f96d 	bl	80012c2 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10f      	bne.n	800100e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d809      	bhi.n	8001008 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f937 	bl	800126e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_InitTick+0x74>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e007      	b.n	8001018 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e004      	b.n	8001018 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e001      	b.n	8001018 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c
 8001028:	20000004 	.word	0x20000004
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	200001e8 	.word	0x200001e8

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200001e8 	.word	0x200001e8

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff29 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff3e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff31 	bl	800111c <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d008      	beq.n	8001304 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2204      	movs	r2, #4
 80012f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e022      	b.n	800134a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 020e 	bic.w	r2, r2, #14
 8001312:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001328:	f003 021c 	and.w	r2, r3, #28
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	2101      	movs	r1, #1
 8001332:	fa01 f202 	lsl.w	r2, r1, r2
 8001336:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d005      	beq.n	800137a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2204      	movs	r2, #4
 8001372:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e029      	b.n	80013ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 020e 	bic.w	r2, r2, #14
 8001388:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f003 021c 	and.w	r2, r3, #28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	4798      	blx	r3
    }
  }
  return status;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e17f      	b.n	80016e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8171 	beq.w	80016e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d005      	beq.n	8001418 <HAL_GPIO_Init+0x40>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 0201 	and.w	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b03      	cmp	r3, #3
 8001484:	d118      	bne.n	80014b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	6939      	ldr	r1, [r7, #16]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80ac 	beq.w	80016e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <HAL_GPIO_Init+0x330>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a5e      	ldr	r2, [pc, #376]	@ (8001708 <HAL_GPIO_Init+0x330>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b5c      	ldr	r3, [pc, #368]	@ (8001708 <HAL_GPIO_Init+0x330>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a2:	4a5a      	ldr	r2, [pc, #360]	@ (800170c <HAL_GPIO_Init+0x334>)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015cc:	d025      	beq.n	800161a <HAL_GPIO_Init+0x242>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001710 <HAL_GPIO_Init+0x338>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01f      	beq.n	8001616 <HAL_GPIO_Init+0x23e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001714 <HAL_GPIO_Init+0x33c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x23a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001718 <HAL_GPIO_Init+0x340>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x236>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	@ (800171c <HAL_GPIO_Init+0x344>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x232>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001720 <HAL_GPIO_Init+0x348>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x22e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001724 <HAL_GPIO_Init+0x34c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x22a>
 80015fe:	2306      	movs	r3, #6
 8001600:	e00c      	b.n	800161c <HAL_GPIO_Init+0x244>
 8001602:	2307      	movs	r3, #7
 8001604:	e00a      	b.n	800161c <HAL_GPIO_Init+0x244>
 8001606:	2305      	movs	r3, #5
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x244>
 800160a:	2304      	movs	r3, #4
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x244>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x244>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x244>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x244>
 800161a:	2300      	movs	r3, #0
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800162c:	4937      	ldr	r1, [pc, #220]	@ (800170c <HAL_GPIO_Init+0x334>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800163a:	4b3b      	ldr	r3, [pc, #236]	@ (8001728 <HAL_GPIO_Init+0x350>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800165e:	4a32      	ldr	r2, [pc, #200]	@ (8001728 <HAL_GPIO_Init+0x350>)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001664:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <HAL_GPIO_Init+0x350>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001688:	4a27      	ldr	r2, [pc, #156]	@ (8001728 <HAL_GPIO_Init+0x350>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <HAL_GPIO_Init+0x350>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <HAL_GPIO_Init+0x350>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_GPIO_Init+0x350>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016dc:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_GPIO_Init+0x350>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f ae78 	bne.w	80013e8 <HAL_GPIO_Init+0x10>
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	48000400 	.word	0x48000400
 8001714:	48000800 	.word	0x48000800
 8001718:	48000c00 	.word	0x48000c00
 800171c:	48001000 	.word	0x48001000
 8001720:	48001400 	.word	0x48001400
 8001724:	48001800 	.word	0x48001800
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001748:	e002      	b.n	8001750 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43d9      	mvns	r1, r3
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	400b      	ands	r3, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000

080017ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017ba:	d130      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c8:	d038      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d2:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2232      	movs	r2, #50	@ 0x32
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001854 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f0:	e002      	b.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001804:	d102      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f2      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001818:	d110      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e00f      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182a:	d007      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001834:	4a05      	ldr	r2, [pc, #20]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40007000 	.word	0x40007000
 8001850:	20000004 	.word	0x20000004
 8001854:	431bde83 	.word	0x431bde83

08001858 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e3ca      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b97      	ldr	r3, [pc, #604]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b94      	ldr	r3, [pc, #592]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80e4 	beq.w	8001a54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4a>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	f040 808b 	bne.w	80019b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 8087 	bne.w	80019b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a2:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e3a2      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	4b82      	ldr	r3, [pc, #520]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <HAL_RCC_OscConfig+0x7c>
 80018ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018d2:	e005      	b.n	80018e0 <HAL_RCC_OscConfig+0x88>
 80018d4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d223      	bcs.n	800192c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd55 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e383      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f8:	4b73      	ldr	r3, [pc, #460]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a72      	ldr	r2, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b70      	ldr	r3, [pc, #448]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	496d      	ldr	r1, [pc, #436]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001916:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4968      	ldr	r1, [pc, #416]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
 800192a:	e025      	b.n	8001978 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a65      	ldr	r2, [pc, #404]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4960      	ldr	r1, [pc, #384]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	495b      	ldr	r1, [pc, #364]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fd15 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e343      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001978:	f000 fc4a 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4950      	ldr	r1, [pc, #320]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad0 <HAL_RCC_OscConfig+0x278>)
 8001996:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001998:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad4 <HAL_RCC_OscConfig+0x27c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb0b 	bl	8000fb8 <HAL_InitTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d052      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	e327      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d032      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019b8:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a42      	ldr	r2, [pc, #264]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb48 	bl	8001058 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019cc:	f7ff fb44 	bl	8001058 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e310      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019de:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ea:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a36      	ldr	r2, [pc, #216]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4931      	ldr	r1, [pc, #196]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	492c      	ldr	r1, [pc, #176]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e01a      	b.n	8001a54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fb15 	bl	8001058 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a32:	f7ff fb11 	bl	8001058 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e2dd      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1da>
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d074      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x21a>
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d10e      	bne.n	8001a8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d064      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d160      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e2ba      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e026      	b.n	8001af0 <HAL_RCC_OscConfig+0x298>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aaa:	d115      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x280>
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a02      	ldr	r2, [pc, #8]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x298>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08006080 	.word	0x08006080
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a9f      	ldr	r2, [pc, #636]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff faae 	bl	8001058 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff faaa 	bl	8001058 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e276      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b92      	ldr	r3, [pc, #584]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2a8>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fa9a 	bl	8001058 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fa96 	bl	8001058 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e262      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2d0>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d060      	beq.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x310>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d116      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	4b7c      	ldr	r3, [pc, #496]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x328>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e23f      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b76      	ldr	r3, [pc, #472]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	4973      	ldr	r1, [pc, #460]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	e040      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d023      	beq.n	8001be6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fa55 	bl	8001058 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fa51 	bl	8001058 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e21d      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	4b65      	ldr	r3, [pc, #404]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b62      	ldr	r3, [pc, #392]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	495f      	ldr	r1, [pc, #380]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
 8001be4:	e018      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5c      	ldr	r2, [pc, #368]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fa31 	bl	8001058 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fa2d 	bl	8001058 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1f9      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fa0c 	bl	8001058 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fa08 	bl	8001058 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1d4      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c56:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ef      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3ec>
 8001c64:	e01b      	b.n	8001c9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f9ef 	bl	8001058 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f9eb 	bl	8001058 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1b7      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ef      	bne.n	8001c7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80a6 	beq.w	8001df8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc8:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd8:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d118      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f9b2 	bl	8001058 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7ff f9ae 	bl	8001058 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e17a      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d8>
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d2e:	e029      	b.n	8001d84 <HAL_RCC_OscConfig+0x52c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d115      	bne.n	8001d64 <HAL_RCC_OscConfig+0x50c>
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3e:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4e:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d58:	e014      	b.n	8001d84 <HAL_RCC_OscConfig+0x52c>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
 8001d64:	4b9c      	ldr	r3, [pc, #624]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	4a9b      	ldr	r2, [pc, #620]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d74:	4b98      	ldr	r3, [pc, #608]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7a:	4a97      	ldr	r2, [pc, #604]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d016      	beq.n	8001dba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7ff f964 	bl	8001058 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7ff f960 	bl	8001058 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e12a      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001daa:	4b8b      	ldr	r3, [pc, #556]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ed      	beq.n	8001d94 <HAL_RCC_OscConfig+0x53c>
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7ff f94d 	bl	8001058 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f949 	bl	8001058 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e113      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ed      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	4a79      	ldr	r2, [pc, #484]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80fe 	beq.w	8001ffe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 80d0 	bne.w	8001fac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e0c:	4b72      	ldr	r3, [pc, #456]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d130      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d127      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d11f      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e4c:	2a07      	cmp	r2, #7
 8001e4e:	bf14      	ite	ne
 8001e50:	2201      	movne	r2, #1
 8001e52:	2200      	moveq	r2, #0
 8001e54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d06e      	beq.n	8001f60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d069      	beq.n	8001f5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e88:	4b53      	ldr	r3, [pc, #332]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e94:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0ad      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb0:	f7ff f8d2 	bl	8001058 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff f8ce 	bl	8001058 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e09a      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed6:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_RCC_OscConfig+0x784>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ef0:	0212      	lsls	r2, r2, #8
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ef8:	0852      	lsrs	r2, r2, #1
 8001efa:	3a01      	subs	r2, #1
 8001efc:	0552      	lsls	r2, r2, #21
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f04:	0852      	lsrs	r2, r2, #1
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0652      	lsls	r2, r2, #25
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f10:	0912      	lsrs	r2, r2, #4
 8001f12:	0452      	lsls	r2, r2, #17
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4930      	ldr	r1, [pc, #192]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f34:	f7ff f890 	bl	8001058 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f88c 	bl	8001058 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e058      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f5a:	e050      	b.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e04f      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d148      	bne.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a16      	ldr	r2, [pc, #88]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f84:	f7ff f868 	bl	8001058 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f864 	bl	8001058 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e030      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x734>
 8001faa:	e028      	b.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d023      	beq.n	8001ffa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a08      	ldr	r2, [pc, #32]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001fb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f84b 	bl	8001058 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	e00c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff f847 	bl	8001058 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d905      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e013      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_OscConfig+0x7b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ec      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_RCC_OscConfig+0x7b0>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4905      	ldr	r1, [pc, #20]	@ (8002008 <HAL_RCC_OscConfig+0x7b0>)
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_RCC_OscConfig+0x7b4>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e001      	b.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	feeefffc 	.word	0xfeeefffc

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0e7      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b75      	ldr	r3, [pc, #468]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b72      	ldr	r3, [pc, #456]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4970      	ldr	r1, [pc, #448]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b6e      	ldr	r3, [pc, #440]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0cf      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d010      	beq.n	8002082 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b66      	ldr	r3, [pc, #408]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800206c:	429a      	cmp	r2, r3
 800206e:	d908      	bls.n	8002082 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4960      	ldr	r1, [pc, #384]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d04c      	beq.n	8002128 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	4b5a      	ldr	r3, [pc, #360]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0a6      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e09a      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08e      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e086      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4943      	ldr	r1, [pc, #268]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f8:	f7fe ffae 	bl	8001058 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe ffaa 	bl	8001058 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e06e      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002140:	429a      	cmp	r2, r3
 8002142:	d208      	bcs.n	8002156 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b2e      	ldr	r3, [pc, #184]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	492b      	ldr	r1, [pc, #172]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002156:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d210      	bcs.n	8002186 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002164:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0207 	bic.w	r2, r3, #7
 800216c:	4923      	ldr	r1, [pc, #140]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e036      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4918      	ldr	r1, [pc, #96]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c4:	f000 f824 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	490b      	ldr	r1, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1f4>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80021e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1fc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fee5 	bl	8000fb8 <HAL_InitTick>
 80021ee:	4603      	mov	r3, r0
 80021f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80021f2:	7afb      	ldrb	r3, [r7, #11]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40022000 	.word	0x40022000
 8002200:	40021000 	.word	0x40021000
 8002204:	08006080 	.word	0x08006080
 8002208:	20000004 	.word	0x20000004
 800220c:	20000008 	.word	0x20000008

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4b3e      	ldr	r3, [pc, #248]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x34>
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d121      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d11e      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002244:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	e005      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002260:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800226c:	4a2b      	ldr	r2, [pc, #172]	@ (800231c <HAL_RCC_GetSysClockFreq+0x10c>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d102      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x110>)
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	e004      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d101      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x114>)
 8002296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d134      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0xac>
 80022b4:	e005      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x110>)
 80022b8:	617b      	str	r3, [r7, #20]
      break;
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x114>)
 80022be:	617b      	str	r3, [r7, #20]
      break;
 80022c0:	e002      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	617b      	str	r3, [r7, #20]
      break;
 80022c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	3301      	adds	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	0e5b      	lsrs	r3, r3, #25
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	3301      	adds	r3, #1
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002308:	69bb      	ldr	r3, [r7, #24]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	08006098 	.word	0x08006098
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200

08002328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_RCC_GetHCLKFreq+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002344:	f7ff fff0 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4904      	ldr	r1, [pc, #16]	@ (8002368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08006090 	.word	0x08006090

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002370:	f7ff ffda 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4904      	ldr	r1, [pc, #16]	@ (8002394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	08006090 	.word	0x08006090

08002398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f9ee 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
 80023b6:	e014      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d0:	f7ff f9de 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 80023d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023e8:	d10b      	bne.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b80      	cmp	r3, #128	@ 0x80
 80023ee:	d919      	bls.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80023f4:	d902      	bls.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e013      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023fc:	2301      	movs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e010      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b80      	cmp	r3, #128	@ 0x80
 8002406:	d902      	bls.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002408:	2303      	movs	r3, #3
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e00a      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	@ 0x80
 8002412:	d102      	bne.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e004      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b70      	cmp	r3, #112	@ 0x70
 800241e:	d101      	bne.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	4909      	ldr	r1, [pc, #36]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002460:	2300      	movs	r3, #0
 8002462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002464:	2300      	movs	r3, #0
 8002466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d041      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002478:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800247c:	d02a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800247e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002482:	d824      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800248a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800248e:	d81e      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002498:	d010      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800249a:	e018      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800249c:	4b86      	ldr	r3, [pc, #536]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a85      	ldr	r2, [pc, #532]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a8:	e015      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fabb 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ba:	e00c      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3320      	adds	r3, #32
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fba6 	bl	8002c14 <RCCEx_PLLSAI2_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024cc:	e003      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	74fb      	strb	r3, [r7, #19]
      break;
 80024d2:	e000      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024dc:	4b76      	ldr	r3, [pc, #472]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ea:	4973      	ldr	r1, [pc, #460]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024f2:	e001      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d041      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002508:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800250c:	d02a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800250e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002512:	d824      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800251a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800251e:	d81e      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d010      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800252a:	e018      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800252c:	4b62      	ldr	r3, [pc, #392]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a61      	ldr	r2, [pc, #388]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002536:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002538:	e015      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fa73 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800254a:	e00c      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3320      	adds	r3, #32
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fb5e 	bl	8002c14 <RCCEx_PLLSAI2_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800255c:	e003      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	74fb      	strb	r3, [r7, #19]
      break;
 8002562:	e000      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800256c:	4b52      	ldr	r3, [pc, #328]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002572:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800257a:	494f      	ldr	r1, [pc, #316]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002582:	e001      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a0 	beq.w	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	4a40      	ldr	r2, [pc, #256]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80025bc:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3a      	ldr	r2, [pc, #232]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025d8:	f7fe fd3e 	bl	8001058 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025de:	e009      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe fd3a 	bl	8001058 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	74fb      	strb	r3, [r7, #19]
        break;
 80025f2:	e005      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f4:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ef      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15c      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002606:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002610:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01f      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	d019      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002624:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	4a20      	ldr	r2, [pc, #128]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002640:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002650:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fcf9 	bl	8001058 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002668:	e00b      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fcf5 	bl	8001058 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d902      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	74fb      	strb	r3, [r7, #19]
            break;
 8002680:	e006      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ec      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a6:	4904      	ldr	r1, [pc, #16]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026ae:	e009      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
 80026b4:	e006      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c4:	7c7b      	ldrb	r3, [r7, #17]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e2:	4b98      	ldr	r3, [pc, #608]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e8:	f023 0203 	bic.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f0:	4994      	ldr	r1, [pc, #592]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002704:	4b8f      	ldr	r3, [pc, #572]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002712:	498c      	ldr	r1, [pc, #560]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002726:	4b87      	ldr	r3, [pc, #540]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	4983      	ldr	r1, [pc, #524]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002748:	4b7e      	ldr	r3, [pc, #504]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	497b      	ldr	r1, [pc, #492]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800276a:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	4972      	ldr	r1, [pc, #456]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800278c:	4b6d      	ldr	r3, [pc, #436]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	496a      	ldr	r1, [pc, #424]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ae:	4b65      	ldr	r3, [pc, #404]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	4961      	ldr	r1, [pc, #388]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	4959      	ldr	r1, [pc, #356]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f2:	4b54      	ldr	r3, [pc, #336]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002800:	4950      	ldr	r1, [pc, #320]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002814:	4b4b      	ldr	r3, [pc, #300]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	4948      	ldr	r1, [pc, #288]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002836:	4b43      	ldr	r3, [pc, #268]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	493f      	ldr	r1, [pc, #252]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d028      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002858:	4b3a      	ldr	r3, [pc, #232]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002866:	4937      	ldr	r1, [pc, #220]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002876:	d106      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a31      	ldr	r2, [pc, #196]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
 8002884:	e011      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800288a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800288e:	d10c      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f8c8 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d028      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	491f      	ldr	r1, [pc, #124]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d4:	d106      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4a1a      	ldr	r2, [pc, #104]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e0:	60d3      	str	r3, [r2, #12]
 80028e2:	e011      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f899 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02b      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002922:	4908      	ldr	r1, [pc, #32]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002932:	d109      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b03      	ldr	r3, [pc, #12]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a02      	ldr	r2, [pc, #8]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
 8002940:	e014      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002950:	d10c      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f867 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02f      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002986:	4928      	ldr	r1, [pc, #160]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002996:	d10d      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f844 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d014      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	74bb      	strb	r3, [r7, #18]
 80029b2:	e011      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3320      	adds	r3, #32
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f925 	bl	8002c14 <RCCEx_PLLSAI2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029e4:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f2:	490d      	ldr	r1, [pc, #52]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a16:	4904      	ldr	r1, [pc, #16]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000

08002a2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a3a:	4b75      	ldr	r3, [pc, #468]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d018      	beq.n	8002a78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a46:	4b72      	ldr	r3, [pc, #456]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0203 	and.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10d      	bne.n	8002a72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
       ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d047      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e044      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d018      	beq.n	8002ab2 <RCCEx_PLLSAI1_Config+0x86>
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d825      	bhi.n	8002ad0 <RCCEx_PLLSAI1_Config+0xa4>
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d002      	beq.n	8002a8e <RCCEx_PLLSAI1_Config+0x62>
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d009      	beq.n	8002aa0 <RCCEx_PLLSAI1_Config+0x74>
 8002a8c:	e020      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a8e:	4b60      	ldr	r3, [pc, #384]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11d      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9e:	e01a      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e013      	b.n	8002ada <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ace:	e006      	b.n	8002ade <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad4:	e004      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	430b      	orrs	r3, r1
 8002afc:	4944      	ldr	r1, [pc, #272]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d17d      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b08:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a40      	ldr	r2, [pc, #256]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7fe faa0 	bl	8001058 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b1a:	e009      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b1c:	f7fe fa9c 	bl	8001058 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d902      	bls.n	8002b30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b2e:	e005      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b30:	4b37      	ldr	r3, [pc, #220]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ef      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d160      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	0211      	lsls	r1, r2, #8
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	0912      	lsrs	r2, r2, #4
 8002b60:	0452      	lsls	r2, r2, #17
 8002b62:	430a      	orrs	r2, r1
 8002b64:	492a      	ldr	r1, [pc, #168]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	610b      	str	r3, [r1, #16]
 8002b6a:	e027      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d112      	bne.n	8002b98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b72:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	0211      	lsls	r1, r2, #8
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6912      	ldr	r2, [r2, #16]
 8002b88:	0852      	lsrs	r2, r2, #1
 8002b8a:	3a01      	subs	r2, #1
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	491f      	ldr	r1, [pc, #124]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	610b      	str	r3, [r1, #16]
 8002b96:	e011      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b98:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ba0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6892      	ldr	r2, [r2, #8]
 8002ba8:	0211      	lsls	r1, r2, #8
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6952      	ldr	r2, [r2, #20]
 8002bae:	0852      	lsrs	r2, r2, #1
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	0652      	lsls	r2, r2, #25
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4916      	ldr	r1, [pc, #88]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fa46 	bl	8001058 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bce:	e009      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd0:	f7fe fa42 	bl	8001058 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
          break;
 8002be2:	e005      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4904      	ldr	r1, [pc, #16]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000

08002c14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c22:	4b6a      	ldr	r3, [pc, #424]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c2e:	4b67      	ldr	r3, [pc, #412]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0203 	and.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d10d      	bne.n	8002c5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
       ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c46:	4b61      	ldr	r3, [pc, #388]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
       ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d047      	beq.n	8002cea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e044      	b.n	8002cea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d018      	beq.n	8002c9a <RCCEx_PLLSAI2_Config+0x86>
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d825      	bhi.n	8002cb8 <RCCEx_PLLSAI2_Config+0xa4>
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d002      	beq.n	8002c76 <RCCEx_PLLSAI2_Config+0x62>
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d009      	beq.n	8002c88 <RCCEx_PLLSAI2_Config+0x74>
 8002c74:	e020      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c76:	4b55      	ldr	r3, [pc, #340]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11d      	bne.n	8002cbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c86:	e01a      	b.n	8002cbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c88:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e013      	b.n	8002cc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ca6:	4b49      	ldr	r3, [pc, #292]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cb6:	e006      	b.n	8002cc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e004      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cce:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	4939      	ldr	r1, [pc, #228]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d167      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cf0:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a35      	ldr	r2, [pc, #212]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe f9ac 	bl	8001058 <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d02:	e009      	b.n	8002d18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d04:	f7fe f9a8 	bl	8001058 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d902      	bls.n	8002d18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	73fb      	strb	r3, [r7, #15]
        break;
 8002d16:	e005      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d18:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ef      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d14a      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d30:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6892      	ldr	r2, [r2, #8]
 8002d40:	0211      	lsls	r1, r2, #8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	0912      	lsrs	r2, r2, #4
 8002d48:	0452      	lsls	r2, r2, #17
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	491f      	ldr	r1, [pc, #124]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	614b      	str	r3, [r1, #20]
 8002d52:	e011      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d54:	4b1d      	ldr	r3, [pc, #116]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	0211      	lsls	r1, r2, #8
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6912      	ldr	r2, [r2, #16]
 8002d6a:	0852      	lsrs	r2, r2, #1
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0652      	lsls	r2, r2, #25
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4916      	ldr	r1, [pc, #88]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d78:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f968 	bl	8001058 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d8c:	f7fe f964 	bl	8001058 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e049      	b.n	8002e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fec6 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fe50 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e04f      	b.n	8002f38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a23      	ldr	r2, [pc, #140]	@ (8002f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_TIM_Base_Start_IT+0x76>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec2:	d018      	beq.n	8002ef6 <HAL_TIM_Base_Start_IT+0x76>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIM_Base_Start_IT+0x76>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIM_Base_Start_IT+0x76>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIM_Base_Start_IT+0x76>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIM_Base_Start_IT+0x76>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d115      	bne.n	8002f22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b17      	ldr	r3, [pc, #92]	@ (8002f5c <HAL_TIM_Base_Start_IT+0xdc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b06      	cmp	r3, #6
 8002f06:	d015      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0xb4>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0e:	d011      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	e008      	b.n	8002f34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e000      	b.n	8002f36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40000c00 	.word	0x40000c00
 8002f54:	40013400 	.word	0x40013400
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	00010007 	.word	0x00010007

08002f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e049      	b.n	8003006 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f841 	bl	800300e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 fd88 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_TIM_PWM_Start+0x24>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e03c      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d109      	bne.n	8003062 <HAL_TIM_PWM_Start+0x3e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e02f      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d109      	bne.n	800307c <HAL_TIM_PWM_Start+0x58>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e022      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d109      	bne.n	8003096 <HAL_TIM_PWM_Start+0x72>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e015      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b10      	cmp	r3, #16
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x8c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e008      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e09c      	b.n	8003204 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Start+0xb6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d8:	e023      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0xc6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e8:	e01b      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0xd6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f8:	e013      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start+0xe6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003108:	e00b      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b10      	cmp	r3, #16
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0xf6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003118:	e003      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f8d8 	bl	80042e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a35      	ldr	r2, [pc, #212]	@ (800320c <HAL_TIM_PWM_Start+0x1e8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_TIM_PWM_Start+0x13e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a34      	ldr	r2, [pc, #208]	@ (8003210 <HAL_TIM_PWM_Start+0x1ec>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_TIM_PWM_Start+0x13e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a32      	ldr	r2, [pc, #200]	@ (8003214 <HAL_TIM_PWM_Start+0x1f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_TIM_PWM_Start+0x13e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a31      	ldr	r2, [pc, #196]	@ (8003218 <HAL_TIM_PWM_Start+0x1f4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_TIM_PWM_Start+0x13e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <HAL_TIM_PWM_Start+0x1f8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_TIM_PWM_Start+0x142>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_TIM_PWM_Start+0x144>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a22      	ldr	r2, [pc, #136]	@ (800320c <HAL_TIM_PWM_Start+0x1e8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01d      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x19e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800318e:	d018      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x19e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <HAL_TIM_PWM_Start+0x1fc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x19e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	@ (8003224 <HAL_TIM_PWM_Start+0x200>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x19e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003228 <HAL_TIM_PWM_Start+0x204>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x19e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a17      	ldr	r2, [pc, #92]	@ (8003210 <HAL_TIM_PWM_Start+0x1ec>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x19e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_TIM_PWM_Start+0x1f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d115      	bne.n	80031ee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b18      	ldr	r3, [pc, #96]	@ (800322c <HAL_TIM_PWM_Start+0x208>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d015      	beq.n	8003200 <HAL_TIM_PWM_Start+0x1dc>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031da:	d011      	beq.n	8003200 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	e008      	b.n	8003200 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e000      	b.n	8003202 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40013400 	.word	0x40013400
 8003214:	40014000 	.word	0x40014000
 8003218:	40014400 	.word	0x40014400
 800321c:	40014800 	.word	0x40014800
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	40000c00 	.word	0x40000c00
 800322c:	00010007 	.word	0x00010007

08003230 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e097      	b.n	8003374 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd fcf3 	bl	8000c44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 fc15 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	4313      	orrs	r3, r2
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80032d0:	f023 030c 	bic.w	r3, r3, #12
 80032d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	4313      	orrs	r3, r2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	011a      	lsls	r2, r3, #4
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	031b      	lsls	r3, r3, #12
 8003300:	4313      	orrs	r3, r2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4313      	orrs	r3, r2
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800338c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003394:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800339c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d110      	bne.n	80033ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d102      	bne.n	80033b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80033b2:	7b7b      	ldrb	r3, [r7, #13]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e069      	b.n	8003490 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033cc:	e031      	b.n	8003432 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d110      	bne.n	80033f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033da:	7b3b      	ldrb	r3, [r7, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e055      	b.n	8003490 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f4:	e01d      	b.n	8003432 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d108      	bne.n	800340e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033fc:	7bbb      	ldrb	r3, [r7, #14]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003408:	7b3b      	ldrb	r3, [r7, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e03e      	b.n	8003490 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_TIM_Encoder_Start+0xc4>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d008      	beq.n	8003450 <HAL_TIM_Encoder_Start+0xd4>
 800343e:	e00f      	b.n	8003460 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f000 ff49 	bl	80042e0 <TIM_CCxChannelCmd>
      break;
 800344e:	e016      	b.n	800347e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	2104      	movs	r1, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f000 ff41 	bl	80042e0 <TIM_CCxChannelCmd>
      break;
 800345e:	e00e      	b.n	800347e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 ff39 	bl	80042e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	2104      	movs	r1, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f000 ff32 	bl	80042e0 <TIM_CCxChannelCmd>
      break;
 800347c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0202 	mvn.w	r2, #2
 80034cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fac7 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fab9 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 faca 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0204 	mvn.w	r2, #4
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 faa1 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa93 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 faa4 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0208 	mvn.w	r2, #8
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa7b 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa6d 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fa7e 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2208      	movs	r2, #8
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa55 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa47 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa58 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0201 	mvn.w	r2, #1
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fc ff7c 	bl	80004fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 ff0f 	bl	8004450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00c      	beq.n	8003656 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 ff07 	bl	8004464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00c      	beq.n	800367a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fa12 	bl	8003a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f06f 0220 	mvn.w	r2, #32
 8003696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fecf 	bl	800443c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ff      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b14      	cmp	r3, #20
 80036d2:	f200 80f0 	bhi.w	80038b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036d6:	a201      	add	r2, pc, #4	@ (adr r2, 80036dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	08003731 	.word	0x08003731
 80036e0:	080038b7 	.word	0x080038b7
 80036e4:	080038b7 	.word	0x080038b7
 80036e8:	080038b7 	.word	0x080038b7
 80036ec:	08003771 	.word	0x08003771
 80036f0:	080038b7 	.word	0x080038b7
 80036f4:	080038b7 	.word	0x080038b7
 80036f8:	080038b7 	.word	0x080038b7
 80036fc:	080037b3 	.word	0x080037b3
 8003700:	080038b7 	.word	0x080038b7
 8003704:	080038b7 	.word	0x080038b7
 8003708:	080038b7 	.word	0x080038b7
 800370c:	080037f3 	.word	0x080037f3
 8003710:	080038b7 	.word	0x080038b7
 8003714:	080038b7 	.word	0x080038b7
 8003718:	080038b7 	.word	0x080038b7
 800371c:	08003835 	.word	0x08003835
 8003720:	080038b7 	.word	0x080038b7
 8003724:	080038b7 	.word	0x080038b7
 8003728:	080038b7 	.word	0x080038b7
 800372c:	08003875 	.word	0x08003875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fa62 	bl	8003c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0208 	orr.w	r2, r2, #8
 800374a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	619a      	str	r2, [r3, #24]
      break;
 800376e:	e0a5      	b.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fad2 	bl	8003d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6999      	ldr	r1, [r3, #24]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	619a      	str	r2, [r3, #24]
      break;
 80037b0:	e084      	b.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fb3b 	bl	8003e34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0208 	orr.w	r2, r2, #8
 80037cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0204 	bic.w	r2, r2, #4
 80037dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
      break;
 80037f0:	e064      	b.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fba3 	bl	8003f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800380c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69d9      	ldr	r1, [r3, #28]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	61da      	str	r2, [r3, #28]
      break;
 8003832:	e043      	b.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fbec 	bl	8004018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0208 	orr.w	r2, r2, #8
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0204 	bic.w	r2, r2, #4
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003872:	e023      	b.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fc30 	bl	80040e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	021a      	lsls	r2, r3, #8
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038b4:	e002      	b.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop

080038d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIM_ConfigClockSource+0x1c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0b6      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x18a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800390e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003928:	d03e      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xd8>
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392e:	f200 8087 	bhi.w	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003936:	f000 8086 	beq.w	8003a46 <HAL_TIM_ConfigClockSource+0x176>
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393e:	d87f      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003940:	2b70      	cmp	r3, #112	@ 0x70
 8003942:	d01a      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xaa>
 8003944:	2b70      	cmp	r3, #112	@ 0x70
 8003946:	d87b      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003948:	2b60      	cmp	r3, #96	@ 0x60
 800394a:	d050      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x11e>
 800394c:	2b60      	cmp	r3, #96	@ 0x60
 800394e:	d877      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003950:	2b50      	cmp	r3, #80	@ 0x50
 8003952:	d03c      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0xfe>
 8003954:	2b50      	cmp	r3, #80	@ 0x50
 8003956:	d873      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d058      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x13e>
 800395c:	2b40      	cmp	r3, #64	@ 0x40
 800395e:	d86f      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003960:	2b30      	cmp	r3, #48	@ 0x30
 8003962:	d064      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15e>
 8003964:	2b30      	cmp	r3, #48	@ 0x30
 8003966:	d86b      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003968:	2b20      	cmp	r3, #32
 800396a:	d060      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15e>
 800396c:	2b20      	cmp	r3, #32
 800396e:	d867      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d05c      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15e>
 8003974:	2b10      	cmp	r3, #16
 8003976:	d05a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15e>
 8003978:	e062      	b.n	8003a40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	f000 fc89 	bl	80042a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800399c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	609a      	str	r2, [r3, #8]
      break;
 80039a6:	e04f      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	f000 fc72 	bl	80042a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039ca:	609a      	str	r2, [r3, #8]
      break;
 80039cc:	e03c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 fbe6 	bl	80041ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2150      	movs	r1, #80	@ 0x50
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fc3f 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 80039ec:	e02c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	461a      	mov	r2, r3
 80039fc:	f000 fc05 	bl	800420a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2160      	movs	r1, #96	@ 0x60
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fc2f 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e01c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f000 fbc6 	bl	80041ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2140      	movs	r1, #64	@ 0x40
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc1f 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003a2c:	e00c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 fc16 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003a3e:	e003      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      break;
 8003a44:	e000      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a46      	ldr	r2, [pc, #280]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad2:	d00f      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a43      	ldr	r2, [pc, #268]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a42      	ldr	r2, [pc, #264]	@ (8003be8 <TIM_Base_SetConfig+0x134>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a41      	ldr	r2, [pc, #260]	@ (8003bec <TIM_Base_SetConfig+0x138>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a35      	ldr	r2, [pc, #212]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b14:	d01b      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a32      	ldr	r2, [pc, #200]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d017      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a31      	ldr	r2, [pc, #196]	@ (8003be8 <TIM_Base_SetConfig+0x134>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a30      	ldr	r2, [pc, #192]	@ (8003bec <TIM_Base_SetConfig+0x138>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf4 <TIM_Base_SetConfig+0x140>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <TIM_Base_SetConfig+0x144>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0x9a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2c      	ldr	r2, [pc, #176]	@ (8003bfc <TIM_Base_SetConfig+0x148>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00f      	beq.n	8003bac <TIM_Base_SetConfig+0xf8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_Base_SetConfig+0xf8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a17      	ldr	r2, [pc, #92]	@ (8003bf4 <TIM_Base_SetConfig+0x140>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_Base_SetConfig+0xf8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a16      	ldr	r2, [pc, #88]	@ (8003bf8 <TIM_Base_SetConfig+0x144>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0xf8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <TIM_Base_SetConfig+0x148>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <TIM_OC1_SetConfig+0x10c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00f      	beq.n	8003c80 <TIM_OC1_SetConfig+0x80>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <TIM_OC1_SetConfig+0x110>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00b      	beq.n	8003c80 <TIM_OC1_SetConfig+0x80>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <TIM_OC1_SetConfig+0x114>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d007      	beq.n	8003c80 <TIM_OC1_SetConfig+0x80>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a29      	ldr	r2, [pc, #164]	@ (8003d18 <TIM_OC1_SetConfig+0x118>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC1_SetConfig+0x80>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a28      	ldr	r2, [pc, #160]	@ (8003d1c <TIM_OC1_SetConfig+0x11c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10c      	bne.n	8003c9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0308 	bic.w	r3, r3, #8
 8003c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <TIM_OC1_SetConfig+0x10c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_OC1_SetConfig+0xc2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d10 <TIM_OC1_SetConfig+0x110>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_OC1_SetConfig+0xc2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a19      	ldr	r2, [pc, #100]	@ (8003d14 <TIM_OC1_SetConfig+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_OC1_SetConfig+0xc2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <TIM_OC1_SetConfig+0x118>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC1_SetConfig+0xc2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	@ (8003d1c <TIM_OC1_SetConfig+0x11c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40013400 	.word	0x40013400
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800

08003d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f023 0210 	bic.w	r2, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0320 	bic.w	r3, r3, #32
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	@ (8003e20 <TIM_OC2_SetConfig+0x100>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC2_SetConfig+0x6c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <TIM_OC2_SetConfig+0x104>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10d      	bne.n	8003da8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a1d      	ldr	r2, [pc, #116]	@ (8003e20 <TIM_OC2_SetConfig+0x100>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00f      	beq.n	8003dd0 <TIM_OC2_SetConfig+0xb0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e24 <TIM_OC2_SetConfig+0x104>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <TIM_OC2_SetConfig+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a1b      	ldr	r2, [pc, #108]	@ (8003e28 <TIM_OC2_SetConfig+0x108>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_OC2_SetConfig+0xb0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e2c <TIM_OC2_SetConfig+0x10c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC2_SetConfig+0xb0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <TIM_OC2_SetConfig+0x110>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d113      	bne.n	8003df8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40013400 	.word	0x40013400
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40014400 	.word	0x40014400
 8003e30:	40014800 	.word	0x40014800

08003e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a27      	ldr	r2, [pc, #156]	@ (8003f30 <TIM_OC3_SetConfig+0xfc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_OC3_SetConfig+0x6a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a26      	ldr	r2, [pc, #152]	@ (8003f34 <TIM_OC3_SetConfig+0x100>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10d      	bne.n	8003eba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <TIM_OC3_SetConfig+0xfc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_OC3_SetConfig+0xae>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <TIM_OC3_SetConfig+0x100>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_OC3_SetConfig+0xae>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f38 <TIM_OC3_SetConfig+0x104>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_OC3_SetConfig+0xae>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	@ (8003f3c <TIM_OC3_SetConfig+0x108>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC3_SetConfig+0xae>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a18      	ldr	r2, [pc, #96]	@ (8003f40 <TIM_OC3_SetConfig+0x10c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40013400 	.word	0x40013400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	031b      	lsls	r3, r3, #12
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a18      	ldr	r2, [pc, #96]	@ (8004004 <TIM_OC4_SetConfig+0xc0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_OC4_SetConfig+0x84>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a17      	ldr	r2, [pc, #92]	@ (8004008 <TIM_OC4_SetConfig+0xc4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_OC4_SetConfig+0x84>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	@ (800400c <TIM_OC4_SetConfig+0xc8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_OC4_SetConfig+0x84>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <TIM_OC4_SetConfig+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_OC4_SetConfig+0x84>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <TIM_OC4_SetConfig+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d109      	bne.n	8003fdc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800405c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a17      	ldr	r2, [pc, #92]	@ (80040cc <TIM_OC5_SetConfig+0xb4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00f      	beq.n	8004092 <TIM_OC5_SetConfig+0x7a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a16      	ldr	r2, [pc, #88]	@ (80040d0 <TIM_OC5_SetConfig+0xb8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00b      	beq.n	8004092 <TIM_OC5_SetConfig+0x7a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <TIM_OC5_SetConfig+0xbc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <TIM_OC5_SetConfig+0x7a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <TIM_OC5_SetConfig+0xc0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC5_SetConfig+0x7a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a13      	ldr	r2, [pc, #76]	@ (80040dc <TIM_OC5_SetConfig+0xc4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d109      	bne.n	80040a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	051b      	lsls	r3, r3, #20
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a18      	ldr	r2, [pc, #96]	@ (8004198 <TIM_OC6_SetConfig+0xb8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_OC6_SetConfig+0x7c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a17      	ldr	r2, [pc, #92]	@ (800419c <TIM_OC6_SetConfig+0xbc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC6_SetConfig+0x7c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <TIM_OC6_SetConfig+0xc0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC6_SetConfig+0x7c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a15      	ldr	r2, [pc, #84]	@ (80041a4 <TIM_OC6_SetConfig+0xc4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC6_SetConfig+0x7c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <TIM_OC6_SetConfig+0xc8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d109      	bne.n	8004170 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	029b      	lsls	r3, r3, #10
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40013400 	.word	0x40013400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800

080041ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 030a 	bic.w	r3, r3, #10
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0210 	bic.w	r2, r3, #16
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	f043 0307 	orr.w	r3, r3, #7
 800428c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2201      	movs	r2, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e068      	b.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2e      	ldr	r2, [pc, #184]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2d      	ldr	r2, [pc, #180]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d108      	bne.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800437e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01d      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b6:	d018      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a18      	ldr	r2, [pc, #96]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a14      	ldr	r2, [pc, #80]	@ (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10c      	bne.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40013400 	.word	0x40013400
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000

0800443c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e040      	b.n	800450c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fc72 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	@ 0x24
 80044a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fe06 	bl	80050d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb4b 	bl	8004b60 <UART_SetConfig>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e01b      	b.n	800450c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fe85 	bl	8005214 <UART_CheckIdleState>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b0ba      	sub	sp, #232	@ 0xe8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800453a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800453e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004542:	4013      	ands	r3, r2
 8004544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d115      	bne.n	800457c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00f      	beq.n	800457c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 82ca 	beq.w	8004b06 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
      }
      return;
 800457a:	e2c4      	b.n	8004b06 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800457c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8117 	beq.w	80047b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004596:	4b85      	ldr	r3, [pc, #532]	@ (80047ac <HAL_UART_IRQHandler+0x298>)
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 810a 	beq.w	80047b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d011      	beq.n	80045d0 <HAL_UART_IRQHandler+0xbc>
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d011      	beq.n	8004600 <HAL_UART_IRQHandler+0xec>
 80045dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2202      	movs	r2, #2
 80045ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d011      	beq.n	8004630 <HAL_UART_IRQHandler+0x11c>
 800460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2204      	movs	r2, #4
 800461e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004626:	f043 0202 	orr.w	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d017      	beq.n	800466c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2208      	movs	r2, #8
 800465a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004662:	f043 0208 	orr.w	r2, r3, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d012      	beq.n	800469e <HAL_UART_IRQHandler+0x18a>
 8004678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800467c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800468c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8230 	beq.w	8004b0a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e6:	2b40      	cmp	r3, #64	@ 0x40
 80046e8:	d005      	beq.n	80046f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d04f      	beq.n	8004796 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fea1 	bl	800543e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	d141      	bne.n	800478e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3308      	adds	r3, #8
 8004732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004736:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800473a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800474e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1d9      	bne.n	800470a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475a:	2b00      	cmp	r3, #0
 800475c:	d013      	beq.n	8004786 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	4a13      	ldr	r2, [pc, #76]	@ (80047b0 <HAL_UART_IRQHandler+0x29c>)
 8004764:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fdf3 	bl	8001356 <HAL_DMA_Abort_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d017      	beq.n	80047a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	e00f      	b.n	80047a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9d4 	bl	8004b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	e00b      	b.n	80047a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9d0 	bl	8004b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e007      	b.n	80047a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9cc 	bl	8004b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80047a4:	e1b1      	b.n	8004b0a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a6:	bf00      	nop
    return;
 80047a8:	e1af      	b.n	8004b0a <HAL_UART_IRQHandler+0x5f6>
 80047aa:	bf00      	nop
 80047ac:	04000120 	.word	0x04000120
 80047b0:	08005507 	.word	0x08005507

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	f040 816a 	bne.w	8004a92 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8163 	beq.w	8004a92 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 815c 	beq.w	8004a92 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2210      	movs	r2, #16
 80047e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	f040 80d4 	bne.w	800499a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80ad 	beq.w	8004962 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800480e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004812:	429a      	cmp	r2, r3
 8004814:	f080 80a5 	bcs.w	8004962 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800481e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 8086 	bne.w	8004940 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800484c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800485e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004862:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800486a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1da      	bne.n	8004834 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800488e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e1      	bne.n	800487e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3308      	adds	r3, #8
 80048c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e3      	bne.n	80048ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800490e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004910:	f023 0310 	bic.w	r3, r3, #16
 8004914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004922:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004924:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004928:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e4      	bne.n	8004900 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc fccd 	bl	80012da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004952:	b29b      	uxth	r3, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8f4 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004960:	e0d5      	b.n	8004b0e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004968:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800496c:	429a      	cmp	r2, r3
 800496e:	f040 80ce 	bne.w	8004b0e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b20      	cmp	r3, #32
 8004980:	f040 80c5 	bne.w	8004b0e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8d8 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
      return;
 8004998:	e0b9      	b.n	8004b0e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80ab 	beq.w	8004b12 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80049bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80a6 	beq.w	8004b12 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80049e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e4      	bne.n	80049c6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a20:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e3      	bne.n	80049fc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f023 0310 	bic.w	r3, r3, #16
 8004a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	617b      	str	r3, [r7, #20]
   return(result);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e4      	bne.n	8004a48 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f85c 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a90:	e03f      	b.n	8004b12 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00e      	beq.n	8004abc <HAL_UART_IRQHandler+0x5a8>
 8004a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fd66 	bl	8005586 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aba:	e02d      	b.n	8004b18 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01c      	beq.n	8004b16 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
    }
    return;
 8004ae4:	e017      	b.n	8004b16 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <HAL_UART_IRQHandler+0x604>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fd17 	bl	8005532 <UART_EndTransmit_IT>
    return;
 8004b04:	e008      	b.n	8004b18 <HAL_UART_IRQHandler+0x604>
      return;
 8004b06:	bf00      	nop
 8004b08:	e006      	b.n	8004b18 <HAL_UART_IRQHandler+0x604>
    return;
 8004b0a:	bf00      	nop
 8004b0c:	e004      	b.n	8004b18 <HAL_UART_IRQHandler+0x604>
      return;
 8004b0e:	bf00      	nop
 8004b10:	e002      	b.n	8004b18 <HAL_UART_IRQHandler+0x604>
      return;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <HAL_UART_IRQHandler+0x604>
    return;
 8004b16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b18:	37e8      	adds	r7, #232	@ 0xe8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop

08004b20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b08a      	sub	sp, #40	@ 0x28
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4ba4      	ldr	r3, [pc, #656]	@ (8004e20 <UART_SetConfig+0x2c0>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a99      	ldr	r2, [pc, #612]	@ (8004e24 <UART_SetConfig+0x2c4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a90      	ldr	r2, [pc, #576]	@ (8004e28 <UART_SetConfig+0x2c8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d126      	bne.n	8004c38 <UART_SetConfig+0xd8>
 8004bea:	4b90      	ldr	r3, [pc, #576]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d81b      	bhi.n	8004c30 <UART_SetConfig+0xd0>
 8004bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <UART_SetConfig+0xa0>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c16:	e116      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1e:	e112      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c26:	e10e      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e10a      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c36:	e106      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e30 <UART_SetConfig+0x2d0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d138      	bne.n	8004cb4 <UART_SetConfig+0x154>
 8004c42:	4b7a      	ldr	r3, [pc, #488]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b0c      	cmp	r3, #12
 8004c4e:	d82d      	bhi.n	8004cac <UART_SetConfig+0x14c>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <UART_SetConfig+0xf8>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004c95 	.word	0x08004c95
 8004c7c:	08004cad 	.word	0x08004cad
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c92:	e0d8      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e0d4      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e0d0      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e0cc      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004cac:	2310      	movs	r3, #16
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e0c8      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d125      	bne.n	8004d0a <UART_SetConfig+0x1aa>
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d016      	beq.n	8004cfa <UART_SetConfig+0x19a>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d818      	bhi.n	8004d02 <UART_SetConfig+0x1a2>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d00a      	beq.n	8004cea <UART_SetConfig+0x18a>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d814      	bhi.n	8004d02 <UART_SetConfig+0x1a2>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0x182>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d008      	beq.n	8004cf2 <UART_SetConfig+0x192>
 8004ce0:	e00f      	b.n	8004d02 <UART_SetConfig+0x1a2>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce8:	e0ad      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004cea:	2302      	movs	r3, #2
 8004cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf0:	e0a9      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf8:	e0a5      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d00:	e0a1      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d02:	2310      	movs	r3, #16
 8004d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d08:	e09d      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e38 <UART_SetConfig+0x2d8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d125      	bne.n	8004d60 <UART_SetConfig+0x200>
 8004d14:	4b45      	ldr	r3, [pc, #276]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d20:	d016      	beq.n	8004d50 <UART_SetConfig+0x1f0>
 8004d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d24:	d818      	bhi.n	8004d58 <UART_SetConfig+0x1f8>
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d00a      	beq.n	8004d40 <UART_SetConfig+0x1e0>
 8004d2a:	2b80      	cmp	r3, #128	@ 0x80
 8004d2c:	d814      	bhi.n	8004d58 <UART_SetConfig+0x1f8>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <UART_SetConfig+0x1d8>
 8004d32:	2b40      	cmp	r3, #64	@ 0x40
 8004d34:	d008      	beq.n	8004d48 <UART_SetConfig+0x1e8>
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x1f8>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3e:	e082      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d46:	e07e      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e07a      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e076      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e072      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a35      	ldr	r2, [pc, #212]	@ (8004e3c <UART_SetConfig+0x2dc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d12a      	bne.n	8004dc0 <UART_SetConfig+0x260>
 8004d6a:	4b30      	ldr	r3, [pc, #192]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x250>
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d7e:	d81b      	bhi.n	8004db8 <UART_SetConfig+0x258>
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d00c      	beq.n	8004da0 <UART_SetConfig+0x240>
 8004d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d8a:	d815      	bhi.n	8004db8 <UART_SetConfig+0x258>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x238>
 8004d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x248>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x258>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9e:	e052      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da6:	e04e      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e04a      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e046      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e042      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <UART_SetConfig+0x2c4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d13a      	bne.n	8004e40 <UART_SetConfig+0x2e0>
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004dd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dd8:	d01a      	beq.n	8004e10 <UART_SetConfig+0x2b0>
 8004dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dde:	d81b      	bhi.n	8004e18 <UART_SetConfig+0x2b8>
 8004de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de4:	d00c      	beq.n	8004e00 <UART_SetConfig+0x2a0>
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dea:	d815      	bhi.n	8004e18 <UART_SetConfig+0x2b8>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <UART_SetConfig+0x298>
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df4:	d008      	beq.n	8004e08 <UART_SetConfig+0x2a8>
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x2b8>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfe:	e022      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e06:	e01e      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e01a      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e016      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e012      	b.n	8004e46 <UART_SetConfig+0x2e6>
 8004e20:	efff69f3 	.word	0xefff69f3
 8004e24:	40008000 	.word	0x40008000
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40004400 	.word	0x40004400
 8004e34:	40004800 	.word	0x40004800
 8004e38:	40004c00 	.word	0x40004c00
 8004e3c:	40005000 	.word	0x40005000
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a9f      	ldr	r2, [pc, #636]	@ (80050c8 <UART_SetConfig+0x568>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d17a      	bne.n	8004f46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d824      	bhi.n	8004ea2 <UART_SetConfig+0x342>
 8004e58:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0x300>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004e93 	.word	0x08004e93
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fd fa5c 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8004e88:	61f8      	str	r0, [r7, #28]
        break;
 8004e8a:	e010      	b.n	8004eae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80050cc <UART_SetConfig+0x56c>)
 8004e8e:	61fb      	str	r3, [r7, #28]
        break;
 8004e90:	e00d      	b.n	8004eae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fd f9bd 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8004e96:	61f8      	str	r0, [r7, #28]
        break;
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ea0:	e005      	b.n	8004eae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80fb 	beq.w	80050ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d305      	bcc.n	8004ed2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d903      	bls.n	8004eda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ed8:	e0e8      	b.n	80050ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2200      	movs	r2, #0
 8004ede:	461c      	mov	r4, r3
 8004ee0:	4615      	mov	r5, r2
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	022b      	lsls	r3, r5, #8
 8004eec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ef0:	0222      	lsls	r2, r4, #8
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	6849      	ldr	r1, [r1, #4]
 8004ef6:	0849      	lsrs	r1, r1, #1
 8004ef8:	2000      	movs	r0, #0
 8004efa:	4688      	mov	r8, r1
 8004efc:	4681      	mov	r9, r0
 8004efe:	eb12 0a08 	adds.w	sl, r2, r8
 8004f02:	eb43 0b09 	adc.w	fp, r3, r9
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f14:	4650      	mov	r0, sl
 8004f16:	4659      	mov	r1, fp
 8004f18:	f7fb f956 	bl	80001c8 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4613      	mov	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f2a:	d308      	bcc.n	8004f3e <UART_SetConfig+0x3de>
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f32:	d204      	bcs.n	8004f3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	60da      	str	r2, [r3, #12]
 8004f3c:	e0b6      	b.n	80050ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f44:	e0b2      	b.n	80050ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f4e:	d15e      	bne.n	800500e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d828      	bhi.n	8004faa <UART_SetConfig+0x44a>
 8004f58:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <UART_SetConfig+0x400>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fd f9dc 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8004f88:	61f8      	str	r0, [r7, #28]
        break;
 8004f8a:	e014      	b.n	8004fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fd f9ee 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8004f90:	61f8      	str	r0, [r7, #28]
        break;
 8004f92:	e010      	b.n	8004fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b4d      	ldr	r3, [pc, #308]	@ (80050cc <UART_SetConfig+0x56c>)
 8004f96:	61fb      	str	r3, [r7, #28]
        break;
 8004f98:	e00d      	b.n	8004fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fd f939 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8004f9e:	61f8      	str	r0, [r7, #28]
        break;
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa6:	61fb      	str	r3, [r7, #28]
        break;
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d077      	beq.n	80050ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	005a      	lsls	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b0f      	cmp	r3, #15
 8004fd6:	d916      	bls.n	8005006 <UART_SetConfig+0x4a6>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fde:	d212      	bcs.n	8005006 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f023 030f 	bic.w	r3, r3, #15
 8004fe8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	8afa      	ldrh	r2, [r7, #22]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	e052      	b.n	80050ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800500c:	e04e      	b.n	80050ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800500e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005012:	2b08      	cmp	r3, #8
 8005014:	d827      	bhi.n	8005066 <UART_SetConfig+0x506>
 8005016:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0x4bc>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	08005067 	.word	0x08005067
 800502c:	08005057 	.word	0x08005057
 8005030:	08005067 	.word	0x08005067
 8005034:	08005067 	.word	0x08005067
 8005038:	08005067 	.word	0x08005067
 800503c:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fd f97e 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8005044:	61f8      	str	r0, [r7, #28]
        break;
 8005046:	e014      	b.n	8005072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fd f990 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 800504c:	61f8      	str	r0, [r7, #28]
        break;
 800504e:	e010      	b.n	8005072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b1e      	ldr	r3, [pc, #120]	@ (80050cc <UART_SetConfig+0x56c>)
 8005052:	61fb      	str	r3, [r7, #28]
        break;
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fd f8db 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 800505a:	61f8      	str	r0, [r7, #28]
        break;
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e005      	b.n	8005072 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005070:	bf00      	nop
    }

    if (pclk != 0U)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d019      	beq.n	80050ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	085a      	lsrs	r2, r3, #1
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d909      	bls.n	80050a6 <UART_SetConfig+0x546>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d205      	bcs.n	80050a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60da      	str	r2, [r3, #12]
 80050a4:	e002      	b.n	80050ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3728      	adds	r7, #40	@ 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c6:	bf00      	nop
 80050c8:	40008000 	.word	0x40008000
 80050cc:	00f42400 	.word	0x00f42400

080050d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ce:	d10a      	bne.n	80051e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b098      	sub	sp, #96	@ 0x60
 8005218:	af02      	add	r7, sp, #8
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005224:	f7fb ff18 	bl	8001058 <HAL_GetTick>
 8005228:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b08      	cmp	r3, #8
 8005236:	d12e      	bne.n	8005296 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f88c 	bl	8005364 <UART_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d021      	beq.n	8005296 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005266:	653b      	str	r3, [r7, #80]	@ 0x50
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
 8005272:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800527e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e062      	b.n	800535c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d149      	bne.n	8005338 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ac:	2200      	movs	r2, #0
 80052ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f856 	bl	8005364 <UART_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d03c      	beq.n	8005338 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	623b      	str	r3, [r7, #32]
   return(result);
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005310:	61fa      	str	r2, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e011      	b.n	800535c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3758      	adds	r7, #88	@ 0x58
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005374:	e04f      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d04b      	beq.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fb fe6b 	bl	8001058 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <UART_WaitOnFlagUntilTimeout+0x30>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e04e      	b.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d037      	beq.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b80      	cmp	r3, #128	@ 0x80
 80053aa:	d034      	beq.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b40      	cmp	r3, #64	@ 0x40
 80053b0:	d031      	beq.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d110      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2208      	movs	r2, #8
 80053c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f838 	bl	800543e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2208      	movs	r2, #8
 80053d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e029      	b.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f0:	d111      	bne.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f81e 	bl	800543e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e00f      	b.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4013      	ands	r3, r2
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	429a      	cmp	r2, r3
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	429a      	cmp	r2, r3
 8005432:	d0a0      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800543e:	b480      	push	{r7}
 8005440:	b095      	sub	sp, #84	@ 0x54
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800545a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005464:	643b      	str	r3, [r7, #64]	@ 0x40
 8005466:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800546a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e6      	bne.n	8005446 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3308      	adds	r3, #8
 800547e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	61fb      	str	r3, [r7, #28]
   return(result);
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005498:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800549e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e5      	bne.n	8005478 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d118      	bne.n	80054e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f023 0310 	bic.w	r3, r3, #16
 80054c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	613b      	str	r3, [r7, #16]
   return(result);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e6      	bne.n	80054b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054fa:	bf00      	nop
 80054fc:	3754      	adds	r7, #84	@ 0x54
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff fb05 	bl	8004b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b088      	sub	sp, #32
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	60bb      	str	r3, [r7, #8]
   return(result);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6979      	ldr	r1, [r7, #20]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e6      	bne.n	800553a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fad1 	bl	8004b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800557e:	bf00      	nop
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <memset>:
 800559a:	4402      	add	r2, r0
 800559c:	4603      	mov	r3, r0
 800559e:	4293      	cmp	r3, r2
 80055a0:	d100      	bne.n	80055a4 <memset+0xa>
 80055a2:	4770      	bx	lr
 80055a4:	f803 1b01 	strb.w	r1, [r3], #1
 80055a8:	e7f9      	b.n	800559e <memset+0x4>
	...

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4d0d      	ldr	r5, [pc, #52]	@ (80055e4 <__libc_init_array+0x38>)
 80055b0:	4c0d      	ldr	r4, [pc, #52]	@ (80055e8 <__libc_init_array+0x3c>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	2600      	movs	r6, #0
 80055b8:	42a6      	cmp	r6, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	4d0b      	ldr	r5, [pc, #44]	@ (80055ec <__libc_init_array+0x40>)
 80055be:	4c0c      	ldr	r4, [pc, #48]	@ (80055f0 <__libc_init_array+0x44>)
 80055c0:	f000 fd52 	bl	8006068 <_init>
 80055c4:	1b64      	subs	r4, r4, r5
 80055c6:	10a4      	asrs	r4, r4, #2
 80055c8:	2600      	movs	r6, #0
 80055ca:	42a6      	cmp	r6, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d4:	4798      	blx	r3
 80055d6:	3601      	adds	r6, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f855 3b04 	ldr.w	r3, [r5], #4
 80055de:	4798      	blx	r3
 80055e0:	3601      	adds	r6, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	080064a0 	.word	0x080064a0
 80055e8:	080064a0 	.word	0x080064a0
 80055ec:	080064a0 	.word	0x080064a0
 80055f0:	080064a4 	.word	0x080064a4

080055f4 <sinf>:
 80055f4:	ee10 3a10 	vmov	r3, s0
 80055f8:	b507      	push	{r0, r1, r2, lr}
 80055fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005678 <sinf+0x84>)
 80055fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005600:	4293      	cmp	r3, r2
 8005602:	d807      	bhi.n	8005614 <sinf+0x20>
 8005604:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800567c <sinf+0x88>
 8005608:	2000      	movs	r0, #0
 800560a:	b003      	add	sp, #12
 800560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005610:	f000 b88e 	b.w	8005730 <__kernel_sinf>
 8005614:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005618:	d304      	bcc.n	8005624 <sinf+0x30>
 800561a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800561e:	b003      	add	sp, #12
 8005620:	f85d fb04 	ldr.w	pc, [sp], #4
 8005624:	4668      	mov	r0, sp
 8005626:	f000 f8cb 	bl	80057c0 <__ieee754_rem_pio2f>
 800562a:	f000 0003 	and.w	r0, r0, #3
 800562e:	2801      	cmp	r0, #1
 8005630:	d00a      	beq.n	8005648 <sinf+0x54>
 8005632:	2802      	cmp	r0, #2
 8005634:	d00f      	beq.n	8005656 <sinf+0x62>
 8005636:	b9c0      	cbnz	r0, 800566a <sinf+0x76>
 8005638:	eddd 0a01 	vldr	s1, [sp, #4]
 800563c:	ed9d 0a00 	vldr	s0, [sp]
 8005640:	2001      	movs	r0, #1
 8005642:	f000 f875 	bl	8005730 <__kernel_sinf>
 8005646:	e7ea      	b.n	800561e <sinf+0x2a>
 8005648:	eddd 0a01 	vldr	s1, [sp, #4]
 800564c:	ed9d 0a00 	vldr	s0, [sp]
 8005650:	f000 f816 	bl	8005680 <__kernel_cosf>
 8005654:	e7e3      	b.n	800561e <sinf+0x2a>
 8005656:	eddd 0a01 	vldr	s1, [sp, #4]
 800565a:	ed9d 0a00 	vldr	s0, [sp]
 800565e:	2001      	movs	r0, #1
 8005660:	f000 f866 	bl	8005730 <__kernel_sinf>
 8005664:	eeb1 0a40 	vneg.f32	s0, s0
 8005668:	e7d9      	b.n	800561e <sinf+0x2a>
 800566a:	eddd 0a01 	vldr	s1, [sp, #4]
 800566e:	ed9d 0a00 	vldr	s0, [sp]
 8005672:	f000 f805 	bl	8005680 <__kernel_cosf>
 8005676:	e7f5      	b.n	8005664 <sinf+0x70>
 8005678:	3f490fd8 	.word	0x3f490fd8
 800567c:	00000000 	.word	0x00000000

08005680 <__kernel_cosf>:
 8005680:	ee10 3a10 	vmov	r3, s0
 8005684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005688:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800568c:	eef0 6a40 	vmov.f32	s13, s0
 8005690:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005694:	d204      	bcs.n	80056a0 <__kernel_cosf+0x20>
 8005696:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800569a:	ee17 2a90 	vmov	r2, s15
 800569e:	b342      	cbz	r2, 80056f2 <__kernel_cosf+0x72>
 80056a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80056a4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005710 <__kernel_cosf+0x90>
 80056a8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005714 <__kernel_cosf+0x94>
 80056ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <__kernel_cosf+0x98>)
 80056ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80056b2:	4293      	cmp	r3, r2
 80056b4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800571c <__kernel_cosf+0x9c>
 80056b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80056bc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005720 <__kernel_cosf+0xa0>
 80056c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80056c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005724 <__kernel_cosf+0xa4>
 80056c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80056cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005728 <__kernel_cosf+0xa8>
 80056d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80056d4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80056d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80056dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80056e0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80056e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e8:	d804      	bhi.n	80056f4 <__kernel_cosf+0x74>
 80056ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80056ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056f2:	4770      	bx	lr
 80056f4:	4a0d      	ldr	r2, [pc, #52]	@ (800572c <__kernel_cosf+0xac>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bf9a      	itte	ls
 80056fa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80056fe:	ee07 3a10 	vmovls	s14, r3
 8005702:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005706:	ee30 0a47 	vsub.f32	s0, s0, s14
 800570a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800570e:	e7ec      	b.n	80056ea <__kernel_cosf+0x6a>
 8005710:	ad47d74e 	.word	0xad47d74e
 8005714:	310f74f6 	.word	0x310f74f6
 8005718:	3e999999 	.word	0x3e999999
 800571c:	b493f27c 	.word	0xb493f27c
 8005720:	37d00d01 	.word	0x37d00d01
 8005724:	bab60b61 	.word	0xbab60b61
 8005728:	3d2aaaab 	.word	0x3d2aaaab
 800572c:	3f480000 	.word	0x3f480000

08005730 <__kernel_sinf>:
 8005730:	ee10 3a10 	vmov	r3, s0
 8005734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005738:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800573c:	d204      	bcs.n	8005748 <__kernel_sinf+0x18>
 800573e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005742:	ee17 3a90 	vmov	r3, s15
 8005746:	b35b      	cbz	r3, 80057a0 <__kernel_sinf+0x70>
 8005748:	ee20 7a00 	vmul.f32	s14, s0, s0
 800574c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80057a4 <__kernel_sinf+0x74>
 8005750:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80057a8 <__kernel_sinf+0x78>
 8005754:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005758:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80057ac <__kernel_sinf+0x7c>
 800575c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005760:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80057b0 <__kernel_sinf+0x80>
 8005764:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005768:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80057b4 <__kernel_sinf+0x84>
 800576c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005770:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005774:	b930      	cbnz	r0, 8005784 <__kernel_sinf+0x54>
 8005776:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80057b8 <__kernel_sinf+0x88>
 800577a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800577e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005782:	4770      	bx	lr
 8005784:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005788:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800578c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005790:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005794:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80057bc <__kernel_sinf+0x8c>
 8005798:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800579c:	ee30 0a60 	vsub.f32	s0, s0, s1
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80057a8:	b2d72f34 	.word	0xb2d72f34
 80057ac:	3638ef1b 	.word	0x3638ef1b
 80057b0:	b9500d01 	.word	0xb9500d01
 80057b4:	3c088889 	.word	0x3c088889
 80057b8:	be2aaaab 	.word	0xbe2aaaab
 80057bc:	3e2aaaab 	.word	0x3e2aaaab

080057c0 <__ieee754_rem_pio2f>:
 80057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c2:	ee10 6a10 	vmov	r6, s0
 80057c6:	4b88      	ldr	r3, [pc, #544]	@ (80059e8 <__ieee754_rem_pio2f+0x228>)
 80057c8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80057cc:	429d      	cmp	r5, r3
 80057ce:	b087      	sub	sp, #28
 80057d0:	4604      	mov	r4, r0
 80057d2:	d805      	bhi.n	80057e0 <__ieee754_rem_pio2f+0x20>
 80057d4:	2300      	movs	r3, #0
 80057d6:	ed80 0a00 	vstr	s0, [r0]
 80057da:	6043      	str	r3, [r0, #4]
 80057dc:	2000      	movs	r0, #0
 80057de:	e022      	b.n	8005826 <__ieee754_rem_pio2f+0x66>
 80057e0:	4b82      	ldr	r3, [pc, #520]	@ (80059ec <__ieee754_rem_pio2f+0x22c>)
 80057e2:	429d      	cmp	r5, r3
 80057e4:	d83a      	bhi.n	800585c <__ieee754_rem_pio2f+0x9c>
 80057e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80059f0 <__ieee754_rem_pio2f+0x230>
 80057f0:	4a80      	ldr	r2, [pc, #512]	@ (80059f4 <__ieee754_rem_pio2f+0x234>)
 80057f2:	f023 030f 	bic.w	r3, r3, #15
 80057f6:	dd18      	ble.n	800582a <__ieee754_rem_pio2f+0x6a>
 80057f8:	4293      	cmp	r3, r2
 80057fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80057fe:	bf09      	itett	eq
 8005800:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80059f8 <__ieee754_rem_pio2f+0x238>
 8005804:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80059fc <__ieee754_rem_pio2f+0x23c>
 8005808:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005a00 <__ieee754_rem_pio2f+0x240>
 800580c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005810:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005818:	ed80 7a00 	vstr	s14, [r0]
 800581c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005820:	edc0 7a01 	vstr	s15, [r0, #4]
 8005824:	2001      	movs	r0, #1
 8005826:	b007      	add	sp, #28
 8005828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582a:	4293      	cmp	r3, r2
 800582c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005830:	bf09      	itett	eq
 8005832:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80059f8 <__ieee754_rem_pio2f+0x238>
 8005836:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80059fc <__ieee754_rem_pio2f+0x23c>
 800583a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005a00 <__ieee754_rem_pio2f+0x240>
 800583e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005842:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800584a:	ed80 7a00 	vstr	s14, [r0]
 800584e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005852:	edc0 7a01 	vstr	s15, [r0, #4]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	e7e4      	b.n	8005826 <__ieee754_rem_pio2f+0x66>
 800585c:	4b69      	ldr	r3, [pc, #420]	@ (8005a04 <__ieee754_rem_pio2f+0x244>)
 800585e:	429d      	cmp	r5, r3
 8005860:	d873      	bhi.n	800594a <__ieee754_rem_pio2f+0x18a>
 8005862:	f000 f8dd 	bl	8005a20 <fabsf>
 8005866:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005a08 <__ieee754_rem_pio2f+0x248>
 800586a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800586e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800587a:	ee17 0a90 	vmov	r0, s15
 800587e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80059f0 <__ieee754_rem_pio2f+0x230>
 8005882:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005886:	281f      	cmp	r0, #31
 8005888:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80059fc <__ieee754_rem_pio2f+0x23c>
 800588c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005890:	eeb1 6a47 	vneg.f32	s12, s14
 8005894:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005898:	ee16 1a90 	vmov	r1, s13
 800589c:	dc09      	bgt.n	80058b2 <__ieee754_rem_pio2f+0xf2>
 800589e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a0c <__ieee754_rem_pio2f+0x24c>)
 80058a0:	1e47      	subs	r7, r0, #1
 80058a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80058a6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80058aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d107      	bne.n	80058c2 <__ieee754_rem_pio2f+0x102>
 80058b2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80058b6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80058ba:	2a08      	cmp	r2, #8
 80058bc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80058c0:	dc14      	bgt.n	80058ec <__ieee754_rem_pio2f+0x12c>
 80058c2:	6021      	str	r1, [r4, #0]
 80058c4:	ed94 7a00 	vldr	s14, [r4]
 80058c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80058d2:	ed84 0a01 	vstr	s0, [r4, #4]
 80058d6:	daa6      	bge.n	8005826 <__ieee754_rem_pio2f+0x66>
 80058d8:	eeb1 7a47 	vneg.f32	s14, s14
 80058dc:	eeb1 0a40 	vneg.f32	s0, s0
 80058e0:	ed84 7a00 	vstr	s14, [r4]
 80058e4:	ed84 0a01 	vstr	s0, [r4, #4]
 80058e8:	4240      	negs	r0, r0
 80058ea:	e79c      	b.n	8005826 <__ieee754_rem_pio2f+0x66>
 80058ec:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80059f8 <__ieee754_rem_pio2f+0x238>
 80058f0:	eef0 6a40 	vmov.f32	s13, s0
 80058f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80058f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80058fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005900:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a00 <__ieee754_rem_pio2f+0x240>
 8005904:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005908:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800590c:	ee15 2a90 	vmov	r2, s11
 8005910:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005914:	1a5b      	subs	r3, r3, r1
 8005916:	2b19      	cmp	r3, #25
 8005918:	dc04      	bgt.n	8005924 <__ieee754_rem_pio2f+0x164>
 800591a:	edc4 5a00 	vstr	s11, [r4]
 800591e:	eeb0 0a66 	vmov.f32	s0, s13
 8005922:	e7cf      	b.n	80058c4 <__ieee754_rem_pio2f+0x104>
 8005924:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005a10 <__ieee754_rem_pio2f+0x250>
 8005928:	eeb0 0a66 	vmov.f32	s0, s13
 800592c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005930:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005934:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005a14 <__ieee754_rem_pio2f+0x254>
 8005938:	eee6 7a25 	vfma.f32	s15, s12, s11
 800593c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005940:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005944:	ed84 7a00 	vstr	s14, [r4]
 8005948:	e7bc      	b.n	80058c4 <__ieee754_rem_pio2f+0x104>
 800594a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800594e:	d306      	bcc.n	800595e <__ieee754_rem_pio2f+0x19e>
 8005950:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005954:	edc0 7a01 	vstr	s15, [r0, #4]
 8005958:	edc0 7a00 	vstr	s15, [r0]
 800595c:	e73e      	b.n	80057dc <__ieee754_rem_pio2f+0x1c>
 800595e:	15ea      	asrs	r2, r5, #23
 8005960:	3a86      	subs	r2, #134	@ 0x86
 8005962:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800596e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005a18 <__ieee754_rem_pio2f+0x258>
 8005972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800597a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800597e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005982:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800598a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800598e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005992:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005996:	eef5 7a40 	vcmp.f32	s15, #0.0
 800599a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599e:	edcd 7a05 	vstr	s15, [sp, #20]
 80059a2:	d11e      	bne.n	80059e2 <__ieee754_rem_pio2f+0x222>
 80059a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80059a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2302      	movne	r3, #2
 80059b2:	491a      	ldr	r1, [pc, #104]	@ (8005a1c <__ieee754_rem_pio2f+0x25c>)
 80059b4:	9101      	str	r1, [sp, #4]
 80059b6:	2102      	movs	r1, #2
 80059b8:	9100      	str	r1, [sp, #0]
 80059ba:	a803      	add	r0, sp, #12
 80059bc:	4621      	mov	r1, r4
 80059be:	f000 f837 	bl	8005a30 <__kernel_rem_pio2f>
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	f6bf af2f 	bge.w	8005826 <__ieee754_rem_pio2f+0x66>
 80059c8:	edd4 7a00 	vldr	s15, [r4]
 80059cc:	eef1 7a67 	vneg.f32	s15, s15
 80059d0:	edc4 7a00 	vstr	s15, [r4]
 80059d4:	edd4 7a01 	vldr	s15, [r4, #4]
 80059d8:	eef1 7a67 	vneg.f32	s15, s15
 80059dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80059e0:	e782      	b.n	80058e8 <__ieee754_rem_pio2f+0x128>
 80059e2:	2303      	movs	r3, #3
 80059e4:	e7e5      	b.n	80059b2 <__ieee754_rem_pio2f+0x1f2>
 80059e6:	bf00      	nop
 80059e8:	3f490fd8 	.word	0x3f490fd8
 80059ec:	4016cbe3 	.word	0x4016cbe3
 80059f0:	3fc90f80 	.word	0x3fc90f80
 80059f4:	3fc90fd0 	.word	0x3fc90fd0
 80059f8:	37354400 	.word	0x37354400
 80059fc:	37354443 	.word	0x37354443
 8005a00:	2e85a308 	.word	0x2e85a308
 8005a04:	43490f80 	.word	0x43490f80
 8005a08:	3f22f984 	.word	0x3f22f984
 8005a0c:	080060c8 	.word	0x080060c8
 8005a10:	2e85a300 	.word	0x2e85a300
 8005a14:	248d3132 	.word	0x248d3132
 8005a18:	43800000 	.word	0x43800000
 8005a1c:	08006148 	.word	0x08006148

08005a20 <fabsf>:
 8005a20:	ee10 3a10 	vmov	r3, s0
 8005a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a28:	ee00 3a10 	vmov	s0, r3
 8005a2c:	4770      	bx	lr
	...

08005a30 <__kernel_rem_pio2f>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	ed2d 8b04 	vpush	{d8-d9}
 8005a38:	b0d9      	sub	sp, #356	@ 0x164
 8005a3a:	4690      	mov	r8, r2
 8005a3c:	9001      	str	r0, [sp, #4]
 8005a3e:	4ab9      	ldr	r2, [pc, #740]	@ (8005d24 <__kernel_rem_pio2f+0x2f4>)
 8005a40:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005a42:	f118 0f04 	cmn.w	r8, #4
 8005a46:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a50:	db27      	blt.n	8005aa2 <__kernel_rem_pio2f+0x72>
 8005a52:	f1b8 0203 	subs.w	r2, r8, #3
 8005a56:	bf48      	it	mi
 8005a58:	f108 0204 	addmi.w	r2, r8, #4
 8005a5c:	10d2      	asrs	r2, r2, #3
 8005a5e:	1c55      	adds	r5, r2, #1
 8005a60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005a62:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005a66:	00e8      	lsls	r0, r5, #3
 8005a68:	eba2 060b 	sub.w	r6, r2, fp
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005a72:	eb0a 0c0b 	add.w	ip, sl, fp
 8005a76:	ac1c      	add	r4, sp, #112	@ 0x70
 8005a78:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	4560      	cmp	r0, ip
 8005a80:	dd11      	ble.n	8005aa6 <__kernel_rem_pio2f+0x76>
 8005a82:	a91c      	add	r1, sp, #112	@ 0x70
 8005a84:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005a88:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005a8c:	f04f 0c00 	mov.w	ip, #0
 8005a90:	45d4      	cmp	ip, sl
 8005a92:	dc27      	bgt.n	8005ae4 <__kernel_rem_pio2f+0xb4>
 8005a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005a98:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	2400      	movs	r4, #0
 8005aa0:	e016      	b.n	8005ad0 <__kernel_rem_pio2f+0xa0>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	e7db      	b.n	8005a5e <__kernel_rem_pio2f+0x2e>
 8005aa6:	42c6      	cmn	r6, r0
 8005aa8:	bf5d      	ittte	pl
 8005aaa:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8005aae:	ee07 1a90 	vmovpl	s15, r1
 8005ab2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005ab6:	eef0 7a47 	vmovmi.f32	s15, s14
 8005aba:	ece4 7a01 	vstmia	r4!, {s15}
 8005abe:	3001      	adds	r0, #1
 8005ac0:	e7dd      	b.n	8005a7e <__kernel_rem_pio2f+0x4e>
 8005ac2:	ecfe 6a01 	vldmia	lr!, {s13}
 8005ac6:	ed96 7a00 	vldr	s14, [r6]
 8005aca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005ace:	3401      	adds	r4, #1
 8005ad0:	455c      	cmp	r4, fp
 8005ad2:	f1a6 0604 	sub.w	r6, r6, #4
 8005ad6:	ddf4      	ble.n	8005ac2 <__kernel_rem_pio2f+0x92>
 8005ad8:	ece9 7a01 	vstmia	r9!, {s15}
 8005adc:	f10c 0c01 	add.w	ip, ip, #1
 8005ae0:	3004      	adds	r0, #4
 8005ae2:	e7d5      	b.n	8005a90 <__kernel_rem_pio2f+0x60>
 8005ae4:	a908      	add	r1, sp, #32
 8005ae6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005aea:	9104      	str	r1, [sp, #16]
 8005aec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005aee:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8005d30 <__kernel_rem_pio2f+0x300>
 8005af2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8005d2c <__kernel_rem_pio2f+0x2fc>
 8005af6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005afa:	9203      	str	r2, [sp, #12]
 8005afc:	4654      	mov	r4, sl
 8005afe:	00a2      	lsls	r2, r4, #2
 8005b00:	9205      	str	r2, [sp, #20]
 8005b02:	aa58      	add	r2, sp, #352	@ 0x160
 8005b04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005b08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005b0c:	a944      	add	r1, sp, #272	@ 0x110
 8005b0e:	aa08      	add	r2, sp, #32
 8005b10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005b14:	4694      	mov	ip, r2
 8005b16:	4626      	mov	r6, r4
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	f1a0 0004 	sub.w	r0, r0, #4
 8005b1e:	dc4c      	bgt.n	8005bba <__kernel_rem_pio2f+0x18a>
 8005b20:	4628      	mov	r0, r5
 8005b22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b26:	f000 f9f5 	bl	8005f14 <scalbnf>
 8005b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8005b2e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005b32:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005b36:	f000 fa53 	bl	8005fe0 <floorf>
 8005b3a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005b3e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b48:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005b4c:	ee17 9a90 	vmov	r9, s15
 8005b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b54:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005b58:	dd41      	ble.n	8005bde <__kernel_rem_pio2f+0x1ae>
 8005b5a:	f104 3cff 	add.w	ip, r4, #4294967295
 8005b5e:	a908      	add	r1, sp, #32
 8005b60:	f1c5 0e08 	rsb	lr, r5, #8
 8005b64:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005b68:	fa46 f00e 	asr.w	r0, r6, lr
 8005b6c:	4481      	add	r9, r0
 8005b6e:	fa00 f00e 	lsl.w	r0, r0, lr
 8005b72:	1a36      	subs	r6, r6, r0
 8005b74:	f1c5 0007 	rsb	r0, r5, #7
 8005b78:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005b7c:	4106      	asrs	r6, r0
 8005b7e:	2e00      	cmp	r6, #0
 8005b80:	dd3c      	ble.n	8005bfc <__kernel_rem_pio2f+0x1cc>
 8005b82:	f04f 0e00 	mov.w	lr, #0
 8005b86:	f109 0901 	add.w	r9, r9, #1
 8005b8a:	4670      	mov	r0, lr
 8005b8c:	4574      	cmp	r4, lr
 8005b8e:	dc68      	bgt.n	8005c62 <__kernel_rem_pio2f+0x232>
 8005b90:	2d00      	cmp	r5, #0
 8005b92:	dd03      	ble.n	8005b9c <__kernel_rem_pio2f+0x16c>
 8005b94:	2d01      	cmp	r5, #1
 8005b96:	d074      	beq.n	8005c82 <__kernel_rem_pio2f+0x252>
 8005b98:	2d02      	cmp	r5, #2
 8005b9a:	d07d      	beq.n	8005c98 <__kernel_rem_pio2f+0x268>
 8005b9c:	2e02      	cmp	r6, #2
 8005b9e:	d12d      	bne.n	8005bfc <__kernel_rem_pio2f+0x1cc>
 8005ba0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005ba4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005ba8:	b340      	cbz	r0, 8005bfc <__kernel_rem_pio2f+0x1cc>
 8005baa:	4628      	mov	r0, r5
 8005bac:	9306      	str	r3, [sp, #24]
 8005bae:	f000 f9b1 	bl	8005f14 <scalbnf>
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005bb8:	e020      	b.n	8005bfc <__kernel_rem_pio2f+0x1cc>
 8005bba:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005bbe:	3e01      	subs	r6, #1
 8005bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005bcc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005bd0:	ecac 0a01 	vstmia	ip!, {s0}
 8005bd4:	ed90 0a00 	vldr	s0, [r0]
 8005bd8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005bdc:	e79c      	b.n	8005b18 <__kernel_rem_pio2f+0xe8>
 8005bde:	d105      	bne.n	8005bec <__kernel_rem_pio2f+0x1bc>
 8005be0:	1e60      	subs	r0, r4, #1
 8005be2:	a908      	add	r1, sp, #32
 8005be4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005be8:	11f6      	asrs	r6, r6, #7
 8005bea:	e7c8      	b.n	8005b7e <__kernel_rem_pio2f+0x14e>
 8005bec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005bf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	da31      	bge.n	8005c5e <__kernel_rem_pio2f+0x22e>
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c04:	f040 8098 	bne.w	8005d38 <__kernel_rem_pio2f+0x308>
 8005c08:	1e60      	subs	r0, r4, #1
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4550      	cmp	r0, sl
 8005c0e:	da4b      	bge.n	8005ca8 <__kernel_rem_pio2f+0x278>
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d065      	beq.n	8005ce0 <__kernel_rem_pio2f+0x2b0>
 8005c14:	3c01      	subs	r4, #1
 8005c16:	ab08      	add	r3, sp, #32
 8005c18:	3d08      	subs	r5, #8
 8005c1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f8      	beq.n	8005c14 <__kernel_rem_pio2f+0x1e4>
 8005c22:	4628      	mov	r0, r5
 8005c24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005c28:	f000 f974 	bl	8005f14 <scalbnf>
 8005c2c:	1c63      	adds	r3, r4, #1
 8005c2e:	aa44      	add	r2, sp, #272	@ 0x110
 8005c30:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005d30 <__kernel_rem_pio2f+0x300>
 8005c34:	0099      	lsls	r1, r3, #2
 8005c36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f280 80a9 	bge.w	8005d94 <__kernel_rem_pio2f+0x364>
 8005c42:	4623      	mov	r3, r4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f2c0 80c7 	blt.w	8005dd8 <__kernel_rem_pio2f+0x3a8>
 8005c4a:	aa44      	add	r2, sp, #272	@ 0x110
 8005c4c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005c50:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005d28 <__kernel_rem_pio2f+0x2f8>
 8005c54:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005c58:	2000      	movs	r0, #0
 8005c5a:	1ae2      	subs	r2, r4, r3
 8005c5c:	e0b1      	b.n	8005dc2 <__kernel_rem_pio2f+0x392>
 8005c5e:	2602      	movs	r6, #2
 8005c60:	e78f      	b.n	8005b82 <__kernel_rem_pio2f+0x152>
 8005c62:	f852 1b04 	ldr.w	r1, [r2], #4
 8005c66:	b948      	cbnz	r0, 8005c7c <__kernel_rem_pio2f+0x24c>
 8005c68:	b121      	cbz	r1, 8005c74 <__kernel_rem_pio2f+0x244>
 8005c6a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005c6e:	f842 1c04 	str.w	r1, [r2, #-4]
 8005c72:	2101      	movs	r1, #1
 8005c74:	f10e 0e01 	add.w	lr, lr, #1
 8005c78:	4608      	mov	r0, r1
 8005c7a:	e787      	b.n	8005b8c <__kernel_rem_pio2f+0x15c>
 8005c7c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005c80:	e7f5      	b.n	8005c6e <__kernel_rem_pio2f+0x23e>
 8005c82:	f104 3cff 	add.w	ip, r4, #4294967295
 8005c86:	aa08      	add	r2, sp, #32
 8005c88:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005c8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c90:	a908      	add	r1, sp, #32
 8005c92:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005c96:	e781      	b.n	8005b9c <__kernel_rem_pio2f+0x16c>
 8005c98:	f104 3cff 	add.w	ip, r4, #4294967295
 8005c9c:	aa08      	add	r2, sp, #32
 8005c9e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005ca2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005ca6:	e7f3      	b.n	8005c90 <__kernel_rem_pio2f+0x260>
 8005ca8:	a908      	add	r1, sp, #32
 8005caa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005cae:	3801      	subs	r0, #1
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	e7ab      	b.n	8005c0c <__kernel_rem_pio2f+0x1dc>
 8005cb4:	3201      	adds	r2, #1
 8005cb6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005cba:	2e00      	cmp	r6, #0
 8005cbc:	d0fa      	beq.n	8005cb4 <__kernel_rem_pio2f+0x284>
 8005cbe:	9905      	ldr	r1, [sp, #20]
 8005cc0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005cc4:	eb0d 0001 	add.w	r0, sp, r1
 8005cc8:	18e6      	adds	r6, r4, r3
 8005cca:	a91c      	add	r1, sp, #112	@ 0x70
 8005ccc:	f104 0c01 	add.w	ip, r4, #1
 8005cd0:	384c      	subs	r0, #76	@ 0x4c
 8005cd2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005cd6:	4422      	add	r2, r4
 8005cd8:	4562      	cmp	r2, ip
 8005cda:	da04      	bge.n	8005ce6 <__kernel_rem_pio2f+0x2b6>
 8005cdc:	4614      	mov	r4, r2
 8005cde:	e70e      	b.n	8005afe <__kernel_rem_pio2f+0xce>
 8005ce0:	9804      	ldr	r0, [sp, #16]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	e7e7      	b.n	8005cb6 <__kernel_rem_pio2f+0x286>
 8005ce6:	9903      	ldr	r1, [sp, #12]
 8005ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005cec:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005cf0:	9105      	str	r1, [sp, #20]
 8005cf2:	ee07 1a90 	vmov	s15, r1
 8005cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfa:	2400      	movs	r4, #0
 8005cfc:	ece6 7a01 	vstmia	r6!, {s15}
 8005d00:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005d04:	46b1      	mov	r9, r6
 8005d06:	455c      	cmp	r4, fp
 8005d08:	dd04      	ble.n	8005d14 <__kernel_rem_pio2f+0x2e4>
 8005d0a:	ece0 7a01 	vstmia	r0!, {s15}
 8005d0e:	f10c 0c01 	add.w	ip, ip, #1
 8005d12:	e7e1      	b.n	8005cd8 <__kernel_rem_pio2f+0x2a8>
 8005d14:	ecfe 6a01 	vldmia	lr!, {s13}
 8005d18:	ed39 7a01 	vldmdb	r9!, {s14}
 8005d1c:	3401      	adds	r4, #1
 8005d1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005d22:	e7f0      	b.n	8005d06 <__kernel_rem_pio2f+0x2d6>
 8005d24:	0800648c 	.word	0x0800648c
 8005d28:	08006460 	.word	0x08006460
 8005d2c:	43800000 	.word	0x43800000
 8005d30:	3b800000 	.word	0x3b800000
 8005d34:	00000000 	.word	0x00000000
 8005d38:	9b02      	ldr	r3, [sp, #8]
 8005d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8005d3e:	eba3 0008 	sub.w	r0, r3, r8
 8005d42:	f000 f8e7 	bl	8005f14 <scalbnf>
 8005d46:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005d2c <__kernel_rem_pio2f+0x2fc>
 8005d4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	db19      	blt.n	8005d88 <__kernel_rem_pio2f+0x358>
 8005d54:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005d30 <__kernel_rem_pio2f+0x300>
 8005d58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005d5c:	aa08      	add	r2, sp, #32
 8005d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d62:	3508      	adds	r5, #8
 8005d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d68:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d74:	ee10 3a10 	vmov	r3, s0
 8005d78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005d7c:	ee17 3a90 	vmov	r3, s15
 8005d80:	3401      	adds	r4, #1
 8005d82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005d86:	e74c      	b.n	8005c22 <__kernel_rem_pio2f+0x1f2>
 8005d88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d8c:	aa08      	add	r2, sp, #32
 8005d8e:	ee10 3a10 	vmov	r3, s0
 8005d92:	e7f6      	b.n	8005d82 <__kernel_rem_pio2f+0x352>
 8005d94:	a808      	add	r0, sp, #32
 8005d96:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005d9a:	9001      	str	r0, [sp, #4]
 8005d9c:	ee07 0a90 	vmov	s15, r0
 8005da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005da4:	3b01      	subs	r3, #1
 8005da6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005daa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005dae:	ed62 7a01 	vstmdb	r2!, {s15}
 8005db2:	e743      	b.n	8005c3c <__kernel_rem_pio2f+0x20c>
 8005db4:	ecfc 6a01 	vldmia	ip!, {s13}
 8005db8:	ecb5 7a01 	vldmia	r5!, {s14}
 8005dbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	4550      	cmp	r0, sl
 8005dc4:	dc01      	bgt.n	8005dca <__kernel_rem_pio2f+0x39a>
 8005dc6:	4282      	cmp	r2, r0
 8005dc8:	daf4      	bge.n	8005db4 <__kernel_rem_pio2f+0x384>
 8005dca:	a858      	add	r0, sp, #352	@ 0x160
 8005dcc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005dd0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	e735      	b.n	8005c44 <__kernel_rem_pio2f+0x214>
 8005dd8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	dc09      	bgt.n	8005df2 <__kernel_rem_pio2f+0x3c2>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dc2b      	bgt.n	8005e3a <__kernel_rem_pio2f+0x40a>
 8005de2:	d044      	beq.n	8005e6e <__kernel_rem_pio2f+0x43e>
 8005de4:	f009 0007 	and.w	r0, r9, #7
 8005de8:	b059      	add	sp, #356	@ 0x164
 8005dea:	ecbd 8b04 	vpop	{d8-d9}
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d1f5      	bne.n	8005de4 <__kernel_rem_pio2f+0x3b4>
 8005df8:	aa30      	add	r2, sp, #192	@ 0xc0
 8005dfa:	1f0b      	subs	r3, r1, #4
 8005dfc:	4413      	add	r3, r2
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4620      	mov	r0, r4
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f1a2 0204 	sub.w	r2, r2, #4
 8005e08:	dc52      	bgt.n	8005eb0 <__kernel_rem_pio2f+0x480>
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	2a01      	cmp	r2, #1
 8005e0e:	f1a3 0304 	sub.w	r3, r3, #4
 8005e12:	dc5d      	bgt.n	8005ed0 <__kernel_rem_pio2f+0x4a0>
 8005e14:	ab30      	add	r3, sp, #192	@ 0xc0
 8005e16:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005e1a:	440b      	add	r3, r1
 8005e1c:	2c01      	cmp	r4, #1
 8005e1e:	dc67      	bgt.n	8005ef0 <__kernel_rem_pio2f+0x4c0>
 8005e20:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005e24:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	d167      	bne.n	8005efc <__kernel_rem_pio2f+0x4cc>
 8005e2c:	edc7 6a00 	vstr	s13, [r7]
 8005e30:	ed87 7a01 	vstr	s14, [r7, #4]
 8005e34:	edc7 7a02 	vstr	s15, [r7, #8]
 8005e38:	e7d4      	b.n	8005de4 <__kernel_rem_pio2f+0x3b4>
 8005e3a:	ab30      	add	r3, sp, #192	@ 0xc0
 8005e3c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005e40:	440b      	add	r3, r1
 8005e42:	4622      	mov	r2, r4
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	da24      	bge.n	8005e92 <__kernel_rem_pio2f+0x462>
 8005e48:	b34e      	cbz	r6, 8005e9e <__kernel_rem_pio2f+0x46e>
 8005e4a:	eef1 7a47 	vneg.f32	s15, s14
 8005e4e:	edc7 7a00 	vstr	s15, [r7]
 8005e52:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005e56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e5a:	aa31      	add	r2, sp, #196	@ 0xc4
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	da20      	bge.n	8005ea4 <__kernel_rem_pio2f+0x474>
 8005e62:	b10e      	cbz	r6, 8005e68 <__kernel_rem_pio2f+0x438>
 8005e64:	eef1 7a67 	vneg.f32	s15, s15
 8005e68:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e6c:	e7ba      	b.n	8005de4 <__kernel_rem_pio2f+0x3b4>
 8005e6e:	ab30      	add	r3, sp, #192	@ 0xc0
 8005e70:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8005d34 <__kernel_rem_pio2f+0x304>
 8005e74:	440b      	add	r3, r1
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	da05      	bge.n	8005e86 <__kernel_rem_pio2f+0x456>
 8005e7a:	b10e      	cbz	r6, 8005e80 <__kernel_rem_pio2f+0x450>
 8005e7c:	eef1 7a67 	vneg.f32	s15, s15
 8005e80:	edc7 7a00 	vstr	s15, [r7]
 8005e84:	e7ae      	b.n	8005de4 <__kernel_rem_pio2f+0x3b4>
 8005e86:	ed33 7a01 	vldmdb	r3!, {s14}
 8005e8a:	3c01      	subs	r4, #1
 8005e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e90:	e7f1      	b.n	8005e76 <__kernel_rem_pio2f+0x446>
 8005e92:	ed73 7a01 	vldmdb	r3!, {s15}
 8005e96:	3a01      	subs	r2, #1
 8005e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e9c:	e7d2      	b.n	8005e44 <__kernel_rem_pio2f+0x414>
 8005e9e:	eef0 7a47 	vmov.f32	s15, s14
 8005ea2:	e7d4      	b.n	8005e4e <__kernel_rem_pio2f+0x41e>
 8005ea4:	ecb2 7a01 	vldmia	r2!, {s14}
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eae:	e7d6      	b.n	8005e5e <__kernel_rem_pio2f+0x42e>
 8005eb0:	edd2 7a00 	vldr	s15, [r2]
 8005eb4:	edd2 6a01 	vldr	s13, [r2, #4]
 8005eb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005ebc:	3801      	subs	r0, #1
 8005ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ec2:	ed82 7a00 	vstr	s14, [r2]
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	edc2 7a01 	vstr	s15, [r2, #4]
 8005ece:	e798      	b.n	8005e02 <__kernel_rem_pio2f+0x3d2>
 8005ed0:	edd3 7a00 	vldr	s15, [r3]
 8005ed4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ed8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005edc:	3a01      	subs	r2, #1
 8005ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ee2:	ed83 7a00 	vstr	s14, [r3]
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	edc3 7a01 	vstr	s15, [r3, #4]
 8005eee:	e78d      	b.n	8005e0c <__kernel_rem_pio2f+0x3dc>
 8005ef0:	ed33 7a01 	vldmdb	r3!, {s14}
 8005ef4:	3c01      	subs	r4, #1
 8005ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005efa:	e78f      	b.n	8005e1c <__kernel_rem_pio2f+0x3ec>
 8005efc:	eef1 6a66 	vneg.f32	s13, s13
 8005f00:	eeb1 7a47 	vneg.f32	s14, s14
 8005f04:	edc7 6a00 	vstr	s13, [r7]
 8005f08:	ed87 7a01 	vstr	s14, [r7, #4]
 8005f0c:	eef1 7a67 	vneg.f32	s15, s15
 8005f10:	e790      	b.n	8005e34 <__kernel_rem_pio2f+0x404>
 8005f12:	bf00      	nop

08005f14 <scalbnf>:
 8005f14:	ee10 3a10 	vmov	r3, s0
 8005f18:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005f1c:	d02b      	beq.n	8005f76 <scalbnf+0x62>
 8005f1e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005f22:	d302      	bcc.n	8005f2a <scalbnf+0x16>
 8005f24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005f28:	4770      	bx	lr
 8005f2a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005f2e:	d123      	bne.n	8005f78 <scalbnf+0x64>
 8005f30:	4b24      	ldr	r3, [pc, #144]	@ (8005fc4 <scalbnf+0xb0>)
 8005f32:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005fc8 <scalbnf+0xb4>
 8005f36:	4298      	cmp	r0, r3
 8005f38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005f3c:	db17      	blt.n	8005f6e <scalbnf+0x5a>
 8005f3e:	ee10 3a10 	vmov	r3, s0
 8005f42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005f46:	3a19      	subs	r2, #25
 8005f48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005f4c:	4288      	cmp	r0, r1
 8005f4e:	dd15      	ble.n	8005f7c <scalbnf+0x68>
 8005f50:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005fcc <scalbnf+0xb8>
 8005f54:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005fd0 <scalbnf+0xbc>
 8005f58:	ee10 3a10 	vmov	r3, s0
 8005f5c:	eeb0 7a67 	vmov.f32	s14, s15
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfb8      	it	lt
 8005f64:	eef0 7a66 	vmovlt.f32	s15, s13
 8005f68:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005f6c:	4770      	bx	lr
 8005f6e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005fd4 <scalbnf+0xc0>
 8005f72:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005f76:	4770      	bx	lr
 8005f78:	0dd2      	lsrs	r2, r2, #23
 8005f7a:	e7e5      	b.n	8005f48 <scalbnf+0x34>
 8005f7c:	4410      	add	r0, r2
 8005f7e:	28fe      	cmp	r0, #254	@ 0xfe
 8005f80:	dce6      	bgt.n	8005f50 <scalbnf+0x3c>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dd06      	ble.n	8005f94 <scalbnf+0x80>
 8005f86:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005f8a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005f8e:	ee00 3a10 	vmov	s0, r3
 8005f92:	4770      	bx	lr
 8005f94:	f110 0f16 	cmn.w	r0, #22
 8005f98:	da09      	bge.n	8005fae <scalbnf+0x9a>
 8005f9a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005fd4 <scalbnf+0xc0>
 8005f9e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005fd8 <scalbnf+0xc4>
 8005fa2:	ee10 3a10 	vmov	r3, s0
 8005fa6:	eeb0 7a67 	vmov.f32	s14, s15
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	e7d9      	b.n	8005f62 <scalbnf+0x4e>
 8005fae:	3019      	adds	r0, #25
 8005fb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005fb4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005fb8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005fdc <scalbnf+0xc8>
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	e7d7      	b.n	8005f72 <scalbnf+0x5e>
 8005fc2:	bf00      	nop
 8005fc4:	ffff3cb0 	.word	0xffff3cb0
 8005fc8:	4c000000 	.word	0x4c000000
 8005fcc:	7149f2ca 	.word	0x7149f2ca
 8005fd0:	f149f2ca 	.word	0xf149f2ca
 8005fd4:	0da24260 	.word	0x0da24260
 8005fd8:	8da24260 	.word	0x8da24260
 8005fdc:	33000000 	.word	0x33000000

08005fe0 <floorf>:
 8005fe0:	ee10 3a10 	vmov	r3, s0
 8005fe4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005fe8:	3a7f      	subs	r2, #127	@ 0x7f
 8005fea:	2a16      	cmp	r2, #22
 8005fec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ff0:	dc2b      	bgt.n	800604a <floorf+0x6a>
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	da12      	bge.n	800601c <floorf+0x3c>
 8005ff6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800605c <floorf+0x7c>
 8005ffa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ffe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006006:	dd06      	ble.n	8006016 <floorf+0x36>
 8006008:	2b00      	cmp	r3, #0
 800600a:	da24      	bge.n	8006056 <floorf+0x76>
 800600c:	2900      	cmp	r1, #0
 800600e:	4b14      	ldr	r3, [pc, #80]	@ (8006060 <floorf+0x80>)
 8006010:	bf08      	it	eq
 8006012:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8006016:	ee00 3a10 	vmov	s0, r3
 800601a:	4770      	bx	lr
 800601c:	4911      	ldr	r1, [pc, #68]	@ (8006064 <floorf+0x84>)
 800601e:	4111      	asrs	r1, r2
 8006020:	420b      	tst	r3, r1
 8006022:	d0fa      	beq.n	800601a <floorf+0x3a>
 8006024:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800605c <floorf+0x7c>
 8006028:	ee30 0a27 	vadd.f32	s0, s0, s15
 800602c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006034:	ddef      	ble.n	8006016 <floorf+0x36>
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfbe      	ittt	lt
 800603a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800603e:	fa40 f202 	asrlt.w	r2, r0, r2
 8006042:	189b      	addlt	r3, r3, r2
 8006044:	ea23 0301 	bic.w	r3, r3, r1
 8006048:	e7e5      	b.n	8006016 <floorf+0x36>
 800604a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800604e:	d3e4      	bcc.n	800601a <floorf+0x3a>
 8006050:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006054:	4770      	bx	lr
 8006056:	2300      	movs	r3, #0
 8006058:	e7dd      	b.n	8006016 <floorf+0x36>
 800605a:	bf00      	nop
 800605c:	7149f2ca 	.word	0x7149f2ca
 8006060:	bf800000 	.word	0xbf800000
 8006064:	007fffff 	.word	0x007fffff

08006068 <_init>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	bf00      	nop
 800606c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606e:	bc08      	pop	{r3}
 8006070:	469e      	mov	lr, r3
 8006072:	4770      	bx	lr

08006074 <_fini>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr
