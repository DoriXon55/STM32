
LICZNIK_HOMEWORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a0c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fa4  08003fa4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fa4  08003fa4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003fb8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003fb8  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a16b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001841  00000000  00000000  0000f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  000109e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c4  00000000  00000000  00011548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025be3  00000000  00000000  00011e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcf3  00000000  00000000  000379ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec8e8  00000000  00000000  000436e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ffca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  00130010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00133098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b7c 	.word	0x08003b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b7c 	.word	0x08003b7c

080001c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM3)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a33      	ldr	r2, [pc, #204]	@ (80002a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d14d      	bne.n	8000276 <HAL_TIM_PeriodElapsedCallback+0xae>
	    {
	        // Calculate PWM values for Red and Blue using sine waves
	        float r = 1000 * (1.0f + sinf(counter / 50.0f)); // Red oscillates
 80001da:	4b33      	ldr	r3, [pc, #204]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80001dc:	edd3 7a00 	vldr	s15, [r3]
 80001e0:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80002ac <HAL_TIM_PeriodElapsedCallback+0xe4>
 80001e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80001e8:	eeb0 0a47 	vmov.f32	s0, s14
 80001ec:	f002 ff8c 	bl	8003108 <sinf>
 80001f0:	eef0 7a40 	vmov.f32	s15, s0
 80001f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80001f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80001fc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80002b0 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000204:	edc7 7a03 	vstr	s15, [r7, #12]
	        float b = 1000 * (1.0f + sinf((counter + 180.0f) / 50.0f)); // Blue oscillates, phase-shifted
 8000208:	4b27      	ldr	r3, [pc, #156]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800020a:	edd3 7a00 	vldr	s15, [r3]
 800020e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80002b4 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000216:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80002ac <HAL_TIM_PeriodElapsedCallback+0xe4>
 800021a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800021e:	eeb0 0a47 	vmov.f32	s0, s14
 8000222:	f002 ff71 	bl	8003108 <sinf>
 8000226:	eef0 7a40 	vmov.f32	s15, s0
 800022a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800022e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000232:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80002b0 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800023a:	edc7 7a02 	vstr	s15, [r7, #8]

	        // Set PWM for Red and Blue channels
	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(r)); // Red
 800023e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000242:	f000 f83f 	bl	80002c4 <calc_pwm>
 8000246:	4603      	mov	r3, r0
 8000248:	461a      	mov	r2, r3
 800024a:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	63da      	str	r2, [r3, #60]	@ 0x3c
	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(b)); // Blue
 8000250:	ed97 0a02 	vldr	s0, [r7, #8]
 8000254:	f000 f836 	bl	80002c4 <calc_pwm>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	635a      	str	r2, [r3, #52]	@ 0x34

	        // Increment the counter
	        counter += 1.0f;
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000264:	edd3 7a00 	vldr	s15, [r3]
 8000268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800026c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000270:	4b0d      	ldr	r3, [pc, #52]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000272:	edc3 7a00 	vstr	s15, [r3]
	    }
	if (htim == &htim6)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d104      	bne.n	8000288 <HAL_TIM_PeriodElapsedCallback+0xc0>
		HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 800027e:	2102      	movs	r1, #2
 8000280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000284:	f000 feae 	bl	8000fe4 <HAL_GPIO_TogglePin>

	if(htim == &htim7)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d104      	bne.n	800029a <HAL_TIM_PeriodElapsedCallback+0xd2>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000290:	2101      	movs	r1, #1
 8000292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000296:	f000 fea5 	bl	8000fe4 <HAL_GPIO_TogglePin>

}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40000400 	.word	0x40000400
 80002a8:	2000010c 	.word	0x2000010c
 80002ac:	42480000 	.word	0x42480000
 80002b0:	447a0000 	.word	0x447a0000
 80002b4:	43340000 	.word	0x43340000
 80002b8:	20000028 	.word	0x20000028
 80002bc:	20000074 	.word	0x20000074
 80002c0:	200000c0 	.word	0x200000c0

080002c4 <calc_pwm>:
uint16_t calc_pwm(float value)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ensure value is within PWM range [0, 1000]
    if (value < 0) value = 0;
 80002ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002da:	d502      	bpl.n	80002e2 <calc_pwm+0x1e>
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
    if (value > 1000) value = 1000;
 80002e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000314 <calc_pwm+0x50>
 80002ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dd01      	ble.n	80002f8 <calc_pwm+0x34>
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <calc_pwm+0x54>)
 80002f6:	607b      	str	r3, [r7, #4]
    return (uint16_t)value;
 80002f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80002fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000300:	ee17 3a90 	vmov	r3, s15
 8000304:	b29b      	uxth	r3, r3
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	447a0000 	.word	0x447a0000
 8000318:	447a0000 	.word	0x447a0000

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f000 fb17 	bl	8000952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f822 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 f970 	bl	800060c <MX_GPIO_Init>
  MX_TIM6_Init();
 800032c:	f000 f8fe 	bl	800052c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000330:	f000 f934 	bl	800059c <MX_TIM7_Init>
  MX_TIM3_Init();
 8000334:	f000 f86c 	bl	8000410 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000338:	4809      	ldr	r0, [pc, #36]	@ (8000360 <main+0x44>)
 800033a:	f001 fcf1 	bl	8001d20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800033e:	4809      	ldr	r0, [pc, #36]	@ (8000364 <main+0x48>)
 8000340:	f001 fcee 	bl	8001d20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000344:	4808      	ldr	r0, [pc, #32]	@ (8000368 <main+0x4c>)
 8000346:	f001 fceb 	bl	8001d20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800034a:	2100      	movs	r1, #0
 800034c:	4806      	ldr	r0, [pc, #24]	@ (8000368 <main+0x4c>)
 800034e:	f001 fdb9 	bl	8001ec4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000352:	2108      	movs	r1, #8
 8000354:	4804      	ldr	r0, [pc, #16]	@ (8000368 <main+0x4c>)
 8000356:	f001 fdb5 	bl	8001ec4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035a:	bf00      	nop
 800035c:	e7fd      	b.n	800035a <main+0x3e>
 800035e:	bf00      	nop
 8000360:	20000074 	.word	0x20000074
 8000364:	200000c0 	.word	0x200000c0
 8000368:	20000028 	.word	0x20000028

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b096      	sub	sp, #88	@ 0x58
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2244      	movs	r2, #68	@ 0x44
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fe98 	bl	80030b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800038e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000392:	f000 fe4f 	bl	8001034 <HAL_PWREx_ControlVoltageScaling>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800039c:	f000 f974 	bl	8000688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003a0:	2310      	movs	r3, #16
 80003a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003ac:	2360      	movs	r3, #96	@ 0x60
 80003ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003b4:	2301      	movs	r3, #1
 80003b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003bc:	2328      	movs	r3, #40	@ 0x28
 80003be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003c0:	2307      	movs	r3, #7
 80003c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fe85 	bl	80010e0 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003dc:	f000 f954 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2303      	movs	r3, #3
 80003e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	2104      	movs	r1, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fa4d 	bl	8001898 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000404:	f000 f940 	bl	8000688 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3758      	adds	r7, #88	@ 0x58
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08e      	sub	sp, #56	@ 0x38
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000424:	f107 031c 	add.w	r3, r7, #28
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000430:	463b      	mov	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000442:	4b38      	ldr	r3, [pc, #224]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000444:	4a38      	ldr	r2, [pc, #224]	@ (8000528 <MX_TIM3_Init+0x118>)
 8000446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000448:	4b36      	ldr	r3, [pc, #216]	@ (8000524 <MX_TIM3_Init+0x114>)
 800044a:	224f      	movs	r2, #79	@ 0x4f
 800044c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b35      	ldr	r3, [pc, #212]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000454:	4b33      	ldr	r3, [pc, #204]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000456:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800045a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b31      	ldr	r3, [pc, #196]	@ (8000524 <MX_TIM3_Init+0x114>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b30      	ldr	r3, [pc, #192]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000468:	482e      	ldr	r0, [pc, #184]	@ (8000524 <MX_TIM3_Init+0x114>)
 800046a:	f001 fc01 	bl	8001c70 <HAL_TIM_Base_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000474:	f000 f908 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800047e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000482:	4619      	mov	r1, r3
 8000484:	4827      	ldr	r0, [pc, #156]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000486:	f002 f83f 	bl	8002508 <HAL_TIM_ConfigClockSource>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000490:	f000 f8fa 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000494:	4823      	ldr	r0, [pc, #140]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000496:	f001 fcb3 	bl	8001e00 <HAL_TIM_PWM_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80004a0:	f000 f8f2 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004ac:	f107 031c 	add.w	r3, r7, #28
 80004b0:	4619      	mov	r1, r3
 80004b2:	481c      	ldr	r0, [pc, #112]	@ (8000524 <MX_TIM3_Init+0x114>)
 80004b4:	f002 fd56 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80004be:	f000 f8e3 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c2:	2360      	movs	r3, #96	@ 0x60
 80004c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4812      	ldr	r0, [pc, #72]	@ (8000524 <MX_TIM3_Init+0x114>)
 80004da:	f001 ff01 	bl	80022e0 <HAL_TIM_PWM_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80004e4:	f000 f8d0 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	2204      	movs	r2, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	480d      	ldr	r0, [pc, #52]	@ (8000524 <MX_TIM3_Init+0x114>)
 80004f0:	f001 fef6 	bl	80022e0 <HAL_TIM_PWM_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80004fa:	f000 f8c5 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	2208      	movs	r2, #8
 8000502:	4619      	mov	r1, r3
 8000504:	4807      	ldr	r0, [pc, #28]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000506:	f001 feeb 	bl	80022e0 <HAL_TIM_PWM_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000510:	f000 f8ba 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000514:	4803      	ldr	r0, [pc, #12]	@ (8000524 <MX_TIM3_Init+0x114>)
 8000516:	f000 f93f 	bl	8000798 <HAL_TIM_MspPostInit>

}
 800051a:	bf00      	nop
 800051c:	3738      	adds	r7, #56	@ 0x38
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000028 	.word	0x20000028
 8000528:	40000400 	.word	0x40000400

0800052c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <MX_TIM6_Init+0x68>)
 800053e:	4a16      	ldr	r2, [pc, #88]	@ (8000598 <MX_TIM6_Init+0x6c>)
 8000540:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_TIM6_Init+0x68>)
 8000544:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000548:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_TIM6_Init+0x68>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000550:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_TIM6_Init+0x68>)
 8000552:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000556:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000558:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_TIM6_Init+0x68>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800055e:	480d      	ldr	r0, [pc, #52]	@ (8000594 <MX_TIM6_Init+0x68>)
 8000560:	f001 fb86 	bl	8001c70 <HAL_TIM_Base_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800056a:	f000 f88d 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	@ (8000594 <MX_TIM6_Init+0x68>)
 800057c:	f002 fcf2 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000586:	f000 f87f 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000074 	.word	0x20000074
 8000598:	40001000 	.word	0x40001000

0800059c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005ae:	4a16      	ldr	r2, [pc, #88]	@ (8000608 <MX_TIM7_Init+0x6c>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000;
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005b4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80005b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005c2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80005c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005d0:	f001 fb4e 	bl	8001c70 <HAL_TIM_Base_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80005da:	f000 f855 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <MX_TIM7_Init+0x68>)
 80005ec:	f002 fcba 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80005f6:	f000 f847 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000c0 	.word	0x200000c0
 8000608:	40001400 	.word	0x40001400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a17      	ldr	r2, [pc, #92]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_GPIO_Init+0x78>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2103      	movs	r1, #3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f000 fcab 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|YELLOW_LED_Pin;
 800065e:	2303      	movs	r3, #3
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000678:	f000 faf2 	bl	8000c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Error_Handler+0x8>

08000694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_MspInit+0x44>)
 800069c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <HAL_MspInit+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <HAL_MspInit+0x44>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_MspInit+0x44>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <HAL_MspInit+0x44>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_MspInit+0x44>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a27      	ldr	r2, [pc, #156]	@ (8000788 <HAL_TIM_Base_MspInit+0xac>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d114      	bne.n	8000718 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006ee:	4b27      	ldr	r3, [pc, #156]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f2:	4a26      	ldr	r2, [pc, #152]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006fa:	4b24      	ldr	r3, [pc, #144]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2109      	movs	r1, #9
 800070a:	201d      	movs	r0, #29
 800070c:	f000 fa71 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000710:	201d      	movs	r0, #29
 8000712:	f000 fa8a 	bl	8000c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000716:	e032      	b.n	800077e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <HAL_TIM_Base_MspInit+0xb4>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d114      	bne.n	800074c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000726:	4a19      	ldr	r2, [pc, #100]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6593      	str	r3, [r2, #88]	@ 0x58
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	210a      	movs	r1, #10
 800073e:	2036      	movs	r0, #54	@ 0x36
 8000740:	f000 fa57 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000744:	2036      	movs	r0, #54	@ 0x36
 8000746:	f000 fa70 	bl	8000c2a <HAL_NVIC_EnableIRQ>
}
 800074a:	e018      	b.n	800077e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <HAL_TIM_Base_MspInit+0xb8>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d113      	bne.n	800077e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075a:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6593      	str	r3, [r2, #88]	@ 0x58
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <HAL_TIM_Base_MspInit+0xb0>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 11, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210b      	movs	r1, #11
 8000772:	2037      	movs	r0, #55	@ 0x37
 8000774:	f000 fa3d 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000778:	2037      	movs	r0, #55	@ 0x37
 800077a:	f000 fa56 	bl	8000c2a <HAL_NVIC_EnableIRQ>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40000400 	.word	0x40000400
 800078c:	40021000 	.word	0x40021000
 8000790:	40001000 	.word	0x40001000
 8000794:	40001400 	.word	0x40001400

08000798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <HAL_TIM_MspPostInit+0x9c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d138      	bne.n	800082c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <HAL_TIM_MspPostInit+0xa0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <HAL_TIM_MspPostInit+0xa0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_TIM_MspPostInit+0xa0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <HAL_TIM_MspPostInit+0xa0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <HAL_TIM_MspPostInit+0xa0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <HAL_TIM_MspPostInit+0xa0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ea:	23c0      	movs	r3, #192	@ 0xc0
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007fa:	2302      	movs	r3, #2
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000808:	f000 fa2a 	bl	8000c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080c:	2301      	movs	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800081c:	2302      	movs	r3, #2
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <HAL_TIM_MspPostInit+0xa4>)
 8000828:	f000 fa1a 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40000400 	.word	0x40000400
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <UsageFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000896:	f000 f8b1 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008a4:	4802      	ldr	r0, [pc, #8]	@ (80008b0 <TIM3_IRQHandler+0x10>)
 80008a6:	f001 fc13 	bl	80020d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000028 	.word	0x20000028

080008b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <TIM6_DAC_IRQHandler+0x10>)
 80008ba:	f001 fc09 	bl	80020d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000074 	.word	0x20000074

080008c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008cc:	4802      	ldr	r0, [pc, #8]	@ (80008d8 <TIM7_IRQHandler+0x10>)
 80008ce:	f001 fbff 	bl	80020d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c0 	.word	0x200000c0

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000938 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000904:	f7ff ffea 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	@ (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	@ (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 fbc7 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000932:	f7ff fcf3 	bl	800031c <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000938:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000944:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 8000948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800094c:	20000114 	.word	0x20000114

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>

08000952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f93d 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f80e 	bl	8000984 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e001      	b.n	8000978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000974:	f7ff fe8e 	bl	8000694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d023      	beq.n	80009e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <HAL_InitTick+0x70>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_InitTick+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f949 	bl	8000c46 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10f      	bne.n	80009da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d809      	bhi.n	80009d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f913 	bl	8000bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <HAL_InitTick+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e007      	b.n	80009e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e004      	b.n	80009e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e001      	b.n	80009e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000110 	.word	0x20000110

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000110 	.word	0x20000110

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	@ (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	@ 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff8e 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff29 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff3e 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff8e 	bl	8000b30 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff31 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa2 	bl	8000b98 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e17f      	b.n	8000f70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 8171 	beq.w	8000f6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_Init+0x40>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d118      	bne.n	8000d40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d14:	2201      	movs	r2, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	08db      	lsrs	r3, r3, #3
 8000d2a:	f003 0201 	and.w	r2, r3, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d017      	beq.n	8000d7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d123      	bne.n	8000dd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	6939      	ldr	r1, [r7, #16]
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0203 	and.w	r2, r3, #3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80ac 	beq.w	8000f6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b5f      	ldr	r3, [pc, #380]	@ (8000f90 <HAL_GPIO_Init+0x330>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	4a5e      	ldr	r2, [pc, #376]	@ (8000f90 <HAL_GPIO_Init+0x330>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000f90 <HAL_GPIO_Init+0x330>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2a:	4a5a      	ldr	r2, [pc, #360]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e54:	d025      	beq.n	8000ea2 <HAL_GPIO_Init+0x242>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4f      	ldr	r2, [pc, #316]	@ (8000f98 <HAL_GPIO_Init+0x338>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01f      	beq.n	8000e9e <HAL_GPIO_Init+0x23e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4e      	ldr	r2, [pc, #312]	@ (8000f9c <HAL_GPIO_Init+0x33c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x23a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <HAL_GPIO_Init+0x340>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x236>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa4 <HAL_GPIO_Init+0x344>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x232>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa8 <HAL_GPIO_Init+0x348>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x22e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4a      	ldr	r2, [pc, #296]	@ (8000fac <HAL_GPIO_Init+0x34c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x22a>
 8000e86:	2306      	movs	r3, #6
 8000e88:	e00c      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00a      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e008      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x244>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb4:	4937      	ldr	r1, [pc, #220]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee6:	4a32      	ldr	r2, [pc, #200]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f10:	4a27      	ldr	r2, [pc, #156]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f16:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <HAL_GPIO_Init+0x350>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae78 	bne.w	8000c70 <HAL_GPIO_Init+0x10>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	48000c00 	.word	0x48000c00
 8000fa4:	48001000 	.word	0x48001000
 8000fa8:	48001400 	.word	0x48001400
 8000fac:	48001800 	.word	0x48001800
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43d9      	mvns	r1, r3
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	400b      	ands	r3, r1
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <HAL_PWREx_GetVoltageRange+0x18>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40007000 	.word	0x40007000

08001034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001042:	d130      	bne.n	80010a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800104c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001050:	d038      	beq.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800105a:	4a1e      	ldr	r2, [pc, #120]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001060:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2232      	movs	r2, #50	@ 0x32
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4a1b      	ldr	r2, [pc, #108]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001078:	e002      	b.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3b01      	subs	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108c:	d102      	bne.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x60>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f2      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a0:	d110      	bne.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e00f      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b2:	d007      	beq.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010bc:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40007000 	.word	0x40007000
 80010d8:	20000000 	.word	0x20000000
 80010dc:	431bde83 	.word	0x431bde83

080010e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e3ca      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f2:	4b97      	ldr	r3, [pc, #604]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fc:	4b94      	ldr	r3, [pc, #592]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80e4 	beq.w	80012dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_RCC_OscConfig+0x4a>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b0c      	cmp	r3, #12
 800111e:	f040 808b 	bne.w	8001238 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 8087 	bne.w	8001238 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800112a:	4b89      	ldr	r3, [pc, #548]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x62>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e3a2      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1a      	ldr	r2, [r3, #32]
 8001146:	4b82      	ldr	r3, [pc, #520]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_RCC_OscConfig+0x7c>
 8001152:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800115a:	e005      	b.n	8001168 <HAL_RCC_OscConfig+0x88>
 800115c:	4b7c      	ldr	r3, [pc, #496]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001168:	4293      	cmp	r3, r2
 800116a:	d223      	bcs.n	80011b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd1d 	bl	8001bb0 <RCC_SetFlashLatencyFromMSIRange>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e383      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001180:	4b73      	ldr	r3, [pc, #460]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a72      	ldr	r2, [pc, #456]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b70      	ldr	r3, [pc, #448]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	496d      	ldr	r1, [pc, #436]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119e:	4b6c      	ldr	r3, [pc, #432]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	4968      	ldr	r1, [pc, #416]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	604b      	str	r3, [r1, #4]
 80011b2:	e025      	b.n	8001200 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b4:	4b66      	ldr	r3, [pc, #408]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a65      	ldr	r2, [pc, #404]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b63      	ldr	r3, [pc, #396]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4960      	ldr	r1, [pc, #384]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	495b      	ldr	r1, [pc, #364]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d109      	bne.n	8001200 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fcdd 	bl	8001bb0 <RCC_SetFlashLatencyFromMSIRange>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e343      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001200:	f000 fc4a 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b52      	ldr	r3, [pc, #328]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4950      	ldr	r1, [pc, #320]	@ (8001354 <HAL_RCC_OscConfig+0x274>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <HAL_RCC_OscConfig+0x278>)
 800121e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001220:	4b4e      	ldr	r3, [pc, #312]	@ (800135c <HAL_RCC_OscConfig+0x27c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fbad 	bl	8000984 <HAL_InitTick>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d052      	beq.n	80012da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	e327      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d032      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001240:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a42      	ldr	r2, [pc, #264]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800124c:	f7ff fbea 	bl	8000a24 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001254:	f7ff fbe6 	bl	8000a24 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e310      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001266:	4b3a      	ldr	r3, [pc, #232]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a36      	ldr	r2, [pc, #216]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4931      	ldr	r1, [pc, #196]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	492c      	ldr	r1, [pc, #176]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e01a      	b.n	80012dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a29      	ldr	r2, [pc, #164]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fbb7 	bl	8000a24 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ba:	f7ff fbb3 	bl	8000a24 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e2dd      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x1da>
 80012d8:	e000      	b.n	80012dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d074      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x21a>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d10e      	bne.n	8001312 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d10b      	bne.n	8001312 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d064      	beq.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d160      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e2ba      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131a:	d106      	bne.n	800132a <HAL_RCC_OscConfig+0x24a>
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e026      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001332:	d115      	bne.n	8001360 <HAL_RCC_OscConfig+0x280>
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800133a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a02      	ldr	r2, [pc, #8]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e014      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	08003b94 	.word	0x08003b94
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004
 8001360:	4ba0      	ldr	r3, [pc, #640]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a9f      	ldr	r2, [pc, #636]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b9d      	ldr	r3, [pc, #628]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a9c      	ldr	r2, [pc, #624]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fb50 	bl	8000a24 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fb4c 	bl	8000a24 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	@ 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e276      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139a:	4b92      	ldr	r3, [pc, #584]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x2a8>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb3c 	bl	8000a24 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb38 	bl	8000a24 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	@ 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e262      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c2:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2d0>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d060      	beq.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x310>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d119      	bne.n	800141e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d116      	bne.n	800141e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f0:	4b7c      	ldr	r3, [pc, #496]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x328>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e23f      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	4973      	ldr	r1, [pc, #460]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800141c:	e040      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d023      	beq.n	800146e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4b6f      	ldr	r3, [pc, #444]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6e      	ldr	r2, [pc, #440]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff faf7 	bl	8000a24 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff faf3 	bl	8000a24 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e21d      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800144c:	4b65      	ldr	r3, [pc, #404]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b62      	ldr	r3, [pc, #392]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	495f      	ldr	r1, [pc, #380]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e018      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b5d      	ldr	r3, [pc, #372]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5c      	ldr	r2, [pc, #368]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fad3 	bl	8000a24 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff facf 	bl	8000a24 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1f9      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001494:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03c      	beq.n	8001526 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01c      	beq.n	80014ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b4:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ba:	4a4a      	ldr	r2, [pc, #296]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff faae 	bl	8000a24 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff faaa 	bl	8000a24 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1d4      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014de:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ef      	beq.n	80014cc <HAL_RCC_OscConfig+0x3ec>
 80014ec:	e01b      	b.n	8001526 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f4:	4a3b      	ldr	r2, [pc, #236]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa91 	bl	8000a24 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fa8d 	bl	8000a24 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1b7      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ef      	bne.n	8001506 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a6 	beq.w	8001680 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10d      	bne.n	8001560 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800154a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800154e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155c:	2301      	movs	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d118      	bne.n	800159e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001578:	f7ff fa54 	bl	8000a24 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fa50 	bl	8000a24 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e17a      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4d8>
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b6:	e029      	b.n	800160c <HAL_RCC_OscConfig+0x52c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d115      	bne.n	80015ec <HAL_RCC_OscConfig+0x50c>
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d6:	4a03      	ldr	r2, [pc, #12]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015e0:	e014      	b.n	800160c <HAL_RCC_OscConfig+0x52c>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40007000 	.word	0x40007000
 80015ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f2:	4a9b      	ldr	r2, [pc, #620]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015fc:	4b98      	ldr	r3, [pc, #608]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001602:	4a97      	ldr	r2, [pc, #604]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d016      	beq.n	8001642 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fa06 	bl	8000a24 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fa02 	bl	8000a24 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e12a      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001632:	4b8b      	ldr	r3, [pc, #556]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ed      	beq.n	800161c <HAL_RCC_OscConfig+0x53c>
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff f9ef 	bl	8000a24 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff f9eb 	bl	8000a24 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e113      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001660:	4b7f      	ldr	r3, [pc, #508]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ed      	bne.n	800164a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166e:	7ffb      	ldrb	r3, [r7, #31]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b7a      	ldr	r3, [pc, #488]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	4a79      	ldr	r2, [pc, #484]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80fe 	beq.w	8001886 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	2b02      	cmp	r3, #2
 8001690:	f040 80d0 	bne.w	8001834 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001694:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d130      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	3b01      	subs	r3, #1
 80016b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d127      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d11f      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016d4:	2a07      	cmp	r2, #7
 80016d6:	bf14      	ite	ne
 80016d8:	2201      	movne	r2, #1
 80016da:	2200      	moveq	r2, #0
 80016dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016de:	4293      	cmp	r3, r2
 80016e0:	d113      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d109      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d06e      	beq.n	80017e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d069      	beq.n	80017e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001710:	4b53      	ldr	r3, [pc, #332]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800171c:	4b50      	ldr	r3, [pc, #320]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0ad      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800172c:	4b4c      	ldr	r3, [pc, #304]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001738:	f7ff f974 	bl	8000a24 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff f970 	bl	8000a24 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e09a      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001752:	4b43      	ldr	r3, [pc, #268]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175e:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <HAL_RCC_OscConfig+0x784>)
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800176e:	3a01      	subs	r2, #1
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001778:	0212      	lsls	r2, r2, #8
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001780:	0852      	lsrs	r2, r2, #1
 8001782:	3a01      	subs	r2, #1
 8001784:	0552      	lsls	r2, r2, #21
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800178c:	0852      	lsrs	r2, r2, #1
 800178e:	3a01      	subs	r2, #1
 8001790:	0652      	lsls	r2, r2, #25
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001798:	0912      	lsrs	r2, r2, #4
 800179a:	0452      	lsls	r2, r2, #17
 800179c:	430a      	orrs	r2, r1
 800179e:	4930      	ldr	r1, [pc, #192]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017bc:	f7ff f932 	bl	8000a24 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f92e 	bl	8000a24 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e058      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e2:	e050      	b.n	8001886 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e04f      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d148      	bne.n	8001886 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a16      	ldr	r2, [pc, #88]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800180c:	f7ff f90a 	bl	8000a24 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f906 	bl	8000a24 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e030      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x734>
 8001832:	e028      	b.n	8001886 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d023      	beq.n	8001882 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff f8ed 	bl	8000a24 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	e00c      	b.n	8001868 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f8e9 	bl	8000a24 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d905      	bls.n	8001868 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e013      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
 8001860:	40021000 	.word	0x40021000
 8001864:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_RCC_OscConfig+0x7b0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ec      	bne.n	800184e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_RCC_OscConfig+0x7b0>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4905      	ldr	r1, [pc, #20]	@ (8001890 <HAL_RCC_OscConfig+0x7b0>)
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_RCC_OscConfig+0x7b4>)
 800187c:	4013      	ands	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
 8001880:	e001      	b.n	8001886 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	feeefffc 	.word	0xfeeefffc

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0e7      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b75      	ldr	r3, [pc, #468]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d910      	bls.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b72      	ldr	r3, [pc, #456]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4970      	ldr	r1, [pc, #448]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0cf      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b66      	ldr	r3, [pc, #408]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d908      	bls.n	800190a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4960      	ldr	r1, [pc, #384]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04c      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d121      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0a6      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	4b54      	ldr	r3, [pc, #336]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d115      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e09a      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e08e      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e086      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4943      	ldr	r1, [pc, #268]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001980:	f7ff f850 	bl	8000a24 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff f84c 	bl	8000a24 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e06e      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d208      	bcs.n	80019de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	492b      	ldr	r1, [pc, #172]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019de:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d210      	bcs.n	8001a0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 0207 	bic.w	r2, r3, #7
 80019f4:	4923      	ldr	r1, [pc, #140]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e036      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4918      	ldr	r1, [pc, #96]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4c:	f000 f824 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	490b      	ldr	r1, [pc, #44]	@ (8001a8c <HAL_RCC_ClockConfig+0x1f4>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1fc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ff87 	bl	8000984 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08003b94 	.word	0x08003b94
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	@ 0x24
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d121      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d11e      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001acc:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ad8:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001af4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	e004      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x114>)
 8001b1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d134      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d003      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0xac>
 8001b3c:	e005      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b40:	617b      	str	r3, [r7, #20]
      break;
 8001b42:	e005      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x114>)
 8001b46:	617b      	str	r3, [r7, #20]
      break;
 8001b48:	e002      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	617b      	str	r3, [r7, #20]
      break;
 8001b4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	fb03 f202 	mul.w	r2, r3, r2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	0e5b      	lsrs	r3, r3, #25
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	3301      	adds	r3, #1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b90:	69bb      	ldr	r3, [r7, #24]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08003ba4 	.word	0x08003ba4
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc8:	f7ff fa26 	bl	8001018 <HAL_PWREx_GetVoltageRange>
 8001bcc:	6178      	str	r0, [r7, #20]
 8001bce:	e014      	b.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	4a24      	ldr	r2, [pc, #144]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be8:	f7ff fa16 	bl	8001018 <HAL_PWREx_GetVoltageRange>
 8001bec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c00:	d10b      	bne.n	8001c1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b80      	cmp	r3, #128	@ 0x80
 8001c06:	d919      	bls.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c0c:	d902      	bls.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c0e:	2302      	movs	r3, #2
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e013      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	e010      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b80      	cmp	r3, #128	@ 0x80
 8001c1e:	d902      	bls.n	8001c26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c20:	2303      	movs	r3, #3
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e00a      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b80      	cmp	r3, #128	@ 0x80
 8001c2a:	d102      	bne.n	8001c32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e004      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b70      	cmp	r3, #112	@ 0x70
 8001c36:	d101      	bne.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	4909      	ldr	r1, [pc, #36]	@ (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e049      	b.n	8001d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fd20 	bl	80006dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 fd1c 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d001      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e04f      	b.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a23      	ldr	r2, [pc, #140]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01d      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x76>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d62:	d018      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x76>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x76>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1e      	ldr	r2, [pc, #120]	@ (8001dec <HAL_TIM_Base_Start_IT+0xcc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00e      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x76>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x76>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x76>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d115      	bne.n	8001dc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d015      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0xb4>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dae:	d011      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc0:	e008      	b.n	8001dd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e000      	b.n	8001dd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800
 8001df0:	40000c00 	.word	0x40000c00
 8001df4:	40013400 	.word	0x40013400
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	00010007 	.word	0x00010007

08001e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e049      	b.n	8001ea6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f841 	bl	8001eae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f000 fc54 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_TIM_PWM_Start+0x24>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e03c      	b.n	8001f62 <HAL_TIM_PWM_Start+0x9e>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d109      	bne.n	8001f02 <HAL_TIM_PWM_Start+0x3e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	e02f      	b.n	8001f62 <HAL_TIM_PWM_Start+0x9e>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d109      	bne.n	8001f1c <HAL_TIM_PWM_Start+0x58>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e022      	b.n	8001f62 <HAL_TIM_PWM_Start+0x9e>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d109      	bne.n	8001f36 <HAL_TIM_PWM_Start+0x72>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	e015      	b.n	8001f62 <HAL_TIM_PWM_Start+0x9e>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d109      	bne.n	8001f50 <HAL_TIM_PWM_Start+0x8c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e008      	b.n	8001f62 <HAL_TIM_PWM_Start+0x9e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e09c      	b.n	80020a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d104      	bne.n	8001f7a <HAL_TIM_PWM_Start+0xb6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f78:	e023      	b.n	8001fc2 <HAL_TIM_PWM_Start+0xfe>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d104      	bne.n	8001f8a <HAL_TIM_PWM_Start+0xc6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f88:	e01b      	b.n	8001fc2 <HAL_TIM_PWM_Start+0xfe>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d104      	bne.n	8001f9a <HAL_TIM_PWM_Start+0xd6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f98:	e013      	b.n	8001fc2 <HAL_TIM_PWM_Start+0xfe>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d104      	bne.n	8001faa <HAL_TIM_PWM_Start+0xe6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001fa8:	e00b      	b.n	8001fc2 <HAL_TIM_PWM_Start+0xfe>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_PWM_Start+0xf6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fb8:	e003      	b.n	8001fc2 <HAL_TIM_PWM_Start+0xfe>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	6839      	ldr	r1, [r7, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 ffa4 	bl	8002f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	@ (80020ac <HAL_TIM_PWM_Start+0x1e8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_TIM_PWM_Start+0x13e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_TIM_PWM_Start+0x1ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00e      	beq.n	8002002 <HAL_TIM_PWM_Start+0x13e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <HAL_TIM_PWM_Start+0x1f0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_TIM_PWM_Start+0x13e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a31      	ldr	r2, [pc, #196]	@ (80020b8 <HAL_TIM_PWM_Start+0x1f4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_TIM_PWM_Start+0x13e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80020bc <HAL_TIM_PWM_Start+0x1f8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_TIM_PWM_Start+0x142>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_TIM_PWM_Start+0x144>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800201a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a22      	ldr	r2, [pc, #136]	@ (80020ac <HAL_TIM_PWM_Start+0x1e8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01d      	beq.n	8002062 <HAL_TIM_PWM_Start+0x19e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202e:	d018      	beq.n	8002062 <HAL_TIM_PWM_Start+0x19e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a22      	ldr	r2, [pc, #136]	@ (80020c0 <HAL_TIM_PWM_Start+0x1fc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_TIM_PWM_Start+0x19e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a21      	ldr	r2, [pc, #132]	@ (80020c4 <HAL_TIM_PWM_Start+0x200>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00e      	beq.n	8002062 <HAL_TIM_PWM_Start+0x19e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <HAL_TIM_PWM_Start+0x204>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_TIM_PWM_Start+0x19e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <HAL_TIM_PWM_Start+0x1ec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d004      	beq.n	8002062 <HAL_TIM_PWM_Start+0x19e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a15      	ldr	r2, [pc, #84]	@ (80020b4 <HAL_TIM_PWM_Start+0x1f0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d115      	bne.n	800208e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_TIM_PWM_Start+0x208>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b06      	cmp	r3, #6
 8002072:	d015      	beq.n	80020a0 <HAL_TIM_PWM_Start+0x1dc>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207a:	d011      	beq.n	80020a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208c:	e008      	b.n	80020a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e000      	b.n	80020a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40013400 	.word	0x40013400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40000800 	.word	0x40000800
 80020c8:	40000c00 	.word	0x40000c00
 80020cc:	00010007 	.word	0x00010007

080020d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d020      	beq.n	8002134 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0202 	mvn.w	r2, #2
 8002104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fac7 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fab9 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 faca 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d020      	beq.n	8002180 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0204 	mvn.w	r2, #4
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 faa1 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa93 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 faa4 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d020      	beq.n	80021cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01b      	beq.n	80021cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0208 	mvn.w	r2, #8
 800219c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2204      	movs	r2, #4
 80021a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa7b 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa6d 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fa7e 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d020      	beq.n	8002218 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01b      	beq.n	8002218 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0210 	mvn.w	r2, #16
 80021e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2208      	movs	r2, #8
 80021ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa55 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa47 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fa58 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0201 	mvn.w	r2, #1
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fd ffc6 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d104      	bne.n	8002250 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00c      	beq.n	800226a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 ff0f 	bl	8003088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00c      	beq.n	800228e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 ff07 	bl	800309c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00c      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa12 	bl	80026d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00c      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 0220 	mvn.w	r2, #32
 80022ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fecf 	bl	8003074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0ff      	b.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b14      	cmp	r3, #20
 800230a:	f200 80f0 	bhi.w	80024ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002369 	.word	0x08002369
 8002318:	080024ef 	.word	0x080024ef
 800231c:	080024ef 	.word	0x080024ef
 8002320:	080024ef 	.word	0x080024ef
 8002324:	080023a9 	.word	0x080023a9
 8002328:	080024ef 	.word	0x080024ef
 800232c:	080024ef 	.word	0x080024ef
 8002330:	080024ef 	.word	0x080024ef
 8002334:	080023eb 	.word	0x080023eb
 8002338:	080024ef 	.word	0x080024ef
 800233c:	080024ef 	.word	0x080024ef
 8002340:	080024ef 	.word	0x080024ef
 8002344:	0800242b 	.word	0x0800242b
 8002348:	080024ef 	.word	0x080024ef
 800234c:	080024ef 	.word	0x080024ef
 8002350:	080024ef 	.word	0x080024ef
 8002354:	0800246d 	.word	0x0800246d
 8002358:	080024ef 	.word	0x080024ef
 800235c:	080024ef 	.word	0x080024ef
 8002360:	080024ef 	.word	0x080024ef
 8002364:	080024ad 	.word	0x080024ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fa62 	bl	8002838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0208 	orr.w	r2, r2, #8
 8002382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0204 	bic.w	r2, r2, #4
 8002392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	619a      	str	r2, [r3, #24]
      break;
 80023a6:	e0a5      	b.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fad2 	bl	8002958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6999      	ldr	r1, [r3, #24]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	619a      	str	r2, [r3, #24]
      break;
 80023e8:	e084      	b.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fb3b 	bl	8002a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0208 	orr.w	r2, r2, #8
 8002404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0204 	bic.w	r2, r2, #4
 8002414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69d9      	ldr	r1, [r3, #28]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	61da      	str	r2, [r3, #28]
      break;
 8002428:	e064      	b.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fba3 	bl	8002b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69d9      	ldr	r1, [r3, #28]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	021a      	lsls	r2, r3, #8
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	61da      	str	r2, [r3, #28]
      break;
 800246a:	e043      	b.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fbec 	bl	8002c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0204 	bic.w	r2, r2, #4
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80024aa:	e023      	b.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fc30 	bl	8002d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	021a      	lsls	r2, r3, #8
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80024ec:	e002      	b.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
      break;
 80024f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop

08002508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_TIM_ConfigClockSource+0x1c>
 8002520:	2302      	movs	r3, #2
 8002522:	e0b6      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x18a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002542:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800254e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002560:	d03e      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xd8>
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002566:	f200 8087 	bhi.w	8002678 <HAL_TIM_ConfigClockSource+0x170>
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256e:	f000 8086 	beq.w	800267e <HAL_TIM_ConfigClockSource+0x176>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002576:	d87f      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 8002578:	2b70      	cmp	r3, #112	@ 0x70
 800257a:	d01a      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xaa>
 800257c:	2b70      	cmp	r3, #112	@ 0x70
 800257e:	d87b      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 8002580:	2b60      	cmp	r3, #96	@ 0x60
 8002582:	d050      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x11e>
 8002584:	2b60      	cmp	r3, #96	@ 0x60
 8002586:	d877      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 8002588:	2b50      	cmp	r3, #80	@ 0x50
 800258a:	d03c      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0xfe>
 800258c:	2b50      	cmp	r3, #80	@ 0x50
 800258e:	d873      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d058      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x13e>
 8002594:	2b40      	cmp	r3, #64	@ 0x40
 8002596:	d86f      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 8002598:	2b30      	cmp	r3, #48	@ 0x30
 800259a:	d064      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15e>
 800259c:	2b30      	cmp	r3, #48	@ 0x30
 800259e:	d86b      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d060      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15e>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d867      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15e>
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d05a      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15e>
 80025b0:	e062      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	f000 fc89 	bl	8002ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	609a      	str	r2, [r3, #8]
      break;
 80025de:	e04f      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	f000 fc72 	bl	8002ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002602:	609a      	str	r2, [r3, #8]
      break;
 8002604:	e03c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	461a      	mov	r2, r3
 8002614:	f000 fbe6 	bl	8002de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2150      	movs	r1, #80	@ 0x50
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fc3f 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 8002624:	e02c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002632:	461a      	mov	r2, r3
 8002634:	f000 fc05 	bl	8002e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2160      	movs	r1, #96	@ 0x60
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fc2f 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 8002644:	e01c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002652:	461a      	mov	r2, r3
 8002654:	f000 fbc6 	bl	8002de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2140      	movs	r1, #64	@ 0x40
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fc1f 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 8002664:	e00c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f000 fc16 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 8002676:	e003      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e000      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800267e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <TIM_Base_SetConfig+0x12c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270a:	d00f      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a43      	ldr	r2, [pc, #268]	@ (800281c <TIM_Base_SetConfig+0x130>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <TIM_Base_SetConfig+0x134>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a41      	ldr	r2, [pc, #260]	@ (8002824 <TIM_Base_SetConfig+0x138>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a40      	ldr	r2, [pc, #256]	@ (8002828 <TIM_Base_SetConfig+0x13c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a35      	ldr	r2, [pc, #212]	@ (8002818 <TIM_Base_SetConfig+0x12c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d01b      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a32      	ldr	r2, [pc, #200]	@ (800281c <TIM_Base_SetConfig+0x130>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d017      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <TIM_Base_SetConfig+0x134>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a30      	ldr	r2, [pc, #192]	@ (8002824 <TIM_Base_SetConfig+0x138>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00f      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a2f      	ldr	r2, [pc, #188]	@ (8002828 <TIM_Base_SetConfig+0x13c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00b      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <TIM_Base_SetConfig+0x140>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <TIM_Base_SetConfig+0x144>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d003      	beq.n	8002786 <TIM_Base_SetConfig+0x9a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2c      	ldr	r2, [pc, #176]	@ (8002834 <TIM_Base_SetConfig+0x148>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d108      	bne.n	8002798 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a16      	ldr	r2, [pc, #88]	@ (8002818 <TIM_Base_SetConfig+0x12c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00f      	beq.n	80027e4 <TIM_Base_SetConfig+0xf8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a18      	ldr	r2, [pc, #96]	@ (8002828 <TIM_Base_SetConfig+0x13c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <TIM_Base_SetConfig+0xf8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a17      	ldr	r2, [pc, #92]	@ (800282c <TIM_Base_SetConfig+0x140>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <TIM_Base_SetConfig+0xf8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <TIM_Base_SetConfig+0x144>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0xf8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a15      	ldr	r2, [pc, #84]	@ (8002834 <TIM_Base_SetConfig+0x148>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f023 0201 	bic.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]
  }
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40000400 	.word	0x40000400
 8002820:	40000800 	.word	0x40000800
 8002824:	40000c00 	.word	0x40000c00
 8002828:	40013400 	.word	0x40013400
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800

08002838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f023 0201 	bic.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f023 0302 	bic.w	r3, r3, #2
 8002884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a2c      	ldr	r2, [pc, #176]	@ (8002944 <TIM_OC1_SetConfig+0x10c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00f      	beq.n	80028b8 <TIM_OC1_SetConfig+0x80>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a2b      	ldr	r2, [pc, #172]	@ (8002948 <TIM_OC1_SetConfig+0x110>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00b      	beq.n	80028b8 <TIM_OC1_SetConfig+0x80>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <TIM_OC1_SetConfig+0x114>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_OC1_SetConfig+0x80>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a29      	ldr	r2, [pc, #164]	@ (8002950 <TIM_OC1_SetConfig+0x118>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_OC1_SetConfig+0x80>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a28      	ldr	r2, [pc, #160]	@ (8002954 <TIM_OC1_SetConfig+0x11c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d10c      	bne.n	80028d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0308 	bic.w	r3, r3, #8
 80028be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <TIM_OC1_SetConfig+0x10c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00f      	beq.n	80028fa <TIM_OC1_SetConfig+0xc2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <TIM_OC1_SetConfig+0x110>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00b      	beq.n	80028fa <TIM_OC1_SetConfig+0xc2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <TIM_OC1_SetConfig+0x114>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <TIM_OC1_SetConfig+0xc2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <TIM_OC1_SetConfig+0x118>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_OC1_SetConfig+0xc2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <TIM_OC1_SetConfig+0x11c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40013400 	.word	0x40013400
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800

08002958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 0210 	bic.w	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800298a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0320 	bic.w	r3, r3, #32
 80029a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a28      	ldr	r2, [pc, #160]	@ (8002a58 <TIM_OC2_SetConfig+0x100>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_OC2_SetConfig+0x6c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <TIM_OC2_SetConfig+0x104>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10d      	bne.n	80029e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a58 <TIM_OC2_SetConfig+0x100>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00f      	beq.n	8002a08 <TIM_OC2_SetConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a1c      	ldr	r2, [pc, #112]	@ (8002a5c <TIM_OC2_SetConfig+0x104>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <TIM_OC2_SetConfig+0xb0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <TIM_OC2_SetConfig+0x108>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <TIM_OC2_SetConfig+0xb0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <TIM_OC2_SetConfig+0x10c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_OC2_SetConfig+0xb0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a19      	ldr	r2, [pc, #100]	@ (8002a68 <TIM_OC2_SetConfig+0x110>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d113      	bne.n	8002a30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40013400 	.word	0x40013400
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800

08002a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a27      	ldr	r2, [pc, #156]	@ (8002b68 <TIM_OC3_SetConfig+0xfc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_OC3_SetConfig+0x6a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	@ (8002b6c <TIM_OC3_SetConfig+0x100>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10d      	bne.n	8002af2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <TIM_OC3_SetConfig+0xfc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00f      	beq.n	8002b1a <TIM_OC3_SetConfig+0xae>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <TIM_OC3_SetConfig+0x100>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <TIM_OC3_SetConfig+0xae>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	@ (8002b70 <TIM_OC3_SetConfig+0x104>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <TIM_OC3_SetConfig+0xae>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <TIM_OC3_SetConfig+0x108>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <TIM_OC3_SetConfig+0xae>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a18      	ldr	r2, [pc, #96]	@ (8002b78 <TIM_OC3_SetConfig+0x10c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d113      	bne.n	8002b42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40013400 	.word	0x40013400
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40014400 	.word	0x40014400
 8002b78:	40014800 	.word	0x40014800

08002b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	031b      	lsls	r3, r3, #12
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <TIM_OC4_SetConfig+0xc0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00f      	beq.n	8002c00 <TIM_OC4_SetConfig+0x84>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <TIM_OC4_SetConfig+0xc4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <TIM_OC4_SetConfig+0x84>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <TIM_OC4_SetConfig+0xc8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <TIM_OC4_SetConfig+0x84>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a15      	ldr	r2, [pc, #84]	@ (8002c48 <TIM_OC4_SetConfig+0xcc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC4_SetConfig+0x84>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <TIM_OC4_SetConfig+0xd0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40013400 	.word	0x40013400
 8002c44:	40014000 	.word	0x40014000
 8002c48:	40014400 	.word	0x40014400
 8002c4c:	40014800 	.word	0x40014800

08002c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <TIM_OC5_SetConfig+0xb4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00f      	beq.n	8002cca <TIM_OC5_SetConfig+0x7a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <TIM_OC5_SetConfig+0xb8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_OC5_SetConfig+0x7a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	@ (8002d0c <TIM_OC5_SetConfig+0xbc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <TIM_OC5_SetConfig+0x7a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <TIM_OC5_SetConfig+0xc0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_OC5_SetConfig+0x7a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <TIM_OC5_SetConfig+0xc4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d109      	bne.n	8002cde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800

08002d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	051b      	lsls	r3, r3, #20
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	@ (8002dd0 <TIM_OC6_SetConfig+0xb8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00f      	beq.n	8002d94 <TIM_OC6_SetConfig+0x7c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <TIM_OC6_SetConfig+0xbc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <TIM_OC6_SetConfig+0x7c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	@ (8002dd8 <TIM_OC6_SetConfig+0xc0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <TIM_OC6_SetConfig+0x7c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <TIM_OC6_SetConfig+0xc4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_OC6_SetConfig+0x7c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a14      	ldr	r2, [pc, #80]	@ (8002de0 <TIM_OC6_SetConfig+0xc8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d109      	bne.n	8002da8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40013400 	.word	0x40013400
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40014400 	.word	0x40014400
 8002de0:	40014800 	.word	0x40014800

08002de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 030a 	bic.w	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 0210 	bic.w	r2, r3, #16
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	031b      	lsls	r3, r3, #12
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f043 0307 	orr.w	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e068      	b.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2d      	ldr	r2, [pc, #180]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002fb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d018      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8003064 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a18      	ldr	r2, [pc, #96]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10c      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4313      	orrs	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40013400 	.word	0x40013400
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40014000 	.word	0x40014000

08003074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <memset>:
 80030b0:	4402      	add	r2, r0
 80030b2:	4603      	mov	r3, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d100      	bne.n	80030ba <memset+0xa>
 80030b8:	4770      	bx	lr
 80030ba:	f803 1b01 	strb.w	r1, [r3], #1
 80030be:	e7f9      	b.n	80030b4 <memset+0x4>

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4d0d      	ldr	r5, [pc, #52]	@ (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	@ (80030fc <__libc_init_array+0x3c>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2600      	movs	r6, #0
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 fd52 	bl	8003b7c <_init>
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2600      	movs	r6, #0
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003fa4 	.word	0x08003fa4
 80030fc:	08003fa4 	.word	0x08003fa4
 8003100:	08003fa4 	.word	0x08003fa4
 8003104:	08003fa8 	.word	0x08003fa8

08003108 <sinf>:
 8003108:	ee10 3a10 	vmov	r3, s0
 800310c:	b507      	push	{r0, r1, r2, lr}
 800310e:	4a1f      	ldr	r2, [pc, #124]	@ (800318c <sinf+0x84>)
 8003110:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003114:	4293      	cmp	r3, r2
 8003116:	d807      	bhi.n	8003128 <sinf+0x20>
 8003118:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003190 <sinf+0x88>
 800311c:	2000      	movs	r0, #0
 800311e:	b003      	add	sp, #12
 8003120:	f85d eb04 	ldr.w	lr, [sp], #4
 8003124:	f000 b88e 	b.w	8003244 <__kernel_sinf>
 8003128:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800312c:	d304      	bcc.n	8003138 <sinf+0x30>
 800312e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003132:	b003      	add	sp, #12
 8003134:	f85d fb04 	ldr.w	pc, [sp], #4
 8003138:	4668      	mov	r0, sp
 800313a:	f000 f8cb 	bl	80032d4 <__ieee754_rem_pio2f>
 800313e:	f000 0003 	and.w	r0, r0, #3
 8003142:	2801      	cmp	r0, #1
 8003144:	d00a      	beq.n	800315c <sinf+0x54>
 8003146:	2802      	cmp	r0, #2
 8003148:	d00f      	beq.n	800316a <sinf+0x62>
 800314a:	b9c0      	cbnz	r0, 800317e <sinf+0x76>
 800314c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003150:	ed9d 0a00 	vldr	s0, [sp]
 8003154:	2001      	movs	r0, #1
 8003156:	f000 f875 	bl	8003244 <__kernel_sinf>
 800315a:	e7ea      	b.n	8003132 <sinf+0x2a>
 800315c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003160:	ed9d 0a00 	vldr	s0, [sp]
 8003164:	f000 f816 	bl	8003194 <__kernel_cosf>
 8003168:	e7e3      	b.n	8003132 <sinf+0x2a>
 800316a:	eddd 0a01 	vldr	s1, [sp, #4]
 800316e:	ed9d 0a00 	vldr	s0, [sp]
 8003172:	2001      	movs	r0, #1
 8003174:	f000 f866 	bl	8003244 <__kernel_sinf>
 8003178:	eeb1 0a40 	vneg.f32	s0, s0
 800317c:	e7d9      	b.n	8003132 <sinf+0x2a>
 800317e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003182:	ed9d 0a00 	vldr	s0, [sp]
 8003186:	f000 f805 	bl	8003194 <__kernel_cosf>
 800318a:	e7f5      	b.n	8003178 <sinf+0x70>
 800318c:	3f490fd8 	.word	0x3f490fd8
 8003190:	00000000 	.word	0x00000000

08003194 <__kernel_cosf>:
 8003194:	ee10 3a10 	vmov	r3, s0
 8003198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800319c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80031a0:	eef0 6a40 	vmov.f32	s13, s0
 80031a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80031a8:	d204      	bcs.n	80031b4 <__kernel_cosf+0x20>
 80031aa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80031ae:	ee17 2a90 	vmov	r2, s15
 80031b2:	b342      	cbz	r2, 8003206 <__kernel_cosf+0x72>
 80031b4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80031b8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003224 <__kernel_cosf+0x90>
 80031bc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003228 <__kernel_cosf+0x94>
 80031c0:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <__kernel_cosf+0x98>)
 80031c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80031c6:	4293      	cmp	r3, r2
 80031c8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003230 <__kernel_cosf+0x9c>
 80031cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80031d0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003234 <__kernel_cosf+0xa0>
 80031d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80031d8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003238 <__kernel_cosf+0xa4>
 80031dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80031e0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800323c <__kernel_cosf+0xa8>
 80031e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80031e8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80031ec:	ee26 6a07 	vmul.f32	s12, s12, s14
 80031f0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80031f4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80031f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fc:	d804      	bhi.n	8003208 <__kernel_cosf+0x74>
 80031fe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003202:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003206:	4770      	bx	lr
 8003208:	4a0d      	ldr	r2, [pc, #52]	@ (8003240 <__kernel_cosf+0xac>)
 800320a:	4293      	cmp	r3, r2
 800320c:	bf9a      	itte	ls
 800320e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003212:	ee07 3a10 	vmovls	s14, r3
 8003216:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800321a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800321e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003222:	e7ec      	b.n	80031fe <__kernel_cosf+0x6a>
 8003224:	ad47d74e 	.word	0xad47d74e
 8003228:	310f74f6 	.word	0x310f74f6
 800322c:	3e999999 	.word	0x3e999999
 8003230:	b493f27c 	.word	0xb493f27c
 8003234:	37d00d01 	.word	0x37d00d01
 8003238:	bab60b61 	.word	0xbab60b61
 800323c:	3d2aaaab 	.word	0x3d2aaaab
 8003240:	3f480000 	.word	0x3f480000

08003244 <__kernel_sinf>:
 8003244:	ee10 3a10 	vmov	r3, s0
 8003248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003250:	d204      	bcs.n	800325c <__kernel_sinf+0x18>
 8003252:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003256:	ee17 3a90 	vmov	r3, s15
 800325a:	b35b      	cbz	r3, 80032b4 <__kernel_sinf+0x70>
 800325c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003260:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80032b8 <__kernel_sinf+0x74>
 8003264:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80032bc <__kernel_sinf+0x78>
 8003268:	eea7 6a27 	vfma.f32	s12, s14, s15
 800326c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80032c0 <__kernel_sinf+0x7c>
 8003270:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003274:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80032c4 <__kernel_sinf+0x80>
 8003278:	eea7 6a87 	vfma.f32	s12, s15, s14
 800327c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80032c8 <__kernel_sinf+0x84>
 8003280:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003284:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003288:	b930      	cbnz	r0, 8003298 <__kernel_sinf+0x54>
 800328a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80032cc <__kernel_sinf+0x88>
 800328e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003292:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003296:	4770      	bx	lr
 8003298:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800329c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80032a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80032a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80032a8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80032d0 <__kernel_sinf+0x8c>
 80032ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80032b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2f2ec9d3 	.word	0x2f2ec9d3
 80032bc:	b2d72f34 	.word	0xb2d72f34
 80032c0:	3638ef1b 	.word	0x3638ef1b
 80032c4:	b9500d01 	.word	0xb9500d01
 80032c8:	3c088889 	.word	0x3c088889
 80032cc:	be2aaaab 	.word	0xbe2aaaab
 80032d0:	3e2aaaab 	.word	0x3e2aaaab

080032d4 <__ieee754_rem_pio2f>:
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d6:	ee10 6a10 	vmov	r6, s0
 80032da:	4b88      	ldr	r3, [pc, #544]	@ (80034fc <__ieee754_rem_pio2f+0x228>)
 80032dc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80032e0:	429d      	cmp	r5, r3
 80032e2:	b087      	sub	sp, #28
 80032e4:	4604      	mov	r4, r0
 80032e6:	d805      	bhi.n	80032f4 <__ieee754_rem_pio2f+0x20>
 80032e8:	2300      	movs	r3, #0
 80032ea:	ed80 0a00 	vstr	s0, [r0]
 80032ee:	6043      	str	r3, [r0, #4]
 80032f0:	2000      	movs	r0, #0
 80032f2:	e022      	b.n	800333a <__ieee754_rem_pio2f+0x66>
 80032f4:	4b82      	ldr	r3, [pc, #520]	@ (8003500 <__ieee754_rem_pio2f+0x22c>)
 80032f6:	429d      	cmp	r5, r3
 80032f8:	d83a      	bhi.n	8003370 <__ieee754_rem_pio2f+0x9c>
 80032fa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80032fe:	2e00      	cmp	r6, #0
 8003300:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8003504 <__ieee754_rem_pio2f+0x230>
 8003304:	4a80      	ldr	r2, [pc, #512]	@ (8003508 <__ieee754_rem_pio2f+0x234>)
 8003306:	f023 030f 	bic.w	r3, r3, #15
 800330a:	dd18      	ble.n	800333e <__ieee754_rem_pio2f+0x6a>
 800330c:	4293      	cmp	r3, r2
 800330e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003312:	bf09      	itett	eq
 8003314:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800350c <__ieee754_rem_pio2f+0x238>
 8003318:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8003510 <__ieee754_rem_pio2f+0x23c>
 800331c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8003514 <__ieee754_rem_pio2f+0x240>
 8003320:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003324:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800332c:	ed80 7a00 	vstr	s14, [r0]
 8003330:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003334:	edc0 7a01 	vstr	s15, [r0, #4]
 8003338:	2001      	movs	r0, #1
 800333a:	b007      	add	sp, #28
 800333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333e:	4293      	cmp	r3, r2
 8003340:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003344:	bf09      	itett	eq
 8003346:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800350c <__ieee754_rem_pio2f+0x238>
 800334a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8003510 <__ieee754_rem_pio2f+0x23c>
 800334e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8003514 <__ieee754_rem_pio2f+0x240>
 8003352:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003356:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800335a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800335e:	ed80 7a00 	vstr	s14, [r0]
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	edc0 7a01 	vstr	s15, [r0, #4]
 800336a:	f04f 30ff 	mov.w	r0, #4294967295
 800336e:	e7e4      	b.n	800333a <__ieee754_rem_pio2f+0x66>
 8003370:	4b69      	ldr	r3, [pc, #420]	@ (8003518 <__ieee754_rem_pio2f+0x244>)
 8003372:	429d      	cmp	r5, r3
 8003374:	d873      	bhi.n	800345e <__ieee754_rem_pio2f+0x18a>
 8003376:	f000 f8dd 	bl	8003534 <fabsf>
 800337a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800351c <__ieee754_rem_pio2f+0x248>
 800337e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003382:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800338e:	ee17 0a90 	vmov	r0, s15
 8003392:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003504 <__ieee754_rem_pio2f+0x230>
 8003396:	eea7 0a67 	vfms.f32	s0, s14, s15
 800339a:	281f      	cmp	r0, #31
 800339c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003510 <__ieee754_rem_pio2f+0x23c>
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	eeb1 6a47 	vneg.f32	s12, s14
 80033a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80033ac:	ee16 1a90 	vmov	r1, s13
 80033b0:	dc09      	bgt.n	80033c6 <__ieee754_rem_pio2f+0xf2>
 80033b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003520 <__ieee754_rem_pio2f+0x24c>)
 80033b4:	1e47      	subs	r7, r0, #1
 80033b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80033ba:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80033be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d107      	bne.n	80033d6 <__ieee754_rem_pio2f+0x102>
 80033c6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80033ca:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80033ce:	2a08      	cmp	r2, #8
 80033d0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80033d4:	dc14      	bgt.n	8003400 <__ieee754_rem_pio2f+0x12c>
 80033d6:	6021      	str	r1, [r4, #0]
 80033d8:	ed94 7a00 	vldr	s14, [r4]
 80033dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80033e0:	2e00      	cmp	r6, #0
 80033e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80033e6:	ed84 0a01 	vstr	s0, [r4, #4]
 80033ea:	daa6      	bge.n	800333a <__ieee754_rem_pio2f+0x66>
 80033ec:	eeb1 7a47 	vneg.f32	s14, s14
 80033f0:	eeb1 0a40 	vneg.f32	s0, s0
 80033f4:	ed84 7a00 	vstr	s14, [r4]
 80033f8:	ed84 0a01 	vstr	s0, [r4, #4]
 80033fc:	4240      	negs	r0, r0
 80033fe:	e79c      	b.n	800333a <__ieee754_rem_pio2f+0x66>
 8003400:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800350c <__ieee754_rem_pio2f+0x238>
 8003404:	eef0 6a40 	vmov.f32	s13, s0
 8003408:	eee6 6a25 	vfma.f32	s13, s12, s11
 800340c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003410:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003414:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003514 <__ieee754_rem_pio2f+0x240>
 8003418:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800341c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003420:	ee15 2a90 	vmov	r2, s11
 8003424:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003428:	1a5b      	subs	r3, r3, r1
 800342a:	2b19      	cmp	r3, #25
 800342c:	dc04      	bgt.n	8003438 <__ieee754_rem_pio2f+0x164>
 800342e:	edc4 5a00 	vstr	s11, [r4]
 8003432:	eeb0 0a66 	vmov.f32	s0, s13
 8003436:	e7cf      	b.n	80033d8 <__ieee754_rem_pio2f+0x104>
 8003438:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8003524 <__ieee754_rem_pio2f+0x250>
 800343c:	eeb0 0a66 	vmov.f32	s0, s13
 8003440:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003444:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003448:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8003528 <__ieee754_rem_pio2f+0x254>
 800344c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003450:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003454:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003458:	ed84 7a00 	vstr	s14, [r4]
 800345c:	e7bc      	b.n	80033d8 <__ieee754_rem_pio2f+0x104>
 800345e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8003462:	d306      	bcc.n	8003472 <__ieee754_rem_pio2f+0x19e>
 8003464:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003468:	edc0 7a01 	vstr	s15, [r0, #4]
 800346c:	edc0 7a00 	vstr	s15, [r0]
 8003470:	e73e      	b.n	80032f0 <__ieee754_rem_pio2f+0x1c>
 8003472:	15ea      	asrs	r2, r5, #23
 8003474:	3a86      	subs	r2, #134	@ 0x86
 8003476:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003482:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800352c <__ieee754_rem_pio2f+0x258>
 8003486:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800348a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800348e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003492:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003496:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800349a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800349e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80034a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	edcd 7a05 	vstr	s15, [sp, #20]
 80034b6:	d11e      	bne.n	80034f6 <__ieee754_rem_pio2f+0x222>
 80034b8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2302      	movne	r3, #2
 80034c6:	491a      	ldr	r1, [pc, #104]	@ (8003530 <__ieee754_rem_pio2f+0x25c>)
 80034c8:	9101      	str	r1, [sp, #4]
 80034ca:	2102      	movs	r1, #2
 80034cc:	9100      	str	r1, [sp, #0]
 80034ce:	a803      	add	r0, sp, #12
 80034d0:	4621      	mov	r1, r4
 80034d2:	f000 f837 	bl	8003544 <__kernel_rem_pio2f>
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	f6bf af2f 	bge.w	800333a <__ieee754_rem_pio2f+0x66>
 80034dc:	edd4 7a00 	vldr	s15, [r4]
 80034e0:	eef1 7a67 	vneg.f32	s15, s15
 80034e4:	edc4 7a00 	vstr	s15, [r4]
 80034e8:	edd4 7a01 	vldr	s15, [r4, #4]
 80034ec:	eef1 7a67 	vneg.f32	s15, s15
 80034f0:	edc4 7a01 	vstr	s15, [r4, #4]
 80034f4:	e782      	b.n	80033fc <__ieee754_rem_pio2f+0x128>
 80034f6:	2303      	movs	r3, #3
 80034f8:	e7e5      	b.n	80034c6 <__ieee754_rem_pio2f+0x1f2>
 80034fa:	bf00      	nop
 80034fc:	3f490fd8 	.word	0x3f490fd8
 8003500:	4016cbe3 	.word	0x4016cbe3
 8003504:	3fc90f80 	.word	0x3fc90f80
 8003508:	3fc90fd0 	.word	0x3fc90fd0
 800350c:	37354400 	.word	0x37354400
 8003510:	37354443 	.word	0x37354443
 8003514:	2e85a308 	.word	0x2e85a308
 8003518:	43490f80 	.word	0x43490f80
 800351c:	3f22f984 	.word	0x3f22f984
 8003520:	08003bd4 	.word	0x08003bd4
 8003524:	2e85a300 	.word	0x2e85a300
 8003528:	248d3132 	.word	0x248d3132
 800352c:	43800000 	.word	0x43800000
 8003530:	08003c54 	.word	0x08003c54

08003534 <fabsf>:
 8003534:	ee10 3a10 	vmov	r3, s0
 8003538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800353c:	ee00 3a10 	vmov	s0, r3
 8003540:	4770      	bx	lr
	...

08003544 <__kernel_rem_pio2f>:
 8003544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003548:	ed2d 8b04 	vpush	{d8-d9}
 800354c:	b0d9      	sub	sp, #356	@ 0x164
 800354e:	4690      	mov	r8, r2
 8003550:	9001      	str	r0, [sp, #4]
 8003552:	4ab9      	ldr	r2, [pc, #740]	@ (8003838 <__kernel_rem_pio2f+0x2f4>)
 8003554:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8003556:	f118 0f04 	cmn.w	r8, #4
 800355a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800355e:	460f      	mov	r7, r1
 8003560:	f103 3bff 	add.w	fp, r3, #4294967295
 8003564:	db27      	blt.n	80035b6 <__kernel_rem_pio2f+0x72>
 8003566:	f1b8 0203 	subs.w	r2, r8, #3
 800356a:	bf48      	it	mi
 800356c:	f108 0204 	addmi.w	r2, r8, #4
 8003570:	10d2      	asrs	r2, r2, #3
 8003572:	1c55      	adds	r5, r2, #1
 8003574:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003576:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8003848 <__kernel_rem_pio2f+0x304>
 800357a:	00e8      	lsls	r0, r5, #3
 800357c:	eba2 060b 	sub.w	r6, r2, fp
 8003580:	9002      	str	r0, [sp, #8]
 8003582:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8003586:	eb0a 0c0b 	add.w	ip, sl, fp
 800358a:	ac1c      	add	r4, sp, #112	@ 0x70
 800358c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8003590:	2000      	movs	r0, #0
 8003592:	4560      	cmp	r0, ip
 8003594:	dd11      	ble.n	80035ba <__kernel_rem_pio2f+0x76>
 8003596:	a91c      	add	r1, sp, #112	@ 0x70
 8003598:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800359c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80035a0:	f04f 0c00 	mov.w	ip, #0
 80035a4:	45d4      	cmp	ip, sl
 80035a6:	dc27      	bgt.n	80035f8 <__kernel_rem_pio2f+0xb4>
 80035a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80035ac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8003848 <__kernel_rem_pio2f+0x304>
 80035b0:	4606      	mov	r6, r0
 80035b2:	2400      	movs	r4, #0
 80035b4:	e016      	b.n	80035e4 <__kernel_rem_pio2f+0xa0>
 80035b6:	2200      	movs	r2, #0
 80035b8:	e7db      	b.n	8003572 <__kernel_rem_pio2f+0x2e>
 80035ba:	42c6      	cmn	r6, r0
 80035bc:	bf5d      	ittte	pl
 80035be:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80035c2:	ee07 1a90 	vmovpl	s15, r1
 80035c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80035ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80035ce:	ece4 7a01 	vstmia	r4!, {s15}
 80035d2:	3001      	adds	r0, #1
 80035d4:	e7dd      	b.n	8003592 <__kernel_rem_pio2f+0x4e>
 80035d6:	ecfe 6a01 	vldmia	lr!, {s13}
 80035da:	ed96 7a00 	vldr	s14, [r6]
 80035de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80035e2:	3401      	adds	r4, #1
 80035e4:	455c      	cmp	r4, fp
 80035e6:	f1a6 0604 	sub.w	r6, r6, #4
 80035ea:	ddf4      	ble.n	80035d6 <__kernel_rem_pio2f+0x92>
 80035ec:	ece9 7a01 	vstmia	r9!, {s15}
 80035f0:	f10c 0c01 	add.w	ip, ip, #1
 80035f4:	3004      	adds	r0, #4
 80035f6:	e7d5      	b.n	80035a4 <__kernel_rem_pio2f+0x60>
 80035f8:	a908      	add	r1, sp, #32
 80035fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80035fe:	9104      	str	r1, [sp, #16]
 8003600:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003602:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8003844 <__kernel_rem_pio2f+0x300>
 8003606:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8003840 <__kernel_rem_pio2f+0x2fc>
 800360a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800360e:	9203      	str	r2, [sp, #12]
 8003610:	4654      	mov	r4, sl
 8003612:	00a2      	lsls	r2, r4, #2
 8003614:	9205      	str	r2, [sp, #20]
 8003616:	aa58      	add	r2, sp, #352	@ 0x160
 8003618:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800361c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003620:	a944      	add	r1, sp, #272	@ 0x110
 8003622:	aa08      	add	r2, sp, #32
 8003624:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003628:	4694      	mov	ip, r2
 800362a:	4626      	mov	r6, r4
 800362c:	2e00      	cmp	r6, #0
 800362e:	f1a0 0004 	sub.w	r0, r0, #4
 8003632:	dc4c      	bgt.n	80036ce <__kernel_rem_pio2f+0x18a>
 8003634:	4628      	mov	r0, r5
 8003636:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800363a:	f000 f9f5 	bl	8003a28 <scalbnf>
 800363e:	eeb0 8a40 	vmov.f32	s16, s0
 8003642:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8003646:	ee28 0a00 	vmul.f32	s0, s16, s0
 800364a:	f000 fa53 	bl	8003af4 <floorf>
 800364e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8003652:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003656:	2d00      	cmp	r5, #0
 8003658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800365c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003660:	ee17 9a90 	vmov	r9, s15
 8003664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003668:	ee38 8a67 	vsub.f32	s16, s16, s15
 800366c:	dd41      	ble.n	80036f2 <__kernel_rem_pio2f+0x1ae>
 800366e:	f104 3cff 	add.w	ip, r4, #4294967295
 8003672:	a908      	add	r1, sp, #32
 8003674:	f1c5 0e08 	rsb	lr, r5, #8
 8003678:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800367c:	fa46 f00e 	asr.w	r0, r6, lr
 8003680:	4481      	add	r9, r0
 8003682:	fa00 f00e 	lsl.w	r0, r0, lr
 8003686:	1a36      	subs	r6, r6, r0
 8003688:	f1c5 0007 	rsb	r0, r5, #7
 800368c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8003690:	4106      	asrs	r6, r0
 8003692:	2e00      	cmp	r6, #0
 8003694:	dd3c      	ble.n	8003710 <__kernel_rem_pio2f+0x1cc>
 8003696:	f04f 0e00 	mov.w	lr, #0
 800369a:	f109 0901 	add.w	r9, r9, #1
 800369e:	4670      	mov	r0, lr
 80036a0:	4574      	cmp	r4, lr
 80036a2:	dc68      	bgt.n	8003776 <__kernel_rem_pio2f+0x232>
 80036a4:	2d00      	cmp	r5, #0
 80036a6:	dd03      	ble.n	80036b0 <__kernel_rem_pio2f+0x16c>
 80036a8:	2d01      	cmp	r5, #1
 80036aa:	d074      	beq.n	8003796 <__kernel_rem_pio2f+0x252>
 80036ac:	2d02      	cmp	r5, #2
 80036ae:	d07d      	beq.n	80037ac <__kernel_rem_pio2f+0x268>
 80036b0:	2e02      	cmp	r6, #2
 80036b2:	d12d      	bne.n	8003710 <__kernel_rem_pio2f+0x1cc>
 80036b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80036b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80036bc:	b340      	cbz	r0, 8003710 <__kernel_rem_pio2f+0x1cc>
 80036be:	4628      	mov	r0, r5
 80036c0:	9306      	str	r3, [sp, #24]
 80036c2:	f000 f9b1 	bl	8003a28 <scalbnf>
 80036c6:	9b06      	ldr	r3, [sp, #24]
 80036c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80036cc:	e020      	b.n	8003710 <__kernel_rem_pio2f+0x1cc>
 80036ce:	ee60 7a28 	vmul.f32	s15, s0, s17
 80036d2:	3e01      	subs	r6, #1
 80036d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036dc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80036e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80036e4:	ecac 0a01 	vstmia	ip!, {s0}
 80036e8:	ed90 0a00 	vldr	s0, [r0]
 80036ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 80036f0:	e79c      	b.n	800362c <__kernel_rem_pio2f+0xe8>
 80036f2:	d105      	bne.n	8003700 <__kernel_rem_pio2f+0x1bc>
 80036f4:	1e60      	subs	r0, r4, #1
 80036f6:	a908      	add	r1, sp, #32
 80036f8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80036fc:	11f6      	asrs	r6, r6, #7
 80036fe:	e7c8      	b.n	8003692 <__kernel_rem_pio2f+0x14e>
 8003700:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003704:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	da31      	bge.n	8003772 <__kernel_rem_pio2f+0x22e>
 800370e:	2600      	movs	r6, #0
 8003710:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	f040 8098 	bne.w	800384c <__kernel_rem_pio2f+0x308>
 800371c:	1e60      	subs	r0, r4, #1
 800371e:	2200      	movs	r2, #0
 8003720:	4550      	cmp	r0, sl
 8003722:	da4b      	bge.n	80037bc <__kernel_rem_pio2f+0x278>
 8003724:	2a00      	cmp	r2, #0
 8003726:	d065      	beq.n	80037f4 <__kernel_rem_pio2f+0x2b0>
 8003728:	3c01      	subs	r4, #1
 800372a:	ab08      	add	r3, sp, #32
 800372c:	3d08      	subs	r5, #8
 800372e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f8      	beq.n	8003728 <__kernel_rem_pio2f+0x1e4>
 8003736:	4628      	mov	r0, r5
 8003738:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800373c:	f000 f974 	bl	8003a28 <scalbnf>
 8003740:	1c63      	adds	r3, r4, #1
 8003742:	aa44      	add	r2, sp, #272	@ 0x110
 8003744:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003844 <__kernel_rem_pio2f+0x300>
 8003748:	0099      	lsls	r1, r3, #2
 800374a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800374e:	4623      	mov	r3, r4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f280 80a9 	bge.w	80038a8 <__kernel_rem_pio2f+0x364>
 8003756:	4623      	mov	r3, r4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f2c0 80c7 	blt.w	80038ec <__kernel_rem_pio2f+0x3a8>
 800375e:	aa44      	add	r2, sp, #272	@ 0x110
 8003760:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003764:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800383c <__kernel_rem_pio2f+0x2f8>
 8003768:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003848 <__kernel_rem_pio2f+0x304>
 800376c:	2000      	movs	r0, #0
 800376e:	1ae2      	subs	r2, r4, r3
 8003770:	e0b1      	b.n	80038d6 <__kernel_rem_pio2f+0x392>
 8003772:	2602      	movs	r6, #2
 8003774:	e78f      	b.n	8003696 <__kernel_rem_pio2f+0x152>
 8003776:	f852 1b04 	ldr.w	r1, [r2], #4
 800377a:	b948      	cbnz	r0, 8003790 <__kernel_rem_pio2f+0x24c>
 800377c:	b121      	cbz	r1, 8003788 <__kernel_rem_pio2f+0x244>
 800377e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8003782:	f842 1c04 	str.w	r1, [r2, #-4]
 8003786:	2101      	movs	r1, #1
 8003788:	f10e 0e01 	add.w	lr, lr, #1
 800378c:	4608      	mov	r0, r1
 800378e:	e787      	b.n	80036a0 <__kernel_rem_pio2f+0x15c>
 8003790:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8003794:	e7f5      	b.n	8003782 <__kernel_rem_pio2f+0x23e>
 8003796:	f104 3cff 	add.w	ip, r4, #4294967295
 800379a:	aa08      	add	r2, sp, #32
 800379c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80037a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037a4:	a908      	add	r1, sp, #32
 80037a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80037aa:	e781      	b.n	80036b0 <__kernel_rem_pio2f+0x16c>
 80037ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80037b0:	aa08      	add	r2, sp, #32
 80037b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80037b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80037ba:	e7f3      	b.n	80037a4 <__kernel_rem_pio2f+0x260>
 80037bc:	a908      	add	r1, sp, #32
 80037be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80037c2:	3801      	subs	r0, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	e7ab      	b.n	8003720 <__kernel_rem_pio2f+0x1dc>
 80037c8:	3201      	adds	r2, #1
 80037ca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	d0fa      	beq.n	80037c8 <__kernel_rem_pio2f+0x284>
 80037d2:	9905      	ldr	r1, [sp, #20]
 80037d4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80037d8:	eb0d 0001 	add.w	r0, sp, r1
 80037dc:	18e6      	adds	r6, r4, r3
 80037de:	a91c      	add	r1, sp, #112	@ 0x70
 80037e0:	f104 0c01 	add.w	ip, r4, #1
 80037e4:	384c      	subs	r0, #76	@ 0x4c
 80037e6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80037ea:	4422      	add	r2, r4
 80037ec:	4562      	cmp	r2, ip
 80037ee:	da04      	bge.n	80037fa <__kernel_rem_pio2f+0x2b6>
 80037f0:	4614      	mov	r4, r2
 80037f2:	e70e      	b.n	8003612 <__kernel_rem_pio2f+0xce>
 80037f4:	9804      	ldr	r0, [sp, #16]
 80037f6:	2201      	movs	r2, #1
 80037f8:	e7e7      	b.n	80037ca <__kernel_rem_pio2f+0x286>
 80037fa:	9903      	ldr	r1, [sp, #12]
 80037fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003800:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8003804:	9105      	str	r1, [sp, #20]
 8003806:	ee07 1a90 	vmov	s15, r1
 800380a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800380e:	2400      	movs	r4, #0
 8003810:	ece6 7a01 	vstmia	r6!, {s15}
 8003814:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003848 <__kernel_rem_pio2f+0x304>
 8003818:	46b1      	mov	r9, r6
 800381a:	455c      	cmp	r4, fp
 800381c:	dd04      	ble.n	8003828 <__kernel_rem_pio2f+0x2e4>
 800381e:	ece0 7a01 	vstmia	r0!, {s15}
 8003822:	f10c 0c01 	add.w	ip, ip, #1
 8003826:	e7e1      	b.n	80037ec <__kernel_rem_pio2f+0x2a8>
 8003828:	ecfe 6a01 	vldmia	lr!, {s13}
 800382c:	ed39 7a01 	vldmdb	r9!, {s14}
 8003830:	3401      	adds	r4, #1
 8003832:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003836:	e7f0      	b.n	800381a <__kernel_rem_pio2f+0x2d6>
 8003838:	08003f98 	.word	0x08003f98
 800383c:	08003f6c 	.word	0x08003f6c
 8003840:	43800000 	.word	0x43800000
 8003844:	3b800000 	.word	0x3b800000
 8003848:	00000000 	.word	0x00000000
 800384c:	9b02      	ldr	r3, [sp, #8]
 800384e:	eeb0 0a48 	vmov.f32	s0, s16
 8003852:	eba3 0008 	sub.w	r0, r3, r8
 8003856:	f000 f8e7 	bl	8003a28 <scalbnf>
 800385a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8003840 <__kernel_rem_pio2f+0x2fc>
 800385e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	db19      	blt.n	800389c <__kernel_rem_pio2f+0x358>
 8003868:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8003844 <__kernel_rem_pio2f+0x300>
 800386c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003870:	aa08      	add	r2, sp, #32
 8003872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003876:	3508      	adds	r5, #8
 8003878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003888:	ee10 3a10 	vmov	r3, s0
 800388c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003890:	ee17 3a90 	vmov	r3, s15
 8003894:	3401      	adds	r4, #1
 8003896:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800389a:	e74c      	b.n	8003736 <__kernel_rem_pio2f+0x1f2>
 800389c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80038a0:	aa08      	add	r2, sp, #32
 80038a2:	ee10 3a10 	vmov	r3, s0
 80038a6:	e7f6      	b.n	8003896 <__kernel_rem_pio2f+0x352>
 80038a8:	a808      	add	r0, sp, #32
 80038aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80038ae:	9001      	str	r0, [sp, #4]
 80038b0:	ee07 0a90 	vmov	s15, r0
 80038b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b8:	3b01      	subs	r3, #1
 80038ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80038be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80038c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80038c6:	e743      	b.n	8003750 <__kernel_rem_pio2f+0x20c>
 80038c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80038cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80038d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80038d4:	3001      	adds	r0, #1
 80038d6:	4550      	cmp	r0, sl
 80038d8:	dc01      	bgt.n	80038de <__kernel_rem_pio2f+0x39a>
 80038da:	4282      	cmp	r2, r0
 80038dc:	daf4      	bge.n	80038c8 <__kernel_rem_pio2f+0x384>
 80038de:	a858      	add	r0, sp, #352	@ 0x160
 80038e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80038e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80038e8:	3b01      	subs	r3, #1
 80038ea:	e735      	b.n	8003758 <__kernel_rem_pio2f+0x214>
 80038ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	dc09      	bgt.n	8003906 <__kernel_rem_pio2f+0x3c2>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	dc2b      	bgt.n	800394e <__kernel_rem_pio2f+0x40a>
 80038f6:	d044      	beq.n	8003982 <__kernel_rem_pio2f+0x43e>
 80038f8:	f009 0007 	and.w	r0, r9, #7
 80038fc:	b059      	add	sp, #356	@ 0x164
 80038fe:	ecbd 8b04 	vpop	{d8-d9}
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003906:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003908:	2b03      	cmp	r3, #3
 800390a:	d1f5      	bne.n	80038f8 <__kernel_rem_pio2f+0x3b4>
 800390c:	aa30      	add	r2, sp, #192	@ 0xc0
 800390e:	1f0b      	subs	r3, r1, #4
 8003910:	4413      	add	r3, r2
 8003912:	461a      	mov	r2, r3
 8003914:	4620      	mov	r0, r4
 8003916:	2800      	cmp	r0, #0
 8003918:	f1a2 0204 	sub.w	r2, r2, #4
 800391c:	dc52      	bgt.n	80039c4 <__kernel_rem_pio2f+0x480>
 800391e:	4622      	mov	r2, r4
 8003920:	2a01      	cmp	r2, #1
 8003922:	f1a3 0304 	sub.w	r3, r3, #4
 8003926:	dc5d      	bgt.n	80039e4 <__kernel_rem_pio2f+0x4a0>
 8003928:	ab30      	add	r3, sp, #192	@ 0xc0
 800392a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8003848 <__kernel_rem_pio2f+0x304>
 800392e:	440b      	add	r3, r1
 8003930:	2c01      	cmp	r4, #1
 8003932:	dc67      	bgt.n	8003a04 <__kernel_rem_pio2f+0x4c0>
 8003934:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8003938:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800393c:	2e00      	cmp	r6, #0
 800393e:	d167      	bne.n	8003a10 <__kernel_rem_pio2f+0x4cc>
 8003940:	edc7 6a00 	vstr	s13, [r7]
 8003944:	ed87 7a01 	vstr	s14, [r7, #4]
 8003948:	edc7 7a02 	vstr	s15, [r7, #8]
 800394c:	e7d4      	b.n	80038f8 <__kernel_rem_pio2f+0x3b4>
 800394e:	ab30      	add	r3, sp, #192	@ 0xc0
 8003950:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8003848 <__kernel_rem_pio2f+0x304>
 8003954:	440b      	add	r3, r1
 8003956:	4622      	mov	r2, r4
 8003958:	2a00      	cmp	r2, #0
 800395a:	da24      	bge.n	80039a6 <__kernel_rem_pio2f+0x462>
 800395c:	b34e      	cbz	r6, 80039b2 <__kernel_rem_pio2f+0x46e>
 800395e:	eef1 7a47 	vneg.f32	s15, s14
 8003962:	edc7 7a00 	vstr	s15, [r7]
 8003966:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800396a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800396e:	aa31      	add	r2, sp, #196	@ 0xc4
 8003970:	2301      	movs	r3, #1
 8003972:	429c      	cmp	r4, r3
 8003974:	da20      	bge.n	80039b8 <__kernel_rem_pio2f+0x474>
 8003976:	b10e      	cbz	r6, 800397c <__kernel_rem_pio2f+0x438>
 8003978:	eef1 7a67 	vneg.f32	s15, s15
 800397c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003980:	e7ba      	b.n	80038f8 <__kernel_rem_pio2f+0x3b4>
 8003982:	ab30      	add	r3, sp, #192	@ 0xc0
 8003984:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8003848 <__kernel_rem_pio2f+0x304>
 8003988:	440b      	add	r3, r1
 800398a:	2c00      	cmp	r4, #0
 800398c:	da05      	bge.n	800399a <__kernel_rem_pio2f+0x456>
 800398e:	b10e      	cbz	r6, 8003994 <__kernel_rem_pio2f+0x450>
 8003990:	eef1 7a67 	vneg.f32	s15, s15
 8003994:	edc7 7a00 	vstr	s15, [r7]
 8003998:	e7ae      	b.n	80038f8 <__kernel_rem_pio2f+0x3b4>
 800399a:	ed33 7a01 	vldmdb	r3!, {s14}
 800399e:	3c01      	subs	r4, #1
 80039a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039a4:	e7f1      	b.n	800398a <__kernel_rem_pio2f+0x446>
 80039a6:	ed73 7a01 	vldmdb	r3!, {s15}
 80039aa:	3a01      	subs	r2, #1
 80039ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b0:	e7d2      	b.n	8003958 <__kernel_rem_pio2f+0x414>
 80039b2:	eef0 7a47 	vmov.f32	s15, s14
 80039b6:	e7d4      	b.n	8003962 <__kernel_rem_pio2f+0x41e>
 80039b8:	ecb2 7a01 	vldmia	r2!, {s14}
 80039bc:	3301      	adds	r3, #1
 80039be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039c2:	e7d6      	b.n	8003972 <__kernel_rem_pio2f+0x42e>
 80039c4:	edd2 7a00 	vldr	s15, [r2]
 80039c8:	edd2 6a01 	vldr	s13, [r2, #4]
 80039cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80039d0:	3801      	subs	r0, #1
 80039d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039d6:	ed82 7a00 	vstr	s14, [r2]
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	edc2 7a01 	vstr	s15, [r2, #4]
 80039e2:	e798      	b.n	8003916 <__kernel_rem_pio2f+0x3d2>
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80039ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80039f0:	3a01      	subs	r2, #1
 80039f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039f6:	ed83 7a00 	vstr	s14, [r3]
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8003a02:	e78d      	b.n	8003920 <__kernel_rem_pio2f+0x3dc>
 8003a04:	ed33 7a01 	vldmdb	r3!, {s14}
 8003a08:	3c01      	subs	r4, #1
 8003a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a0e:	e78f      	b.n	8003930 <__kernel_rem_pio2f+0x3ec>
 8003a10:	eef1 6a66 	vneg.f32	s13, s13
 8003a14:	eeb1 7a47 	vneg.f32	s14, s14
 8003a18:	edc7 6a00 	vstr	s13, [r7]
 8003a1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8003a20:	eef1 7a67 	vneg.f32	s15, s15
 8003a24:	e790      	b.n	8003948 <__kernel_rem_pio2f+0x404>
 8003a26:	bf00      	nop

08003a28 <scalbnf>:
 8003a28:	ee10 3a10 	vmov	r3, s0
 8003a2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003a30:	d02b      	beq.n	8003a8a <scalbnf+0x62>
 8003a32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003a36:	d302      	bcc.n	8003a3e <scalbnf+0x16>
 8003a38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003a3c:	4770      	bx	lr
 8003a3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8003a42:	d123      	bne.n	8003a8c <scalbnf+0x64>
 8003a44:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <scalbnf+0xb0>)
 8003a46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003adc <scalbnf+0xb4>
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003a50:	db17      	blt.n	8003a82 <scalbnf+0x5a>
 8003a52:	ee10 3a10 	vmov	r3, s0
 8003a56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003a5a:	3a19      	subs	r2, #25
 8003a5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003a60:	4288      	cmp	r0, r1
 8003a62:	dd15      	ble.n	8003a90 <scalbnf+0x68>
 8003a64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003ae0 <scalbnf+0xb8>
 8003a68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003ae4 <scalbnf+0xbc>
 8003a6c:	ee10 3a10 	vmov	r3, s0
 8003a70:	eeb0 7a67 	vmov.f32	s14, s15
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bfb8      	it	lt
 8003a78:	eef0 7a66 	vmovlt.f32	s15, s13
 8003a7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003a80:	4770      	bx	lr
 8003a82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003ae8 <scalbnf+0xc0>
 8003a86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003a8a:	4770      	bx	lr
 8003a8c:	0dd2      	lsrs	r2, r2, #23
 8003a8e:	e7e5      	b.n	8003a5c <scalbnf+0x34>
 8003a90:	4410      	add	r0, r2
 8003a92:	28fe      	cmp	r0, #254	@ 0xfe
 8003a94:	dce6      	bgt.n	8003a64 <scalbnf+0x3c>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	dd06      	ble.n	8003aa8 <scalbnf+0x80>
 8003a9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003a9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003aa2:	ee00 3a10 	vmov	s0, r3
 8003aa6:	4770      	bx	lr
 8003aa8:	f110 0f16 	cmn.w	r0, #22
 8003aac:	da09      	bge.n	8003ac2 <scalbnf+0x9a>
 8003aae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003ae8 <scalbnf+0xc0>
 8003ab2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003aec <scalbnf+0xc4>
 8003ab6:	ee10 3a10 	vmov	r3, s0
 8003aba:	eeb0 7a67 	vmov.f32	s14, s15
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	e7d9      	b.n	8003a76 <scalbnf+0x4e>
 8003ac2:	3019      	adds	r0, #25
 8003ac4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003ac8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003acc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003af0 <scalbnf+0xc8>
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	e7d7      	b.n	8003a86 <scalbnf+0x5e>
 8003ad6:	bf00      	nop
 8003ad8:	ffff3cb0 	.word	0xffff3cb0
 8003adc:	4c000000 	.word	0x4c000000
 8003ae0:	7149f2ca 	.word	0x7149f2ca
 8003ae4:	f149f2ca 	.word	0xf149f2ca
 8003ae8:	0da24260 	.word	0x0da24260
 8003aec:	8da24260 	.word	0x8da24260
 8003af0:	33000000 	.word	0x33000000

08003af4 <floorf>:
 8003af4:	ee10 3a10 	vmov	r3, s0
 8003af8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003afc:	3a7f      	subs	r2, #127	@ 0x7f
 8003afe:	2a16      	cmp	r2, #22
 8003b00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b04:	dc2b      	bgt.n	8003b5e <floorf+0x6a>
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	da12      	bge.n	8003b30 <floorf+0x3c>
 8003b0a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003b70 <floorf+0x7c>
 8003b0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	dd06      	ble.n	8003b2a <floorf+0x36>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da24      	bge.n	8003b6a <floorf+0x76>
 8003b20:	2900      	cmp	r1, #0
 8003b22:	4b14      	ldr	r3, [pc, #80]	@ (8003b74 <floorf+0x80>)
 8003b24:	bf08      	it	eq
 8003b26:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8003b2a:	ee00 3a10 	vmov	s0, r3
 8003b2e:	4770      	bx	lr
 8003b30:	4911      	ldr	r1, [pc, #68]	@ (8003b78 <floorf+0x84>)
 8003b32:	4111      	asrs	r1, r2
 8003b34:	420b      	tst	r3, r1
 8003b36:	d0fa      	beq.n	8003b2e <floorf+0x3a>
 8003b38:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8003b70 <floorf+0x7c>
 8003b3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	ddef      	ble.n	8003b2a <floorf+0x36>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbe      	ittt	lt
 8003b4e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8003b52:	fa40 f202 	asrlt.w	r2, r0, r2
 8003b56:	189b      	addlt	r3, r3, r2
 8003b58:	ea23 0301 	bic.w	r3, r3, r1
 8003b5c:	e7e5      	b.n	8003b2a <floorf+0x36>
 8003b5e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003b62:	d3e4      	bcc.n	8003b2e <floorf+0x3a>
 8003b64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b68:	4770      	bx	lr
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e7dd      	b.n	8003b2a <floorf+0x36>
 8003b6e:	bf00      	nop
 8003b70:	7149f2ca 	.word	0x7149f2ca
 8003b74:	bf800000 	.word	0xbf800000
 8003b78:	007fffff 	.word	0x007fffff

08003b7c <_init>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr

08003b88 <_fini>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr
