
STM_ADC_HOMEWORK_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800603c  0800603c  0000703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006084  08006084  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006084  08006084  00007084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800608c  0800608c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006090  08006090  00007090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006094  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080060a0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080060a0  0000816c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001365a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f3  00000000  00000000  0001b696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0001da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e34  00000000  00000000  0001eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b7d  00000000  00000000  0001fadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142a5  00000000  00000000  00047659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101b75  00000000  00000000  0005b8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d473  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e50  00000000  00000000  0015d4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00162308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006024 	.word	0x08006024

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006024 	.word	0x08006024

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_ADC_ConvCpltCallback>:

volatile uint32_t adc_value_pot = 0;
volatile uint32_t adc_value_ldr = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a22      	ldr	r2, [pc, #136]	@ (8000550 <HAL_ADC_ConvCpltCallback+0x98>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d13e      	bne.n	8000548 <HAL_ADC_ConvCpltCallback+0x90>
	{

		adc_value_pot = HAL_ADC_GetValue(hadc);
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f001 fa64 	bl	8001998 <HAL_ADC_GetValue>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a20      	ldr	r2, [pc, #128]	@ (8000554 <HAL_ADC_ConvCpltCallback+0x9c>)
 80004d4:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc1);
 80004d6:	4820      	ldr	r0, [pc, #128]	@ (8000558 <HAL_ADC_ConvCpltCallback+0xa0>)
 80004d8:	f000 ff9e 	bl	8001418 <HAL_ADC_Start>


		if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80004dc:	2164      	movs	r1, #100	@ 0x64
 80004de:	481e      	ldr	r0, [pc, #120]	@ (8000558 <HAL_ADC_ConvCpltCallback+0xa0>)
 80004e0:	f001 f854 	bl	800158c <HAL_ADC_PollForConversion>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d12b      	bne.n	8000542 <HAL_ADC_ConvCpltCallback+0x8a>
		{
			adc_value_ldr = HAL_ADC_GetValue(hadc);
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f001 fa54 	bl	8001998 <HAL_ADC_GetValue>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a1a      	ldr	r2, [pc, #104]	@ (800055c <HAL_ADC_ConvCpltCallback+0xa4>)
 80004f4:	6013      	str	r3, [r2, #0]
			uint32_t frequency = 100 + (adc_value_pot * 4000 / 4096);
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <HAL_ADC_ConvCpltCallback+0x9c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	0b1b      	lsrs	r3, r3, #12
 8000504:	3364      	adds	r3, #100	@ 0x64
 8000506:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_AUTORELOAD(&htim3, frequency);
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <HAL_ADC_ConvCpltCallback+0xa8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000510:	4a13      	ldr	r2, [pc, #76]	@ (8000560 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	60d3      	str	r3, [r2, #12]
			uint32_t pwm_value = (adc_value_ldr * 1000) / 4095;
 8000516:	4b11      	ldr	r3, [pc, #68]	@ (800055c <HAL_ADC_ConvCpltCallback+0xa4>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800051e:	fb03 f202 	mul.w	r2, r3, r2
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <HAL_ADC_ConvCpltCallback+0xac>)
 8000524:	fba3 1302 	umull	r1, r3, r3, r2
 8000528:	1ad2      	subs	r2, r2, r3
 800052a:	0852      	lsrs	r2, r2, #1
 800052c:	4413      	add	r3, r2
 800052e:	0adb      	lsrs	r3, r3, #11
 8000530:	60bb      	str	r3, [r7, #8]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_value);
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_value);
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <HAL_ADC_ConvCpltCallback+0xa8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		HAL_ADC_Start(&hadc1);
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000544:	f000 ff68 	bl	8001418 <HAL_ADC_Start>
	}
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	50040000 	.word	0x50040000
 8000554:	20000160 	.word	0x20000160
 8000558:	20000028 	.word	0x20000028
 800055c:	20000164 	.word	0x20000164
 8000560:	2000008c 	.word	0x2000008c
 8000564:	00100101 	.word	0x00100101

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fb99 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f81a 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f9a0 	bl	80008b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000578:	f000 f868 	bl	800064c <MX_ADC1_Init>
  MX_TIM3_Init();
 800057c:	f000 f8ea 	bl	8000754 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f96a 	bl	8000858 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 8000584:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <main+0x38>)
 8000586:	f001 f8d9 	bl	800173c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <main+0x3c>)
 800058e:	f004 f853 	bl	8004638 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000592:	2104      	movs	r1, #4
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <main+0x3c>)
 8000596:	f004 f84f 	bl	8004638 <HAL_TIM_PWM_Start>

  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x32>
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	2000008c 	.word	0x2000008c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	@ 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	@ 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fd07 	bl	8005fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ce:	f002 fc69 	bl	8002ea4 <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 f99e 	bl	8000918 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005dc:	2310      	movs	r3, #16
 80005de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e8:	2360      	movs	r3, #96	@ 0x60
 80005ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005f8:	2328      	movs	r3, #40	@ 0x28
 80005fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fc9f 	bl	8002f50 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000618:	f000 f97e 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2104      	movs	r1, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f867 	bl	8003708 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 f96a 	bl	8000918 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3758      	adds	r7, #88	@ 0x58
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800066e:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000670:	4a36      	ldr	r2, [pc, #216]	@ (800074c <MX_ADC1_Init+0x100>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000674:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	4b33      	ldr	r3, [pc, #204]	@ (8000748 <MX_ADC1_Init+0xfc>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000680:	4b31      	ldr	r3, [pc, #196]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000688:	2201      	movs	r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b2e      	ldr	r3, [pc, #184]	@ (8000748 <MX_ADC1_Init+0xfc>)
 800068e:	2204      	movs	r2, #4
 8000690:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000694:	2200      	movs	r2, #0
 8000696:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000698:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <MX_ADC1_Init+0xfc>)
 800069a:	2200      	movs	r2, #0
 800069c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800069e:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d0:	481d      	ldr	r0, [pc, #116]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006d2:	f000 fd51 	bl	8001178 <HAL_ADC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006dc:	f000 f91c 	bl	8000918 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4817      	ldr	r0, [pc, #92]	@ (8000748 <MX_ADC1_Init+0xfc>)
 80006ec:	f002 f860 	bl	80027b0 <HAL_ADCEx_MultiModeConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006f6:	f000 f90f 	bl	8000918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_ADC1_Init+0x104>)
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fe:	2306      	movs	r3, #6
 8000700:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000702:	2307      	movs	r3, #7
 8000704:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000706:	237f      	movs	r3, #127	@ 0x7f
 8000708:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070a:	2304      	movs	r3, #4
 800070c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	480c      	ldr	r0, [pc, #48]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000718:	f001 fb7a 	bl	8001e10 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000722:	f000 f8f9 	bl	8000918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000726:	230c      	movs	r3, #12
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <MX_ADC1_Init+0xfc>)
 8000730:	f001 fb6e 	bl	8001e10 <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800073a:	f000 f8ed 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	50040000 	.word	0x50040000
 8000750:	04300002 	.word	0x04300002

08000754 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	@ 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_TIM3_Init+0xfc>)
 8000788:	4a32      	ldr	r2, [pc, #200]	@ (8000854 <MX_TIM3_Init+0x100>)
 800078a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800078c:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <MX_TIM3_Init+0xfc>)
 800078e:	224f      	movs	r2, #79	@ 0x4f
 8000790:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <MX_TIM3_Init+0xfc>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000798:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <MX_TIM3_Init+0xfc>)
 800079a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_TIM3_Init+0xfc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <MX_TIM3_Init+0xfc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ac:	4828      	ldr	r0, [pc, #160]	@ (8000850 <MX_TIM3_Init+0xfc>)
 80007ae:	f003 fe8b 	bl	80044c8 <HAL_TIM_Base_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007b8:	f000 f8ae 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4821      	ldr	r0, [pc, #132]	@ (8000850 <MX_TIM3_Init+0xfc>)
 80007ca:	f004 f94f 	bl	8004a6c <HAL_TIM_ConfigClockSource>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80007d4:	f000 f8a0 	bl	8000918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <MX_TIM3_Init+0xfc>)
 80007da:	f003 fecc 	bl	8004576 <HAL_TIM_PWM_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007e4:	f000 f898 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4816      	ldr	r0, [pc, #88]	@ (8000850 <MX_TIM3_Init+0xfc>)
 80007f8:	f004 fe3e 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 f889 	bl	8000918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	@ 0x60
 8000808:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <MX_TIM3_Init+0xfc>)
 800081e:	f004 f811 	bl	8004844 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000828:	f000 f876 	bl	8000918 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	@ (8000850 <MX_TIM3_Init+0xfc>)
 8000834:	f004 f806 	bl	8004844 <HAL_TIM_PWM_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800083e:	f000 f86b 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <MX_TIM3_Init+0xfc>)
 8000844:	f000 f924 	bl	8000a90 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	@ 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000008c 	.word	0x2000008c
 8000854:	40000400 	.word	0x40000400

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f004 fe74 	bl	8005588 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f837 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000d8 	.word	0x200000d8
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_GPIO_Init+0x5c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	@ 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2288      	movs	r2, #136	@ 0x88
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f005 fb1c 	bl	8005fca <memset>
  if(hadc->Instance==ADC1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2b      	ldr	r2, [pc, #172]	@ (8000a44 <HAL_ADC_MspInit+0xd8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d14e      	bne.n	8000a3a <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800099c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80009b2:	2310      	movs	r3, #16
 80009b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f8bf 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009d8:	f7ff ff9e 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <HAL_ADC_MspInit+0xdc>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <HAL_ADC_MspInit+0xdc>)
 80009e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <HAL_ADC_MspInit+0xdc>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <HAL_ADC_MspInit+0xdc>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <HAL_ADC_MspInit+0xdc>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <HAL_ADC_MspInit+0xdc>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a12:	230b      	movs	r3, #11
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a22:	4619      	mov	r1, r3
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <HAL_ADC_MspInit+0xe0>)
 8000a26:	f002 f885 	bl	8002b34 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	2012      	movs	r0, #18
 8000a30:	f002 f849 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a34:	2012      	movs	r0, #18
 8000a36:	f002 f862 	bl	8002afe <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a3a:	bf00      	nop
 8000a3c:	37b0      	adds	r7, #176	@ 0xb0
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	50040000 	.word	0x50040000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000800 	.word	0x48000800

08000a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_TIM_Base_MspInit+0x38>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10b      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <HAL_TIM_Base_MspInit+0x3c>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a66:	4a09      	ldr	r2, [pc, #36]	@ (8000a8c <HAL_TIM_Base_MspInit+0x3c>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <HAL_TIM_Base_MspInit+0x3c>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <HAL_TIM_MspPostInit+0x64>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d11b      	bne.n	8000aea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000aca:	2330      	movs	r3, #48	@ 0x30
 8000acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <HAL_TIM_MspPostInit+0x6c>)
 8000ae6:	f002 f825 	bl	8002b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40000400 	.word	0x40000400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000400 	.word	0x48000400

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0ac      	sub	sp, #176	@ 0xb0
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2288      	movs	r2, #136	@ 0x88
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fa52 	bl	8005fca <memset>
  if(huart->Instance==USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a21      	ldr	r2, [pc, #132]	@ (8000bb0 <HAL_UART_MspInit+0xb0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d13b      	bne.n	8000ba8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 f807 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b48:	f7ff fee6 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_UART_MspInit+0xb4>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b50:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <HAL_UART_MspInit+0xb4>)
 8000b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_UART_MspInit+0xb4>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_UART_MspInit+0xb4>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <HAL_UART_MspInit+0xb4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <HAL_UART_MspInit+0xb4>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba4:	f001 ffc6 	bl	8002b34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ba8:	bf00      	nop
 8000baa:	37b0      	adds	r7, #176	@ 0xb0
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f89d 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <ADC1_2_IRQHandler+0x10>)
 8000c1e:	f000 fec9 	bl	80019b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000028 	.word	0x20000028

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f005 f9ad 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fc71 	bl	8000568 <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	08006094 	.word	0x08006094
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	2000016c 	.word	0x2000016c

08000ca0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC3_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f001 feff 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f80e 	bl	8000cd4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff fe2e 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_InitTick+0x70>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 ff0b 	bl	8002b1a <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d809      	bhi.n	8000d24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f001 fed5 	bl	8002ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_InitTick+0x74>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000168 	.word	0x20000168

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000168 	.word	0x20000168

08000d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	609a      	str	r2, [r3, #8]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3360      	adds	r3, #96	@ 0x60
 8000e06:	461a      	mov	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <LL_ADC_SetOffset+0x44>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	4313      	orrs	r3, r2
 8000e24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	03fff000 	.word	0x03fff000

08000e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3360      	adds	r3, #96	@ 0x60
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3360      	adds	r3, #96	@ 0x60
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e92:	bf00      	nop
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3330      	adds	r3, #48	@ 0x30
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	4413      	add	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	f003 031f 	and.w	r3, r3, #31
 8000eee:	211f      	movs	r1, #31
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	0e9b      	lsrs	r3, r3, #26
 8000efc:	f003 011f 	and.w	r1, r3, #31
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f28:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b087      	sub	sp, #28
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3314      	adds	r3, #20
 8000f52:	461a      	mov	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	0e5b      	lsrs	r3, r3, #25
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	0d1b      	lsrs	r3, r3, #20
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	2107      	movs	r1, #7
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	0d1b      	lsrs	r3, r3, #20
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	431a      	orrs	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0318 	and.w	r3, r3, #24
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fbc:	40d9      	lsrs	r1, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	400b      	ands	r3, r1
 8000fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	0007ffff 	.word	0x0007ffff

08000fe0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 031f 	and.w	r3, r3, #31
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6093      	str	r3, [r2, #8]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800104c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001050:	d101      	bne.n	8001056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001078:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010a0:	d101      	bne.n	80010a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <LL_ADC_IsEnabled+0x18>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <LL_ADC_IsEnabled+0x1a>
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001112:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001116:	f043 0204 	orr.w	r2, r3, #4
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b04      	cmp	r3, #4
 800113c:	d101      	bne.n	8001142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b08      	cmp	r3, #8
 8001162:	d101      	bne.n	8001168 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e130      	b.n	80013f4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fbe3 	bl	800096c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff3f 	bl	800103c <LL_ADC_IsDeepPowerDownEnabled>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff25 	bl	8001018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff5a 	bl	800108c <LL_ADC_IsInternalRegulatorEnabled>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d115      	bne.n	800120a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff3e 	bl	8001064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011e8:	4b84      	ldr	r3, [pc, #528]	@ (80013fc <HAL_ADC_Init+0x284>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	4a84      	ldr	r2, [pc, #528]	@ (8001400 <HAL_ADC_Init+0x288>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	3301      	adds	r3, #1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011fc:	e002      	b.n	8001204 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3b01      	subs	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff3c 	bl	800108c <LL_ADC_IsInternalRegulatorEnabled>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10d      	bne.n	8001236 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff75 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001240:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 80c9 	bne.w	80013e2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 80c5 	bne.w	80013e2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800125c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001260:	f043 0202 	orr.w	r2, r3, #2
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff35 	bl	80010dc <LL_ADC_IsEnabled>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d115      	bne.n	80012a4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001278:	4862      	ldr	r0, [pc, #392]	@ (8001404 <HAL_ADC_Init+0x28c>)
 800127a:	f7ff ff2f 	bl	80010dc <LL_ADC_IsEnabled>
 800127e:	4604      	mov	r4, r0
 8001280:	4861      	ldr	r0, [pc, #388]	@ (8001408 <HAL_ADC_Init+0x290>)
 8001282:	f7ff ff2b 	bl	80010dc <LL_ADC_IsEnabled>
 8001286:	4603      	mov	r3, r0
 8001288:	431c      	orrs	r4, r3
 800128a:	4860      	ldr	r0, [pc, #384]	@ (800140c <HAL_ADC_Init+0x294>)
 800128c:	f7ff ff26 	bl	80010dc <LL_ADC_IsEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	4323      	orrs	r3, r4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4619      	mov	r1, r3
 800129e:	485c      	ldr	r0, [pc, #368]	@ (8001410 <HAL_ADC_Init+0x298>)
 80012a0:	f7ff fd74 	bl	8000d8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e5b      	ldrb	r3, [r3, #25]
 80012a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d106      	bne.n	80012e0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d6:	3b01      	subs	r3, #1
 80012d8:	045b      	lsls	r3, r3, #17
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d009      	beq.n	80012fc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	4b44      	ldr	r3, [pc, #272]	@ (8001414 <HAL_ADC_Init+0x29c>)
 8001304:	4013      	ands	r3, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	69b9      	ldr	r1, [r7, #24]
 800130c:	430b      	orrs	r3, r1
 800130e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff1b 	bl	8001150 <LL_ADC_INJ_IsConversionOngoing>
 800131a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d13d      	bne.n	800139e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d13a      	bne.n	800139e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800132c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001334:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001344:	f023 0302 	bic.w	r3, r3, #2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	69b9      	ldr	r1, [r7, #24]
 800134e:	430b      	orrs	r3, r1
 8001350:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001358:	2b01      	cmp	r3, #1
 800135a:	d118      	bne.n	800138e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001372:	4311      	orrs	r1, r2
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001378:	4311      	orrs	r1, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800137e:	430a      	orrs	r2, r1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	e007      	b.n	800139e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10c      	bne.n	80013c0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f023 010f 	bic.w	r1, r3, #15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80013be:	e007      	b.n	80013d0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 020f 	bic.w	r2, r2, #15
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d4:	f023 0303 	bic.w	r3, r3, #3
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	@ 0x54
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3724      	adds	r7, #36	@ 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	053e2d63 	.word	0x053e2d63
 8001404:	50040000 	.word	0x50040000
 8001408:	50040100 	.word	0x50040100
 800140c:	50040200 	.word	0x50040200
 8001410:	50040300 	.word	0x50040300
 8001414:	fff0c007 	.word	0xfff0c007

08001418 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001420:	4857      	ldr	r0, [pc, #348]	@ (8001580 <HAL_ADC_Start+0x168>)
 8001422:	f7ff fddd 	bl	8000fe0 <LL_ADC_GetMultimode>
 8001426:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe7c 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 809c 	bne.w	8001572 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_Start+0x30>
 8001444:	2302      	movs	r3, #2
 8001446:	e097      	b.n	8001578 <HAL_ADC_Start+0x160>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 f8cf 	bl	80025f4 <ADC_Enable>
 8001456:	4603      	mov	r3, r0
 8001458:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f040 8083 	bne.w	8001568 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001466:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a42      	ldr	r2, [pc, #264]	@ (8001584 <HAL_ADC_Start+0x16c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d002      	beq.n	8001486 <HAL_ADC_Start+0x6e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	e000      	b.n	8001488 <HAL_ADC_Start+0x70>
 8001486:	4b40      	ldr	r3, [pc, #256]	@ (8001588 <HAL_ADC_Start+0x170>)
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	4293      	cmp	r3, r2
 800148e:	d002      	beq.n	8001496 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d105      	bne.n	80014a2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014ae:	d106      	bne.n	80014be <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	f023 0206 	bic.w	r2, r3, #6
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	221c      	movs	r2, #28
 80014ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <HAL_ADC_Start+0x16c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d002      	beq.n	80014e4 <HAL_ADC_Start+0xcc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e000      	b.n	80014e6 <HAL_ADC_Start+0xce>
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_ADC_Start+0x170>)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d008      	beq.n	8001500 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d002      	beq.n	8001500 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b09      	cmp	r3, #9
 80014fe:	d114      	bne.n	800152a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001512:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001516:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fded 	bl	8001102 <LL_ADC_REG_StartConversion>
 8001528:	e025      	b.n	8001576 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <HAL_ADC_Start+0x16c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d002      	beq.n	8001546 <HAL_ADC_Start+0x12e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e000      	b.n	8001548 <HAL_ADC_Start+0x130>
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_ADC_Start+0x170>)
 8001548:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00f      	beq.n	8001576 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800155e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54
 8001566:	e006      	b.n	8001576 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001570:	e001      	b.n	8001576 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001572:	2302      	movs	r3, #2
 8001574:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	50040300 	.word	0x50040300
 8001584:	50040100 	.word	0x50040100
 8001588:	50040000 	.word	0x50040000

0800158c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001596:	4866      	ldr	r0, [pc, #408]	@ (8001730 <HAL_ADC_PollForConversion+0x1a4>)
 8001598:	f7ff fd22 	bl	8000fe0 <LL_ADC_GetMultimode>
 800159c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d102      	bne.n	80015ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015a6:	2308      	movs	r3, #8
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e02a      	b.n	8001602 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d002      	beq.n	80015be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d111      	bne.n	80015e2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0a4      	b.n	8001726 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015dc:	2304      	movs	r3, #4
 80015de:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015e0:	e00f      	b.n	8001602 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80015e2:	4853      	ldr	r0, [pc, #332]	@ (8001730 <HAL_ADC_PollForConversion+0x1a4>)
 80015e4:	f7ff fd0a 	bl	8000ffc <LL_ADC_GetMultiDMATransfer>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e093      	b.n	8001726 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015fe:	2304      	movs	r3, #4
 8001600:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001602:	f7ff fbb7 	bl	8000d74 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001608:	e021      	b.n	800164e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d01d      	beq.n	800164e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001612:	f7ff fbaf 	bl	8000d74 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d302      	bcc.n	8001628 <HAL_ADC_PollForConversion+0x9c>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d112      	bne.n	800164e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10b      	bne.n	800164e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163a:	f043 0204 	orr.w	r2, r3, #4
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e06b      	b.n	8001726 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0d6      	beq.n	800160a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc16 	bl	8000e9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01c      	beq.n	80016b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e5b      	ldrb	r3, [r3, #25]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d118      	bne.n	80016b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b08      	cmp	r3, #8
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <HAL_ADC_PollForConversion+0x1a8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d002      	beq.n	80016c2 <HAL_ADC_PollForConversion+0x136>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_PollForConversion+0x138>
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_ADC_PollForConversion+0x1ac>)
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d008      	beq.n	80016de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d002      	beq.n	80016de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b09      	cmp	r3, #9
 80016dc:	d104      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	e00c      	b.n	8001702 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <HAL_ADC_PollForConversion+0x1a8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d002      	beq.n	80016f8 <HAL_ADC_PollForConversion+0x16c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e000      	b.n	80016fa <HAL_ADC_PollForConversion+0x16e>
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_ADC_PollForConversion+0x1ac>)
 80016fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d104      	bne.n	8001712 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2208      	movs	r2, #8
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e008      	b.n	8001724 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d103      	bne.n	8001724 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	220c      	movs	r2, #12
 8001722:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	50040300 	.word	0x50040300
 8001734:	50040100 	.word	0x50040100
 8001738:	50040000 	.word	0x50040000

0800173c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001744:	4891      	ldr	r0, [pc, #580]	@ (800198c <HAL_ADC_Start_IT+0x250>)
 8001746:	f7ff fc4b 	bl	8000fe0 <LL_ADC_GetMultimode>
 800174a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fcea 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 8110 	bne.w	800197e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_Start_IT+0x30>
 8001768:	2302      	movs	r3, #2
 800176a:	e10b      	b.n	8001984 <HAL_ADC_Start_IT+0x248>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 ff3d 	bl	80025f4 <ADC_Enable>
 800177a:	4603      	mov	r3, r0
 800177c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 80f7 	bne.w	8001974 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7c      	ldr	r2, [pc, #496]	@ (8001990 <HAL_ADC_Start_IT+0x254>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d002      	beq.n	80017aa <HAL_ADC_Start_IT+0x6e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	e000      	b.n	80017ac <HAL_ADC_Start_IT+0x70>
 80017aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001994 <HAL_ADC_Start_IT+0x258>)
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d002      	beq.n	80017ba <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	f023 0206 	bic.w	r2, r3, #6
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80017de:	e002      	b.n	80017e6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	221c      	movs	r2, #28
 80017ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 021c 	bic.w	r2, r2, #28
 8001804:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b08      	cmp	r3, #8
 800180c:	d108      	bne.n	8001820 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0208 	orr.w	r2, r2, #8
 800181c:	605a      	str	r2, [r3, #4]
          break;
 800181e:	e008      	b.n	8001832 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0204 	orr.w	r2, r2, #4
 800182e:	605a      	str	r2, [r3, #4]
          break;
 8001830:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0210 	orr.w	r2, r2, #16
 8001848:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a50      	ldr	r2, [pc, #320]	@ (8001990 <HAL_ADC_Start_IT+0x254>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d002      	beq.n	800185a <HAL_ADC_Start_IT+0x11e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	e000      	b.n	800185c <HAL_ADC_Start_IT+0x120>
 800185a:	4b4e      	ldr	r3, [pc, #312]	@ (8001994 <HAL_ADC_Start_IT+0x258>)
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4293      	cmp	r3, r2
 8001862:	d008      	beq.n	8001876 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d002      	beq.n	8001876 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b09      	cmp	r3, #9
 8001874:	d13a      	bne.n	80018ec <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02d      	beq.n	80018e0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001888:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800188c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d110      	bne.n	80018be <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0220 	bic.w	r2, r2, #32
 80018aa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018ba:	605a      	str	r2, [r3, #4]
              break;
 80018bc:	e010      	b.n	80018e0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0220 	orr.w	r2, r2, #32
 80018dc:	605a      	str	r2, [r3, #4]
              break;
 80018de:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fc0c 	bl	8001102 <LL_ADC_REG_StartConversion>
 80018ea:	e04a      	b.n	8001982 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <HAL_ADC_Start_IT+0x254>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d002      	beq.n	8001908 <HAL_ADC_Start_IT+0x1cc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	e000      	b.n	800190a <HAL_ADC_Start_IT+0x1ce>
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <HAL_ADC_Start_IT+0x258>)
 800190a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001920:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d110      	bne.n	8001952 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0220 	bic.w	r2, r2, #32
 800193e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800194e:	605a      	str	r2, [r3, #4]
              break;
 8001950:	e017      	b.n	8001982 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001960:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	605a      	str	r2, [r3, #4]
              break;
 8001972:	e006      	b.n	8001982 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800197c:	e001      	b.n	8001982 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800197e:	2302      	movs	r3, #2
 8001980:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	50040300 	.word	0x50040300
 8001990:	50040100 	.word	0x50040100
 8001994:	50040000 	.word	0x50040000

08001998 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d0:	4882      	ldr	r0, [pc, #520]	@ (8001bdc <HAL_ADC_IRQHandler+0x228>)
 80019d2:	f7ff fb05 	bl	8000fe0 <LL_ADC_GetMultimode>
 80019d6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d017      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x5e>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fec9 	bl	800279c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_IRQHandler+0x72>
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8083 	beq.w	8001b38 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d07d      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa20 	bl	8000e9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d062      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5d      	ldr	r2, [pc, #372]	@ (8001be0 <HAL_ADC_IRQHandler+0x22c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <HAL_ADC_IRQHandler+0xc0>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e000      	b.n	8001a76 <HAL_ADC_IRQHandler+0xc2>
 8001a74:	4b5b      	ldr	r3, [pc, #364]	@ (8001be4 <HAL_ADC_IRQHandler+0x230>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d008      	beq.n	8001a90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d002      	beq.n	8001a90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d104      	bne.n	8001a9a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	e00c      	b.n	8001ab4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a50      	ldr	r2, [pc, #320]	@ (8001be0 <HAL_ADC_IRQHandler+0x22c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d002      	beq.n	8001aaa <HAL_ADC_IRQHandler+0xf6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_IRQHandler+0xf8>
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <HAL_ADC_IRQHandler+0x230>)
 8001aac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d135      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d12e      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fb2a 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11a      	bne.n	8001b12 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020c 	bic.w	r2, r2, #12
 8001aea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d112      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b10:	e00b      	b.n	8001b2a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fcc4 	bl	80004b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	220c      	movs	r2, #12
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x198>
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 809f 	beq.w	8001c96 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8099 	beq.w	8001c96 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f9cb 	bl	8000f1c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f986 	bl	8000e9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b92:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_ADC_IRQHandler+0x22c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d002      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x1f0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e000      	b.n	8001ba6 <HAL_ADC_IRQHandler+0x1f2>
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_ADC_IRQHandler+0x230>)
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d008      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d002      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b07      	cmp	r3, #7
 8001bbe:	d104      	bne.n	8001bca <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	e013      	b.n	8001bf2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <HAL_ADC_IRQHandler+0x22c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x234>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_ADC_IRQHandler+0x236>
 8001bda:	bf00      	nop
 8001bdc:	50040300 	.word	0x50040300
 8001be0:	50040100 	.word	0x50040100
 8001be4:	50040000 	.word	0x50040000
 8001be8:	4b7d      	ldr	r3, [pc, #500]	@ (8001de0 <HAL_ADC_IRQHandler+0x42c>)
 8001bea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d047      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_ADC_IRQHandler+0x25e>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d03f      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d13a      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1c:	2b40      	cmp	r3, #64	@ 0x40
 8001c1e:	d133      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12e      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa8e 	bl	8001150 <LL_ADC_INJ_IsConversionOngoing>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11a      	bne.n	8001c70 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c48:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d112      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c6e:	e00b      	b.n	8001c88 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c74:	f043 0210 	orr.w	r2, r3, #16
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fd5f 	bl	800274c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2260      	movs	r2, #96	@ 0x60
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d011      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x310>
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f896 	bl	8001de8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x340>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fd45 	bl	8002774 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d012      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x370>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fd37 	bl	8002788 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x3e8>
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d031      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001d40:	2301      	movs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d44:	e014      	b.n	8001d70 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d4c:	4825      	ldr	r0, [pc, #148]	@ (8001de4 <HAL_ADC_IRQHandler+0x430>)
 8001d4e:	f7ff f955 	bl	8000ffc <LL_ADC_GetMultiDMATransfer>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5c:	e008      	b.n	8001d70 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f834 	bl	8001dfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d018      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x424>
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	f043 0208 	orr.w	r2, r3, #8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fcc4 	bl	8002760 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	50040000 	.word	0x50040000
 8001de4:	50040300 	.word	0x50040300

08001de8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0b6      	sub	sp, #216	@ 0xd8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x22>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e3c9      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x7b6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f973 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 83aa 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d824      	bhi.n	8001ea6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	3b02      	subs	r3, #2
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d81b      	bhi.n	8001e9e <HAL_ADC_ConfigChannel+0x8e>
 8001e66:	a201      	add	r2, pc, #4	@ (adr r2, 8001e6c <HAL_ADC_ConfigChannel+0x5c>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	08001e85 	.word	0x08001e85
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001e95 	.word	0x08001e95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e82:	e010      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e84:	2312      	movs	r3, #18
 8001e86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e8c:	2318      	movs	r3, #24
 8001e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e92:	e008      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ea4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001eb4:	f7ff f806 	bl	8000ec4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f934 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001ec2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f940 	bl	8001150 <LL_ADC_INJ_IsConversionOngoing>
 8001ed0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 81a4 	bne.w	8002226 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 819f 	bne.w	8002226 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f7ff f824 	bl	8000f42 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00a      	beq.n	8001f32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6919      	ldr	r1, [r3, #16]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f2c:	f7fe ff62 	bl	8000df4 <LL_ADC_SetOffset>
 8001f30:	e179      	b.n	8002226 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ff7f 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x14e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ff74 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	0e9b      	lsrs	r3, r3, #26
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	e01e      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x18c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ff69 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e004      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1a4>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	e018      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x1d6>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001fc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e004      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d106      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ff38 	bl	8000e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe ff1c 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x214>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe ff11 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	e01e      	b.n	8002062 <HAL_ADC_ConfigChannel+0x252>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff06 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002042:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800204a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e004      	b.n	8002060 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_ConfigChannel+0x26a>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	e018      	b.n	80020ac <HAL_ADC_ConfigChannel+0x29c>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800208e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002092:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002096:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800209e:	2320      	movs	r3, #32
 80020a0:	e004      	b.n	80020ac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fed5 	bl	8000e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2102      	movs	r1, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe feb9 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x2da>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe feae 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	e01e      	b.n	8002128 <HAL_ADC_ConfigChannel+0x318>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fea3 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800210c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e004      	b.n	8002126 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800211c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x330>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	e014      	b.n	800216a <HAL_ADC_ConfigChannel+0x35a>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800214e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e004      	b.n	800216a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002160:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800216a:	429a      	cmp	r2, r3
 800216c:	d106      	bne.n	800217c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	2102      	movs	r1, #2
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fe76 	bl	8000e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2103      	movs	r1, #3
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fe5a 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x398>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2103      	movs	r1, #3
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fe4f 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 021f 	and.w	r2, r3, #31
 80021a6:	e017      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x3c8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2103      	movs	r1, #3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe44 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80021c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80021ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x3e0>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	e011      	b.n	8002214 <HAL_ADC_ConfigChannel+0x404>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80021fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002200:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800220c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002214:	429a      	cmp	r2, r3
 8002216:	d106      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	2103      	movs	r1, #3
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fe21 	bl	8000e68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe ff56 	bl	80010dc <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8140 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	461a      	mov	r2, r3
 8002246:	f7fe fea7 	bl	8000f98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4a8f      	ldr	r2, [pc, #572]	@ (800248c <HAL_ADC_ConfigChannel+0x67c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	f040 8131 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10b      	bne.n	800227e <HAL_ADC_ConfigChannel+0x46e>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0e9b      	lsrs	r3, r3, #26
 800226c:	3301      	adds	r3, #1
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2b09      	cmp	r3, #9
 8002274:	bf94      	ite	ls
 8002276:	2301      	movls	r3, #1
 8002278:	2300      	movhi	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	e019      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x4a2>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800228c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800229a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d079      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x4c2>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d0:	e015      	b.n	80022fe <HAL_ADC_ConfigChannel+0x4ee>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80022ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	069b      	lsls	r3, r3, #26
 80022fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_ADC_ConfigChannel+0x50e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	e017      	b.n	800234e <HAL_ADC_ConfigChannel+0x53e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800232c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e003      	b.n	8002342 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800233a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	ea42 0103 	orr.w	r1, r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x564>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	3301      	adds	r3, #1
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	051b      	lsls	r3, r3, #20
 8002372:	e018      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x596>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e003      	b.n	8002398 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a6:	430b      	orrs	r3, r1
 80023a8:	e081      	b.n	80024ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x5b6>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c4:	e015      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x5e2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x602>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	3301      	adds	r3, #1
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	e017      	b.n	8002442 <HAL_ADC_ConfigChannel+0x632>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	61bb      	str	r3, [r7, #24]
  return result;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	ea42 0103 	orr.w	r1, r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10d      	bne.n	800246e <HAL_ADC_ConfigChannel+0x65e>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	3301      	adds	r3, #1
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1e      	subs	r3, #30
 8002466:	051b      	lsls	r3, r3, #20
 8002468:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800246c:	e01e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x69c>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	60fb      	str	r3, [r7, #12]
  return result;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e006      	b.n	8002498 <HAL_ADC_ConfigChannel+0x688>
 800248a:	bf00      	nop
 800248c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	051b      	lsls	r3, r3, #20
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7fe fd45 	bl	8000f42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b44      	ldr	r3, [pc, #272]	@ (80025d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d07a      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c4:	4843      	ldr	r0, [pc, #268]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80024c6:	f7fe fc87 	bl	8000dd8 <LL_ADC_GetCommonPathInternalCh>
 80024ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a41      	ldr	r2, [pc, #260]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d12c      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d126      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3c      	ldr	r2, [pc, #240]	@ (80025dc <HAL_ADC_ConfigChannel+0x7cc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x6e8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7d0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d15d      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002500:	4619      	mov	r1, r3
 8002502:	4834      	ldr	r0, [pc, #208]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002504:	f7fe fc55 	bl	8000db2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002508:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	4a36      	ldr	r2, [pc, #216]	@ (80025e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002522:	e002      	b.n	800252a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3b01      	subs	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002530:	e040      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2d      	ldr	r2, [pc, #180]	@ (80025ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d118      	bne.n	800256e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800253c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d112      	bne.n	800256e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a23      	ldr	r2, [pc, #140]	@ (80025dc <HAL_ADC_ConfigChannel+0x7cc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_ADC_ConfigChannel+0x74c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a22      	ldr	r2, [pc, #136]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d12d      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800255c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002560:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002564:	4619      	mov	r1, r3
 8002566:	481b      	ldr	r0, [pc, #108]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002568:	f7fe fc23 	bl	8000db2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800256c:	e024      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1f      	ldr	r2, [pc, #124]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d120      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800257c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d11a      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a14      	ldr	r2, [pc, #80]	@ (80025dc <HAL_ADC_ConfigChannel+0x7cc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d115      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800258e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002592:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002596:	4619      	mov	r1, r3
 8002598:	480e      	ldr	r0, [pc, #56]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7c4>)
 800259a:	f7fe fc0a 	bl	8000db2 <LL_ADC_SetCommonPathInternalCh>
 800259e:	e00c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80025b2:	e002      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	37d8      	adds	r7, #216	@ 0xd8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	80080000 	.word	0x80080000
 80025d4:	50040300 	.word	0x50040300
 80025d8:	c7520000 	.word	0xc7520000
 80025dc:	50040000 	.word	0x50040000
 80025e0:	50040200 	.word	0x50040200
 80025e4:	20000000 	.word	0x20000000
 80025e8:	053e2d63 	.word	0x053e2d63
 80025ec:	cb840000 	.word	0xcb840000
 80025f0:	80000001 	.word	0x80000001

080025f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fd69 	bl	80010dc <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d169      	bne.n	80026e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <ADC_Enable+0xfc>)
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e055      	b.n	80026e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fd38 	bl	80010b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002644:	482b      	ldr	r0, [pc, #172]	@ (80026f4 <ADC_Enable+0x100>)
 8002646:	f7fe fbc7 	bl	8000dd8 <LL_ADC_GetCommonPathInternalCh>
 800264a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800264c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002654:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <ADC_Enable+0x104>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	4a28      	ldr	r2, [pc, #160]	@ (80026fc <ADC_Enable+0x108>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800266e:	e002      	b.n	8002676 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3b01      	subs	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800267c:	f7fe fb7a 	bl	8000d74 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002682:	e028      	b.n	80026d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fd27 	bl	80010dc <LL_ADC_IsEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fd0b 	bl	80010b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269e:	f7fe fb69 	bl	8000d74 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d914      	bls.n	80026d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d00d      	beq.n	80026d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f043 0210 	orr.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e007      	b.n	80026e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d1cf      	bne.n	8002684 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	8000003f 	.word	0x8000003f
 80026f4:	50040300 	.word	0x50040300
 80026f8:	20000000 	.word	0x20000000
 80026fc:	053e2d63 	.word	0x053e2d63

08002700 <LL_ADC_IsEnabled>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <LL_ADC_IsEnabled+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_IsEnabled+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_ADC_REG_IsConversionOngoing>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d101      	bne.n	800273e <LL_ADC_REG_IsConversionOngoing+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b09f      	sub	sp, #124	@ 0x7c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e093      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027d6:	2300      	movs	r3, #0
 80027d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027da:	2300      	movs	r3, #0
 80027dc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a47      	ldr	r2, [pc, #284]	@ (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d102      	bne.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027e8:	4b46      	ldr	r3, [pc, #280]	@ (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e001      	b.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e072      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff87 	bl	8002726 <LL_ADC_REG_IsConversionOngoing>
 8002818:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff81 	bl	8002726 <LL_ADC_REG_IsConversionOngoing>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d154      	bne.n	80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800282a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800282c:	2b00      	cmp	r3, #0
 800282e:	d151      	bne.n	80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002830:	4b35      	ldr	r3, [pc, #212]	@ (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002832:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02c      	beq.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800284e:	035b      	lsls	r3, r3, #13
 8002850:	430b      	orrs	r3, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002856:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002858:	4829      	ldr	r0, [pc, #164]	@ (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800285a:	f7ff ff51 	bl	8002700 <LL_ADC_IsEnabled>
 800285e:	4604      	mov	r4, r0
 8002860:	4828      	ldr	r0, [pc, #160]	@ (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002862:	f7ff ff4d 	bl	8002700 <LL_ADC_IsEnabled>
 8002866:	4603      	mov	r3, r0
 8002868:	431c      	orrs	r4, r3
 800286a:	4828      	ldr	r0, [pc, #160]	@ (800290c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800286c:	f7ff ff48 	bl	8002700 <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	4323      	orrs	r3, r4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d137      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002880:	f023 030f 	bic.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	6811      	ldr	r1, [r2, #0]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	430a      	orrs	r2, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002892:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002894:	e028      	b.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800289e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a2:	4817      	ldr	r0, [pc, #92]	@ (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028a4:	f7ff ff2c 	bl	8002700 <LL_ADC_IsEnabled>
 80028a8:	4604      	mov	r4, r0
 80028aa:	4816      	ldr	r0, [pc, #88]	@ (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028ac:	f7ff ff28 	bl	8002700 <LL_ADC_IsEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	431c      	orrs	r4, r3
 80028b4:	4815      	ldr	r0, [pc, #84]	@ (800290c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028b6:	f7ff ff23 	bl	8002700 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4323      	orrs	r3, r4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d112      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028ca:	f023 030f 	bic.w	r3, r3, #15
 80028ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028d2:	e009      	b.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80028e6:	e000      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028f2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	377c      	adds	r7, #124	@ 0x7c
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	bf00      	nop
 8002900:	50040000 	.word	0x50040000
 8002904:	50040100 	.word	0x50040100
 8002908:	50040300 	.word	0x50040300
 800290c:	50040200 	.word	0x50040200

08002910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800292c:	4013      	ands	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800293c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002942:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	60d3      	str	r3, [r2, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800295c:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <__NVIC_GetPriorityGrouping+0x18>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 0307 	and.w	r3, r3, #7
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	2b00      	cmp	r3, #0
 8002984:	db0b      	blt.n	800299e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f003 021f 	and.w	r2, r3, #31
 800298c:	4907      	ldr	r1, [pc, #28]	@ (80029ac <__NVIC_EnableIRQ+0x38>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2001      	movs	r0, #1
 8002996:	fa00 f202 	lsl.w	r2, r0, r2
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000e100 	.word	0xe000e100

080029b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	db0a      	blt.n	80029da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	490c      	ldr	r1, [pc, #48]	@ (80029fc <__NVIC_SetPriority+0x4c>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	440b      	add	r3, r1
 80029d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d8:	e00a      	b.n	80029f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4908      	ldr	r1, [pc, #32]	@ (8002a00 <__NVIC_SetPriority+0x50>)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	3b04      	subs	r3, #4
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	440b      	add	r3, r1
 80029ee:	761a      	strb	r2, [r3, #24]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	@ 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f1c3 0307 	rsb	r3, r3, #7
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	bf28      	it	cs
 8002a22:	2304      	movcs	r3, #4
 8002a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d902      	bls.n	8002a34 <NVIC_EncodePriority+0x30>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3b03      	subs	r3, #3
 8002a32:	e000      	b.n	8002a36 <NVIC_EncodePriority+0x32>
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	401a      	ands	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	43d9      	mvns	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	4313      	orrs	r3, r2
         );
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	@ 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a7c:	d301      	bcc.n	8002a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00f      	b.n	8002aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a82:	4a0a      	ldr	r2, [pc, #40]	@ (8002aac <SysTick_Config+0x40>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f7ff ff8e 	bl	80029b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <SysTick_Config+0x40>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9a:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <SysTick_Config+0x40>)
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000e010 	.word	0xe000e010

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ff29 	bl	8002910 <__NVIC_SetPriorityGrouping>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad8:	f7ff ff3e 	bl	8002958 <__NVIC_GetPriorityGrouping>
 8002adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ff8e 	bl	8002a04 <NVIC_EncodePriority>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff5d 	bl	80029b0 <__NVIC_SetPriority>
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff31 	bl	8002974 <__NVIC_EnableIRQ>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffa2 	bl	8002a6c <SysTick_Config>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	e17f      	b.n	8002e44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8171 	beq.w	8002e3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d005      	beq.n	8002b74 <HAL_GPIO_Init+0x40>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d130      	bne.n	8002bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002baa:	2201      	movs	r2, #1
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 0201 	and.w	r2, r3, #1
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d118      	bne.n	8002c14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80ac 	beq.w	8002e3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cea:	4a5e      	ldr	r2, [pc, #376]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cfe:	4a5a      	ldr	r2, [pc, #360]	@ (8002e68 <HAL_GPIO_Init+0x334>)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d28:	d025      	beq.n	8002d76 <HAL_GPIO_Init+0x242>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e6c <HAL_GPIO_Init+0x338>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01f      	beq.n	8002d72 <HAL_GPIO_Init+0x23e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4e      	ldr	r2, [pc, #312]	@ (8002e70 <HAL_GPIO_Init+0x33c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0x23a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e74 <HAL_GPIO_Init+0x340>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_GPIO_Init+0x236>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4c      	ldr	r2, [pc, #304]	@ (8002e78 <HAL_GPIO_Init+0x344>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00d      	beq.n	8002d66 <HAL_GPIO_Init+0x232>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e7c <HAL_GPIO_Init+0x348>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <HAL_GPIO_Init+0x22e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4a      	ldr	r2, [pc, #296]	@ (8002e80 <HAL_GPIO_Init+0x34c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_GPIO_Init+0x22a>
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d5e:	2307      	movs	r3, #7
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x244>
 8002d76:	2300      	movs	r3, #0
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d88:	4937      	ldr	r1, [pc, #220]	@ (8002e68 <HAL_GPIO_Init+0x334>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d96:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dba:	4a32      	ldr	r2, [pc, #200]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dc0:	4b30      	ldr	r3, [pc, #192]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002de4:	4a27      	ldr	r2, [pc, #156]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dea:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e38:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <HAL_GPIO_Init+0x350>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f47f ae78 	bne.w	8002b44 <HAL_GPIO_Init+0x10>
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	48000400 	.word	0x48000400
 8002e70:	48000800 	.word	0x48000800
 8002e74:	48000c00 	.word	0x48000c00
 8002e78:	48001000 	.word	0x48001000
 8002e7c:	48001400 	.word	0x48001400
 8002e80:	48001800 	.word	0x48001800
 8002e84:	40010400 	.word	0x40010400

08002e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb2:	d130      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d038      	beq.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002eca:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ecc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2232      	movs	r2, #50	@ 0x32
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee8:	e002      	b.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef0:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efc:	d102      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f2      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d110      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e00f      	b.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d007      	beq.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f2c:	4a05      	ldr	r2, [pc, #20]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e3ca      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4b97      	ldr	r3, [pc, #604]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6c:	4b94      	ldr	r3, [pc, #592]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80e4 	beq.w	800314c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4a>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	f040 808b 	bne.w	80030a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8087 	bne.w	80030a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	4b89      	ldr	r3, [pc, #548]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x62>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e3a2      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4b82      	ldr	r3, [pc, #520]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_RCC_OscConfig+0x7c>
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_OscConfig+0x88>
 8002fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d223      	bcs.n	8003024 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd55 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e383      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff0:	4b73      	ldr	r3, [pc, #460]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a72      	ldr	r2, [pc, #456]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b70      	ldr	r3, [pc, #448]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	496d      	ldr	r1, [pc, #436]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	4b6c      	ldr	r3, [pc, #432]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4968      	ldr	r1, [pc, #416]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e025      	b.n	8003070 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003024:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4960      	ldr	r1, [pc, #384]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003042:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	495b      	ldr	r1, [pc, #364]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fd15 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e343      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003070:	f000 fc4a 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b52      	ldr	r3, [pc, #328]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	4950      	ldr	r1, [pc, #320]	@ (80031c4 <HAL_RCC_OscConfig+0x274>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	4a4e      	ldr	r2, [pc, #312]	@ (80031c8 <HAL_RCC_OscConfig+0x278>)
 800308e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003090:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <HAL_RCC_OscConfig+0x27c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fe1d 	bl	8000cd4 <HAL_InitTick>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d052      	beq.n	800314a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	e327      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d032      	beq.n	8003116 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b0:	4b43      	ldr	r3, [pc, #268]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a42      	ldr	r2, [pc, #264]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030bc:	f7fd fe5a 	bl	8000d74 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c4:	f7fd fe56 	bl	8000d74 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e310      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d6:	4b3a      	ldr	r3, [pc, #232]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a36      	ldr	r2, [pc, #216]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4931      	ldr	r1, [pc, #196]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	492c      	ldr	r1, [pc, #176]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
 8003114:	e01a      	b.n	800314c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003116:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a29      	ldr	r2, [pc, #164]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003122:	f7fd fe27 	bl	8000d74 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312a:	f7fd fe23 	bl	8000d74 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e2dd      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313c:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x1da>
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d074      	beq.n	8003242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x21a>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d10e      	bne.n	8003182 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d10b      	bne.n	8003182 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d064      	beq.n	8003240 <HAL_RCC_OscConfig+0x2f0>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d160      	bne.n	8003240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e2ba      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x24a>
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e026      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a2:	d115      	bne.n	80031d0 <HAL_RCC_OscConfig+0x280>
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a05      	ldr	r2, [pc, #20]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b03      	ldr	r3, [pc, #12]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a02      	ldr	r2, [pc, #8]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	0800603c 	.word	0x0800603c
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000004 	.word	0x20000004
 80031d0:	4ba0      	ldr	r3, [pc, #640]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9c      	ldr	r2, [pc, #624]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd fdc0 	bl	8000d74 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fd fdbc 	bl	8000d74 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e276      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	4b92      	ldr	r3, [pc, #584]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2a8>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd fdac 	bl	8000d74 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fd fda8 	bl	8000d74 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e262      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	4b88      	ldr	r3, [pc, #544]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d0>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d060      	beq.n	8003310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x310>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d119      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d116      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	4b7c      	ldr	r3, [pc, #496]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x328>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e23f      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b76      	ldr	r3, [pc, #472]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	4973      	ldr	r1, [pc, #460]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	e040      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d023      	beq.n	80032de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003296:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fd fd67 	bl	8000d74 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fd fd63 	bl	8000d74 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e21d      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b62      	ldr	r3, [pc, #392]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	495f      	ldr	r1, [pc, #380]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e018      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd fd43 	bl	8000d74 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fd fd3f 	bl	8000d74 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1f9      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03c      	beq.n	8003396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01c      	beq.n	800335e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003324:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332a:	4a4a      	ldr	r2, [pc, #296]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd fd1e 	bl	8000d74 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7fd fd1a 	bl	8000d74 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1d4      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x3ec>
 800335c:	e01b      	b.n	8003396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003364:	4a3b      	ldr	r2, [pc, #236]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fd fd01 	bl	8000d74 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7fd fcfd 	bl	8000d74 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1b7      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	4b32      	ldr	r3, [pc, #200]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ef      	bne.n	8003376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a6 	beq.w	80034f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033be:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c0:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d0:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7fd fcc4 	bl	8000d74 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fd fcc0 	bl	8000d74 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e17a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d8>
 8003416:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003426:	e029      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b05      	cmp	r3, #5
 800342e:	d115      	bne.n	800345c <HAL_RCC_OscConfig+0x50c>
 8003430:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	4a07      	ldr	r2, [pc, #28]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a03      	ldr	r2, [pc, #12]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003450:	e014      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
 800345c:	4b9c      	ldr	r3, [pc, #624]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	4a9b      	ldr	r2, [pc, #620]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800346c:	4b98      	ldr	r3, [pc, #608]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	4a97      	ldr	r2, [pc, #604]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fd fc76 	bl	8000d74 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fd fc72 	bl	8000d74 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e12a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b8b      	ldr	r3, [pc, #556]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ed      	beq.n	800348c <HAL_RCC_OscConfig+0x53c>
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fd fc5f 	bl	8000d74 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fc5b 	bl	8000d74 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e113      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	4b7f      	ldr	r3, [pc, #508]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ed      	bne.n	80034ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b7a      	ldr	r3, [pc, #488]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	4a79      	ldr	r2, [pc, #484]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80fe 	beq.w	80036f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	2b02      	cmp	r3, #2
 8003500:	f040 80d0 	bne.w	80036a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003504:	4b72      	ldr	r3, [pc, #456]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d130      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	3b01      	subs	r3, #1
 8003524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d127      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003534:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11f      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003544:	2a07      	cmp	r2, #7
 8003546:	bf14      	ite	ne
 8003548:	2201      	movne	r2, #1
 800354a:	2200      	moveq	r2, #0
 800354c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	4293      	cmp	r3, r2
 8003550:	d113      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d109      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d06e      	beq.n	8003658 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d069      	beq.n	8003654 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003580:	4b53      	ldr	r3, [pc, #332]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800358c:	4b50      	ldr	r3, [pc, #320]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0ad      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800359c:	4b4c      	ldr	r3, [pc, #304]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a8:	f7fd fbe4 	bl	8000d74 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fbe0 	bl	8000d74 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e09a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c2:	4b43      	ldr	r3, [pc, #268]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ce:	4b40      	ldr	r3, [pc, #256]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b40      	ldr	r3, [pc, #256]	@ (80036d4 <HAL_RCC_OscConfig+0x784>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035de:	3a01      	subs	r2, #1
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035e8:	0212      	lsls	r2, r2, #8
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0552      	lsls	r2, r2, #21
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035fc:	0852      	lsrs	r2, r2, #1
 80035fe:	3a01      	subs	r2, #1
 8003600:	0652      	lsls	r2, r2, #25
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003608:	0912      	lsrs	r2, r2, #4
 800360a:	0452      	lsls	r2, r2, #17
 800360c:	430a      	orrs	r2, r1
 800360e:	4930      	ldr	r1, [pc, #192]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003614:	4b2e      	ldr	r3, [pc, #184]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2d      	ldr	r2, [pc, #180]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800362c:	f7fd fba2 	bl	8000d74 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fd fb9e 	bl	8000d74 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e058      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b22      	ldr	r3, [pc, #136]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003652:	e050      	b.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04f      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d148      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003664:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a16      	ldr	r2, [pc, #88]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800367a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800367c:	f7fd fb7a 	bl	8000d74 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fb76 	bl	8000d74 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e030      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x734>
 80036a2:	e028      	b.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d023      	beq.n	80036f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80036b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fd fb5d 	bl	8000d74 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	e00c      	b.n	80036d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7fd fb59 	bl	8000d74 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d905      	bls.n	80036d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e013      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x7b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ec      	bne.n	80036be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_RCC_OscConfig+0x7b0>)
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4905      	ldr	r1, [pc, #20]	@ (8003700 <HAL_RCC_OscConfig+0x7b0>)
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_RCC_OscConfig+0x7b4>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
 80036f0:	e001      	b.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	feeefffc 	.word	0xfeeefffc

08003708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0e7      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b75      	ldr	r3, [pc, #468]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d910      	bls.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b72      	ldr	r3, [pc, #456]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4970      	ldr	r1, [pc, #448]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b6e      	ldr	r3, [pc, #440]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0cf      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b66      	ldr	r3, [pc, #408]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003764:	429a      	cmp	r2, r3
 8003766:	d908      	bls.n	800377a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b63      	ldr	r3, [pc, #396]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4960      	ldr	r1, [pc, #384]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04c      	beq.n	8003820 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b5a      	ldr	r3, [pc, #360]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d121      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0a6      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a6:	4b54      	ldr	r3, [pc, #336]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d115      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e09a      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037be:	4b4e      	ldr	r3, [pc, #312]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e08e      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e086      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037de:	4b46      	ldr	r3, [pc, #280]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4943      	ldr	r1, [pc, #268]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fd fac0 	bl	8000d74 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	e00a      	b.n	800380e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f7fd fabc 	bl	8000d74 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e06e      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	4b3a      	ldr	r3, [pc, #232]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 020c 	and.w	r2, r3, #12
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	429a      	cmp	r2, r3
 800381e:	d1eb      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003838:	429a      	cmp	r2, r3
 800383a:	d208      	bcs.n	800384e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b2e      	ldr	r3, [pc, #184]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	492b      	ldr	r1, [pc, #172]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d210      	bcs.n	800387e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 0207 	bic.w	r2, r3, #7
 8003864:	4923      	ldr	r1, [pc, #140]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386c:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e036      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388a:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4918      	ldr	r1, [pc, #96]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4910      	ldr	r1, [pc, #64]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038bc:	f000 f824 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	490b      	ldr	r1, [pc, #44]	@ (80038fc <HAL_RCC_ClockConfig+0x1f4>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	4a09      	ldr	r2, [pc, #36]	@ (8003900 <HAL_RCC_ClockConfig+0x1f8>)
 80038da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_ClockConfig+0x1fc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd f9f7 	bl	8000cd4 <HAL_InitTick>
 80038e6:	4603      	mov	r3, r0
 80038e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ea:	7afb      	ldrb	r3, [r7, #11]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	0800603c 	.word	0x0800603c
 8003900:	20000000 	.word	0x20000000
 8003904:	20000004 	.word	0x20000004

08003908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x34>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d121      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11e      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800393c:	4b34      	ldr	r3, [pc, #208]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003948:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e005      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003958:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003964:	4a2b      	ldr	r2, [pc, #172]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d102      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e004      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d101      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800398c:	4b23      	ldr	r3, [pc, #140]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x114>)
 800398e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d134      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003996:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0xa6>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d003      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0xac>
 80039ac:	e005      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x110>)
 80039b0:	617b      	str	r3, [r7, #20]
      break;
 80039b2:	e005      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x114>)
 80039b6:	617b      	str	r3, [r7, #20]
      break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	617b      	str	r3, [r7, #20]
      break;
 80039be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	3301      	adds	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ce:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	fb03 f202 	mul.w	r2, r3, r2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	0e5b      	lsrs	r3, r3, #25
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	3301      	adds	r3, #1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a00:	69bb      	ldr	r3, [r7, #24]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3724      	adds	r7, #36	@ 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08006054 	.word	0x08006054
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000000 	.word	0x20000000

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	0800604c 	.word	0x0800604c

08003a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a68:	f7ff ffda 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0adb      	lsrs	r3, r3, #11
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4904      	ldr	r1, [pc, #16]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800604c 	.word	0x0800604c

08003a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aa8:	f7ff f9ee 	bl	8002e88 <HAL_PWREx_GetVoltageRange>
 8003aac:	6178      	str	r0, [r7, #20]
 8003aae:	e014      	b.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b25      	ldr	r3, [pc, #148]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003abc:	4b22      	ldr	r3, [pc, #136]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ac8:	f7ff f9de 	bl	8002e88 <HAL_PWREx_GetVoltageRange>
 8003acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae0:	d10b      	bne.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	d919      	bls.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2ba0      	cmp	r3, #160	@ 0xa0
 8003aec:	d902      	bls.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aee:	2302      	movs	r3, #2
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e013      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af4:	2301      	movs	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e010      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b80      	cmp	r3, #128	@ 0x80
 8003afe:	d902      	bls.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b00:	2303      	movs	r3, #3
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e00a      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b80      	cmp	r3, #128	@ 0x80
 8003b0a:	d102      	bne.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e004      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b70      	cmp	r3, #112	@ 0x70
 8003b16:	d101      	bne.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 0207 	bic.w	r2, r3, #7
 8003b24:	4909      	ldr	r1, [pc, #36]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b2c:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40022000 	.word	0x40022000

08003b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d041      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b74:	d02a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b7a:	d824      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b86:	d81e      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b90:	d010      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b92:	e018      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b94:	4b86      	ldr	r3, [pc, #536]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a85      	ldr	r2, [pc, #532]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba0:	e015      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fabb 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb2:	e00c      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3320      	adds	r3, #32
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fba6 	bl	800430c <RCCEx_PLLSAI2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd4:	4b76      	ldr	r3, [pc, #472]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be2:	4973      	ldr	r1, [pc, #460]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d041      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c04:	d02a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c0a:	d824      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c16:	d81e      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c20:	d010      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c22:	e018      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c24:	4b62      	ldr	r3, [pc, #392]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a61      	ldr	r2, [pc, #388]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c30:	e015      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa73 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c42:	e00c      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3320      	adds	r3, #32
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fb5e 	bl	800430c <RCCEx_PLLSAI2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	74fb      	strb	r3, [r7, #19]
      break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c64:	4b52      	ldr	r3, [pc, #328]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c72:	494f      	ldr	r1, [pc, #316]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a0 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4b41      	ldr	r3, [pc, #260]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	4a40      	ldr	r2, [pc, #256]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd0:	f7fd f850 	bl	8000d74 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd f84c 	bl	8000d74 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cea:	e005      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d15c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01f      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	4a20      	ldr	r2, [pc, #128]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d48:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd f80b 	bl	8000d74 <HAL_GetTick>
 8003d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d60:	e00b      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd f807 	bl	8000d74 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d902      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	74fb      	strb	r3, [r7, #19]
            break;
 8003d78:	e006      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ec      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d9e:	4904      	ldr	r1, [pc, #16]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	4a9d      	ldr	r2, [pc, #628]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4b98      	ldr	r3, [pc, #608]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	4994      	ldr	r1, [pc, #592]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	498c      	ldr	r1, [pc, #560]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b87      	ldr	r3, [pc, #540]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	4983      	ldr	r1, [pc, #524]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e40:	4b7e      	ldr	r3, [pc, #504]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	497b      	ldr	r1, [pc, #492]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e62:	4b76      	ldr	r3, [pc, #472]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e70:	4972      	ldr	r1, [pc, #456]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e84:	4b6d      	ldr	r3, [pc, #436]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	496a      	ldr	r1, [pc, #424]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	4961      	ldr	r1, [pc, #388]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ec8:	4b5c      	ldr	r3, [pc, #368]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	4959      	ldr	r1, [pc, #356]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eea:	4b54      	ldr	r3, [pc, #336]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef8:	4950      	ldr	r1, [pc, #320]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	4948      	ldr	r1, [pc, #288]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f2e:	4b43      	ldr	r3, [pc, #268]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	493f      	ldr	r1, [pc, #252]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d028      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f50:	4b3a      	ldr	r3, [pc, #232]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5e:	4937      	ldr	r1, [pc, #220]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f70:	4b32      	ldr	r3, [pc, #200]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a31      	ldr	r2, [pc, #196]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7a:	60d3      	str	r3, [r2, #12]
 8003f7c:	e011      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f8c8 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d028      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fae:	4b23      	ldr	r3, [pc, #140]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	491f      	ldr	r1, [pc, #124]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd8:	60d3      	str	r3, [r2, #12]
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f899 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02b      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402a:	d109      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b03      	ldr	r3, [pc, #12]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a02      	ldr	r2, [pc, #8]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
 8004038:	e014      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004044:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f867 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800407e:	4928      	ldr	r1, [pc, #160]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408e:	d10d      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f844 	bl	8004124 <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d014      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	74bb      	strb	r3, [r7, #18]
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3320      	adds	r3, #32
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f925 	bl	800430c <RCCEx_PLLSAI2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040dc:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ea:	490d      	ldr	r1, [pc, #52]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800410e:	4904      	ldr	r1, [pc, #16]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004116:	7cbb      	ldrb	r3, [r7, #18]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004132:	4b75      	ldr	r3, [pc, #468]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800413e:	4b72      	ldr	r3, [pc, #456]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
       ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004156:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
       ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d047      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e044      	b.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d018      	beq.n	80041aa <RCCEx_PLLSAI1_Config+0x86>
 8004178:	2b03      	cmp	r3, #3
 800417a:	d825      	bhi.n	80041c8 <RCCEx_PLLSAI1_Config+0xa4>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <RCCEx_PLLSAI1_Config+0x62>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d009      	beq.n	8004198 <RCCEx_PLLSAI1_Config+0x74>
 8004184:	e020      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004186:	4b60      	ldr	r3, [pc, #384]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e01a      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b5b      	ldr	r3, [pc, #364]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e013      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041aa:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b6:	4b54      	ldr	r3, [pc, #336]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e004      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4944      	ldr	r1, [pc, #272]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d17d      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004200:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a40      	ldr	r2, [pc, #256]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fc fdb2 	bl	8000d74 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004214:	f7fc fdae 	bl	8000d74 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004228:	4b37      	ldr	r3, [pc, #220]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ef      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d160      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	0912      	lsrs	r2, r2, #4
 8004258:	0452      	lsls	r2, r2, #17
 800425a:	430a      	orrs	r2, r1
 800425c:	492a      	ldr	r1, [pc, #168]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]
 8004262:	e027      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d112      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004272:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	0211      	lsls	r1, r2, #8
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6912      	ldr	r2, [r2, #16]
 8004280:	0852      	lsrs	r2, r2, #1
 8004282:	3a01      	subs	r2, #1
 8004284:	0552      	lsls	r2, r2, #21
 8004286:	430a      	orrs	r2, r1
 8004288:	491f      	ldr	r1, [pc, #124]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
 800428e:	e011      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004298:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6952      	ldr	r2, [r2, #20]
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	430a      	orrs	r2, r1
 80042ae:	4916      	ldr	r1, [pc, #88]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fc fd58 	bl	8000d74 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c6:	e009      	b.n	80042dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c8:	f7fc fd54 	bl	8000d74 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
          break;
 80042da:	e005      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ef      	beq.n	80042c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	4904      	ldr	r1, [pc, #16]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800431a:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004326:	4b67      	ldr	r3, [pc, #412]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d10d      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
       ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800433e:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
       ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d047      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e044      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d018      	beq.n	8004392 <RCCEx_PLLSAI2_Config+0x86>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d825      	bhi.n	80043b0 <RCCEx_PLLSAI2_Config+0xa4>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d002      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x62>
 8004368:	2b02      	cmp	r3, #2
 800436a:	d009      	beq.n	8004380 <RCCEx_PLLSAI2_Config+0x74>
 800436c:	e020      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800436e:	4b55      	ldr	r3, [pc, #340]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11d      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e01a      	b.n	80043b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004380:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004390:	e013      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004392:	4b4c      	ldr	r3, [pc, #304]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800439e:	4b49      	ldr	r3, [pc, #292]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ae:	e006      	b.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e004      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043be:	bf00      	nop
    }

    if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c6:	4b3f      	ldr	r3, [pc, #252]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	430b      	orrs	r3, r1
 80043dc:	4939      	ldr	r1, [pc, #228]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d167      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043e8:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a35      	ldr	r2, [pc, #212]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f4:	f7fc fcbe 	bl	8000d74 <HAL_GetTick>
 80043f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043fa:	e009      	b.n	8004410 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043fc:	f7fc fcba 	bl	8000d74 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d902      	bls.n	8004410 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	73fb      	strb	r3, [r7, #15]
        break;
 800440e:	e005      	b.n	800441c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004410:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ef      	bne.n	80043fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d14a      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d111      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004428:	4b26      	ldr	r3, [pc, #152]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6892      	ldr	r2, [r2, #8]
 8004438:	0211      	lsls	r1, r2, #8
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	0912      	lsrs	r2, r2, #4
 8004440:	0452      	lsls	r2, r2, #17
 8004442:	430a      	orrs	r2, r1
 8004444:	491f      	ldr	r1, [pc, #124]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	614b      	str	r3, [r1, #20]
 800444a:	e011      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004454:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6892      	ldr	r2, [r2, #8]
 800445c:	0211      	lsls	r1, r2, #8
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6912      	ldr	r2, [r2, #16]
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	0652      	lsls	r2, r2, #25
 8004468:	430a      	orrs	r2, r1
 800446a:	4916      	ldr	r1, [pc, #88]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004470:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a13      	ldr	r2, [pc, #76]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fc fc7a 	bl	8000d74 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004484:	f7fc fc76 	bl	8000d74 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
          break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4904      	ldr	r1, [pc, #16]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000

080044c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e049      	b.n	800456e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc faae 	bl	8000a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 fb7a 	bl	8004c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e049      	b.n	800461c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f841 	bl	8004624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f000 fb23 	bl	8004c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <HAL_TIM_PWM_Start+0x24>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e03c      	b.n	80046d6 <HAL_TIM_PWM_Start+0x9e>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b04      	cmp	r3, #4
 8004660:	d109      	bne.n	8004676 <HAL_TIM_PWM_Start+0x3e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e02f      	b.n	80046d6 <HAL_TIM_PWM_Start+0x9e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d109      	bne.n	8004690 <HAL_TIM_PWM_Start+0x58>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e022      	b.n	80046d6 <HAL_TIM_PWM_Start+0x9e>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d109      	bne.n	80046aa <HAL_TIM_PWM_Start+0x72>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e015      	b.n	80046d6 <HAL_TIM_PWM_Start+0x9e>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x8c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e008      	b.n	80046d6 <HAL_TIM_PWM_Start+0x9e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e09c      	b.n	8004818 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0xb6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ec:	e023      	b.n	8004736 <HAL_TIM_PWM_Start+0xfe>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xc6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046fc:	e01b      	b.n	8004736 <HAL_TIM_PWM_Start+0xfe>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0xd6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800470c:	e013      	b.n	8004736 <HAL_TIM_PWM_Start+0xfe>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0xe6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800471c:	e00b      	b.n	8004736 <HAL_TIM_PWM_Start+0xfe>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b10      	cmp	r3, #16
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xf6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800472c:	e003      	b.n	8004736 <HAL_TIM_PWM_Start+0xfe>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fe74 	bl	800542c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <HAL_TIM_PWM_Start+0x1e8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_TIM_PWM_Start+0x13e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a34      	ldr	r2, [pc, #208]	@ (8004824 <HAL_TIM_PWM_Start+0x1ec>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_TIM_PWM_Start+0x13e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <HAL_TIM_PWM_Start+0x1f0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_TIM_PWM_Start+0x13e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a31      	ldr	r2, [pc, #196]	@ (800482c <HAL_TIM_PWM_Start+0x1f4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIM_PWM_Start+0x13e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2f      	ldr	r2, [pc, #188]	@ (8004830 <HAL_TIM_PWM_Start+0x1f8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_TIM_PWM_Start+0x142>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_TIM_PWM_Start+0x144>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800478e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a22      	ldr	r2, [pc, #136]	@ (8004820 <HAL_TIM_PWM_Start+0x1e8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x19e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a2:	d018      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x19e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a22      	ldr	r2, [pc, #136]	@ (8004834 <HAL_TIM_PWM_Start+0x1fc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x19e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a21      	ldr	r2, [pc, #132]	@ (8004838 <HAL_TIM_PWM_Start+0x200>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x19e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_TIM_PWM_Start+0x204>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x19e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a17      	ldr	r2, [pc, #92]	@ (8004824 <HAL_TIM_PWM_Start+0x1ec>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x19e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <HAL_TIM_PWM_Start+0x1f0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d115      	bne.n	8004802 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <HAL_TIM_PWM_Start+0x208>)
 80047de:	4013      	ands	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d015      	beq.n	8004814 <HAL_TIM_PWM_Start+0x1dc>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ee:	d011      	beq.n	8004814 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	e008      	b.n	8004814 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e000      	b.n	8004816 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40013400 	.word	0x40013400
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	00010007 	.word	0x00010007

08004844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800485e:	2302      	movs	r3, #2
 8004860:	e0ff      	b.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b14      	cmp	r3, #20
 800486e:	f200 80f0 	bhi.w	8004a52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004872:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	080048cd 	.word	0x080048cd
 800487c:	08004a53 	.word	0x08004a53
 8004880:	08004a53 	.word	0x08004a53
 8004884:	08004a53 	.word	0x08004a53
 8004888:	0800490d 	.word	0x0800490d
 800488c:	08004a53 	.word	0x08004a53
 8004890:	08004a53 	.word	0x08004a53
 8004894:	08004a53 	.word	0x08004a53
 8004898:	0800494f 	.word	0x0800494f
 800489c:	08004a53 	.word	0x08004a53
 80048a0:	08004a53 	.word	0x08004a53
 80048a4:	08004a53 	.word	0x08004a53
 80048a8:	0800498f 	.word	0x0800498f
 80048ac:	08004a53 	.word	0x08004a53
 80048b0:	08004a53 	.word	0x08004a53
 80048b4:	08004a53 	.word	0x08004a53
 80048b8:	080049d1 	.word	0x080049d1
 80048bc:	08004a53 	.word	0x08004a53
 80048c0:	08004a53 	.word	0x08004a53
 80048c4:	08004a53 	.word	0x08004a53
 80048c8:	08004a11 	.word	0x08004a11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fa3a 	bl	8004d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0208 	orr.w	r2, r2, #8
 80048e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0204 	bic.w	r2, r2, #4
 80048f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6999      	ldr	r1, [r3, #24]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	619a      	str	r2, [r3, #24]
      break;
 800490a:	e0a5      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 faaa 	bl	8004e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6999      	ldr	r1, [r3, #24]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	021a      	lsls	r2, r3, #8
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	619a      	str	r2, [r3, #24]
      break;
 800494c:	e084      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fb13 	bl	8004f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0208 	orr.w	r2, r2, #8
 8004968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0204 	bic.w	r2, r2, #4
 8004978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69d9      	ldr	r1, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	61da      	str	r2, [r3, #28]
      break;
 800498c:	e064      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fb7b 	bl	8005090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69d9      	ldr	r1, [r3, #28]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	021a      	lsls	r2, r3, #8
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	61da      	str	r2, [r3, #28]
      break;
 80049ce:	e043      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fbc4 	bl	8005164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a0e:	e023      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fc08 	bl	800522c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a50:	e002      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
      break;
 8004a56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop

08004a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIM_ConfigClockSource+0x1c>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e0b6      	b.n	8004bf6 <HAL_TIM_ConfigClockSource+0x18a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac4:	d03e      	beq.n	8004b44 <HAL_TIM_ConfigClockSource+0xd8>
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aca:	f200 8087 	bhi.w	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad2:	f000 8086 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x176>
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d87f      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004adc:	2b70      	cmp	r3, #112	@ 0x70
 8004ade:	d01a      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0xaa>
 8004ae0:	2b70      	cmp	r3, #112	@ 0x70
 8004ae2:	d87b      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004ae4:	2b60      	cmp	r3, #96	@ 0x60
 8004ae6:	d050      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x11e>
 8004ae8:	2b60      	cmp	r3, #96	@ 0x60
 8004aea:	d877      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004aec:	2b50      	cmp	r3, #80	@ 0x50
 8004aee:	d03c      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xfe>
 8004af0:	2b50      	cmp	r3, #80	@ 0x50
 8004af2:	d873      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d058      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x13e>
 8004af8:	2b40      	cmp	r3, #64	@ 0x40
 8004afa:	d86f      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004afc:	2b30      	cmp	r3, #48	@ 0x30
 8004afe:	d064      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15e>
 8004b00:	2b30      	cmp	r3, #48	@ 0x30
 8004b02:	d86b      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d060      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15e>
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d867      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d05c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15e>
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d05a      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15e>
 8004b14:	e062      	b.n	8004bdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b26:	f000 fc61 	bl	80053ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	609a      	str	r2, [r3, #8]
      break;
 8004b42:	e04f      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	f000 fc4a 	bl	80053ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b66:	609a      	str	r2, [r3, #8]
      break;
 8004b68:	e03c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	461a      	mov	r2, r3
 8004b78:	f000 fbbe 	bl	80052f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2150      	movs	r1, #80	@ 0x50
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fc17 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004b88:	e02c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b96:	461a      	mov	r2, r3
 8004b98:	f000 fbdd 	bl	8005356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2160      	movs	r1, #96	@ 0x60
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fc07 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004ba8:	e01c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f000 fb9e 	bl	80052f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2140      	movs	r1, #64	@ 0x40
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fbf7 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004bc8:	e00c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f000 fbee 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004bda:	e003      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e000      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a46      	ldr	r2, [pc, #280]	@ (8004d2c <TIM_Base_SetConfig+0x12c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1e:	d00f      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a43      	ldr	r2, [pc, #268]	@ (8004d30 <TIM_Base_SetConfig+0x130>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a42      	ldr	r2, [pc, #264]	@ (8004d34 <TIM_Base_SetConfig+0x134>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a41      	ldr	r2, [pc, #260]	@ (8004d38 <TIM_Base_SetConfig+0x138>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a40      	ldr	r2, [pc, #256]	@ (8004d3c <TIM_Base_SetConfig+0x13c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a35      	ldr	r2, [pc, #212]	@ (8004d2c <TIM_Base_SetConfig+0x12c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01f      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d01b      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a32      	ldr	r2, [pc, #200]	@ (8004d30 <TIM_Base_SetConfig+0x130>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d017      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a31      	ldr	r2, [pc, #196]	@ (8004d34 <TIM_Base_SetConfig+0x134>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a30      	ldr	r2, [pc, #192]	@ (8004d38 <TIM_Base_SetConfig+0x138>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d3c <TIM_Base_SetConfig+0x13c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2e      	ldr	r2, [pc, #184]	@ (8004d40 <TIM_Base_SetConfig+0x140>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d44 <TIM_Base_SetConfig+0x144>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2c      	ldr	r2, [pc, #176]	@ (8004d48 <TIM_Base_SetConfig+0x148>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a16      	ldr	r2, [pc, #88]	@ (8004d2c <TIM_Base_SetConfig+0x12c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00f      	beq.n	8004cf8 <TIM_Base_SetConfig+0xf8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <TIM_Base_SetConfig+0x13c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <TIM_Base_SetConfig+0xf8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a17      	ldr	r2, [pc, #92]	@ (8004d40 <TIM_Base_SetConfig+0x140>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <TIM_Base_SetConfig+0xf8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a16      	ldr	r2, [pc, #88]	@ (8004d44 <TIM_Base_SetConfig+0x144>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	@ (8004d48 <TIM_Base_SetConfig+0x148>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d103      	bne.n	8004d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d105      	bne.n	8004d1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	611a      	str	r2, [r3, #16]
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40013400 	.word	0x40013400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0201 	bic.w	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 0302 	bic.w	r3, r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e58 <TIM_OC1_SetConfig+0x10c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <TIM_OC1_SetConfig+0x110>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e60 <TIM_OC1_SetConfig+0x114>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a29      	ldr	r2, [pc, #164]	@ (8004e64 <TIM_OC1_SetConfig+0x118>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a28      	ldr	r2, [pc, #160]	@ (8004e68 <TIM_OC1_SetConfig+0x11c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10c      	bne.n	8004de6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <TIM_OC1_SetConfig+0x10c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e5c <TIM_OC1_SetConfig+0x110>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <TIM_OC1_SetConfig+0x114>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <TIM_OC1_SetConfig+0x118>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <TIM_OC1_SetConfig+0x11c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800

08004e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f023 0210 	bic.w	r2, r3, #16
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0320 	bic.w	r3, r3, #32
 8004eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a28      	ldr	r2, [pc, #160]	@ (8004f6c <TIM_OC2_SetConfig+0x100>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_OC2_SetConfig+0x6c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a27      	ldr	r2, [pc, #156]	@ (8004f70 <TIM_OC2_SetConfig+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10d      	bne.n	8004ef4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f6c <TIM_OC2_SetConfig+0x100>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <TIM_OC2_SetConfig+0x104>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <TIM_OC2_SetConfig+0x108>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f78 <TIM_OC2_SetConfig+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <TIM_OC2_SetConfig+0x110>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a27      	ldr	r2, [pc, #156]	@ (800507c <TIM_OC3_SetConfig+0xfc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC3_SetConfig+0x6a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a26      	ldr	r2, [pc, #152]	@ (8005080 <TIM_OC3_SetConfig+0x100>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1c      	ldr	r2, [pc, #112]	@ (800507c <TIM_OC3_SetConfig+0xfc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1b      	ldr	r2, [pc, #108]	@ (8005080 <TIM_OC3_SetConfig+0x100>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1a      	ldr	r2, [pc, #104]	@ (8005084 <TIM_OC3_SetConfig+0x104>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a19      	ldr	r2, [pc, #100]	@ (8005088 <TIM_OC3_SetConfig+0x108>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a18      	ldr	r2, [pc, #96]	@ (800508c <TIM_OC3_SetConfig+0x10c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d113      	bne.n	8005056 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800

08005090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <TIM_OC4_SetConfig+0xc0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00f      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a17      	ldr	r2, [pc, #92]	@ (8005154 <TIM_OC4_SetConfig+0xc4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <TIM_OC4_SetConfig+0xc8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a15      	ldr	r2, [pc, #84]	@ (800515c <TIM_OC4_SetConfig+0xcc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a14      	ldr	r2, [pc, #80]	@ (8005160 <TIM_OC4_SetConfig+0xd0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d109      	bne.n	8005128 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800511a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	019b      	lsls	r3, r3, #6
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	041b      	lsls	r3, r3, #16
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a17      	ldr	r2, [pc, #92]	@ (8005218 <TIM_OC5_SetConfig+0xb4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00f      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a16      	ldr	r2, [pc, #88]	@ (800521c <TIM_OC5_SetConfig+0xb8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <TIM_OC5_SetConfig+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <TIM_OC5_SetConfig+0xc0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a13      	ldr	r2, [pc, #76]	@ (8005228 <TIM_OC5_SetConfig+0xc4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d109      	bne.n	80051f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	621a      	str	r2, [r3, #32]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40013400 	.word	0x40013400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	051b      	lsls	r3, r3, #20
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <TIM_OC6_SetConfig+0xb8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a17      	ldr	r2, [pc, #92]	@ (80052e8 <TIM_OC6_SetConfig+0xbc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <TIM_OC6_SetConfig+0xc0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <TIM_OC6_SetConfig+0xc4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <TIM_OC6_SetConfig+0xc8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d109      	bne.n	80052bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 030a 	bic.w	r3, r3, #10
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f023 0210 	bic.w	r2, r3, #16
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	031b      	lsls	r3, r3, #12
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f043 0307 	orr.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	431a      	orrs	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	2201      	movs	r2, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e068      	b.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2d      	ldr	r2, [pc, #180]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005502:	d018      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1b      	ldr	r2, [pc, #108]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1a      	ldr	r2, [pc, #104]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a18      	ldr	r2, [pc, #96]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a14      	ldr	r2, [pc, #80]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800553c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e040      	b.n	800561c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb faa8 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	@ 0x24
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fae0 	bl	8005b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f825 	bl	8005624 <UART_SetConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e01b      	b.n	800561c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fb5f 	bl	8005cd8 <UART_CheckIdleState>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005628:	b08a      	sub	sp, #40	@ 0x28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	431a      	orrs	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	4313      	orrs	r3, r2
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4ba4      	ldr	r3, [pc, #656]	@ (80058e4 <UART_SetConfig+0x2c0>)
 8005654:	4013      	ands	r3, r2
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800565c:	430b      	orrs	r3, r1
 800565e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a99      	ldr	r2, [pc, #612]	@ (80058e8 <UART_SetConfig+0x2c4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568c:	4313      	orrs	r3, r2
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a90      	ldr	r2, [pc, #576]	@ (80058ec <UART_SetConfig+0x2c8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d126      	bne.n	80056fc <UART_SetConfig+0xd8>
 80056ae:	4b90      	ldr	r3, [pc, #576]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d81b      	bhi.n	80056f4 <UART_SetConfig+0xd0>
 80056bc:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <UART_SetConfig+0xa0>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056e5 	.word	0x080056e5
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056da:	e116      	b.n	800590a <UART_SetConfig+0x2e6>
 80056dc:	2302      	movs	r3, #2
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e2:	e112      	b.n	800590a <UART_SetConfig+0x2e6>
 80056e4:	2304      	movs	r3, #4
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e10e      	b.n	800590a <UART_SetConfig+0x2e6>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e10a      	b.n	800590a <UART_SetConfig+0x2e6>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fa:	e106      	b.n	800590a <UART_SetConfig+0x2e6>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a7c      	ldr	r2, [pc, #496]	@ (80058f4 <UART_SetConfig+0x2d0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d138      	bne.n	8005778 <UART_SetConfig+0x154>
 8005706:	4b7a      	ldr	r3, [pc, #488]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d82d      	bhi.n	8005770 <UART_SetConfig+0x14c>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <UART_SetConfig+0xf8>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005751 	.word	0x08005751
 8005720:	08005771 	.word	0x08005771
 8005724:	08005771 	.word	0x08005771
 8005728:	08005771 	.word	0x08005771
 800572c:	08005761 	.word	0x08005761
 8005730:	08005771 	.word	0x08005771
 8005734:	08005771 	.word	0x08005771
 8005738:	08005771 	.word	0x08005771
 800573c:	08005759 	.word	0x08005759
 8005740:	08005771 	.word	0x08005771
 8005744:	08005771 	.word	0x08005771
 8005748:	08005771 	.word	0x08005771
 800574c:	08005769 	.word	0x08005769
 8005750:	2300      	movs	r3, #0
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005756:	e0d8      	b.n	800590a <UART_SetConfig+0x2e6>
 8005758:	2302      	movs	r3, #2
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575e:	e0d4      	b.n	800590a <UART_SetConfig+0x2e6>
 8005760:	2304      	movs	r3, #4
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e0d0      	b.n	800590a <UART_SetConfig+0x2e6>
 8005768:	2308      	movs	r3, #8
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576e:	e0cc      	b.n	800590a <UART_SetConfig+0x2e6>
 8005770:	2310      	movs	r3, #16
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005776:	e0c8      	b.n	800590a <UART_SetConfig+0x2e6>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a5e      	ldr	r2, [pc, #376]	@ (80058f8 <UART_SetConfig+0x2d4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d125      	bne.n	80057ce <UART_SetConfig+0x1aa>
 8005782:	4b5b      	ldr	r3, [pc, #364]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800578c:	2b30      	cmp	r3, #48	@ 0x30
 800578e:	d016      	beq.n	80057be <UART_SetConfig+0x19a>
 8005790:	2b30      	cmp	r3, #48	@ 0x30
 8005792:	d818      	bhi.n	80057c6 <UART_SetConfig+0x1a2>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d00a      	beq.n	80057ae <UART_SetConfig+0x18a>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d814      	bhi.n	80057c6 <UART_SetConfig+0x1a2>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <UART_SetConfig+0x182>
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d008      	beq.n	80057b6 <UART_SetConfig+0x192>
 80057a4:	e00f      	b.n	80057c6 <UART_SetConfig+0x1a2>
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ac:	e0ad      	b.n	800590a <UART_SetConfig+0x2e6>
 80057ae:	2302      	movs	r3, #2
 80057b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b4:	e0a9      	b.n	800590a <UART_SetConfig+0x2e6>
 80057b6:	2304      	movs	r3, #4
 80057b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057bc:	e0a5      	b.n	800590a <UART_SetConfig+0x2e6>
 80057be:	2308      	movs	r3, #8
 80057c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c4:	e0a1      	b.n	800590a <UART_SetConfig+0x2e6>
 80057c6:	2310      	movs	r3, #16
 80057c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057cc:	e09d      	b.n	800590a <UART_SetConfig+0x2e6>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a4a      	ldr	r2, [pc, #296]	@ (80058fc <UART_SetConfig+0x2d8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d125      	bne.n	8005824 <UART_SetConfig+0x200>
 80057d8:	4b45      	ldr	r3, [pc, #276]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e4:	d016      	beq.n	8005814 <UART_SetConfig+0x1f0>
 80057e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e8:	d818      	bhi.n	800581c <UART_SetConfig+0x1f8>
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d00a      	beq.n	8005804 <UART_SetConfig+0x1e0>
 80057ee:	2b80      	cmp	r3, #128	@ 0x80
 80057f0:	d814      	bhi.n	800581c <UART_SetConfig+0x1f8>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <UART_SetConfig+0x1d8>
 80057f6:	2b40      	cmp	r3, #64	@ 0x40
 80057f8:	d008      	beq.n	800580c <UART_SetConfig+0x1e8>
 80057fa:	e00f      	b.n	800581c <UART_SetConfig+0x1f8>
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005802:	e082      	b.n	800590a <UART_SetConfig+0x2e6>
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e07e      	b.n	800590a <UART_SetConfig+0x2e6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e07a      	b.n	800590a <UART_SetConfig+0x2e6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e076      	b.n	800590a <UART_SetConfig+0x2e6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e072      	b.n	800590a <UART_SetConfig+0x2e6>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <UART_SetConfig+0x2dc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d12a      	bne.n	8005884 <UART_SetConfig+0x260>
 800582e:	4b30      	ldr	r3, [pc, #192]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800583c:	d01a      	beq.n	8005874 <UART_SetConfig+0x250>
 800583e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005842:	d81b      	bhi.n	800587c <UART_SetConfig+0x258>
 8005844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005848:	d00c      	beq.n	8005864 <UART_SetConfig+0x240>
 800584a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584e:	d815      	bhi.n	800587c <UART_SetConfig+0x258>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <UART_SetConfig+0x238>
 8005854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005858:	d008      	beq.n	800586c <UART_SetConfig+0x248>
 800585a:	e00f      	b.n	800587c <UART_SetConfig+0x258>
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e052      	b.n	800590a <UART_SetConfig+0x2e6>
 8005864:	2302      	movs	r3, #2
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e04e      	b.n	800590a <UART_SetConfig+0x2e6>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e04a      	b.n	800590a <UART_SetConfig+0x2e6>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e046      	b.n	800590a <UART_SetConfig+0x2e6>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e042      	b.n	800590a <UART_SetConfig+0x2e6>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <UART_SetConfig+0x2c4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d13a      	bne.n	8005904 <UART_SetConfig+0x2e0>
 800588e:	4b18      	ldr	r3, [pc, #96]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800589c:	d01a      	beq.n	80058d4 <UART_SetConfig+0x2b0>
 800589e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a2:	d81b      	bhi.n	80058dc <UART_SetConfig+0x2b8>
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	d00c      	beq.n	80058c4 <UART_SetConfig+0x2a0>
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ae:	d815      	bhi.n	80058dc <UART_SetConfig+0x2b8>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <UART_SetConfig+0x298>
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b8:	d008      	beq.n	80058cc <UART_SetConfig+0x2a8>
 80058ba:	e00f      	b.n	80058dc <UART_SetConfig+0x2b8>
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c2:	e022      	b.n	800590a <UART_SetConfig+0x2e6>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e01e      	b.n	800590a <UART_SetConfig+0x2e6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e01a      	b.n	800590a <UART_SetConfig+0x2e6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e016      	b.n	800590a <UART_SetConfig+0x2e6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e012      	b.n	800590a <UART_SetConfig+0x2e6>
 80058e4:	efff69f3 	.word	0xefff69f3
 80058e8:	40008000 	.word	0x40008000
 80058ec:	40013800 	.word	0x40013800
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40004800 	.word	0x40004800
 80058fc:	40004c00 	.word	0x40004c00
 8005900:	40005000 	.word	0x40005000
 8005904:	2310      	movs	r3, #16
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a9f      	ldr	r2, [pc, #636]	@ (8005b8c <UART_SetConfig+0x568>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d17a      	bne.n	8005a0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005914:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005918:	2b08      	cmp	r3, #8
 800591a:	d824      	bhi.n	8005966 <UART_SetConfig+0x342>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0x300>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005949 	.word	0x08005949
 8005928:	08005967 	.word	0x08005967
 800592c:	08005951 	.word	0x08005951
 8005930:	08005967 	.word	0x08005967
 8005934:	08005957 	.word	0x08005957
 8005938:	08005967 	.word	0x08005967
 800593c:	08005967 	.word	0x08005967
 8005940:	08005967 	.word	0x08005967
 8005944:	0800595f 	.word	0x0800595f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe f876 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 800594c:	61f8      	str	r0, [r7, #28]
        break;
 800594e:	e010      	b.n	8005972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005950:	4b8f      	ldr	r3, [pc, #572]	@ (8005b90 <UART_SetConfig+0x56c>)
 8005952:	61fb      	str	r3, [r7, #28]
        break;
 8005954:	e00d      	b.n	8005972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005956:	f7fd ffd7 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 800595a:	61f8      	str	r0, [r7, #28]
        break;
 800595c:	e009      	b.n	8005972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005962:	61fb      	str	r3, [r7, #28]
        break;
 8005964:	e005      	b.n	8005972 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005970:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80fb 	beq.w	8005b70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	429a      	cmp	r2, r3
 8005988:	d305      	bcc.n	8005996 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	429a      	cmp	r2, r3
 8005994:	d903      	bls.n	800599e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800599c:	e0e8      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	2200      	movs	r2, #0
 80059a2:	461c      	mov	r4, r3
 80059a4:	4615      	mov	r5, r2
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	022b      	lsls	r3, r5, #8
 80059b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059b4:	0222      	lsls	r2, r4, #8
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	0849      	lsrs	r1, r1, #1
 80059bc:	2000      	movs	r0, #0
 80059be:	4688      	mov	r8, r1
 80059c0:	4681      	mov	r9, r0
 80059c2:	eb12 0a08 	adds.w	sl, r2, r8
 80059c6:	eb43 0b09 	adc.w	fp, r3, r9
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	4650      	mov	r0, sl
 80059da:	4659      	mov	r1, fp
 80059dc:	f7fa fbf4 	bl	80001c8 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ee:	d308      	bcc.n	8005a02 <UART_SetConfig+0x3de>
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f6:	d204      	bcs.n	8005a02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e0b6      	b.n	8005b70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a08:	e0b2      	b.n	8005b70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a12:	d15e      	bne.n	8005ad2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d828      	bhi.n	8005a6e <UART_SetConfig+0x44a>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <UART_SetConfig+0x400>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a59 	.word	0x08005a59
 8005a30:	08005a6f 	.word	0x08005a6f
 8005a34:	08005a5f 	.word	0x08005a5f
 8005a38:	08005a6f 	.word	0x08005a6f
 8005a3c:	08005a6f 	.word	0x08005a6f
 8005a40:	08005a6f 	.word	0x08005a6f
 8005a44:	08005a67 	.word	0x08005a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fd fff6 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	61f8      	str	r0, [r7, #28]
        break;
 8005a4e:	e014      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fe f808 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8005a54:	61f8      	str	r0, [r7, #28]
        break;
 8005a56:	e010      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b4d      	ldr	r3, [pc, #308]	@ (8005b90 <UART_SetConfig+0x56c>)
 8005a5a:	61fb      	str	r3, [r7, #28]
        break;
 8005a5c:	e00d      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5e:	f7fd ff53 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8005a62:	61f8      	str	r0, [r7, #28]
        break;
 8005a64:	e009      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6a:	61fb      	str	r3, [r7, #28]
        break;
 8005a6c:	e005      	b.n	8005a7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d077      	beq.n	8005b70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005a      	lsls	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b0f      	cmp	r3, #15
 8005a9a:	d916      	bls.n	8005aca <UART_SetConfig+0x4a6>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa2:	d212      	bcs.n	8005aca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f023 030f 	bic.w	r3, r3, #15
 8005aac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	8afb      	ldrh	r3, [r7, #22]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	8afa      	ldrh	r2, [r7, #22]
 8005ac6:	60da      	str	r2, [r3, #12]
 8005ac8:	e052      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ad0:	e04e      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d827      	bhi.n	8005b2a <UART_SetConfig+0x506>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x4bc>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b0d 	.word	0x08005b0d
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	08005b2b 	.word	0x08005b2b
 8005af0:	08005b1b 	.word	0x08005b1b
 8005af4:	08005b2b 	.word	0x08005b2b
 8005af8:	08005b2b 	.word	0x08005b2b
 8005afc:	08005b2b 	.word	0x08005b2b
 8005b00:	08005b23 	.word	0x08005b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b04:	f7fd ff98 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005b08:	61f8      	str	r0, [r7, #28]
        break;
 8005b0a:	e014      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0c:	f7fd ffaa 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8005b10:	61f8      	str	r0, [r7, #28]
        break;
 8005b12:	e010      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	@ (8005b90 <UART_SetConfig+0x56c>)
 8005b16:	61fb      	str	r3, [r7, #28]
        break;
 8005b18:	e00d      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b1a:	f7fd fef5 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8005b1e:	61f8      	str	r0, [r7, #28]
        break;
 8005b20:	e009      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b26:	61fb      	str	r3, [r7, #28]
        break;
 8005b28:	e005      	b.n	8005b36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b34:	bf00      	nop
    }

    if (pclk != 0U)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d019      	beq.n	8005b70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	085a      	lsrs	r2, r3, #1
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	441a      	add	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	d909      	bls.n	8005b6a <UART_SetConfig+0x546>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5c:	d205      	bcs.n	8005b6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
 8005b68:	e002      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3728      	adds	r7, #40	@ 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40008000 	.word	0x40008000
 8005b90:	00f42400 	.word	0x00f42400

08005b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01a      	beq.n	8005caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c92:	d10a      	bne.n	8005caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b098      	sub	sp, #96	@ 0x60
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce8:	f7fb f844 	bl	8000d74 <HAL_GetTick>
 8005cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d12e      	bne.n	8005d5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f88c 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d021      	beq.n	8005d5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e062      	b.n	8005e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d149      	bne.n	8005dfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d70:	2200      	movs	r2, #0
 8005d72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f856 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d03c      	beq.n	8005dfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd4:	61fa      	str	r2, [r7, #28]
 8005dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	617b      	str	r3, [r7, #20]
   return(result);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e011      	b.n	8005e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3758      	adds	r7, #88	@ 0x58
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e38:	e04f      	b.n	8005eda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d04b      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fa ff97 	bl	8000d74 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e04e      	b.n	8005efa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d037      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b80      	cmp	r3, #128	@ 0x80
 8005e6e:	d034      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d031      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d110      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2208      	movs	r2, #8
 8005e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f838 	bl	8005f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2208      	movs	r2, #8
 8005e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e029      	b.n	8005efa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb4:	d111      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f81e 	bl	8005f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e00f      	b.n	8005efa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	bf0c      	ite	eq
 8005eea:	2301      	moveq	r3, #1
 8005eec:	2300      	movne	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d0a0      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b095      	sub	sp, #84	@ 0x54
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d118      	bne.n	8005faa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6979      	ldr	r1, [r7, #20]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fbe:	bf00      	nop
 8005fc0:	3754      	adds	r7, #84	@ 0x54
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <memset>:
 8005fca:	4402      	add	r2, r0
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d100      	bne.n	8005fd4 <memset+0xa>
 8005fd2:	4770      	bx	lr
 8005fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd8:	e7f9      	b.n	8005fce <memset+0x4>
	...

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4d0d      	ldr	r5, [pc, #52]	@ (8006014 <__libc_init_array+0x38>)
 8005fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8006018 <__libc_init_array+0x3c>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	4d0b      	ldr	r5, [pc, #44]	@ (800601c <__libc_init_array+0x40>)
 8005fee:	4c0c      	ldr	r4, [pc, #48]	@ (8006020 <__libc_init_array+0x44>)
 8005ff0:	f000 f818 	bl	8006024 <_init>
 8005ff4:	1b64      	subs	r4, r4, r5
 8005ff6:	10a4      	asrs	r4, r4, #2
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	0800608c 	.word	0x0800608c
 8006018:	0800608c 	.word	0x0800608c
 800601c:	0800608c 	.word	0x0800608c
 8006020:	08006090 	.word	0x08006090

08006024 <_init>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr

08006030 <_fini>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr
