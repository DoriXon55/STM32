
ADC_HOMEWORK_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008548  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080086d8  080086d8  000096d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800877c  0800877c  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  0800877c  0800877c  0000977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008784  08008784  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008784  08008784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008788  08008788  00009788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800878c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000068  080087f4  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080087f4  0000a3a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018565  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321a  00000000  00000000  000225fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00025818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001163  00000000  00000000  00026e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a854  00000000  00000000  00027fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019856  00000000  00000000  00052837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c032  00000000  00000000  0006c08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001780bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000678c  00000000  00000000  00178104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0017e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086c0 	.word	0x080086c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080086c0 	.word	0x080086c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <START_FUNCTIONS>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void START_FUNCTIONS(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000564:	2202      	movs	r2, #2
 8000566:	4907      	ldr	r1, [pc, #28]	@ (8000584 <START_FUNCTIONS+0x24>)
 8000568:	4807      	ldr	r0, [pc, #28]	@ (8000588 <START_FUNCTIONS+0x28>)
 800056a:	f001 f9fb 	bl	8001964 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4806      	ldr	r0, [pc, #24]	@ (800058c <START_FUNCTIONS+0x2c>)
 8000572:	f004 ff59 	bl	8005428 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <START_FUNCTIONS+0x2c>)
 800057a:	f004 ff55 	bl	8005428 <HAL_TIM_PWM_Start>

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000244 	.word	0x20000244
 8000588:	20000084 	.word	0x20000084
 800058c:	20000170 	.word	0x20000170

08000590 <__io_putchar>:

int __io_putchar(int ch)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d102      	bne.n	80005a4 <__io_putchar+0x14>
	{
		__io_putchar('\r');
 800059e:	200d      	movs	r0, #13
 80005a0:	f7ff fff6 	bl	8000590 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x2c>)
 80005ae:	f006 f889 	bl	80066c4 <HAL_UART_Transmit>
	return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200001bc 	.word	0x200001bc

080005c0 <blinking_frequency>:


void blinking_frequency(uint32_t pot_value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	uint32_t min_period = 100;
 80005c8:	2364      	movs	r3, #100	@ 0x64
 80005ca:	617b      	str	r3, [r7, #20]
	uint32_t max_period = 1000;
 80005cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d0:	613b      	str	r3, [r7, #16]

	uint32_t period = min_period + (pot_value * (max_period - min_period) / 4095);
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	fb03 f202 	mul.w	r2, r3, r2
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <blinking_frequency+0x4c>)
 80005e0:	fba3 1302 	umull	r1, r3, r3, r2
 80005e4:	1ad2      	subs	r2, r2, r3
 80005e6:	0852      	lsrs	r2, r2, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	0adb      	lsrs	r3, r3, #11
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, period);
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <blinking_frequency+0x50>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005fa:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <blinking_frequency+0x50>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	00100101 	.word	0x00100101
 8000610:	20000170 	.word	0x20000170

08000614 <led_brightness>:

void led_brightness(uint32_t light_value)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint32_t pwm_value = (light_value * TIM3->ARR) / 4095;
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <led_brightness+0x40>)
 800061e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	fb03 f202 	mul.w	r2, r3, r2
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <led_brightness+0x44>)
 8000628:	fba3 1302 	umull	r1, r3, r3, r2
 800062c:	1ad2      	subs	r2, r2, r3
 800062e:	0852      	lsrs	r2, r2, #1
 8000630:	4413      	add	r3, r2
 8000632:	0adb      	lsrs	r3, r3, #11
 8000634:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_value);
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <led_brightness+0x48>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_value);
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <led_brightness+0x48>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40000400 	.word	0x40000400
 8000658:	00100101 	.word	0x00100101
 800065c:	20000170 	.word	0x20000170

08000660 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uint32_t pot_value = adc_buffer[0];
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <HAL_ADC_ConvCpltCallback+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
	uint32_t light_value = adc_buffer[1];
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_ADC_ConvCpltCallback+0x34>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60bb      	str	r3, [r7, #8]

	blinking_frequency(pot_value);
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff ffa3 	bl	80005c0 <blinking_frequency>
	led_brightness(light_value);
 800067a:	68b8      	ldr	r0, [r7, #8]
 800067c:	f7ff ffca 	bl	8000614 <led_brightness>
	printf("Potentiometer: %lu, Light sensor: %lu\n", pot_value, light_value);
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	68f9      	ldr	r1, [r7, #12]
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <HAL_ADC_ConvCpltCallback+0x38>)
 8000686:	f007 f9ad 	bl	80079e4 <iprintf>

}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000244 	.word	0x20000244
 8000698:	080086d8 	.word	0x080086d8

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fd81 	bl	80011a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f812 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 fa0a 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ac:	f000 f9ea 	bl	8000a84 <MX_DMA_Init>
  MX_ADC1_Init();
 80006b0:	f000 f85e 	bl	8000770 <MX_ADC1_Init>
  MX_COMP1_Init();
 80006b4:	f000 f8e0 	bl	8000878 <MX_COMP1_Init>
  MX_DAC1_Init();
 80006b8:	f000 f90a 	bl	80008d0 <MX_DAC1_Init>
  MX_TIM3_Init();
 80006bc:	f000 f93a 	bl	8000934 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80006c0:	f000 f9b0 	bl	8000a24 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  START_FUNCTIONS();
 80006c4:	f7ff ff4c 	bl	8000560 <START_FUNCTIONS>
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <main+0x2c>

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	@ 0x58
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	@ 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 f9d7 	bl	8007a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f2:	f003 facf 	bl	8003c94 <HAL_PWREx_ControlVoltageScaling>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006fc:	f000 fa10 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000700:	2310      	movs	r3, #16
 8000702:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800070c:	2360      	movs	r3, #96	@ 0x60
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000714:	2301      	movs	r3, #1
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800071c:	2328      	movs	r3, #40	@ 0x28
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fb05 	bl	8003d40 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800073c:	f000 f9f0 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	2104      	movs	r1, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fecd 	bl	80044f8 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000764:	f000 f9dc 	bl	8000b20 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3758      	adds	r7, #88	@ 0x58
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000792:	4b36      	ldr	r3, [pc, #216]	@ (800086c <MX_ADC1_Init+0xfc>)
 8000794:	4a36      	ldr	r2, [pc, #216]	@ (8000870 <MX_ADC1_Init+0x100>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000798:	4b34      	ldr	r3, [pc, #208]	@ (800086c <MX_ADC1_Init+0xfc>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079e:	4b33      	ldr	r3, [pc, #204]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a4:	4b31      	ldr	r3, [pc, #196]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007aa:	4b30      	ldr	r3, [pc, #192]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007be:	2201      	movs	r2, #1
 80007c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c8:	4b28      	ldr	r3, [pc, #160]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007de:	2201      	movs	r2, #1
 80007e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f2:	481e      	ldr	r0, [pc, #120]	@ (800086c <MX_ADC1_Init+0xfc>)
 80007f4:	f000 ff66 	bl	80016c4 <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007fe:	f000 f98f 	bl	8000b20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4817      	ldr	r0, [pc, #92]	@ (800086c <MX_ADC1_Init+0xfc>)
 800080e:	f002 f901 	bl	8002a14 <HAL_ADCEx_MultiModeConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000818:	f000 f982 	bl	8000b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_ADC1_Init+0x104>)
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000820:	2306      	movs	r3, #6
 8000822:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000824:	2307      	movs	r3, #7
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000828:	237f      	movs	r3, #127	@ 0x7f
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082c:	2304      	movs	r3, #4
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_ADC1_Init+0xfc>)
 800083a:	f001 fb87 	bl	8001f4c <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000844:	f000 f96c 	bl	8000b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000848:	230c      	movs	r3, #12
 800084a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_ADC1_Init+0xfc>)
 8000856:	f001 fb79 	bl	8001f4c <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000860:	f000 f95e 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000084 	.word	0x20000084
 8000870:	50040000 	.word	0x50040000
 8000874:	04300002 	.word	0x04300002

08000878 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_COMP1_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_COMP1_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_COMP1_Init+0x50>)
 8000884:	2240      	movs	r2, #64	@ 0x40
 8000886:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_COMP1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_COMP1_Init+0x50>)
 8000890:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000894:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_COMP1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_COMP1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008b6:	f002 fa05 	bl	8002cc4 <HAL_COMP_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f92e 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000130 	.word	0x20000130
 80008cc:	40010200 	.word	0x40010200

080008d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2224      	movs	r2, #36	@ 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 f8d6 	bl	8007a8e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_DAC1_Init+0x5c>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_DAC1_Init+0x60>)
 80008e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <MX_DAC1_Init+0x5c>)
 80008ea:	f002 fbee 	bl	80030ca <HAL_DAC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008f4:	f000 f914 	bl	8000b20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000900:	2302      	movs	r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000904:	2301      	movs	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_DAC1_Init+0x5c>)
 8000914:	f002 fc5f 	bl	80031d6 <HAL_DAC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f8ff 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000015c 	.word	0x2000015c
 8000930:	40007400 	.word	0x40007400

08000934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	@ 0x38
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000968:	4a2d      	ldr	r2, [pc, #180]	@ (8000a20 <MX_TIM3_Init+0xec>)
 800096a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 800097a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 800098e:	f004 fc93 	bl	80052b8 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000998:	f000 f8c2 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009aa:	f005 f85f 	bl	8005a6c <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009b4:	f000 f8b4 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009b8:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009ba:	f004 fcd4 	bl	8005366 <HAL_TIM_PWM_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009c4:	f000 f8ac 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009d8:	f005 fd80 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009e2:	f000 f89d 	bl	8000b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009fe:	f004 ff21 	bl	8005844 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a08:	f000 f88a 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000a0e:	f000 f9ef 	bl	8000df0 <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3738      	adds	r7, #56	@ 0x38
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000170 	.word	0x20000170
 8000a20:	40000400 	.word	0x40000400

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <MX_USART2_UART_Init+0x5c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a68:	f005 fdde 	bl	8006628 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f855 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001bc 	.word	0x200001bc
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_DMA_Init+0x38>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <MX_DMA_Init+0x38>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_DMA_Init+0x38>)
 8000a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f002 fad9 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aac:	200b      	movs	r0, #11
 8000aae:	f002 faf2 	bl	8003096 <HAL_NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_GPIO_Init+0x5c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0ac      	sub	sp, #176	@ 0xb0
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2288      	movs	r2, #136	@ 0x88
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f006 ff7a 	bl	8007a8e <memset>
  if(hadc->Instance==ADC1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a40      	ldr	r2, [pc, #256]	@ (8000ca0 <HAL_ADC_MspInit+0x12c>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d179      	bne.n	8000c98 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ba8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000baa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 feb3 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000be0:	f7ff ff9e 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <HAL_ADC_MspInit+0x130>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca4 <HAL_ADC_MspInit+0x130>)
 8000bea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <HAL_ADC_MspInit+0x130>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <HAL_ADC_MspInit+0x130>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <HAL_ADC_MspInit+0x130>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <HAL_ADC_MspInit+0x130>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481e      	ldr	r0, [pc, #120]	@ (8000ca8 <HAL_ADC_MspInit+0x134>)
 8000c2e:	f002 fe79 	bl	8003924 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c34:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <HAL_ADC_MspInit+0x13c>)
 8000c36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c62:	2220      	movs	r2, #32
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c6c:	480f      	ldr	r0, [pc, #60]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c6e:	f002 fbe3 	bl	8003438 <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000c78:	f7ff ff52 	bl	8000b20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c80:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_ADC_MspInit+0x138>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	2012      	movs	r0, #18
 8000c8e:	f002 f9e6 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c92:	2012      	movs	r0, #18
 8000c94:	f002 f9ff 	bl	8003096 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c98:	bf00      	nop
 8000c9a:	37b0      	adds	r7, #176	@ 0xb0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	50040000 	.word	0x50040000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	200000e8 	.word	0x200000e8
 8000cb0:	40020008 	.word	0x40020008

08000cb4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_COMP_MspInit+0x94>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d133      	bne.n	8000d3e <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_COMP_MspInit+0x98>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <HAL_COMP_MspInit+0x98>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_COMP_MspInit+0x98>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_COMP_MspInit+0x98>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <HAL_COMP_MspInit+0x98>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_COMP_MspInit+0x98>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PC5     ------> COMP1_INP
    PB0     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d06:	2320      	movs	r3, #32
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <HAL_COMP_MspInit+0x9c>)
 8000d1a:	f002 fe03 	bl	8003924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP1;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <HAL_COMP_MspInit+0xa0>)
 8000d3a:	f002 fdf3 	bl	8003924 <HAL_GPIO_Init>

  /* USER CODE END COMP1_MspInit 1 */

  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010200 	.word	0x40010200
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000800 	.word	0x48000800
 8000d54:	48000400 	.word	0x48000400

08000d58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_DAC_MspInit+0x44>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d113      	bne.n	8000d92 <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_DAC_MspInit+0x48>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000da0 <HAL_DAC_MspInit+0x48>)
 8000d70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_DAC_MspInit+0x48>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	210a      	movs	r1, #10
 8000d86:	2036      	movs	r0, #54	@ 0x36
 8000d88:	f002 f969 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d8c:	2036      	movs	r0, #54	@ 0x36
 8000d8e:	f002 f982 	bl	8003096 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40007400 	.word	0x40007400
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d113      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	201d      	movs	r0, #29
 8000dd4:	f002 f943 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dd8:	201d      	movs	r0, #29
 8000dda:	f002 f95c 	bl	8003096 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40000400 	.word	0x40000400
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a11      	ldr	r2, [pc, #68]	@ (8000e54 <HAL_TIM_MspPostInit+0x64>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d11c      	bne.n	8000e4c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_TIM_MspPostInit+0x68>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_TIM_MspPostInit+0x68>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_TIM_MspPostInit+0x68>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e2a:	2340      	movs	r3, #64	@ 0x40
 8000e2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f002 fd6c 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40000400 	.word	0x40000400
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2288      	movs	r2, #136	@ 0x88
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 fe06 	bl	8007a8e <memset>
  if(huart->Instance==USART2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a25      	ldr	r2, [pc, #148]	@ (8000f1c <HAL_UART_MspInit+0xc0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d143      	bne.n	8000f14 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fd51 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea4:	f7ff fe3c 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <HAL_UART_MspInit+0xc4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <HAL_UART_MspInit+0xc4>)
 8000eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <HAL_UART_MspInit+0xc4>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	4a16      	ldr	r2, [pc, #88]	@ (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f002 fd10 	bl	8003924 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 11, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	210b      	movs	r1, #11
 8000f08:	2026      	movs	r0, #38	@ 0x26
 8000f0a:	f002 f8a8 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0e:	2026      	movs	r0, #38	@ 0x26
 8000f10:	f002 f8c1 	bl	8003096 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f14:	bf00      	nop
 8000f16:	37b0      	adds	r7, #176	@ 0xb0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <NMI_Handler+0x4>

08000f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7a:	f000 f969 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <DMA1_Channel1_IRQHandler+0x10>)
 8000f8a:	f002 fbec 	bl	8003766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000e8 	.word	0x200000e8

08000f98 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <ADC1_2_IRQHandler+0x10>)
 8000f9e:	f000 fd9d 	bl	8001adc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000084 	.word	0x20000084

08000fac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <TIM3_IRQHandler+0x10>)
 8000fb2:	f004 fb3f 	bl	8005634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000170 	.word	0x20000170

08000fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <USART2_IRQHandler+0x10>)
 8000fc6:	f005 fc07 	bl	80067d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001bc 	.word	0x200001bc

08000fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <TIM6_DAC_IRQHandler+0x10>)
 8000fda:	f002 f898 	bl	800310e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000015c 	.word	0x2000015c

08000fe8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
  }

  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e009      	b.n	8001048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff faa7 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf1      	blt.n	8001034 <_write+0x12>
  }
  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_close>:

int _close(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001082:	605a      	str	r2, [r3, #4]
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	@ (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f006 fd1a 	bl	8007b2c <__errno>
 80010f8:	4603      	mov	r3, r0
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20018000 	.word	0x20018000
 8001124:	00000400 	.word	0x00000400
 8001128:	2000024c 	.word	0x2000024c
 800112c:	200003a0 	.word	0x200003a0

08001130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <SystemInit+0x20>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <SystemInit+0x20>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800118c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f7ff ffea 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f006 fcd9 	bl	8007b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001186:	f7ff fa89 	bl	800069c <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800118c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001198:	0800878c 	.word	0x0800878c
  ldr r2, =_sbss
 800119c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011a0:	200003a0 	.word	0x200003a0

080011a4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC3_IRQHandler>

080011a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f001 ff49 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f80e 	bl	80011d8 <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	e001      	b.n	80011cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c8:	f7ff fcb0 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d023      	beq.n	8001234 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_InitTick+0x70>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_InitTick+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f001 ff55 	bl	80030b2 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10f      	bne.n	800122e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d809      	bhi.n	8001228 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f001 ff1f 	bl	800305e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_InitTick+0x74>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e007      	b.n	8001238 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e004      	b.n	8001238 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e001      	b.n	8001238 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	20000250 	.word	0x20000250

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000250 	.word	0x20000250

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3360      	adds	r3, #96	@ 0x60
 8001352:	461a      	mov	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <LL_ADC_SetOffset+0x44>)
 8001362:	4013      	ands	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	03fff000 	.word	0x03fff000

08001388 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3360      	adds	r3, #96	@ 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3360      	adds	r3, #96	@ 0x60
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3330      	adds	r3, #48	@ 0x30
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	211f      	movs	r1, #31
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	401a      	ands	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e9b      	lsrs	r3, r3, #26
 8001448:	f003 011f 	and.w	r1, r3, #31
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800148e:	b480      	push	{r7}
 8001490:	b087      	sub	sp, #28
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3314      	adds	r3, #20
 800149e:	461a      	mov	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	0e5b      	lsrs	r3, r3, #25
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	0d1b      	lsrs	r3, r3, #20
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2107      	movs	r1, #7
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	0d1b      	lsrs	r3, r3, #20
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	431a      	orrs	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0318 	and.w	r3, r3, #24
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001508:	40d9      	lsrs	r1, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	400b      	ands	r3, r1
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	431a      	orrs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	0007ffff 	.word	0x0007ffff

0800152c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6093      	str	r3, [r2, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800159c:	d101      	bne.n	80015a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <LL_ADC_IsEnabled+0x18>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <LL_ADC_IsEnabled+0x1a>
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800165e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001662:	f043 0204 	orr.w	r2, r3, #4
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b04      	cmp	r3, #4
 8001688:	d101      	bne.n	800168e <LL_ADC_REG_IsConversionOngoing+0x18>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e130      	b.n	8001940 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fa41 	bl	8000b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff3f 	bl	8001588 <LL_ADC_IsDeepPowerDownEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff25 	bl	8001564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff5a 	bl	80015d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff3e 	bl	80015b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001734:	4b84      	ldr	r3, [pc, #528]	@ (8001948 <HAL_ADC_Init+0x284>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	4a84      	ldr	r2, [pc, #528]	@ (800194c <HAL_ADC_Init+0x288>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	3301      	adds	r3, #1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff3c 	bl	80015d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176a:	f043 0210 	orr.w	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff75 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 800178c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80c9 	bne.w	800192e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 80c5 	bne.w	800192e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017ac:	f043 0202 	orr.w	r2, r3, #2
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff35 	bl	8001628 <LL_ADC_IsEnabled>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d115      	bne.n	80017f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c4:	4862      	ldr	r0, [pc, #392]	@ (8001950 <HAL_ADC_Init+0x28c>)
 80017c6:	f7ff ff2f 	bl	8001628 <LL_ADC_IsEnabled>
 80017ca:	4604      	mov	r4, r0
 80017cc:	4861      	ldr	r0, [pc, #388]	@ (8001954 <HAL_ADC_Init+0x290>)
 80017ce:	f7ff ff2b 	bl	8001628 <LL_ADC_IsEnabled>
 80017d2:	4603      	mov	r3, r0
 80017d4:	431c      	orrs	r4, r3
 80017d6:	4860      	ldr	r0, [pc, #384]	@ (8001958 <HAL_ADC_Init+0x294>)
 80017d8:	f7ff ff26 	bl	8001628 <LL_ADC_IsEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	4323      	orrs	r3, r4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4619      	mov	r1, r3
 80017ea:	485c      	ldr	r0, [pc, #368]	@ (800195c <HAL_ADC_Init+0x298>)
 80017ec:	f7ff fd74 	bl	80012d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7e5b      	ldrb	r3, [r3, #25]
 80017f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001800:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001806:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d106      	bne.n	800182c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	3b01      	subs	r3, #1
 8001824:	045b      	lsls	r3, r3, #17
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <HAL_ADC_Init+0x29c>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	430b      	orrs	r3, r1
 800185a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff1b 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 8001866:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d13d      	bne.n	80018ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d13a      	bne.n	80018ea <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001878:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001880:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001890:	f023 0302 	bic.w	r3, r3, #2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	69b9      	ldr	r1, [r7, #24]
 800189a:	430b      	orrs	r3, r1
 800189c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d118      	bne.n	80018da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018be:	4311      	orrs	r1, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018ca:	430a      	orrs	r2, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	e007      	b.n	80018ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10c      	bne.n	800190c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	f023 010f 	bic.w	r1, r3, #15
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	631a      	str	r2, [r3, #48]	@ 0x30
 800190a:	e007      	b.n	800191c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 020f 	bic.w	r2, r2, #15
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001920:	f023 0303 	bic.w	r3, r3, #3
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54
 800192c:	e007      	b.n	800193e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001932:	f043 0210 	orr.w	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800193e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3724      	adds	r7, #36	@ 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	053e2d63 	.word	0x053e2d63
 8001950:	50040000 	.word	0x50040000
 8001954:	50040100 	.word	0x50040100
 8001958:	50040200 	.word	0x50040200
 800195c:	50040300 	.word	0x50040300
 8001960:	fff0c007 	.word	0xfff0c007

08001964 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001970:	4853      	ldr	r0, [pc, #332]	@ (8001ac0 <HAL_ADC_Start_DMA+0x15c>)
 8001972:	f7ff fddb 	bl	800152c <LL_ADC_GetMultimode>
 8001976:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe7a 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 8093 	bne.w	8001ab0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_Start_DMA+0x34>
 8001994:	2302      	movs	r3, #2
 8001996:	e08e      	b.n	8001ab6 <HAL_ADC_Start_DMA+0x152>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a47      	ldr	r2, [pc, #284]	@ (8001ac4 <HAL_ADC_Start_DMA+0x160>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d008      	beq.n	80019bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d002      	beq.n	80019bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d172      	bne.n	8001aa2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 feb7 	bl	8002730 <ADC_Enable>
 80019c2:	4603      	mov	r3, r0
 80019c4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d165      	bne.n	8001a98 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a38      	ldr	r2, [pc, #224]	@ (8001ac8 <HAL_ADC_Start_DMA+0x164>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d002      	beq.n	80019f0 <HAL_ADC_Start_DMA+0x8c>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e000      	b.n	80019f2 <HAL_ADC_Start_DMA+0x8e>
 80019f0:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <HAL_ADC_Start_DMA+0x168>)
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d002      	beq.n	8001a00 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f023 0206 	bic.w	r2, r3, #6
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a30:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <HAL_ADC_Start_DMA+0x16c>)
 8001a32:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_ADC_Start_DMA+0x170>)
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a40:	4a25      	ldr	r2, [pc, #148]	@ (8001ad8 <HAL_ADC_Start_DMA+0x174>)
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	221c      	movs	r2, #28
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0210 	orr.w	r2, r2, #16
 8001a62:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	3340      	adds	r3, #64	@ 0x40
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f001 fd90 	bl	80035a8 <HAL_DMA_Start_IT>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fddc 	bl	800164e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a96:	e00d      	b.n	8001ab4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001aa0:	e008      	b.n	8001ab4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001aae:	e001      	b.n	8001ab4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	50040300 	.word	0x50040300
 8001ac4:	50040200 	.word	0x50040200
 8001ac8:	50040100 	.word	0x50040100
 8001acc:	50040000 	.word	0x50040000
 8001ad0:	0800283d 	.word	0x0800283d
 8001ad4:	08002915 	.word	0x08002915
 8001ad8:	08002931 	.word	0x08002931

08001adc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001af8:	4882      	ldr	r0, [pc, #520]	@ (8001d04 <HAL_ADC_IRQHandler+0x228>)
 8001afa:	f7ff fd17 	bl	800152c <LL_ADC_GetMultimode>
 8001afe:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d017      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x5e>
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d012      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 ff67 	bl	8002a00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x72>
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8083 	beq.w	8001c60 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d07d      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fc32 	bl	80013ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d062      	beq.n	8001c52 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5d      	ldr	r2, [pc, #372]	@ (8001d08 <HAL_ADC_IRQHandler+0x22c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d002      	beq.n	8001b9c <HAL_ADC_IRQHandler+0xc0>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e000      	b.n	8001b9e <HAL_ADC_IRQHandler+0xc2>
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001d0c <HAL_ADC_IRQHandler+0x230>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d008      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d002      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	d104      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	e00c      	b.n	8001bdc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a50      	ldr	r2, [pc, #320]	@ (8001d08 <HAL_ADC_IRQHandler+0x22c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d002      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0xf6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	e000      	b.n	8001bd4 <HAL_ADC_IRQHandler+0xf8>
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <HAL_ADC_IRQHandler+0x230>)
 8001bd4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d135      	bne.n	8001c52 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d12e      	bne.n	8001c52 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fd3c 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d11a      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020c 	bic.w	r2, r2, #12
 8001c12:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d112      	bne.n	8001c52 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c38:	e00b      	b.n	8001c52 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fd04 	bl	8000660 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x198>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 809f 	beq.w	8001dbe <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8099 	beq.w	8001dbe <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fbdd 	bl	8001468 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001cae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fb98 	bl	80013ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <HAL_ADC_IRQHandler+0x22c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d002      	beq.n	8001ccc <HAL_ADC_IRQHandler+0x1f0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e000      	b.n	8001cce <HAL_ADC_IRQHandler+0x1f2>
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_ADC_IRQHandler+0x230>)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d008      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b07      	cmp	r3, #7
 8001ce6:	d104      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	e013      	b.n	8001d1a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_ADC_IRQHandler+0x22c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x234>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e007      	b.n	8001d12 <HAL_ADC_IRQHandler+0x236>
 8001d02:	bf00      	nop
 8001d04:	50040300 	.word	0x50040300
 8001d08:	50040100 	.word	0x50040100
 8001d0c:	50040000 	.word	0x50040000
 8001d10:	4b7d      	ldr	r3, [pc, #500]	@ (8001f08 <HAL_ADC_IRQHandler+0x42c>)
 8001d12:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d047      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x25e>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03f      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d13a      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d44:	2b40      	cmp	r3, #64	@ 0x40
 8001d46:	d133      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d12e      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fca0 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11a      	bne.n	8001d98 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d70:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d112      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d96:	e00b      	b.n	8001db0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fdfd 	bl	80029b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2260      	movs	r2, #96	@ 0x60
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d011      	beq.n	8001dec <HAL_ADC_IRQHandler+0x310>
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8a0 	bl	8001f24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x340>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00d      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fde3 	bl	80029d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <HAL_ADC_IRQHandler+0x370>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fdd5 	bl	80029ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d036      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x3e8>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d031      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6c:	e014      	b.n	8001e98 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e74:	4825      	ldr	r0, [pc, #148]	@ (8001f0c <HAL_ADC_IRQHandler+0x430>)
 8001e76:	f7ff fb67 	bl	8001548 <LL_ADC_GetMultiDMATransfer>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00b      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e84:	e008      	b.n	8001e98 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10e      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f83e 	bl	8001f38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d018      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x424>
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f043 0208 	orr.w	r2, r3, #8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fd62 	bl	80029c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	@ 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	50040000 	.word	0x50040000
 8001f0c:	50040300 	.word	0x50040300

08001f10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0b6      	sub	sp, #216	@ 0xd8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x22>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e3c9      	b.n	8002702 <HAL_ADC_ConfigChannel+0x7b6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fb7b 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 83aa 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d824      	bhi.n	8001fe2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	3b02      	subs	r3, #2
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d81b      	bhi.n	8001fda <HAL_ADC_ConfigChannel+0x8e>
 8001fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <HAL_ADC_ConfigChannel+0x5c>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fc1 	.word	0x08001fc1
 8001fb0:	08001fc9 	.word	0x08001fc9
 8001fb4:	08001fd1 	.word	0x08001fd1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fbe:	e010      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fc6:	e00c      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001fc8:	2318      	movs	r3, #24
 8001fca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fce:	e008      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fd8:	e003      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001fda:	2306      	movs	r3, #6
 8001fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fe0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ff0:	f7ff fa0e 	bl	8001410 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fb3c 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001ffe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fb48 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 800200c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 81a4 	bne.w	8002362 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800201a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 819f 	bne.w	8002362 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	461a      	mov	r2, r3
 8002032:	f7ff fa2c 	bl	800148e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d00a      	beq.n	800206e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6919      	ldr	r1, [r3, #16]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002068:	f7ff f96a 	bl	8001340 <LL_ADC_SetOffset>
 800206c:	e179      	b.n	8002362 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f987 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_ADC_ConfigChannel+0x14e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f97c 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	e01e      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x18c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f971 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80020cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1a4>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	e018      	b.n	8002122 <HAL_ADC_ConfigChannel+0x1d6>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800210c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	e004      	b.n	8002122 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002122:	429a      	cmp	r2, r3
 8002124:	d106      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f940 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f924 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x214>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2101      	movs	r1, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff f919 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	e01e      	b.n	800219e <HAL_ADC_ConfigChannel+0x252>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f90e 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800217e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e004      	b.n	800219c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x26a>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0e9b      	lsrs	r3, r3, #26
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	e018      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x29c>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80021ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80021d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e004      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80021de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d106      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f8dd 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2102      	movs	r1, #2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f8c1 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10a      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x2da>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2102      	movs	r1, #2
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f8b6 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	e01e      	b.n	8002264 <HAL_ADC_ConfigChannel+0x318>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2102      	movs	r1, #2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f8ab 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800224c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e004      	b.n	8002262 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_ConfigChannel+0x330>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	e014      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x35a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800228a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e004      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800229c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d106      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	2102      	movs	r1, #2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f87e 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2103      	movs	r1, #3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f862 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x398>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2103      	movs	r1, #3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f857 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 021f 	and.w	r2, r3, #31
 80022e2:	e017      	b.n	8002314 <HAL_ADC_ConfigChannel+0x3c8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2103      	movs	r1, #3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f84c 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800230a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_ConfigChannel+0x3e0>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	e011      	b.n	8002350 <HAL_ADC_ConfigChannel+0x404>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800233a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800233c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800233e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002350:	429a      	cmp	r2, r3
 8002352:	d106      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	2103      	movs	r1, #3
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f829 	bl	80013b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f95e 	bl	8001628 <LL_ADC_IsEnabled>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 8140 	bne.w	80025f4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	461a      	mov	r2, r3
 8002382:	f7ff f8af 	bl	80014e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a8f      	ldr	r2, [pc, #572]	@ (80025c8 <HAL_ADC_ConfigChannel+0x67c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	f040 8131 	bne.w	80025f4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x46e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2b09      	cmp	r3, #9
 80023b0:	bf94      	ite	ls
 80023b2:	2301      	movls	r3, #1
 80023b4:	2300      	movhi	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e019      	b.n	80023ee <HAL_ADC_ConfigChannel+0x4a2>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80023cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e003      	b.n	80023de <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80023d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d079      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_ADC_ConfigChannel+0x4c2>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	3301      	adds	r3, #1
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240c:	e015      	b.n	800243a <HAL_ADC_ConfigChannel+0x4ee>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800241c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e003      	b.n	8002432 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800242a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3301      	adds	r3, #1
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_ADC_ConfigChannel+0x50e>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	3301      	adds	r3, #1
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	e017      	b.n	800248a <HAL_ADC_ConfigChannel+0x53e>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800246c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e003      	b.n	800247e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	ea42 0103 	orr.w	r1, r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x564>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0e9b      	lsrs	r3, r3, #26
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	051b      	lsls	r3, r3, #20
 80024ae:	e018      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x596>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80024cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e2:	430b      	orrs	r3, r1
 80024e4:	e081      	b.n	80025ea <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x5b6>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	3301      	adds	r3, #1
 80024fa:	069b      	lsls	r3, r3, #26
 80024fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002500:	e015      	b.n	800252e <HAL_ADC_ConfigChannel+0x5e2>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800251e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	069b      	lsls	r3, r3, #26
 800252a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_ADC_ConfigChannel+0x602>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	e017      	b.n	800257e <HAL_ADC_ConfigChannel+0x632>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	61bb      	str	r3, [r7, #24]
  return result;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x65e>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	3301      	adds	r3, #1
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	051b      	lsls	r3, r3, #20
 80025a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	e01e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x69c>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	60fb      	str	r3, [r7, #12]
  return result;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e006      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x688>
 80025c6:	bf00      	nop
 80025c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	3b1e      	subs	r3, #30
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe ff4d 	bl	800148e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b44      	ldr	r3, [pc, #272]	@ (800270c <HAL_ADC_ConfigChannel+0x7c0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d07a      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002600:	4843      	ldr	r0, [pc, #268]	@ (8002710 <HAL_ADC_ConfigChannel+0x7c4>)
 8002602:	f7fe fe8f 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 8002606:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a41      	ldr	r2, [pc, #260]	@ (8002714 <HAL_ADC_ConfigChannel+0x7c8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d12c      	bne.n	800266e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d126      	bne.n	800266e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3c      	ldr	r2, [pc, #240]	@ (8002718 <HAL_ADC_ConfigChannel+0x7cc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x6e8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3b      	ldr	r2, [pc, #236]	@ (800271c <HAL_ADC_ConfigChannel+0x7d0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d15d      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002638:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800263c:	4619      	mov	r1, r3
 800263e:	4834      	ldr	r0, [pc, #208]	@ (8002710 <HAL_ADC_ConfigChannel+0x7c4>)
 8002640:	f7fe fe5d 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002644:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <HAL_ADC_ConfigChannel+0x7d4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	4a36      	ldr	r2, [pc, #216]	@ (8002724 <HAL_ADC_ConfigChannel+0x7d8>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800265e:	e002      	b.n	8002666 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3b01      	subs	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f9      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800266c:	e040      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2d      	ldr	r2, [pc, #180]	@ (8002728 <HAL_ADC_ConfigChannel+0x7dc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d118      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800267c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d112      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_ADC_ConfigChannel+0x7cc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x74c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a22      	ldr	r2, [pc, #136]	@ (800271c <HAL_ADC_ConfigChannel+0x7d0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d12d      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800269c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	4619      	mov	r1, r3
 80026a2:	481b      	ldr	r0, [pc, #108]	@ (8002710 <HAL_ADC_ConfigChannel+0x7c4>)
 80026a4:	f7fe fe2b 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a8:	e024      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1f      	ldr	r2, [pc, #124]	@ (800272c <HAL_ADC_ConfigChannel+0x7e0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d120      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d11a      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <HAL_ADC_ConfigChannel+0x7cc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d115      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026d2:	4619      	mov	r1, r3
 80026d4:	480e      	ldr	r0, [pc, #56]	@ (8002710 <HAL_ADC_ConfigChannel+0x7c4>)
 80026d6:	f7fe fe12 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
 80026da:	e00c      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026ee:	e002      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f0:	bf00      	nop
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002702:	4618      	mov	r0, r3
 8002704:	37d8      	adds	r7, #216	@ 0xd8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	80080000 	.word	0x80080000
 8002710:	50040300 	.word	0x50040300
 8002714:	c7520000 	.word	0xc7520000
 8002718:	50040000 	.word	0x50040000
 800271c:	50040200 	.word	0x50040200
 8002720:	20000000 	.word	0x20000000
 8002724:	053e2d63 	.word	0x053e2d63
 8002728:	cb840000 	.word	0xcb840000
 800272c:	80000001 	.word	0x80000001

08002730 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe ff71 	bl	8001628 <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d169      	bne.n	8002820 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	4b36      	ldr	r3, [pc, #216]	@ (800282c <ADC_Enable+0xfc>)
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e055      	b.n	8002822 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ff40 	bl	8001600 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002780:	482b      	ldr	r0, [pc, #172]	@ (8002830 <ADC_Enable+0x100>)
 8002782:	f7fe fdcf 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 8002786:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002790:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <ADC_Enable+0x104>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	4a28      	ldr	r2, [pc, #160]	@ (8002838 <ADC_Enable+0x108>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027aa:	e002      	b.n	80027b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fd5e 	bl	8001278 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027be:	e028      	b.n	8002812 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe ff2f 	bl	8001628 <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe ff13 	bl	8001600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027da:	f7fe fd4d 	bl	8001278 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d914      	bls.n	8002812 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d00d      	beq.n	8002812 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e007      	b.n	8002822 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d1cf      	bne.n	80027c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	8000003f 	.word	0x8000003f
 8002830:	50040300 	.word	0x50040300
 8002834:	20000000 	.word	0x20000000
 8002838:	053e2d63 	.word	0x053e2d63

0800283c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002852:	2b00      	cmp	r3, #0
 8002854:	d14b      	bne.n	80028ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d021      	beq.n	80028b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fdb8 	bl	80013ea <LL_ADC_REG_IsTriggerSourceSWStart>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12b      	bne.n	80028e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11f      	bne.n	80028e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80028b2:	e018      	b.n	80028e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d111      	bne.n	80028e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7fd feba 	bl	8000660 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028ec:	e00e      	b.n	800290c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff fb1c 	bl	8001f38 <HAL_ADC_ErrorCallback>
}
 8002900:	e004      	b.n	800290c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff faf4 	bl	8001f10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002942:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff faee 	bl	8001f38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <LL_ADC_IsEnabled>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <LL_ADC_IsEnabled+0x18>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <LL_ADC_IsEnabled+0x1a>
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_ADC_REG_IsConversionOngoing>:
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b04      	cmp	r3, #4
 800299c:	d101      	bne.n	80029a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b09f      	sub	sp, #124	@ 0x7c
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e093      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a47      	ldr	r2, [pc, #284]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a4c:	4b46      	ldr	r3, [pc, #280]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	e001      	b.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e072      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff87 	bl	800298a <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff81 	bl	800298a <LL_ADC_REG_IsConversionOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d154      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d151      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a94:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002a96:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d02c      	beq.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ab2:	035b      	lsls	r3, r3, #13
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002abc:	4829      	ldr	r0, [pc, #164]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002abe:	f7ff ff51 	bl	8002964 <LL_ADC_IsEnabled>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	4828      	ldr	r0, [pc, #160]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ac6:	f7ff ff4d 	bl	8002964 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	431c      	orrs	r4, r3
 8002ace:	4828      	ldr	r0, [pc, #160]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ad0:	f7ff ff48 	bl	8002964 <LL_ADC_IsEnabled>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d137      	bne.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ae4:	f023 030f 	bic.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	6811      	ldr	r1, [r2, #0]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002af8:	e028      	b.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b06:	4817      	ldr	r0, [pc, #92]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b08:	f7ff ff2c 	bl	8002964 <LL_ADC_IsEnabled>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	4816      	ldr	r0, [pc, #88]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b10:	f7ff ff28 	bl	8002964 <LL_ADC_IsEnabled>
 8002b14:	4603      	mov	r3, r0
 8002b16:	431c      	orrs	r4, r3
 8002b18:	4815      	ldr	r0, [pc, #84]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b1a:	f7ff ff23 	bl	8002964 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4323      	orrs	r3, r4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d112      	bne.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b2e:	f023 030f 	bic.w	r3, r3, #15
 8002b32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b34:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b36:	e009      	b.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b4a:	e000      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b56:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	377c      	adds	r7, #124	@ 0x7c
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	bf00      	nop
 8002b64:	50040000 	.word	0x50040000
 8002b68:	50040100 	.word	0x50040100
 8002b6c:	50040300 	.word	0x50040300
 8002b70:	50040200 	.word	0x50040200

08002b74 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4904      	ldr	r1, [pc, #16]	@ (8002b94 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40010400 	.word	0x40010400

08002b98 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <LL_EXTI_DisableIT_0_31+0x24>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <LL_EXTI_DisableIT_0_31+0x24>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4904      	ldr	r1, [pc, #16]	@ (8002be0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40010400 	.word	0x40010400

08002be4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	4904      	ldr	r1, [pc, #16]	@ (8002c08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40010400 	.word	0x40010400

08002c0c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40010400 	.word	0x40010400

08002c30 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4904      	ldr	r1, [pc, #16]	@ (8002c54 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]

}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40010400 	.word	0x40010400

08002c58 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40010400 	.word	0x40010400

08002c7c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4904      	ldr	r1, [pc, #16]	@ (8002ca0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6153      	str	r3, [r2, #20]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e0d1      	b.n	8002e84 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cee:	d102      	bne.n	8002cf6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e0c6      	b.n	8002e84 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d10:	4b5f      	ldr	r3, [pc, #380]	@ (8002e90 <HAL_COMP_Init+0x1cc>)
 8002d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d14:	4a5e      	ldr	r2, [pc, #376]	@ (8002e90 <HAL_COMP_Init+0x1cc>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002e90 <HAL_COMP_Init+0x1cc>)
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fd ffc3 	bl	8000cb4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d38:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <HAL_COMP_Init+0x1d0>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	6979      	ldr	r1, [r7, #20]
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7a:	d106      	bne.n	8002d8a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002d7c:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <HAL_COMP_Init+0x1d4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a45      	ldr	r2, [pc, #276]	@ (8002e98 <HAL_COMP_Init+0x1d4>)
 8002d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e005      	b.n	8002d96 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002d8a:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <HAL_COMP_Init+0x1d4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a42      	ldr	r2, [pc, #264]	@ (8002e98 <HAL_COMP_Init+0x1d4>)
 8002d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d94:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d016      	beq.n	8002dd2 <HAL_COMP_Init+0x10e>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002daa:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <HAL_COMP_Init+0x1d8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea0 <HAL_COMP_Init+0x1dc>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002dc4:	e002      	b.n	8002dcc <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <HAL_COMP_Init+0x1e0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d102      	bne.n	8002de2 <HAL_COMP_Init+0x11e>
 8002ddc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002de0:	e001      	b.n	8002de6 <HAL_COMP_Init+0x122>
 8002de2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002de6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d037      	beq.n	8002e64 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002e00:	6938      	ldr	r0, [r7, #16]
 8002e02:	f7ff ff03 	bl	8002c0c <LL_EXTI_EnableRisingTrig_0_31>
 8002e06:	e002      	b.n	8002e0e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002e08:	6938      	ldr	r0, [r7, #16]
 8002e0a:	f7ff ff11 	bl	8002c30 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002e1a:	6938      	ldr	r0, [r7, #16]
 8002e1c:	f7ff ff1c 	bl	8002c58 <LL_EXTI_EnableFallingTrig_0_31>
 8002e20:	e002      	b.n	8002e28 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002e22:	6938      	ldr	r0, [r7, #16]
 8002e24:	f7ff ff2a 	bl	8002c7c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8002e28:	6938      	ldr	r0, [r7, #16]
 8002e2a:	f7ff ff3b 	bl	8002ca4 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002e3a:	6938      	ldr	r0, [r7, #16]
 8002e3c:	f7ff fec0 	bl	8002bc0 <LL_EXTI_EnableEvent_0_31>
 8002e40:	e002      	b.n	8002e48 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002e42:	6938      	ldr	r0, [r7, #16]
 8002e44:	f7ff fece 	bl	8002be4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002e54:	6938      	ldr	r0, [r7, #16]
 8002e56:	f7ff fe8d 	bl	8002b74 <LL_EXTI_EnableIT_0_31>
 8002e5a:	e009      	b.n	8002e70 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002e5c:	6938      	ldr	r0, [r7, #16]
 8002e5e:	f7ff fe9b 	bl	8002b98 <LL_EXTI_DisableIT_0_31>
 8002e62:	e005      	b.n	8002e70 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002e64:	6938      	ldr	r0, [r7, #16]
 8002e66:	f7ff febd 	bl	8002be4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002e6a:	6938      	ldr	r0, [r7, #16]
 8002e6c:	f7ff fe94 	bl	8002b98 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	ff207d03 	.word	0xff207d03
 8002e98:	40010204 	.word	0x40010204
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	053e2d63 	.word	0x053e2d63
 8002ea4:	40010200 	.word	0x40010200

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	@ (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	@ (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	@ 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e014      	b.n	8003106 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	791b      	ldrb	r3, [r3, #4]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd fe33 	bl	8000d58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003124:	d120      	bne.n	8003168 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003134:	d118      	bne.n	8003168 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003150:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003160:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f82d 	bl	80031c2 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003176:	d120      	bne.n	80031ba <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003186:	d118      	bne.n	80031ba <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2204      	movs	r2, #4
 800318c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f043 0202 	orr.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80031a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f935 	bl	8003424 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	795b      	ldrb	r3, [r3, #5]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_DAC_ConfigChannel+0x1c>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e114      	b.n	800341c <HAL_DAC_ConfigChannel+0x246>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2202      	movs	r2, #2
 80031fc:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b04      	cmp	r3, #4
 8003204:	f040 8081 	bne.w	800330a <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003208:	f7fe f836 	bl	8001278 <HAL_GetTick>
 800320c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d140      	bne.n	8003296 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003214:	e018      	b.n	8003248 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003216:	f7fe f82f 	bl	8001278 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d911      	bls.n	8003248 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2203      	movs	r2, #3
 8003242:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0e9      	b.n	800341c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1df      	bne.n	8003216 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f7fe f81a 	bl	8001290 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	6992      	ldr	r2, [r2, #24]
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
 8003266:	e023      	b.n	80032b0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003268:	f7fe f806 	bl	8001278 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d90f      	bls.n	8003296 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327c:	2b00      	cmp	r3, #0
 800327e:	da0a      	bge.n	8003296 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f043 0208 	orr.w	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2203      	movs	r2, #3
 8003290:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0c2      	b.n	800341c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	dbe3      	blt.n	8003268 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fd fff5 	bl	8001290 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	6992      	ldr	r2, [r2, #24]
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	ea02 0103 	and.w	r1, r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	409a      	lsls	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	21ff      	movs	r1, #255	@ 0xff
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	ea02 0103 	and.w	r1, r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6a1a      	ldr	r2, [r3, #32]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d11d      	bne.n	800334e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	221f      	movs	r2, #31
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003354:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2207      	movs	r2, #7
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	431a      	orrs	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	400a      	ands	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	22c0      	movs	r2, #192	@ 0xc0
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e098      	b.n	800357c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	4b4d      	ldr	r3, [pc, #308]	@ (8003588 <HAL_DMA_Init+0x150>)
 8003452:	429a      	cmp	r2, r3
 8003454:	d80f      	bhi.n	8003476 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4b4b      	ldr	r3, [pc, #300]	@ (800358c <HAL_DMA_Init+0x154>)
 800345e:	4413      	add	r3, r2
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <HAL_DMA_Init+0x158>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <HAL_DMA_Init+0x15c>)
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40
 8003474:	e00e      	b.n	8003494 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b46      	ldr	r3, [pc, #280]	@ (8003598 <HAL_DMA_Init+0x160>)
 800347e:	4413      	add	r3, r2
 8003480:	4a43      	ldr	r2, [pc, #268]	@ (8003590 <HAL_DMA_Init+0x158>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a42      	ldr	r2, [pc, #264]	@ (800359c <HAL_DMA_Init+0x164>)
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ee:	d039      	beq.n	8003564 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	4a27      	ldr	r2, [pc, #156]	@ (8003594 <HAL_DMA_Init+0x15c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11a      	bne.n	8003530 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034fa:	4b29      	ldr	r3, [pc, #164]	@ (80035a0 <HAL_DMA_Init+0x168>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	f003 031c 	and.w	r3, r3, #28
 8003506:	210f      	movs	r1, #15
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	4924      	ldr	r1, [pc, #144]	@ (80035a0 <HAL_DMA_Init+0x168>)
 8003510:	4013      	ands	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003514:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <HAL_DMA_Init+0x168>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	f003 031c 	and.w	r3, r3, #28
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	491d      	ldr	r1, [pc, #116]	@ (80035a0 <HAL_DMA_Init+0x168>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
 800352e:	e019      	b.n	8003564 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003530:	4b1c      	ldr	r3, [pc, #112]	@ (80035a4 <HAL_DMA_Init+0x16c>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f003 031c 	and.w	r3, r3, #28
 800353c:	210f      	movs	r1, #15
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	4917      	ldr	r1, [pc, #92]	@ (80035a4 <HAL_DMA_Init+0x16c>)
 8003546:	4013      	ands	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800354a:	4b16      	ldr	r3, [pc, #88]	@ (80035a4 <HAL_DMA_Init+0x16c>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	f003 031c 	and.w	r3, r3, #28
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	4911      	ldr	r1, [pc, #68]	@ (80035a4 <HAL_DMA_Init+0x16c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40020407 	.word	0x40020407
 800358c:	bffdfff8 	.word	0xbffdfff8
 8003590:	cccccccd 	.word	0xcccccccd
 8003594:	40020000 	.word	0x40020000
 8003598:	bffdfbf8 	.word	0xbffdfbf8
 800359c:	40020400 	.word	0x40020400
 80035a0:	400200a8 	.word	0x400200a8
 80035a4:	400204a8 	.word	0x400204a8

080035a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_Start_IT+0x20>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e04b      	b.n	8003660 <HAL_DMA_Start_IT+0xb8>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d13a      	bne.n	8003652 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f95f 	bl	80038c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 020e 	orr.w	r2, r2, #14
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00f      	b.n	8003640 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 020a 	orr.w	r2, r2, #10
 800363e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e005      	b.n	800365e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d008      	beq.n	8003692 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e022      	b.n	80036d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 020e 	bic.w	r2, r2, #14
 80036a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f003 021c 	and.w	r2, r3, #28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d005      	beq.n	8003708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2204      	movs	r2, #4
 8003700:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e029      	b.n	800375c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020e 	bic.w	r2, r2, #14
 8003716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	f003 021c 	and.w	r2, r3, #28
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f202 	lsl.w	r2, r1, r2
 800373a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
    }
  }
  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f003 031c 	and.w	r3, r3, #28
 8003786:	2204      	movs	r2, #4
 8003788:	409a      	lsls	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d026      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x7a>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0204 	bic.w	r2, r2, #4
 80037b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f003 021c 	and.w	r2, r3, #28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	2104      	movs	r1, #4
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d071      	beq.n	80038ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037de:	e06c      	b.n	80038ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e4:	f003 031c 	and.w	r3, r3, #28
 80037e8:	2202      	movs	r2, #2
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02e      	beq.n	8003852 <HAL_DMA_IRQHandler+0xec>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d029      	beq.n	8003852 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 020a 	bic.w	r2, r2, #10
 800381a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	f003 021c 	and.w	r2, r3, #28
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	2102      	movs	r1, #2
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d038      	beq.n	80038ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003850:	e033      	b.n	80038ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f003 031c 	and.w	r3, r3, #28
 800385a:	2208      	movs	r2, #8
 800385c:	409a      	lsls	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x156>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d025      	beq.n	80038bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 020e 	bic.w	r2, r2, #14
 800387e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003884:	f003 021c 	and.w	r2, r3, #28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f202 	lsl.w	r2, r1, r2
 8003892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
}
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 021c 	and.w	r2, r3, #28
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d108      	bne.n	8003908 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003906:	e007      	b.n	8003918 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003932:	e17f      	b.n	8003c34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8171 	beq.w	8003c2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d005      	beq.n	8003964 <HAL_GPIO_Init+0x40>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d130      	bne.n	80039c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800399a:	2201      	movs	r2, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0201 	and.w	r2, r3, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d118      	bne.n	8003a04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ac 	beq.w	8003c2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c54 <HAL_GPIO_Init+0x330>)
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ada:	4a5e      	ldr	r2, [pc, #376]	@ (8003c54 <HAL_GPIO_Init+0x330>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <HAL_GPIO_Init+0x330>)
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aee:	4a5a      	ldr	r2, [pc, #360]	@ (8003c58 <HAL_GPIO_Init+0x334>)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	3302      	adds	r3, #2
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	220f      	movs	r2, #15
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b18:	d025      	beq.n	8003b66 <HAL_GPIO_Init+0x242>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c5c <HAL_GPIO_Init+0x338>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <HAL_GPIO_Init+0x23e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4e      	ldr	r2, [pc, #312]	@ (8003c60 <HAL_GPIO_Init+0x33c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x23a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c64 <HAL_GPIO_Init+0x340>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x236>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4c      	ldr	r2, [pc, #304]	@ (8003c68 <HAL_GPIO_Init+0x344>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x232>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c6c <HAL_GPIO_Init+0x348>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x22e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4a      	ldr	r2, [pc, #296]	@ (8003c70 <HAL_GPIO_Init+0x34c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x22a>
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	e00c      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b4e:	2307      	movs	r3, #7
 8003b50:	e00a      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b52:	2305      	movs	r3, #5
 8003b54:	e008      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e004      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b66:	2300      	movs	r3, #0
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	f002 0203 	and.w	r2, r2, #3
 8003b6e:	0092      	lsls	r2, r2, #2
 8003b70:	4093      	lsls	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b78:	4937      	ldr	r1, [pc, #220]	@ (8003c58 <HAL_GPIO_Init+0x334>)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b86:	4b3b      	ldr	r3, [pc, #236]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003baa:	4a32      	ldr	r2, [pc, #200]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bb0:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bd4:	4a27      	ldr	r2, [pc, #156]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bda:	4b26      	ldr	r3, [pc, #152]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c28:	4a12      	ldr	r2, [pc, #72]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f47f ae78 	bne.w	8003934 <HAL_GPIO_Init+0x10>
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	48000400 	.word	0x48000400
 8003c60:	48000800 	.word	0x48000800
 8003c64:	48000c00 	.word	0x48000c00
 8003c68:	48001000 	.word	0x48001000
 8003c6c:	48001400 	.word	0x48001400
 8003c70:	48001800 	.word	0x48001800
 8003c74:	40010400 	.word	0x40010400

08003c78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca2:	d130      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca4:	4b23      	ldr	r3, [pc, #140]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	d038      	beq.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb2:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cba:	4a1e      	ldr	r2, [pc, #120]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2232      	movs	r2, #50	@ 0x32
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0c9b      	lsrs	r3, r3, #18
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd8:	e002      	b.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce0:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cec:	d102      	bne.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f2      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d00:	d110      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d007      	beq.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d14:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d1c:	4a05      	ldr	r2, [pc, #20]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40007000 	.word	0x40007000
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e3ca      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b97      	ldr	r3, [pc, #604]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5c:	4b94      	ldr	r3, [pc, #592]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80e4 	beq.w	8003f3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_RCC_OscConfig+0x4a>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	f040 808b 	bne.w	8003e98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f040 8087 	bne.w	8003e98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d8a:	4b89      	ldr	r3, [pc, #548]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e3a2      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	4b82      	ldr	r3, [pc, #520]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <HAL_RCC_OscConfig+0x7c>
 8003db2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dba:	e005      	b.n	8003dc8 <HAL_RCC_OscConfig+0x88>
 8003dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d223      	bcs.n	8003e14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fd55 	bl	8004880 <RCC_SetFlashLatencyFromMSIRange>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e383      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de0:	4b73      	ldr	r3, [pc, #460]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a72      	ldr	r2, [pc, #456]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b70      	ldr	r3, [pc, #448]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	496d      	ldr	r1, [pc, #436]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4968      	ldr	r1, [pc, #416]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
 8003e12:	e025      	b.n	8003e60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e14:	4b66      	ldr	r3, [pc, #408]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a65      	ldr	r2, [pc, #404]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f043 0308 	orr.w	r3, r3, #8
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b63      	ldr	r3, [pc, #396]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4960      	ldr	r1, [pc, #384]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e32:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	495b      	ldr	r1, [pc, #364]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fd15 	bl	8004880 <RCC_SetFlashLatencyFromMSIRange>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e343      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e60:	f000 fc4a 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b52      	ldr	r3, [pc, #328]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	4950      	ldr	r1, [pc, #320]	@ (8003fb4 <HAL_RCC_OscConfig+0x274>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb8 <HAL_RCC_OscConfig+0x278>)
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e80:	4b4e      	ldr	r3, [pc, #312]	@ (8003fbc <HAL_RCC_OscConfig+0x27c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fd f9a7 	bl	80011d8 <HAL_InitTick>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d052      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	e327      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d032      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ea0:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eac:	f7fd f9e4 	bl	8001278 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eb4:	f7fd f9e0 	bl	8001278 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e310      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a36      	ldr	r2, [pc, #216]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b34      	ldr	r3, [pc, #208]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4931      	ldr	r1, [pc, #196]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	492c      	ldr	r1, [pc, #176]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e01a      	b.n	8003f3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f06:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f12:	f7fd f9b1 	bl	8001278 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f1a:	f7fd f9ad 	bl	8001278 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e2dd      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f2c:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1da>
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d074      	beq.n	8004032 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x21a>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d10e      	bne.n	8003f72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d064      	beq.n	8004030 <HAL_RCC_OscConfig+0x2f0>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d160      	bne.n	8004030 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e2ba      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x24a>
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e026      	b.n	8003fd8 <HAL_RCC_OscConfig+0x298>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f92:	d115      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x280>
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e014      	b.n	8003fd8 <HAL_RCC_OscConfig+0x298>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08008700 	.word	0x08008700
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000004 	.word	0x20000004
 8003fc0:	4ba0      	ldr	r3, [pc, #640]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a9f      	ldr	r2, [pc, #636]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b9d      	ldr	r3, [pc, #628]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a9c      	ldr	r2, [pc, #624]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d013      	beq.n	8004008 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd f94a 	bl	8001278 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fd f946 	bl	8001278 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	@ 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e276      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffa:	4b92      	ldr	r3, [pc, #584]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2a8>
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd f936 	bl	8001278 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004010:	f7fd f932 	bl	8001278 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	@ 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e262      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004022:	4b88      	ldr	r3, [pc, #544]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x2d0>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d060      	beq.n	8004100 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x310>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d119      	bne.n	800407e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d116      	bne.n	800407e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004050:	4b7c      	ldr	r3, [pc, #496]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_OscConfig+0x328>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e23f      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b76      	ldr	r3, [pc, #472]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	4973      	ldr	r1, [pc, #460]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800407c:	e040      	b.n	8004100 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d023      	beq.n	80040ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004086:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6e      	ldr	r2, [pc, #440]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd f8f1 	bl	8001278 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409a:	f7fd f8ed 	bl	8001278 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e21d      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	4b65      	ldr	r3, [pc, #404]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b62      	ldr	r3, [pc, #392]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	495f      	ldr	r1, [pc, #380]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	e018      	b.n	8004100 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fd f8cd 	bl	8001278 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fd f8c9 	bl	8001278 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1f9      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f4:	4b53      	ldr	r3, [pc, #332]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03c      	beq.n	8004186 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01c      	beq.n	800414e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004114:	4b4b      	ldr	r3, [pc, #300]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411a:	4a4a      	ldr	r2, [pc, #296]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fd f8a8 	bl	8001278 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412c:	f7fd f8a4 	bl	8001278 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1d4      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413e:	4b41      	ldr	r3, [pc, #260]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ef      	beq.n	800412c <HAL_RCC_OscConfig+0x3ec>
 800414c:	e01b      	b.n	8004186 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414e:	4b3d      	ldr	r3, [pc, #244]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004154:	4a3b      	ldr	r2, [pc, #236]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415e:	f7fd f88b 	bl	8001278 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004166:	f7fd f887 	bl	8001278 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e1b7      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	4b32      	ldr	r3, [pc, #200]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ef      	bne.n	8004166 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80a6 	beq.w	80042e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004198:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	4a26      	ldr	r2, [pc, #152]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b0:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041bc:	2301      	movs	r3, #1
 80041be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c0:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d118      	bne.n	80041fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d8:	f7fd f84e 	bl	8001278 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fd f84a 	bl	8001278 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e17a      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b15      	ldr	r3, [pc, #84]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d108      	bne.n	8004218 <HAL_RCC_OscConfig+0x4d8>
 8004206:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420c:	4a0d      	ldr	r2, [pc, #52]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004216:	e029      	b.n	800426c <HAL_RCC_OscConfig+0x52c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d115      	bne.n	800424c <HAL_RCC_OscConfig+0x50c>
 8004220:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	4a07      	ldr	r2, [pc, #28]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	4a03      	ldr	r2, [pc, #12]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004240:	e014      	b.n	800426c <HAL_RCC_OscConfig+0x52c>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	40007000 	.word	0x40007000
 800424c:	4b9c      	ldr	r3, [pc, #624]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a9b      	ldr	r2, [pc, #620]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800425c:	4b98      	ldr	r3, [pc, #608]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	4a97      	ldr	r2, [pc, #604]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004264:	f023 0304 	bic.w	r3, r3, #4
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd f800 	bl	8001278 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fc fffc 	bl	8001278 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e12a      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	4b8b      	ldr	r3, [pc, #556]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ed      	beq.n	800427c <HAL_RCC_OscConfig+0x53c>
 80042a0:	e015      	b.n	80042ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fc ffe9 	bl	8001278 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fc ffe5 	bl	8001278 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e113      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c0:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ed      	bne.n	80042aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b7a      	ldr	r3, [pc, #488]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	4a79      	ldr	r2, [pc, #484]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80fe 	beq.w	80044e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	f040 80d0 	bne.w	8004494 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042f4:	4b72      	ldr	r3, [pc, #456]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0203 	and.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d130      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	3b01      	subs	r3, #1
 8004314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d127      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d11f      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004334:	2a07      	cmp	r2, #7
 8004336:	bf14      	ite	ne
 8004338:	2201      	movne	r2, #1
 800433a:	2200      	moveq	r2, #0
 800433c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d109      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d06e      	beq.n	8004448 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d069      	beq.n	8004444 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004370:	4b53      	ldr	r3, [pc, #332]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800437c:	4b50      	ldr	r3, [pc, #320]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0ad      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800438c:	4b4c      	ldr	r3, [pc, #304]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4b      	ldr	r2, [pc, #300]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004398:	f7fc ff6e 	bl	8001278 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fc ff6a 	bl	8001278 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e09a      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	4b40      	ldr	r3, [pc, #256]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	4b40      	ldr	r3, [pc, #256]	@ (80044c4 <HAL_RCC_OscConfig+0x784>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043ce:	3a01      	subs	r2, #1
 80043d0:	0112      	lsls	r2, r2, #4
 80043d2:	4311      	orrs	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043d8:	0212      	lsls	r2, r2, #8
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043e0:	0852      	lsrs	r2, r2, #1
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0552      	lsls	r2, r2, #21
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043ec:	0852      	lsrs	r2, r2, #1
 80043ee:	3a01      	subs	r2, #1
 80043f0:	0652      	lsls	r2, r2, #25
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043f8:	0912      	lsrs	r2, r2, #4
 80043fa:	0452      	lsls	r2, r2, #17
 80043fc:	430a      	orrs	r2, r1
 80043fe:	4930      	ldr	r1, [pc, #192]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004400:	4313      	orrs	r3, r2
 8004402:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004404:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004410:	4b2b      	ldr	r3, [pc, #172]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a2a      	ldr	r2, [pc, #168]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800441c:	f7fc ff2c 	bl	8001278 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fc ff28 	bl	8001278 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e058      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004442:	e050      	b.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e04f      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004448:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d148      	bne.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004454:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004460:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800446a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800446c:	f7fc ff04 	bl	8001278 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fc ff00 	bl	8001278 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e030      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	4b0e      	ldr	r3, [pc, #56]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x734>
 8004492:	e028      	b.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d023      	beq.n	80044e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80044a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fc fee7 	bl	8001278 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ac:	e00c      	b.n	80044c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fc fee3 	bl	8001278 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d905      	bls.n	80044c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e013      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
 80044c0:	40021000 	.word	0x40021000
 80044c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c8:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_OscConfig+0x7b0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ec      	bne.n	80044ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCC_OscConfig+0x7b0>)
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	4905      	ldr	r1, [pc, #20]	@ (80044f0 <HAL_RCC_OscConfig+0x7b0>)
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_OscConfig+0x7b4>)
 80044dc:	4013      	ands	r3, r2
 80044de:	60cb      	str	r3, [r1, #12]
 80044e0:	e001      	b.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	feeefffc 	.word	0xfeeefffc

080044f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0e7      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	4b75      	ldr	r3, [pc, #468]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d910      	bls.n	800453c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b72      	ldr	r3, [pc, #456]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	4970      	ldr	r1, [pc, #448]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b6e      	ldr	r3, [pc, #440]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cf      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b66      	ldr	r3, [pc, #408]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004554:	429a      	cmp	r2, r3
 8004556:	d908      	bls.n	800456a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004558:	4b63      	ldr	r3, [pc, #396]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4960      	ldr	r1, [pc, #384]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d04c      	beq.n	8004610 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457e:	4b5a      	ldr	r3, [pc, #360]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d121      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0a6      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004596:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d115      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e09a      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ae:	4b4e      	ldr	r3, [pc, #312]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e08e      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045be:	4b4a      	ldr	r3, [pc, #296]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e086      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b46      	ldr	r3, [pc, #280]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4943      	ldr	r1, [pc, #268]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fc fe4a 	bl	8001278 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fc fe46 	bl	8001278 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e06e      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b3a      	ldr	r3, [pc, #232]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004628:	429a      	cmp	r2, r3
 800462a:	d208      	bcs.n	800463e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b2e      	ldr	r3, [pc, #184]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	492b      	ldr	r1, [pc, #172]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463e:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d210      	bcs.n	800466e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 0207 	bic.w	r2, r3, #7
 8004654:	4923      	ldr	r1, [pc, #140]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465c:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e036      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4918      	ldr	r1, [pc, #96]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4910      	ldr	r1, [pc, #64]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ac:	f000 f824 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	490b      	ldr	r1, [pc, #44]	@ (80046ec <HAL_RCC_ClockConfig+0x1f4>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	4a09      	ldr	r2, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f8>)
 80046ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1fc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fc fd81 	bl	80011d8 <HAL_InitTick>
 80046d6:	4603      	mov	r3, r0
 80046d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80046da:	7afb      	ldrb	r3, [r7, #11]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08008700 	.word	0x08008700
 80046f0:	20000000 	.word	0x20000000
 80046f4:	20000004 	.word	0x20000004

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	@ 0x24
 80046fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004710:	4b3b      	ldr	r3, [pc, #236]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x34>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d121      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11e      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800472c:	4b34      	ldr	r3, [pc, #208]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004738:	4b31      	ldr	r3, [pc, #196]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 800473a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e005      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004754:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d102      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004770:	4b25      	ldr	r3, [pc, #148]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x110>)
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e004      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d101      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_RCC_GetSysClockFreq+0x114>)
 800477e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d134      	bne.n	80047f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004786:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d003      	beq.n	800479e <HAL_RCC_GetSysClockFreq+0xa6>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d003      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0xac>
 800479c:	e005      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x110>)
 80047a0:	617b      	str	r3, [r7, #20]
      break;
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047a4:	4b19      	ldr	r3, [pc, #100]	@ (800480c <HAL_RCC_GetSysClockFreq+0x114>)
 80047a6:	617b      	str	r3, [r7, #20]
      break;
 80047a8:	e002      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	617b      	str	r3, [r7, #20]
      break;
 80047ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b0:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	3301      	adds	r3, #1
 80047bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047be:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	fb03 f202 	mul.w	r2, r3, r2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0e5b      	lsrs	r3, r3, #25
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	3301      	adds	r3, #1
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047f0:	69bb      	ldr	r3, [r7, #24]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	@ 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	08008718 	.word	0x08008718
 8004808:	00f42400 	.word	0x00f42400
 800480c:	007a1200 	.word	0x007a1200

08004810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_RCC_GetHCLKFreq+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000000 	.word	0x20000000

08004828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800482c:	f7ff fff0 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4904      	ldr	r1, [pc, #16]	@ (8004850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	08008710 	.word	0x08008710

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004858:	f7ff ffda 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0adb      	lsrs	r3, r3, #11
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4904      	ldr	r1, [pc, #16]	@ (800487c <HAL_RCC_GetPCLK2Freq+0x28>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	08008710 	.word	0x08008710

08004880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800488c:	4b2a      	ldr	r3, [pc, #168]	@ (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800488e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004898:	f7ff f9ee 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 800489c:	6178      	str	r0, [r7, #20]
 800489e:	e014      	b.n	80048ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	4a24      	ldr	r2, [pc, #144]	@ (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ac:	4b22      	ldr	r3, [pc, #136]	@ (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048b8:	f7ff f9de 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 80048bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048be:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d0:	d10b      	bne.n	80048ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b80      	cmp	r3, #128	@ 0x80
 80048d6:	d919      	bls.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2ba0      	cmp	r3, #160	@ 0xa0
 80048dc:	d902      	bls.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048de:	2302      	movs	r3, #2
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	e013      	b.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048e4:	2301      	movs	r3, #1
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e010      	b.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b80      	cmp	r3, #128	@ 0x80
 80048ee:	d902      	bls.n	80048f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048f0:	2303      	movs	r3, #3
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	e00a      	b.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b80      	cmp	r3, #128	@ 0x80
 80048fa:	d102      	bne.n	8004902 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048fc:	2302      	movs	r3, #2
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e004      	b.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b70      	cmp	r3, #112	@ 0x70
 8004906:	d101      	bne.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004908:	2301      	movs	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 0207 	bic.w	r2, r3, #7
 8004914:	4909      	ldr	r1, [pc, #36]	@ (800493c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	d001      	beq.n	800492e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40021000 	.word	0x40021000
 800493c:	40022000 	.word	0x40022000

08004940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004948:	2300      	movs	r3, #0
 800494a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800494c:	2300      	movs	r3, #0
 800494e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d041      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004960:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004964:	d02a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004966:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800496a:	d824      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800496c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004970:	d008      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004976:	d81e      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800497c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004980:	d010      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004982:	e018      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004984:	4b86      	ldr	r3, [pc, #536]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4a85      	ldr	r2, [pc, #532]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004990:	e015      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fabb 	bl	8004f14 <RCCEx_PLLSAI1_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a2:	e00c      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3320      	adds	r3, #32
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fba6 	bl	80050fc <RCCEx_PLLSAI2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b4:	e003      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	74fb      	strb	r3, [r7, #19]
      break;
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c4:	4b76      	ldr	r3, [pc, #472]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d2:	4973      	ldr	r1, [pc, #460]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049da:	e001      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d041      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049f4:	d02a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049fa:	d824      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a00:	d008      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a06:	d81e      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a10:	d010      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a12:	e018      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a14:	4b62      	ldr	r3, [pc, #392]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a61      	ldr	r2, [pc, #388]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a20:	e015      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fa73 	bl	8004f14 <RCCEx_PLLSAI1_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a32:	e00c      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3320      	adds	r3, #32
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fb5e 	bl	80050fc <RCCEx_PLLSAI2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	74fb      	strb	r3, [r7, #19]
      break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a54:	4b52      	ldr	r3, [pc, #328]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a62:	494f      	ldr	r1, [pc, #316]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a6a:	e001      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80a0 	beq.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a82:	4b47      	ldr	r3, [pc, #284]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a92:	2300      	movs	r3, #0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a98:	4b41      	ldr	r3, [pc, #260]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9c:	4a40      	ldr	r2, [pc, #256]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004abe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc fbda 	bl	8001278 <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ac6:	e009      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac8:	f7fc fbd6 	bl	8001278 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d902      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	74fb      	strb	r3, [r7, #19]
        break;
 8004ada:	e005      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004adc:	4b31      	ldr	r3, [pc, #196]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d15c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d019      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b18:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b38:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4a:	f7fc fb95 	bl	8001278 <HAL_GetTick>
 8004b4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b50:	e00b      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fc fb91 	bl	8001278 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d902      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	74fb      	strb	r3, [r7, #19]
            break;
 8004b68:	e006      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ec      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8e:	4904      	ldr	r1, [pc, #16]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b96:	e009      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bac:	7c7b      	ldrb	r3, [r7, #17]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb6:	4a9d      	ldr	r2, [pc, #628]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bca:	4b98      	ldr	r3, [pc, #608]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd0:	f023 0203 	bic.w	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	4994      	ldr	r1, [pc, #592]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bec:	4b8f      	ldr	r3, [pc, #572]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f023 020c 	bic.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	498c      	ldr	r1, [pc, #560]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c0e:	4b87      	ldr	r3, [pc, #540]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	4983      	ldr	r1, [pc, #524]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c30:	4b7e      	ldr	r3, [pc, #504]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	497b      	ldr	r1, [pc, #492]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c52:	4b76      	ldr	r3, [pc, #472]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c60:	4972      	ldr	r1, [pc, #456]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c74:	4b6d      	ldr	r3, [pc, #436]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c82:	496a      	ldr	r1, [pc, #424]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c96:	4b65      	ldr	r3, [pc, #404]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	4961      	ldr	r1, [pc, #388]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc6:	4959      	ldr	r1, [pc, #356]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cda:	4b54      	ldr	r3, [pc, #336]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce8:	4950      	ldr	r1, [pc, #320]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	4948      	ldr	r1, [pc, #288]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d1e:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2c:	493f      	ldr	r1, [pc, #252]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d028      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d40:	4b3a      	ldr	r3, [pc, #232]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4e:	4937      	ldr	r1, [pc, #220]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d60:	4b32      	ldr	r3, [pc, #200]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a31      	ldr	r2, [pc, #196]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d6a:	60d3      	str	r3, [r2, #12]
 8004d6c:	e011      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d76:	d10c      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f8c8 	bl	8004f14 <RCCEx_PLLSAI1_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d028      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d9e:	4b23      	ldr	r3, [pc, #140]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	491f      	ldr	r1, [pc, #124]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dbc:	d106      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dc8:	60d3      	str	r3, [r2, #12]
 8004dca:	e011      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f899 	bl	8004f14 <RCCEx_PLLSAI1_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02b      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0a:	4908      	ldr	r1, [pc, #32]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e1a:	d109      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a02      	ldr	r2, [pc, #8]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
 8004e28:	e014      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f867 	bl	8004f14 <RCCEx_PLLSAI1_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e60:	4b2b      	ldr	r3, [pc, #172]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e6e:	4928      	ldr	r1, [pc, #160]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f844 	bl	8004f14 <RCCEx_PLLSAI1_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e90:	7cfb      	ldrb	r3, [r7, #19]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d014      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	74bb      	strb	r3, [r7, #18]
 8004e9a:	e011      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3320      	adds	r3, #32
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f925 	bl	80050fc <RCCEx_PLLSAI2_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eb6:	7cfb      	ldrb	r3, [r7, #19]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ebc:	7cfb      	ldrb	r3, [r7, #19]
 8004ebe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ecc:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eda:	490d      	ldr	r1, [pc, #52]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004efe:	4904      	ldr	r1, [pc, #16]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f06:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000

08004f14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f22:	4b75      	ldr	r3, [pc, #468]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f2e:	4b72      	ldr	r3, [pc, #456]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0203 	and.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
       ||
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f46:	4b6c      	ldr	r3, [pc, #432]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
       ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d047      	beq.n	8004fea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e044      	b.n	8004fea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d018      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x86>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d825      	bhi.n	8004fb8 <RCCEx_PLLSAI1_Config+0xa4>
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d002      	beq.n	8004f76 <RCCEx_PLLSAI1_Config+0x62>
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d009      	beq.n	8004f88 <RCCEx_PLLSAI1_Config+0x74>
 8004f74:	e020      	b.n	8004fb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f76:	4b60      	ldr	r3, [pc, #384]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11d      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f86:	e01a      	b.n	8004fbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f88:	4b5b      	ldr	r3, [pc, #364]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f98:	e013      	b.n	8004fc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f9a:	4b57      	ldr	r3, [pc, #348]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fa6:	4b54      	ldr	r3, [pc, #336]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fb6:	e006      	b.n	8004fc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e004      	b.n	8004fc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fce:	4b4a      	ldr	r3, [pc, #296]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	4944      	ldr	r1, [pc, #272]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d17d      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ff0:	4b41      	ldr	r3, [pc, #260]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a40      	ldr	r2, [pc, #256]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fc f93c 	bl	8001278 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005002:	e009      	b.n	8005018 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005004:	f7fc f938 	bl	8001278 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	73fb      	strb	r3, [r7, #15]
        break;
 8005016:	e005      	b.n	8005024 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005018:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ef      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d160      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d111      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005030:	4b31      	ldr	r3, [pc, #196]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6892      	ldr	r2, [r2, #8]
 8005040:	0211      	lsls	r1, r2, #8
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	0912      	lsrs	r2, r2, #4
 8005048:	0452      	lsls	r2, r2, #17
 800504a:	430a      	orrs	r2, r1
 800504c:	492a      	ldr	r1, [pc, #168]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504e:	4313      	orrs	r3, r2
 8005050:	610b      	str	r3, [r1, #16]
 8005052:	e027      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d112      	bne.n	8005080 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800505a:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005062:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	0211      	lsls	r1, r2, #8
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6912      	ldr	r2, [r2, #16]
 8005070:	0852      	lsrs	r2, r2, #1
 8005072:	3a01      	subs	r2, #1
 8005074:	0552      	lsls	r2, r2, #21
 8005076:	430a      	orrs	r2, r1
 8005078:	491f      	ldr	r1, [pc, #124]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	610b      	str	r3, [r1, #16]
 800507e:	e011      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005088:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6892      	ldr	r2, [r2, #8]
 8005090:	0211      	lsls	r1, r2, #8
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6952      	ldr	r2, [r2, #20]
 8005096:	0852      	lsrs	r2, r2, #1
 8005098:	3a01      	subs	r2, #1
 800509a:	0652      	lsls	r2, r2, #25
 800509c:	430a      	orrs	r2, r1
 800509e:	4916      	ldr	r1, [pc, #88]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050a4:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fc f8e2 	bl	8001278 <HAL_GetTick>
 80050b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050b6:	e009      	b.n	80050cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b8:	f7fc f8de 	bl	8001278 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d902      	bls.n	80050cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	73fb      	strb	r3, [r7, #15]
          break;
 80050ca:	e005      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050cc:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ef      	beq.n	80050b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050de:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	4904      	ldr	r1, [pc, #16]	@ (80050f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000

080050fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800510a:	4b6a      	ldr	r3, [pc, #424]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d018      	beq.n	8005148 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005116:	4b67      	ldr	r3, [pc, #412]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0203 	and.w	r2, r3, #3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d10d      	bne.n	8005142 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
       ||
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800512e:	4b61      	ldr	r3, [pc, #388]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
       ||
 800513e:	429a      	cmp	r2, r3
 8005140:	d047      	beq.n	80051d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	e044      	b.n	80051d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d018      	beq.n	8005182 <RCCEx_PLLSAI2_Config+0x86>
 8005150:	2b03      	cmp	r3, #3
 8005152:	d825      	bhi.n	80051a0 <RCCEx_PLLSAI2_Config+0xa4>
 8005154:	2b01      	cmp	r3, #1
 8005156:	d002      	beq.n	800515e <RCCEx_PLLSAI2_Config+0x62>
 8005158:	2b02      	cmp	r3, #2
 800515a:	d009      	beq.n	8005170 <RCCEx_PLLSAI2_Config+0x74>
 800515c:	e020      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800515e:	4b55      	ldr	r3, [pc, #340]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d11d      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800516e:	e01a      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005170:	4b50      	ldr	r3, [pc, #320]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005178:	2b00      	cmp	r3, #0
 800517a:	d116      	bne.n	80051aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005180:	e013      	b.n	80051aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005182:	4b4c      	ldr	r3, [pc, #304]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800518e:	4b49      	ldr	r3, [pc, #292]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800519e:	e006      	b.n	80051ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e004      	b.n	80051b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10d      	bne.n	80051d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051b6:	4b3f      	ldr	r3, [pc, #252]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	430b      	orrs	r3, r1
 80051cc:	4939      	ldr	r1, [pc, #228]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d167      	bne.n	80052a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051d8:	4b36      	ldr	r3, [pc, #216]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a35      	ldr	r2, [pc, #212]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fc f848 	bl	8001278 <HAL_GetTick>
 80051e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051ea:	e009      	b.n	8005200 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051ec:	f7fc f844 	bl	8001278 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d902      	bls.n	8005200 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	73fb      	strb	r3, [r7, #15]
        break;
 80051fe:	e005      	b.n	800520c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005200:	4b2c      	ldr	r3, [pc, #176]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ef      	bne.n	80051ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d14a      	bne.n	80052a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005218:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6892      	ldr	r2, [r2, #8]
 8005228:	0211      	lsls	r1, r2, #8
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68d2      	ldr	r2, [r2, #12]
 800522e:	0912      	lsrs	r2, r2, #4
 8005230:	0452      	lsls	r2, r2, #17
 8005232:	430a      	orrs	r2, r1
 8005234:	491f      	ldr	r1, [pc, #124]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	4313      	orrs	r3, r2
 8005238:	614b      	str	r3, [r1, #20]
 800523a:	e011      	b.n	8005260 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800523c:	4b1d      	ldr	r3, [pc, #116]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005244:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6892      	ldr	r2, [r2, #8]
 800524c:	0211      	lsls	r1, r2, #8
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6912      	ldr	r2, [r2, #16]
 8005252:	0852      	lsrs	r2, r2, #1
 8005254:	3a01      	subs	r2, #1
 8005256:	0652      	lsls	r2, r2, #25
 8005258:	430a      	orrs	r2, r1
 800525a:	4916      	ldr	r1, [pc, #88]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005260:	4b14      	ldr	r3, [pc, #80]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a13      	ldr	r2, [pc, #76]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800526a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fc f804 	bl	8001278 <HAL_GetTick>
 8005270:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005272:	e009      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005274:	f7fc f800 	bl	8001278 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d902      	bls.n	8005288 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	73fb      	strb	r3, [r7, #15]
          break;
 8005286:	e005      	b.n	8005294 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005288:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	4904      	ldr	r1, [pc, #16]	@ (80052b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fb fd60 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 fcb4 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e049      	b.n	800540c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f841 	bl	8005414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f000 fc5d 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <HAL_TIM_PWM_Start+0x24>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e03c      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d109      	bne.n	8005466 <HAL_TIM_PWM_Start+0x3e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e02f      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start+0x58>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e022      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d109      	bne.n	800549a <HAL_TIM_PWM_Start+0x72>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e015      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d109      	bne.n	80054b4 <HAL_TIM_PWM_Start+0x8c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e09c      	b.n	8005608 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0xb6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054dc:	e023      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0xc6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ec:	e01b      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start+0xd6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	e013      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start+0xe6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800550c:	e00b      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0xf6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800551c:	e003      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2201      	movs	r2, #1
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ffae 	bl	8006490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a35      	ldr	r2, [pc, #212]	@ (8005610 <HAL_TIM_PWM_Start+0x1e8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a34      	ldr	r2, [pc, #208]	@ (8005614 <HAL_TIM_PWM_Start+0x1ec>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a32      	ldr	r2, [pc, #200]	@ (8005618 <HAL_TIM_PWM_Start+0x1f0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a31      	ldr	r2, [pc, #196]	@ (800561c <HAL_TIM_PWM_Start+0x1f4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <HAL_TIM_PWM_Start+0x1f8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <HAL_TIM_PWM_Start+0x142>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <HAL_TIM_PWM_Start+0x144>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a22      	ldr	r2, [pc, #136]	@ (8005610 <HAL_TIM_PWM_Start+0x1e8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_TIM_PWM_Start+0x19e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005592:	d018      	beq.n	80055c6 <HAL_TIM_PWM_Start+0x19e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a22      	ldr	r2, [pc, #136]	@ (8005624 <HAL_TIM_PWM_Start+0x1fc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_TIM_PWM_Start+0x19e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a21      	ldr	r2, [pc, #132]	@ (8005628 <HAL_TIM_PWM_Start+0x200>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_TIM_PWM_Start+0x19e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1f      	ldr	r2, [pc, #124]	@ (800562c <HAL_TIM_PWM_Start+0x204>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_TIM_PWM_Start+0x19e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a17      	ldr	r2, [pc, #92]	@ (8005614 <HAL_TIM_PWM_Start+0x1ec>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_TIM_PWM_Start+0x19e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a15      	ldr	r2, [pc, #84]	@ (8005618 <HAL_TIM_PWM_Start+0x1f0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d115      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	4b18      	ldr	r3, [pc, #96]	@ (8005630 <HAL_TIM_PWM_Start+0x208>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d015      	beq.n	8005604 <HAL_TIM_PWM_Start+0x1dc>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055de:	d011      	beq.n	8005604 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	e008      	b.n	8005604 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e000      	b.n	8005606 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005604:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	00010007 	.word	0x00010007

08005634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d020      	beq.n	8005698 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0202 	mvn.w	r2, #2
 8005668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fad1 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005684:	e005      	b.n	8005692 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fac3 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fad4 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d020      	beq.n	80056e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01b      	beq.n	80056e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0204 	mvn.w	r2, #4
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 faab 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa9d 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 faae 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d020      	beq.n	8005730 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01b      	beq.n	8005730 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0208 	mvn.w	r2, #8
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2204      	movs	r2, #4
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa85 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa77 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa88 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	d020      	beq.n	800577c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01b      	beq.n	800577c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0210 	mvn.w	r2, #16
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2208      	movs	r2, #8
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa5f 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa51 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa62 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00c      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0201 	mvn.w	r2, #1
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa2f 	bl	8005bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d104      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80057c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 ff19 	bl	8006600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00c      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 ff11 	bl	8006614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00c      	beq.n	8005816 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fa1c 	bl	8005c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0220 	mvn.w	r2, #32
 8005832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fed9 	bl	80065ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800585e:	2302      	movs	r3, #2
 8005860:	e0ff      	b.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b14      	cmp	r3, #20
 800586e:	f200 80f0 	bhi.w	8005a52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005872:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005a53 	.word	0x08005a53
 8005880:	08005a53 	.word	0x08005a53
 8005884:	08005a53 	.word	0x08005a53
 8005888:	0800590d 	.word	0x0800590d
 800588c:	08005a53 	.word	0x08005a53
 8005890:	08005a53 	.word	0x08005a53
 8005894:	08005a53 	.word	0x08005a53
 8005898:	0800594f 	.word	0x0800594f
 800589c:	08005a53 	.word	0x08005a53
 80058a0:	08005a53 	.word	0x08005a53
 80058a4:	08005a53 	.word	0x08005a53
 80058a8:	0800598f 	.word	0x0800598f
 80058ac:	08005a53 	.word	0x08005a53
 80058b0:	08005a53 	.word	0x08005a53
 80058b4:	08005a53 	.word	0x08005a53
 80058b8:	080059d1 	.word	0x080059d1
 80058bc:	08005a53 	.word	0x08005a53
 80058c0:	08005a53 	.word	0x08005a53
 80058c4:	08005a53 	.word	0x08005a53
 80058c8:	08005a11 	.word	0x08005a11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fa6c 	bl	8005db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0208 	orr.w	r2, r2, #8
 80058e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6999      	ldr	r1, [r3, #24]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	619a      	str	r2, [r3, #24]
      break;
 800590a:	e0a5      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fadc 	bl	8005ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6999      	ldr	r1, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	021a      	lsls	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	619a      	str	r2, [r3, #24]
      break;
 800594c:	e084      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fb45 	bl	8005fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0208 	orr.w	r2, r2, #8
 8005968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0204 	bic.w	r2, r2, #4
 8005978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69d9      	ldr	r1, [r3, #28]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	61da      	str	r2, [r3, #28]
      break;
 800598c:	e064      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fbad 	bl	80060f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69d9      	ldr	r1, [r3, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	021a      	lsls	r2, r3, #8
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	61da      	str	r2, [r3, #28]
      break;
 80059ce:	e043      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fbf6 	bl	80061c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0208 	orr.w	r2, r2, #8
 80059ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0204 	bic.w	r2, r2, #4
 80059fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a0e:	e023      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fc3a 	bl	8006290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	021a      	lsls	r2, r3, #8
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a50:	e002      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
      break;
 8005a56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop

08005a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIM_ConfigClockSource+0x1c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e0b6      	b.n	8005bf6 <HAL_TIM_ConfigClockSource+0x18a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac4:	d03e      	beq.n	8005b44 <HAL_TIM_ConfigClockSource+0xd8>
 8005ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aca:	f200 8087 	bhi.w	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad2:	f000 8086 	beq.w	8005be2 <HAL_TIM_ConfigClockSource+0x176>
 8005ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ada:	d87f      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005adc:	2b70      	cmp	r3, #112	@ 0x70
 8005ade:	d01a      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0xaa>
 8005ae0:	2b70      	cmp	r3, #112	@ 0x70
 8005ae2:	d87b      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005ae4:	2b60      	cmp	r3, #96	@ 0x60
 8005ae6:	d050      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x11e>
 8005ae8:	2b60      	cmp	r3, #96	@ 0x60
 8005aea:	d877      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	2b50      	cmp	r3, #80	@ 0x50
 8005aee:	d03c      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xfe>
 8005af0:	2b50      	cmp	r3, #80	@ 0x50
 8005af2:	d873      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005af4:	2b40      	cmp	r3, #64	@ 0x40
 8005af6:	d058      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x13e>
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d86f      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005afc:	2b30      	cmp	r3, #48	@ 0x30
 8005afe:	d064      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x15e>
 8005b00:	2b30      	cmp	r3, #48	@ 0x30
 8005b02:	d86b      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d060      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x15e>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d867      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d05c      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x15e>
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d05a      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x15e>
 8005b14:	e062      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b26:	f000 fc93 	bl	8006450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	609a      	str	r2, [r3, #8]
      break;
 8005b42:	e04f      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b54:	f000 fc7c 	bl	8006450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b66:	609a      	str	r2, [r3, #8]
      break;
 8005b68:	e03c      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 fbf0 	bl	800635c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2150      	movs	r1, #80	@ 0x50
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fc49 	bl	800641a <TIM_ITRx_SetConfig>
      break;
 8005b88:	e02c      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 fc0f 	bl	80063ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2160      	movs	r1, #96	@ 0x60
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fc39 	bl	800641a <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e01c      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f000 fbd0 	bl	800635c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2140      	movs	r1, #64	@ 0x40
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fc29 	bl	800641a <TIM_ITRx_SetConfig>
      break;
 8005bc8:	e00c      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f000 fc20 	bl	800641a <TIM_ITRx_SetConfig>
      break;
 8005bda:	e003      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
      break;
 8005be0:	e000      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a46      	ldr	r2, [pc, #280]	@ (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c82:	d00f      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a43      	ldr	r2, [pc, #268]	@ (8005d94 <TIM_Base_SetConfig+0x130>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a42      	ldr	r2, [pc, #264]	@ (8005d98 <TIM_Base_SetConfig+0x134>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a41      	ldr	r2, [pc, #260]	@ (8005d9c <TIM_Base_SetConfig+0x138>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a40      	ldr	r2, [pc, #256]	@ (8005da0 <TIM_Base_SetConfig+0x13c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01f      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc4:	d01b      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a32      	ldr	r2, [pc, #200]	@ (8005d94 <TIM_Base_SetConfig+0x130>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d017      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a31      	ldr	r2, [pc, #196]	@ (8005d98 <TIM_Base_SetConfig+0x134>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a30      	ldr	r2, [pc, #192]	@ (8005d9c <TIM_Base_SetConfig+0x138>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8005da0 <TIM_Base_SetConfig+0x13c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8005da4 <TIM_Base_SetConfig+0x140>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8005da8 <TIM_Base_SetConfig+0x144>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8005dac <TIM_Base_SetConfig+0x148>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d108      	bne.n	8005d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a16      	ldr	r2, [pc, #88]	@ (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00f      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a18      	ldr	r2, [pc, #96]	@ (8005da0 <TIM_Base_SetConfig+0x13c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a17      	ldr	r2, [pc, #92]	@ (8005da4 <TIM_Base_SetConfig+0x140>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a16      	ldr	r2, [pc, #88]	@ (8005da8 <TIM_Base_SetConfig+0x144>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a15      	ldr	r2, [pc, #84]	@ (8005dac <TIM_Base_SetConfig+0x148>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	611a      	str	r2, [r3, #16]
  }
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40014800 	.word	0x40014800

08005db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f023 0201 	bic.w	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 0302 	bic.w	r3, r3, #2
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ebc <TIM_OC1_SetConfig+0x10c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00f      	beq.n	8005e30 <TIM_OC1_SetConfig+0x80>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec0 <TIM_OC1_SetConfig+0x110>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00b      	beq.n	8005e30 <TIM_OC1_SetConfig+0x80>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec4 <TIM_OC1_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_OC1_SetConfig+0x80>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a29      	ldr	r2, [pc, #164]	@ (8005ec8 <TIM_OC1_SetConfig+0x118>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC1_SetConfig+0x80>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a28      	ldr	r2, [pc, #160]	@ (8005ecc <TIM_OC1_SetConfig+0x11c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10c      	bne.n	8005e4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0308 	bic.w	r3, r3, #8
 8005e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 0304 	bic.w	r3, r3, #4
 8005e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <TIM_OC1_SetConfig+0x10c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00f      	beq.n	8005e72 <TIM_OC1_SetConfig+0xc2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec0 <TIM_OC1_SetConfig+0x110>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <TIM_OC1_SetConfig+0xc2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ec4 <TIM_OC1_SetConfig+0x114>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC1_SetConfig+0xc2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <TIM_OC1_SetConfig+0x118>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC1_SetConfig+0xc2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <TIM_OC1_SetConfig+0x11c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d111      	bne.n	8005e96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40013400 	.word	0x40013400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800

08005ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0210 	bic.w	r2, r3, #16
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0320 	bic.w	r3, r3, #32
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a28      	ldr	r2, [pc, #160]	@ (8005fd0 <TIM_OC2_SetConfig+0x100>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC2_SetConfig+0x6c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a27      	ldr	r2, [pc, #156]	@ (8005fd4 <TIM_OC2_SetConfig+0x104>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d10d      	bne.n	8005f58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <TIM_OC2_SetConfig+0x100>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_OC2_SetConfig+0xb0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd4 <TIM_OC2_SetConfig+0x104>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_OC2_SetConfig+0xb0>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <TIM_OC2_SetConfig+0x108>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_OC2_SetConfig+0xb0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a1a      	ldr	r2, [pc, #104]	@ (8005fdc <TIM_OC2_SetConfig+0x10c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC2_SetConfig+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a19      	ldr	r2, [pc, #100]	@ (8005fe0 <TIM_OC2_SetConfig+0x110>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d113      	bne.n	8005fa8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40013400 	.word	0x40013400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800

08005fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a27      	ldr	r2, [pc, #156]	@ (80060e0 <TIM_OC3_SetConfig+0xfc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC3_SetConfig+0x6a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a26      	ldr	r2, [pc, #152]	@ (80060e4 <TIM_OC3_SetConfig+0x100>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10d      	bne.n	800606a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <TIM_OC3_SetConfig+0xfc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_OC3_SetConfig+0xae>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1b      	ldr	r2, [pc, #108]	@ (80060e4 <TIM_OC3_SetConfig+0x100>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_OC3_SetConfig+0xae>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <TIM_OC3_SetConfig+0x104>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_OC3_SetConfig+0xae>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <TIM_OC3_SetConfig+0x108>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC3_SetConfig+0xae>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <TIM_OC3_SetConfig+0x10c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d113      	bne.n	80060ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	621a      	str	r2, [r3, #32]
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40013400 	.word	0x40013400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800

080060f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800612e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a18      	ldr	r2, [pc, #96]	@ (80061b4 <TIM_OC4_SetConfig+0xc0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00f      	beq.n	8006178 <TIM_OC4_SetConfig+0x84>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a17      	ldr	r2, [pc, #92]	@ (80061b8 <TIM_OC4_SetConfig+0xc4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_OC4_SetConfig+0x84>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <TIM_OC4_SetConfig+0xc8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_OC4_SetConfig+0x84>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <TIM_OC4_SetConfig+0xcc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC4_SetConfig+0x84>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a14      	ldr	r2, [pc, #80]	@ (80061c4 <TIM_OC4_SetConfig+0xd0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d109      	bne.n	800618c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800617e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	019b      	lsls	r3, r3, #6
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	621a      	str	r2, [r3, #32]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800

080061c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800620c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a17      	ldr	r2, [pc, #92]	@ (800627c <TIM_OC5_SetConfig+0xb4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00f      	beq.n	8006242 <TIM_OC5_SetConfig+0x7a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a16      	ldr	r2, [pc, #88]	@ (8006280 <TIM_OC5_SetConfig+0xb8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00b      	beq.n	8006242 <TIM_OC5_SetConfig+0x7a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a15      	ldr	r2, [pc, #84]	@ (8006284 <TIM_OC5_SetConfig+0xbc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d007      	beq.n	8006242 <TIM_OC5_SetConfig+0x7a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a14      	ldr	r2, [pc, #80]	@ (8006288 <TIM_OC5_SetConfig+0xc0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d003      	beq.n	8006242 <TIM_OC5_SetConfig+0x7a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a13      	ldr	r2, [pc, #76]	@ (800628c <TIM_OC5_SetConfig+0xc4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d109      	bne.n	8006256 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800

08006290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	051b      	lsls	r3, r3, #20
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a18      	ldr	r2, [pc, #96]	@ (8006348 <TIM_OC6_SetConfig+0xb8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00f      	beq.n	800630c <TIM_OC6_SetConfig+0x7c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a17      	ldr	r2, [pc, #92]	@ (800634c <TIM_OC6_SetConfig+0xbc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00b      	beq.n	800630c <TIM_OC6_SetConfig+0x7c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a16      	ldr	r2, [pc, #88]	@ (8006350 <TIM_OC6_SetConfig+0xc0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_OC6_SetConfig+0x7c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a15      	ldr	r2, [pc, #84]	@ (8006354 <TIM_OC6_SetConfig+0xc4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC6_SetConfig+0x7c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a14      	ldr	r2, [pc, #80]	@ (8006358 <TIM_OC6_SetConfig+0xc8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d109      	bne.n	8006320 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800

0800635c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f023 0201 	bic.w	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f023 030a 	bic.w	r3, r3, #10
 8006398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b087      	sub	sp, #28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f023 0210 	bic.w	r2, r3, #16
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	031b      	lsls	r3, r3, #12
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	f043 0307 	orr.w	r3, r3, #7
 800643c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800646a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	021a      	lsls	r2, r3, #8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	431a      	orrs	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2201      	movs	r2, #1
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1a      	ldr	r2, [r3, #32]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	43db      	mvns	r3, r3
 80064b2:	401a      	ands	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	fa01 f303 	lsl.w	r3, r1, r3
 80064c8:	431a      	orrs	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e068      	b.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2e      	ldr	r2, [pc, #184]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2d      	ldr	r2, [pc, #180]	@ (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d108      	bne.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800652e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006540:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1e      	ldr	r2, [pc, #120]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01d      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006566:	d018      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1b      	ldr	r2, [pc, #108]	@ (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1a      	ldr	r2, [pc, #104]	@ (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00e      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a18      	ldr	r2, [pc, #96]	@ (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d009      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a13      	ldr	r2, [pc, #76]	@ (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d004      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a14      	ldr	r2, [pc, #80]	@ (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10c      	bne.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40013400 	.word	0x40013400
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40014000 	.word	0x40014000

080065ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e040      	b.n	80066bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fa fc06 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2224      	movs	r2, #36	@ 0x24
 8006654:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0201 	bic.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fe90 	bl	8007394 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fbd5 	bl	8006e24 <UART_SetConfig>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e01b      	b.n	80066bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 ff0f 	bl	80074d8 <UART_CheckIdleState>
 80066ba:	4603      	mov	r3, r0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d177      	bne.n	80067cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_UART_Transmit+0x24>
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e070      	b.n	80067ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2221      	movs	r2, #33	@ 0x21
 80066f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066fa:	f7fa fdbd 	bl	8001278 <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006718:	d108      	bne.n	800672c <HAL_UART_Transmit+0x68>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e003      	b.n	8006734 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006734:	e02f      	b.n	8006796 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2200      	movs	r2, #0
 800673e:	2180      	movs	r1, #128	@ 0x80
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 ff71 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e03b      	b.n	80067ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10b      	bne.n	8006774 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006768:	b292      	uxth	r2, r2
 800676a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	3302      	adds	r3, #2
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e007      	b.n	8006784 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3301      	adds	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1c9      	bne.n	8006736 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2200      	movs	r2, #0
 80067aa:	2140      	movs	r1, #64	@ 0x40
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 ff3b 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e005      	b.n	80067ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e000      	b.n	80067ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80067cc:	2302      	movs	r3, #2
  }
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b0ba      	sub	sp, #232	@ 0xe8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006802:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006806:	4013      	ands	r3, r2
 8006808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800680c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d115      	bne.n	8006840 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 82ca 	beq.w	8006dca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
      }
      return;
 800683e:	e2c4      	b.n	8006dca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8117 	beq.w	8006a78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006856:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800685a:	4b85      	ldr	r3, [pc, #532]	@ (8006a70 <HAL_UART_IRQHandler+0x298>)
 800685c:	4013      	ands	r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 810a 	beq.w	8006a78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d011      	beq.n	8006894 <HAL_UART_IRQHandler+0xbc>
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2201      	movs	r2, #1
 8006882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800688a:	f043 0201 	orr.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d011      	beq.n	80068c4 <HAL_UART_IRQHandler+0xec>
 80068a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2202      	movs	r2, #2
 80068b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d011      	beq.n	80068f4 <HAL_UART_IRQHandler+0x11c>
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2204      	movs	r2, #4
 80068e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800690c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006910:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2208      	movs	r2, #8
 800691e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006926:	f043 0208 	orr.w	r2, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006938:	2b00      	cmp	r3, #0
 800693a:	d012      	beq.n	8006962 <HAL_UART_IRQHandler+0x18a>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8230 	beq.w	8006dce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069aa:	2b40      	cmp	r3, #64	@ 0x40
 80069ac:	d005      	beq.n	80069ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04f      	beq.n	8006a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fea1 	bl	8007702 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b40      	cmp	r3, #64	@ 0x40
 80069cc:	d141      	bne.n	8006a52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1d9      	bne.n	80069ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a26:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <HAL_UART_IRQHandler+0x29c>)
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fc fe58 	bl	80036e4 <HAL_DMA_Abort_IT>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d017      	beq.n	8006a6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00f      	b.n	8006a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9d4 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00b      	b.n	8006a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9d0 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e007      	b.n	8006a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9cc 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a68:	e1b1      	b.n	8006dce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6a:	bf00      	nop
    return;
 8006a6c:	e1af      	b.n	8006dce <HAL_UART_IRQHandler+0x5f6>
 8006a6e:	bf00      	nop
 8006a70:	04000120 	.word	0x04000120
 8006a74:	080077cb 	.word	0x080077cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 816a 	bne.w	8006d56 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8163 	beq.w	8006d56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 815c 	beq.w	8006d56 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b40      	cmp	r3, #64	@ 0x40
 8006ab2:	f040 80d4 	bne.w	8006c5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80ad 	beq.w	8006c26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	f080 80a5 	bcs.w	8006c26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 8086 	bne.w	8006c04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1da      	bne.n	8006af8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e1      	bne.n	8006b42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ba2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ba8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e3      	bne.n	8006b7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006be6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006be8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e4      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fc fd32 	bl	8003668 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8f4 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c24:	e0d5      	b.n	8006dd2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c30:	429a      	cmp	r2, r3
 8006c32:	f040 80ce 	bne.w	8006dd2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	f040 80c5 	bne.w	8006dd2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8d8 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
      return;
 8006c5c:	e0b9      	b.n	8006dd2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80ab 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80a6 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e4      	bne.n	8006c8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ce4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0310 	bic.w	r3, r3, #16
 8006d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d2e:	61fb      	str	r3, [r7, #28]
 8006d30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	69b9      	ldr	r1, [r7, #24]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e4      	bne.n	8006d0c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f85c 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d54:	e03f      	b.n	8006dd6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <HAL_UART_IRQHandler+0x5a8>
 8006d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd66 	bl	800784a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7e:	e02d      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01c      	beq.n	8006dda <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
    }
    return;
 8006da8:	e017      	b.n	8006dda <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d012      	beq.n	8006ddc <HAL_UART_IRQHandler+0x604>
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd17 	bl	80077f6 <UART_EndTransmit_IT>
    return;
 8006dc8:	e008      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
      return;
 8006dca:	bf00      	nop
 8006dcc:	e006      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
    return;
 8006dce:	bf00      	nop
 8006dd0:	e004      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
      return;
 8006dd2:	bf00      	nop
 8006dd4:	e002      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
      return;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
    return;
 8006dda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ddc:	37e8      	adds	r7, #232	@ 0xe8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop

08006de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e28:	b08a      	sub	sp, #40	@ 0x28
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4ba4      	ldr	r3, [pc, #656]	@ (80070e4 <UART_SetConfig+0x2c0>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a99      	ldr	r2, [pc, #612]	@ (80070e8 <UART_SetConfig+0x2c4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a90      	ldr	r2, [pc, #576]	@ (80070ec <UART_SetConfig+0x2c8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d126      	bne.n	8006efc <UART_SetConfig+0xd8>
 8006eae:	4b90      	ldr	r3, [pc, #576]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d81b      	bhi.n	8006ef4 <UART_SetConfig+0xd0>
 8006ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <UART_SetConfig+0xa0>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e116      	b.n	800710a <UART_SetConfig+0x2e6>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e112      	b.n	800710a <UART_SetConfig+0x2e6>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e10e      	b.n	800710a <UART_SetConfig+0x2e6>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e10a      	b.n	800710a <UART_SetConfig+0x2e6>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e106      	b.n	800710a <UART_SetConfig+0x2e6>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a7c      	ldr	r2, [pc, #496]	@ (80070f4 <UART_SetConfig+0x2d0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d138      	bne.n	8006f78 <UART_SetConfig+0x154>
 8006f06:	4b7a      	ldr	r3, [pc, #488]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d82d      	bhi.n	8006f70 <UART_SetConfig+0x14c>
 8006f14:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <UART_SetConfig+0xf8>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	08006f71 	.word	0x08006f71
 8006f28:	08006f71 	.word	0x08006f71
 8006f2c:	08006f61 	.word	0x08006f61
 8006f30:	08006f71 	.word	0x08006f71
 8006f34:	08006f71 	.word	0x08006f71
 8006f38:	08006f71 	.word	0x08006f71
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f71 	.word	0x08006f71
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f69 	.word	0x08006f69
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e0d8      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5e:	e0d4      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e0d0      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6e:	e0cc      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f76:	e0c8      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80070f8 <UART_SetConfig+0x2d4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d125      	bne.n	8006fce <UART_SetConfig+0x1aa>
 8006f82:	4b5b      	ldr	r3, [pc, #364]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f8c:	2b30      	cmp	r3, #48	@ 0x30
 8006f8e:	d016      	beq.n	8006fbe <UART_SetConfig+0x19a>
 8006f90:	2b30      	cmp	r3, #48	@ 0x30
 8006f92:	d818      	bhi.n	8006fc6 <UART_SetConfig+0x1a2>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d00a      	beq.n	8006fae <UART_SetConfig+0x18a>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d814      	bhi.n	8006fc6 <UART_SetConfig+0x1a2>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <UART_SetConfig+0x182>
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d008      	beq.n	8006fb6 <UART_SetConfig+0x192>
 8006fa4:	e00f      	b.n	8006fc6 <UART_SetConfig+0x1a2>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fac:	e0ad      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb4:	e0a9      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbc:	e0a5      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc4:	e0a1      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fc6:	2310      	movs	r3, #16
 8006fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fcc:	e09d      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80070fc <UART_SetConfig+0x2d8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d125      	bne.n	8007024 <UART_SetConfig+0x200>
 8006fd8:	4b45      	ldr	r3, [pc, #276]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe4:	d016      	beq.n	8007014 <UART_SetConfig+0x1f0>
 8006fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe8:	d818      	bhi.n	800701c <UART_SetConfig+0x1f8>
 8006fea:	2b80      	cmp	r3, #128	@ 0x80
 8006fec:	d00a      	beq.n	8007004 <UART_SetConfig+0x1e0>
 8006fee:	2b80      	cmp	r3, #128	@ 0x80
 8006ff0:	d814      	bhi.n	800701c <UART_SetConfig+0x1f8>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <UART_SetConfig+0x1d8>
 8006ff6:	2b40      	cmp	r3, #64	@ 0x40
 8006ff8:	d008      	beq.n	800700c <UART_SetConfig+0x1e8>
 8006ffa:	e00f      	b.n	800701c <UART_SetConfig+0x1f8>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e082      	b.n	800710a <UART_SetConfig+0x2e6>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700a:	e07e      	b.n	800710a <UART_SetConfig+0x2e6>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007012:	e07a      	b.n	800710a <UART_SetConfig+0x2e6>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e076      	b.n	800710a <UART_SetConfig+0x2e6>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007022:	e072      	b.n	800710a <UART_SetConfig+0x2e6>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a35      	ldr	r2, [pc, #212]	@ (8007100 <UART_SetConfig+0x2dc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d12a      	bne.n	8007084 <UART_SetConfig+0x260>
 800702e:	4b30      	ldr	r3, [pc, #192]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8007030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800703c:	d01a      	beq.n	8007074 <UART_SetConfig+0x250>
 800703e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007042:	d81b      	bhi.n	800707c <UART_SetConfig+0x258>
 8007044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007048:	d00c      	beq.n	8007064 <UART_SetConfig+0x240>
 800704a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800704e:	d815      	bhi.n	800707c <UART_SetConfig+0x258>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <UART_SetConfig+0x238>
 8007054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007058:	d008      	beq.n	800706c <UART_SetConfig+0x248>
 800705a:	e00f      	b.n	800707c <UART_SetConfig+0x258>
 800705c:	2300      	movs	r3, #0
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e052      	b.n	800710a <UART_SetConfig+0x2e6>
 8007064:	2302      	movs	r3, #2
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e04e      	b.n	800710a <UART_SetConfig+0x2e6>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e04a      	b.n	800710a <UART_SetConfig+0x2e6>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707a:	e046      	b.n	800710a <UART_SetConfig+0x2e6>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007082:	e042      	b.n	800710a <UART_SetConfig+0x2e6>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a17      	ldr	r2, [pc, #92]	@ (80070e8 <UART_SetConfig+0x2c4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d13a      	bne.n	8007104 <UART_SetConfig+0x2e0>
 800708e:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007094:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800709c:	d01a      	beq.n	80070d4 <UART_SetConfig+0x2b0>
 800709e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070a2:	d81b      	bhi.n	80070dc <UART_SetConfig+0x2b8>
 80070a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a8:	d00c      	beq.n	80070c4 <UART_SetConfig+0x2a0>
 80070aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ae:	d815      	bhi.n	80070dc <UART_SetConfig+0x2b8>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <UART_SetConfig+0x298>
 80070b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b8:	d008      	beq.n	80070cc <UART_SetConfig+0x2a8>
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x2b8>
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e022      	b.n	800710a <UART_SetConfig+0x2e6>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e01e      	b.n	800710a <UART_SetConfig+0x2e6>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e01a      	b.n	800710a <UART_SetConfig+0x2e6>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e016      	b.n	800710a <UART_SetConfig+0x2e6>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e2:	e012      	b.n	800710a <UART_SetConfig+0x2e6>
 80070e4:	efff69f3 	.word	0xefff69f3
 80070e8:	40008000 	.word	0x40008000
 80070ec:	40013800 	.word	0x40013800
 80070f0:	40021000 	.word	0x40021000
 80070f4:	40004400 	.word	0x40004400
 80070f8:	40004800 	.word	0x40004800
 80070fc:	40004c00 	.word	0x40004c00
 8007100:	40005000 	.word	0x40005000
 8007104:	2310      	movs	r3, #16
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a9f      	ldr	r2, [pc, #636]	@ (800738c <UART_SetConfig+0x568>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d17a      	bne.n	800720a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007118:	2b08      	cmp	r3, #8
 800711a:	d824      	bhi.n	8007166 <UART_SetConfig+0x342>
 800711c:	a201      	add	r2, pc, #4	@ (adr r2, 8007124 <UART_SetConfig+0x300>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007149 	.word	0x08007149
 8007128:	08007167 	.word	0x08007167
 800712c:	08007151 	.word	0x08007151
 8007130:	08007167 	.word	0x08007167
 8007134:	08007157 	.word	0x08007157
 8007138:	08007167 	.word	0x08007167
 800713c:	08007167 	.word	0x08007167
 8007140:	08007167 	.word	0x08007167
 8007144:	0800715f 	.word	0x0800715f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007148:	f7fd fb6e 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 800714c:	61f8      	str	r0, [r7, #28]
        break;
 800714e:	e010      	b.n	8007172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007150:	4b8f      	ldr	r3, [pc, #572]	@ (8007390 <UART_SetConfig+0x56c>)
 8007152:	61fb      	str	r3, [r7, #28]
        break;
 8007154:	e00d      	b.n	8007172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007156:	f7fd facf 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800715a:	61f8      	str	r0, [r7, #28]
        break;
 800715c:	e009      	b.n	8007172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800715e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007162:	61fb      	str	r3, [r7, #28]
        break;
 8007164:	e005      	b.n	8007172 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80fb 	beq.w	8007370 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	4413      	add	r3, r2
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	429a      	cmp	r2, r3
 8007188:	d305      	bcc.n	8007196 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	429a      	cmp	r2, r3
 8007194:	d903      	bls.n	800719e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800719c:	e0e8      	b.n	8007370 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2200      	movs	r2, #0
 80071a2:	461c      	mov	r4, r3
 80071a4:	4615      	mov	r5, r2
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	022b      	lsls	r3, r5, #8
 80071b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071b4:	0222      	lsls	r2, r4, #8
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	6849      	ldr	r1, [r1, #4]
 80071ba:	0849      	lsrs	r1, r1, #1
 80071bc:	2000      	movs	r0, #0
 80071be:	4688      	mov	r8, r1
 80071c0:	4681      	mov	r9, r0
 80071c2:	eb12 0a08 	adds.w	sl, r2, r8
 80071c6:	eb43 0b09 	adc.w	fp, r3, r9
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	f7f9 f848 	bl	8000270 <__aeabi_uldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4613      	mov	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ee:	d308      	bcc.n	8007202 <UART_SetConfig+0x3de>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f6:	d204      	bcs.n	8007202 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	e0b6      	b.n	8007370 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007208:	e0b2      	b.n	8007370 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007212:	d15e      	bne.n	80072d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007214:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007218:	2b08      	cmp	r3, #8
 800721a:	d828      	bhi.n	800726e <UART_SetConfig+0x44a>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <UART_SetConfig+0x400>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007249 	.word	0x08007249
 8007228:	08007251 	.word	0x08007251
 800722c:	08007259 	.word	0x08007259
 8007230:	0800726f 	.word	0x0800726f
 8007234:	0800725f 	.word	0x0800725f
 8007238:	0800726f 	.word	0x0800726f
 800723c:	0800726f 	.word	0x0800726f
 8007240:	0800726f 	.word	0x0800726f
 8007244:	08007267 	.word	0x08007267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007248:	f7fd faee 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 800724c:	61f8      	str	r0, [r7, #28]
        break;
 800724e:	e014      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007250:	f7fd fb00 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 8007254:	61f8      	str	r0, [r7, #28]
        break;
 8007256:	e010      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007258:	4b4d      	ldr	r3, [pc, #308]	@ (8007390 <UART_SetConfig+0x56c>)
 800725a:	61fb      	str	r3, [r7, #28]
        break;
 800725c:	e00d      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725e:	f7fd fa4b 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8007262:	61f8      	str	r0, [r7, #28]
        break;
 8007264:	e009      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726a:	61fb      	str	r3, [r7, #28]
        break;
 800726c:	e005      	b.n	800727a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d077      	beq.n	8007370 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	005a      	lsls	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	441a      	add	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b0f      	cmp	r3, #15
 800729a:	d916      	bls.n	80072ca <UART_SetConfig+0x4a6>
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a2:	d212      	bcs.n	80072ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f023 030f 	bic.w	r3, r3, #15
 80072ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	8afb      	ldrh	r3, [r7, #22]
 80072bc:	4313      	orrs	r3, r2
 80072be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	8afa      	ldrh	r2, [r7, #22]
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	e052      	b.n	8007370 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072d0:	e04e      	b.n	8007370 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d827      	bhi.n	800732a <UART_SetConfig+0x506>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0x4bc>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007305 	.word	0x08007305
 80072e4:	0800730d 	.word	0x0800730d
 80072e8:	08007315 	.word	0x08007315
 80072ec:	0800732b 	.word	0x0800732b
 80072f0:	0800731b 	.word	0x0800731b
 80072f4:	0800732b 	.word	0x0800732b
 80072f8:	0800732b 	.word	0x0800732b
 80072fc:	0800732b 	.word	0x0800732b
 8007300:	08007323 	.word	0x08007323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007304:	f7fd fa90 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 8007308:	61f8      	str	r0, [r7, #28]
        break;
 800730a:	e014      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800730c:	f7fd faa2 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 8007310:	61f8      	str	r0, [r7, #28]
        break;
 8007312:	e010      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007314:	4b1e      	ldr	r3, [pc, #120]	@ (8007390 <UART_SetConfig+0x56c>)
 8007316:	61fb      	str	r3, [r7, #28]
        break;
 8007318:	e00d      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731a:	f7fd f9ed 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800731e:	61f8      	str	r0, [r7, #28]
        break;
 8007320:	e009      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007326:	61fb      	str	r3, [r7, #28]
        break;
 8007328:	e005      	b.n	8007336 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007334:	bf00      	nop
    }

    if (pclk != 0U)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d019      	beq.n	8007370 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	085a      	lsrs	r2, r3, #1
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d909      	bls.n	800736a <UART_SetConfig+0x546>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d205      	bcs.n	800736a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60da      	str	r2, [r3, #12]
 8007368:	e002      	b.n	8007370 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800737c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007380:	4618      	mov	r0, r3
 8007382:	3728      	adds	r7, #40	@ 0x28
 8007384:	46bd      	mov	sp, r7
 8007386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800738a:	bf00      	nop
 800738c:	40008000 	.word	0x40008000
 8007390:	00f42400 	.word	0x00f42400

08007394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01a      	beq.n	80074aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007492:	d10a      	bne.n	80074aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b098      	sub	sp, #96	@ 0x60
 80074dc:	af02      	add	r7, sp, #8
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074e8:	f7f9 fec6 	bl	8001278 <HAL_GetTick>
 80074ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d12e      	bne.n	800755a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007504:	2200      	movs	r2, #0
 8007506:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f88c 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d021      	beq.n	800755a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800752a:	653b      	str	r3, [r7, #80]	@ 0x50
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007534:	647b      	str	r3, [r7, #68]	@ 0x44
 8007536:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800753a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e062      	b.n	8007620 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d149      	bne.n	80075fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007570:	2200      	movs	r2, #0
 8007572:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f856 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d03c      	beq.n	80075fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	623b      	str	r3, [r7, #32]
   return(result);
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0301 	bic.w	r3, r3, #1
 80075ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075d4:	61fa      	str	r2, [r7, #28]
 80075d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	69b9      	ldr	r1, [r7, #24]
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	617b      	str	r3, [r7, #20]
   return(result);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e011      	b.n	8007620 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3758      	adds	r7, #88	@ 0x58
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007638:	e04f      	b.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d04b      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007642:	f7f9 fe19 	bl	8001278 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	429a      	cmp	r2, r3
 8007650:	d302      	bcc.n	8007658 <UART_WaitOnFlagUntilTimeout+0x30>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e04e      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d037      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b80      	cmp	r3, #128	@ 0x80
 800766e:	d034      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	d031      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b08      	cmp	r3, #8
 8007682:	d110      	bne.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2208      	movs	r2, #8
 800768a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f838 	bl	8007702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2208      	movs	r2, #8
 8007696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e029      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076b4:	d111      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f81e 	bl	8007702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e00f      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4013      	ands	r3, r2
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d0a0      	beq.n	800763a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b095      	sub	sp, #84	@ 0x54
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800771e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007728:	643b      	str	r3, [r7, #64]	@ 0x40
 800772a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800772e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	61fb      	str	r3, [r7, #28]
   return(result);
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800775c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800775e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e5      	bne.n	800773c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007774:	2b01      	cmp	r3, #1
 8007776:	d118      	bne.n	80077aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	60bb      	str	r3, [r7, #8]
   return(result);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f023 0310 	bic.w	r3, r3, #16
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	613b      	str	r3, [r7, #16]
   return(result);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077be:	bf00      	nop
 80077c0:	3754      	adds	r7, #84	@ 0x54
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff fb05 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60bb      	str	r3, [r7, #8]
   return(result);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fad1 	bl	8006de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007842:	bf00      	nop
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <std>:
 8007860:	2300      	movs	r3, #0
 8007862:	b510      	push	{r4, lr}
 8007864:	4604      	mov	r4, r0
 8007866:	e9c0 3300 	strd	r3, r3, [r0]
 800786a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800786e:	6083      	str	r3, [r0, #8]
 8007870:	8181      	strh	r1, [r0, #12]
 8007872:	6643      	str	r3, [r0, #100]	@ 0x64
 8007874:	81c2      	strh	r2, [r0, #14]
 8007876:	6183      	str	r3, [r0, #24]
 8007878:	4619      	mov	r1, r3
 800787a:	2208      	movs	r2, #8
 800787c:	305c      	adds	r0, #92	@ 0x5c
 800787e:	f000 f906 	bl	8007a8e <memset>
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <std+0x58>)
 8007884:	6263      	str	r3, [r4, #36]	@ 0x24
 8007886:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <std+0x5c>)
 8007888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800788a:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <std+0x60>)
 800788c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800788e:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <std+0x64>)
 8007890:	6323      	str	r3, [r4, #48]	@ 0x30
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <std+0x68>)
 8007894:	6224      	str	r4, [r4, #32]
 8007896:	429c      	cmp	r4, r3
 8007898:	d006      	beq.n	80078a8 <std+0x48>
 800789a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800789e:	4294      	cmp	r4, r2
 80078a0:	d002      	beq.n	80078a8 <std+0x48>
 80078a2:	33d0      	adds	r3, #208	@ 0xd0
 80078a4:	429c      	cmp	r4, r3
 80078a6:	d105      	bne.n	80078b4 <std+0x54>
 80078a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b0:	f000 b966 	b.w	8007b80 <__retarget_lock_init_recursive>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	bf00      	nop
 80078b8:	08007a09 	.word	0x08007a09
 80078bc:	08007a2b 	.word	0x08007a2b
 80078c0:	08007a63 	.word	0x08007a63
 80078c4:	08007a87 	.word	0x08007a87
 80078c8:	20000254 	.word	0x20000254

080078cc <stdio_exit_handler>:
 80078cc:	4a02      	ldr	r2, [pc, #8]	@ (80078d8 <stdio_exit_handler+0xc>)
 80078ce:	4903      	ldr	r1, [pc, #12]	@ (80078dc <stdio_exit_handler+0x10>)
 80078d0:	4803      	ldr	r0, [pc, #12]	@ (80078e0 <stdio_exit_handler+0x14>)
 80078d2:	f000 b869 	b.w	80079a8 <_fwalk_sglue>
 80078d6:	bf00      	nop
 80078d8:	2000000c 	.word	0x2000000c
 80078dc:	08008421 	.word	0x08008421
 80078e0:	2000001c 	.word	0x2000001c

080078e4 <cleanup_stdio>:
 80078e4:	6841      	ldr	r1, [r0, #4]
 80078e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <cleanup_stdio+0x34>)
 80078e8:	4299      	cmp	r1, r3
 80078ea:	b510      	push	{r4, lr}
 80078ec:	4604      	mov	r4, r0
 80078ee:	d001      	beq.n	80078f4 <cleanup_stdio+0x10>
 80078f0:	f000 fd96 	bl	8008420 <_fflush_r>
 80078f4:	68a1      	ldr	r1, [r4, #8]
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <cleanup_stdio+0x38>)
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d002      	beq.n	8007902 <cleanup_stdio+0x1e>
 80078fc:	4620      	mov	r0, r4
 80078fe:	f000 fd8f 	bl	8008420 <_fflush_r>
 8007902:	68e1      	ldr	r1, [r4, #12]
 8007904:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <cleanup_stdio+0x3c>)
 8007906:	4299      	cmp	r1, r3
 8007908:	d004      	beq.n	8007914 <cleanup_stdio+0x30>
 800790a:	4620      	mov	r0, r4
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f000 bd86 	b.w	8008420 <_fflush_r>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	bf00      	nop
 8007918:	20000254 	.word	0x20000254
 800791c:	200002bc 	.word	0x200002bc
 8007920:	20000324 	.word	0x20000324

08007924 <global_stdio_init.part.0>:
 8007924:	b510      	push	{r4, lr}
 8007926:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <global_stdio_init.part.0+0x30>)
 8007928:	4c0b      	ldr	r4, [pc, #44]	@ (8007958 <global_stdio_init.part.0+0x34>)
 800792a:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <global_stdio_init.part.0+0x38>)
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	4620      	mov	r0, r4
 8007930:	2200      	movs	r2, #0
 8007932:	2104      	movs	r1, #4
 8007934:	f7ff ff94 	bl	8007860 <std>
 8007938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800793c:	2201      	movs	r2, #1
 800793e:	2109      	movs	r1, #9
 8007940:	f7ff ff8e 	bl	8007860 <std>
 8007944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007948:	2202      	movs	r2, #2
 800794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794e:	2112      	movs	r1, #18
 8007950:	f7ff bf86 	b.w	8007860 <std>
 8007954:	2000038c 	.word	0x2000038c
 8007958:	20000254 	.word	0x20000254
 800795c:	080078cd 	.word	0x080078cd

08007960 <__sfp_lock_acquire>:
 8007960:	4801      	ldr	r0, [pc, #4]	@ (8007968 <__sfp_lock_acquire+0x8>)
 8007962:	f000 b90e 	b.w	8007b82 <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	20000395 	.word	0x20000395

0800796c <__sfp_lock_release>:
 800796c:	4801      	ldr	r0, [pc, #4]	@ (8007974 <__sfp_lock_release+0x8>)
 800796e:	f000 b909 	b.w	8007b84 <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	20000395 	.word	0x20000395

08007978 <__sinit>:
 8007978:	b510      	push	{r4, lr}
 800797a:	4604      	mov	r4, r0
 800797c:	f7ff fff0 	bl	8007960 <__sfp_lock_acquire>
 8007980:	6a23      	ldr	r3, [r4, #32]
 8007982:	b11b      	cbz	r3, 800798c <__sinit+0x14>
 8007984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007988:	f7ff bff0 	b.w	800796c <__sfp_lock_release>
 800798c:	4b04      	ldr	r3, [pc, #16]	@ (80079a0 <__sinit+0x28>)
 800798e:	6223      	str	r3, [r4, #32]
 8007990:	4b04      	ldr	r3, [pc, #16]	@ (80079a4 <__sinit+0x2c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f5      	bne.n	8007984 <__sinit+0xc>
 8007998:	f7ff ffc4 	bl	8007924 <global_stdio_init.part.0>
 800799c:	e7f2      	b.n	8007984 <__sinit+0xc>
 800799e:	bf00      	nop
 80079a0:	080078e5 	.word	0x080078e5
 80079a4:	2000038c 	.word	0x2000038c

080079a8 <_fwalk_sglue>:
 80079a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ac:	4607      	mov	r7, r0
 80079ae:	4688      	mov	r8, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	2600      	movs	r6, #0
 80079b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079b8:	f1b9 0901 	subs.w	r9, r9, #1
 80079bc:	d505      	bpl.n	80079ca <_fwalk_sglue+0x22>
 80079be:	6824      	ldr	r4, [r4, #0]
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d1f7      	bne.n	80079b4 <_fwalk_sglue+0xc>
 80079c4:	4630      	mov	r0, r6
 80079c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d907      	bls.n	80079e0 <_fwalk_sglue+0x38>
 80079d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079d4:	3301      	adds	r3, #1
 80079d6:	d003      	beq.n	80079e0 <_fwalk_sglue+0x38>
 80079d8:	4629      	mov	r1, r5
 80079da:	4638      	mov	r0, r7
 80079dc:	47c0      	blx	r8
 80079de:	4306      	orrs	r6, r0
 80079e0:	3568      	adds	r5, #104	@ 0x68
 80079e2:	e7e9      	b.n	80079b8 <_fwalk_sglue+0x10>

080079e4 <iprintf>:
 80079e4:	b40f      	push	{r0, r1, r2, r3}
 80079e6:	b507      	push	{r0, r1, r2, lr}
 80079e8:	4906      	ldr	r1, [pc, #24]	@ (8007a04 <iprintf+0x20>)
 80079ea:	ab04      	add	r3, sp, #16
 80079ec:	6808      	ldr	r0, [r1, #0]
 80079ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f2:	6881      	ldr	r1, [r0, #8]
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	f000 f9e9 	bl	8007dcc <_vfiprintf_r>
 80079fa:	b003      	add	sp, #12
 80079fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a00:	b004      	add	sp, #16
 8007a02:	4770      	bx	lr
 8007a04:	20000018 	.word	0x20000018

08007a08 <__sread>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	f000 f868 	bl	8007ae4 <_read_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	bfab      	itete	ge
 8007a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a1c:	181b      	addge	r3, r3, r0
 8007a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a22:	bfac      	ite	ge
 8007a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a26:	81a3      	strhlt	r3, [r4, #12]
 8007a28:	bd10      	pop	{r4, pc}

08007a2a <__swrite>:
 8007a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	461f      	mov	r7, r3
 8007a30:	898b      	ldrh	r3, [r1, #12]
 8007a32:	05db      	lsls	r3, r3, #23
 8007a34:	4605      	mov	r5, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	4616      	mov	r6, r2
 8007a3a:	d505      	bpl.n	8007a48 <__swrite+0x1e>
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2302      	movs	r3, #2
 8007a42:	2200      	movs	r2, #0
 8007a44:	f000 f83c 	bl	8007ac0 <_lseek_r>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	4632      	mov	r2, r6
 8007a56:	463b      	mov	r3, r7
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	f000 b853 	b.w	8007b08 <_write_r>

08007a62 <__sseek>:
 8007a62:	b510      	push	{r4, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6a:	f000 f829 	bl	8007ac0 <_lseek_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	bf15      	itete	ne
 8007a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a7e:	81a3      	strheq	r3, [r4, #12]
 8007a80:	bf18      	it	ne
 8007a82:	81a3      	strhne	r3, [r4, #12]
 8007a84:	bd10      	pop	{r4, pc}

08007a86 <__sclose>:
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	f000 b809 	b.w	8007aa0 <_close_r>

08007a8e <memset>:
 8007a8e:	4402      	add	r2, r0
 8007a90:	4603      	mov	r3, r0
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d100      	bne.n	8007a98 <memset+0xa>
 8007a96:	4770      	bx	lr
 8007a98:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9c:	e7f9      	b.n	8007a92 <memset+0x4>
	...

08007aa0 <_close_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	@ (8007abc <_close_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7f9 fad5 	bl	800105a <_close>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_close_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_close_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20000390 	.word	0x20000390

08007ac0 <_lseek_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	@ (8007ae0 <_lseek_r+0x20>)
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7f9 faea 	bl	80010a8 <_lseek>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_lseek_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_lseek_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000390 	.word	0x20000390

08007ae4 <_read_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_read_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 fa78 	bl	8000fe8 <_read>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_read_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_read_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20000390 	.word	0x20000390

08007b08 <_write_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_write_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 fa83 	bl	8001022 <_write>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_write_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_write_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20000390 	.word	0x20000390

08007b2c <__errno>:
 8007b2c:	4b01      	ldr	r3, [pc, #4]	@ (8007b34 <__errno+0x8>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000018 	.word	0x20000018

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007b70 <__libc_init_array+0x38>)
 8007b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007b74 <__libc_init_array+0x3c>)
 8007b3e:	1b64      	subs	r4, r4, r5
 8007b40:	10a4      	asrs	r4, r4, #2
 8007b42:	2600      	movs	r6, #0
 8007b44:	42a6      	cmp	r6, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	4d0b      	ldr	r5, [pc, #44]	@ (8007b78 <__libc_init_array+0x40>)
 8007b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b7c <__libc_init_array+0x44>)
 8007b4c:	f000 fdb8 	bl	80086c0 <_init>
 8007b50:	1b64      	subs	r4, r4, r5
 8007b52:	10a4      	asrs	r4, r4, #2
 8007b54:	2600      	movs	r6, #0
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b60:	4798      	blx	r3
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6a:	4798      	blx	r3
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	08008784 	.word	0x08008784
 8007b74:	08008784 	.word	0x08008784
 8007b78:	08008784 	.word	0x08008784
 8007b7c:	08008788 	.word	0x08008788

08007b80 <__retarget_lock_init_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_acquire_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <__retarget_lock_release_recursive>:
 8007b84:	4770      	bx	lr
	...

08007b88 <_free_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d041      	beq.n	8007c14 <_free_r+0x8c>
 8007b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b94:	1f0c      	subs	r4, r1, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	18e4      	addlt	r4, r4, r3
 8007b9c:	f000 f8e0 	bl	8007d60 <__malloc_lock>
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <_free_r+0x90>)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	b933      	cbnz	r3, 8007bb4 <_free_r+0x2c>
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6014      	str	r4, [r2, #0]
 8007baa:	4628      	mov	r0, r5
 8007bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb0:	f000 b8dc 	b.w	8007d6c <__malloc_unlock>
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d908      	bls.n	8007bca <_free_r+0x42>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	1821      	adds	r1, r4, r0
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	bf01      	itttt	eq
 8007bc0:	6819      	ldreq	r1, [r3, #0]
 8007bc2:	685b      	ldreq	r3, [r3, #4]
 8007bc4:	1809      	addeq	r1, r1, r0
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	e7ed      	b.n	8007ba6 <_free_r+0x1e>
 8007bca:	461a      	mov	r2, r3
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b10b      	cbz	r3, 8007bd4 <_free_r+0x4c>
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d9fa      	bls.n	8007bca <_free_r+0x42>
 8007bd4:	6811      	ldr	r1, [r2, #0]
 8007bd6:	1850      	adds	r0, r2, r1
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	d10b      	bne.n	8007bf4 <_free_r+0x6c>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	4401      	add	r1, r0
 8007be0:	1850      	adds	r0, r2, r1
 8007be2:	4283      	cmp	r3, r0
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	d1e0      	bne.n	8007baa <_free_r+0x22>
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	6053      	str	r3, [r2, #4]
 8007bee:	4408      	add	r0, r1
 8007bf0:	6010      	str	r0, [r2, #0]
 8007bf2:	e7da      	b.n	8007baa <_free_r+0x22>
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x74>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	e7d6      	b.n	8007baa <_free_r+0x22>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf04      	itt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	bf04      	itt	eq
 8007c0c:	1809      	addeq	r1, r1, r0
 8007c0e:	6021      	streq	r1, [r4, #0]
 8007c10:	6054      	str	r4, [r2, #4]
 8007c12:	e7ca      	b.n	8007baa <_free_r+0x22>
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	2000039c 	.word	0x2000039c

08007c1c <sbrk_aligned>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c5c <sbrk_aligned+0x40>)
 8007c20:	460c      	mov	r4, r1
 8007c22:	6831      	ldr	r1, [r6, #0]
 8007c24:	4605      	mov	r5, r0
 8007c26:	b911      	cbnz	r1, 8007c2e <sbrk_aligned+0x12>
 8007c28:	f000 fcb6 	bl	8008598 <_sbrk_r>
 8007c2c:	6030      	str	r0, [r6, #0]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 fcb1 	bl	8008598 <_sbrk_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d103      	bne.n	8007c42 <sbrk_aligned+0x26>
 8007c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c3e:	4620      	mov	r0, r4
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	1cc4      	adds	r4, r0, #3
 8007c44:	f024 0403 	bic.w	r4, r4, #3
 8007c48:	42a0      	cmp	r0, r4
 8007c4a:	d0f8      	beq.n	8007c3e <sbrk_aligned+0x22>
 8007c4c:	1a21      	subs	r1, r4, r0
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 fca2 	bl	8008598 <_sbrk_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	d1f2      	bne.n	8007c3e <sbrk_aligned+0x22>
 8007c58:	e7ef      	b.n	8007c3a <sbrk_aligned+0x1e>
 8007c5a:	bf00      	nop
 8007c5c:	20000398 	.word	0x20000398

08007c60 <_malloc_r>:
 8007c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c64:	1ccd      	adds	r5, r1, #3
 8007c66:	f025 0503 	bic.w	r5, r5, #3
 8007c6a:	3508      	adds	r5, #8
 8007c6c:	2d0c      	cmp	r5, #12
 8007c6e:	bf38      	it	cc
 8007c70:	250c      	movcc	r5, #12
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	4606      	mov	r6, r0
 8007c76:	db01      	blt.n	8007c7c <_malloc_r+0x1c>
 8007c78:	42a9      	cmp	r1, r5
 8007c7a:	d904      	bls.n	8007c86 <_malloc_r+0x26>
 8007c7c:	230c      	movs	r3, #12
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	2000      	movs	r0, #0
 8007c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d5c <_malloc_r+0xfc>
 8007c8a:	f000 f869 	bl	8007d60 <__malloc_lock>
 8007c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c92:	461c      	mov	r4, r3
 8007c94:	bb44      	cbnz	r4, 8007ce8 <_malloc_r+0x88>
 8007c96:	4629      	mov	r1, r5
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff ffbf 	bl	8007c1c <sbrk_aligned>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	d158      	bne.n	8007d56 <_malloc_r+0xf6>
 8007ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ca8:	4627      	mov	r7, r4
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	d143      	bne.n	8007d36 <_malloc_r+0xd6>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	d04b      	beq.n	8007d4a <_malloc_r+0xea>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	eb04 0903 	add.w	r9, r4, r3
 8007cbc:	f000 fc6c 	bl	8008598 <_sbrk_r>
 8007cc0:	4581      	cmp	r9, r0
 8007cc2:	d142      	bne.n	8007d4a <_malloc_r+0xea>
 8007cc4:	6821      	ldr	r1, [r4, #0]
 8007cc6:	1a6d      	subs	r5, r5, r1
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff ffa6 	bl	8007c1c <sbrk_aligned>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d03a      	beq.n	8007d4a <_malloc_r+0xea>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	442b      	add	r3, r5
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	f8d8 3000 	ldr.w	r3, [r8]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	bb62      	cbnz	r2, 8007d3c <_malloc_r+0xdc>
 8007ce2:	f8c8 7000 	str.w	r7, [r8]
 8007ce6:	e00f      	b.n	8007d08 <_malloc_r+0xa8>
 8007ce8:	6822      	ldr	r2, [r4, #0]
 8007cea:	1b52      	subs	r2, r2, r5
 8007cec:	d420      	bmi.n	8007d30 <_malloc_r+0xd0>
 8007cee:	2a0b      	cmp	r2, #11
 8007cf0:	d917      	bls.n	8007d22 <_malloc_r+0xc2>
 8007cf2:	1961      	adds	r1, r4, r5
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	6025      	str	r5, [r4, #0]
 8007cf8:	bf18      	it	ne
 8007cfa:	6059      	strne	r1, [r3, #4]
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	bf08      	it	eq
 8007d00:	f8c8 1000 	streq.w	r1, [r8]
 8007d04:	5162      	str	r2, [r4, r5]
 8007d06:	604b      	str	r3, [r1, #4]
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f82f 	bl	8007d6c <__malloc_unlock>
 8007d0e:	f104 000b 	add.w	r0, r4, #11
 8007d12:	1d23      	adds	r3, r4, #4
 8007d14:	f020 0007 	bic.w	r0, r0, #7
 8007d18:	1ac2      	subs	r2, r0, r3
 8007d1a:	bf1c      	itt	ne
 8007d1c:	1a1b      	subne	r3, r3, r0
 8007d1e:	50a3      	strne	r3, [r4, r2]
 8007d20:	e7af      	b.n	8007c82 <_malloc_r+0x22>
 8007d22:	6862      	ldr	r2, [r4, #4]
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	bf0c      	ite	eq
 8007d28:	f8c8 2000 	streq.w	r2, [r8]
 8007d2c:	605a      	strne	r2, [r3, #4]
 8007d2e:	e7eb      	b.n	8007d08 <_malloc_r+0xa8>
 8007d30:	4623      	mov	r3, r4
 8007d32:	6864      	ldr	r4, [r4, #4]
 8007d34:	e7ae      	b.n	8007c94 <_malloc_r+0x34>
 8007d36:	463c      	mov	r4, r7
 8007d38:	687f      	ldr	r7, [r7, #4]
 8007d3a:	e7b6      	b.n	8007caa <_malloc_r+0x4a>
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d1fb      	bne.n	8007d3c <_malloc_r+0xdc>
 8007d44:	2300      	movs	r3, #0
 8007d46:	6053      	str	r3, [r2, #4]
 8007d48:	e7de      	b.n	8007d08 <_malloc_r+0xa8>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	6033      	str	r3, [r6, #0]
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 f80c 	bl	8007d6c <__malloc_unlock>
 8007d54:	e794      	b.n	8007c80 <_malloc_r+0x20>
 8007d56:	6005      	str	r5, [r0, #0]
 8007d58:	e7d6      	b.n	8007d08 <_malloc_r+0xa8>
 8007d5a:	bf00      	nop
 8007d5c:	2000039c 	.word	0x2000039c

08007d60 <__malloc_lock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	@ (8007d68 <__malloc_lock+0x8>)
 8007d62:	f7ff bf0e 	b.w	8007b82 <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	20000394 	.word	0x20000394

08007d6c <__malloc_unlock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	@ (8007d74 <__malloc_unlock+0x8>)
 8007d6e:	f7ff bf09 	b.w	8007b84 <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	20000394 	.word	0x20000394

08007d78 <__sfputc_r>:
 8007d78:	6893      	ldr	r3, [r2, #8]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	b410      	push	{r4}
 8007d80:	6093      	str	r3, [r2, #8]
 8007d82:	da08      	bge.n	8007d96 <__sfputc_r+0x1e>
 8007d84:	6994      	ldr	r4, [r2, #24]
 8007d86:	42a3      	cmp	r3, r4
 8007d88:	db01      	blt.n	8007d8e <__sfputc_r+0x16>
 8007d8a:	290a      	cmp	r1, #10
 8007d8c:	d103      	bne.n	8007d96 <__sfputc_r+0x1e>
 8007d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d92:	f000 bb6d 	b.w	8008470 <__swbuf_r>
 8007d96:	6813      	ldr	r3, [r2, #0]
 8007d98:	1c58      	adds	r0, r3, #1
 8007d9a:	6010      	str	r0, [r2, #0]
 8007d9c:	7019      	strb	r1, [r3, #0]
 8007d9e:	4608      	mov	r0, r1
 8007da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <__sfputs_r>:
 8007da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da8:	4606      	mov	r6, r0
 8007daa:	460f      	mov	r7, r1
 8007dac:	4614      	mov	r4, r2
 8007dae:	18d5      	adds	r5, r2, r3
 8007db0:	42ac      	cmp	r4, r5
 8007db2:	d101      	bne.n	8007db8 <__sfputs_r+0x12>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e007      	b.n	8007dc8 <__sfputs_r+0x22>
 8007db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dbc:	463a      	mov	r2, r7
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7ff ffda 	bl	8007d78 <__sfputc_r>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d1f3      	bne.n	8007db0 <__sfputs_r+0xa>
 8007dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dcc <_vfiprintf_r>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	460d      	mov	r5, r1
 8007dd2:	b09d      	sub	sp, #116	@ 0x74
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	4698      	mov	r8, r3
 8007dd8:	4606      	mov	r6, r0
 8007dda:	b118      	cbz	r0, 8007de4 <_vfiprintf_r+0x18>
 8007ddc:	6a03      	ldr	r3, [r0, #32]
 8007dde:	b90b      	cbnz	r3, 8007de4 <_vfiprintf_r+0x18>
 8007de0:	f7ff fdca 	bl	8007978 <__sinit>
 8007de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007de6:	07d9      	lsls	r1, r3, #31
 8007de8:	d405      	bmi.n	8007df6 <_vfiprintf_r+0x2a>
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	059a      	lsls	r2, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_vfiprintf_r+0x2a>
 8007df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007df2:	f7ff fec6 	bl	8007b82 <__retarget_lock_acquire_recursive>
 8007df6:	89ab      	ldrh	r3, [r5, #12]
 8007df8:	071b      	lsls	r3, r3, #28
 8007dfa:	d501      	bpl.n	8007e00 <_vfiprintf_r+0x34>
 8007dfc:	692b      	ldr	r3, [r5, #16]
 8007dfe:	b99b      	cbnz	r3, 8007e28 <_vfiprintf_r+0x5c>
 8007e00:	4629      	mov	r1, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f000 fb72 	bl	80084ec <__swsetup_r>
 8007e08:	b170      	cbz	r0, 8007e28 <_vfiprintf_r+0x5c>
 8007e0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e0c:	07dc      	lsls	r4, r3, #31
 8007e0e:	d504      	bpl.n	8007e1a <_vfiprintf_r+0x4e>
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	b01d      	add	sp, #116	@ 0x74
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	0598      	lsls	r0, r3, #22
 8007e1e:	d4f7      	bmi.n	8007e10 <_vfiprintf_r+0x44>
 8007e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e22:	f7ff feaf 	bl	8007b84 <__retarget_lock_release_recursive>
 8007e26:	e7f3      	b.n	8007e10 <_vfiprintf_r+0x44>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e36:	2330      	movs	r3, #48	@ 0x30
 8007e38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fe8 <_vfiprintf_r+0x21c>
 8007e3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e40:	f04f 0901 	mov.w	r9, #1
 8007e44:	4623      	mov	r3, r4
 8007e46:	469a      	mov	sl, r3
 8007e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e4c:	b10a      	cbz	r2, 8007e52 <_vfiprintf_r+0x86>
 8007e4e:	2a25      	cmp	r2, #37	@ 0x25
 8007e50:	d1f9      	bne.n	8007e46 <_vfiprintf_r+0x7a>
 8007e52:	ebba 0b04 	subs.w	fp, sl, r4
 8007e56:	d00b      	beq.n	8007e70 <_vfiprintf_r+0xa4>
 8007e58:	465b      	mov	r3, fp
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ffa1 	bl	8007da6 <__sfputs_r>
 8007e64:	3001      	adds	r0, #1
 8007e66:	f000 80a7 	beq.w	8007fb8 <_vfiprintf_r+0x1ec>
 8007e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e6c:	445a      	add	r2, fp
 8007e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e70:	f89a 3000 	ldrb.w	r3, [sl]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 809f 	beq.w	8007fb8 <_vfiprintf_r+0x1ec>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e84:	f10a 0a01 	add.w	sl, sl, #1
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	9307      	str	r3, [sp, #28]
 8007e8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e90:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e92:	4654      	mov	r4, sl
 8007e94:	2205      	movs	r2, #5
 8007e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9a:	4853      	ldr	r0, [pc, #332]	@ (8007fe8 <_vfiprintf_r+0x21c>)
 8007e9c:	f7f8 f998 	bl	80001d0 <memchr>
 8007ea0:	9a04      	ldr	r2, [sp, #16]
 8007ea2:	b9d8      	cbnz	r0, 8007edc <_vfiprintf_r+0x110>
 8007ea4:	06d1      	lsls	r1, r2, #27
 8007ea6:	bf44      	itt	mi
 8007ea8:	2320      	movmi	r3, #32
 8007eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eae:	0713      	lsls	r3, r2, #28
 8007eb0:	bf44      	itt	mi
 8007eb2:	232b      	movmi	r3, #43	@ 0x2b
 8007eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ebe:	d015      	beq.n	8007eec <_vfiprintf_r+0x120>
 8007ec0:	9a07      	ldr	r2, [sp, #28]
 8007ec2:	4654      	mov	r4, sl
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f04f 0c0a 	mov.w	ip, #10
 8007eca:	4621      	mov	r1, r4
 8007ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ed0:	3b30      	subs	r3, #48	@ 0x30
 8007ed2:	2b09      	cmp	r3, #9
 8007ed4:	d94b      	bls.n	8007f6e <_vfiprintf_r+0x1a2>
 8007ed6:	b1b0      	cbz	r0, 8007f06 <_vfiprintf_r+0x13a>
 8007ed8:	9207      	str	r2, [sp, #28]
 8007eda:	e014      	b.n	8007f06 <_vfiprintf_r+0x13a>
 8007edc:	eba0 0308 	sub.w	r3, r0, r8
 8007ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	46a2      	mov	sl, r4
 8007eea:	e7d2      	b.n	8007e92 <_vfiprintf_r+0xc6>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	1d19      	adds	r1, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	9103      	str	r1, [sp, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfbb      	ittet	lt
 8007ef8:	425b      	neglt	r3, r3
 8007efa:	f042 0202 	orrlt.w	r2, r2, #2
 8007efe:	9307      	strge	r3, [sp, #28]
 8007f00:	9307      	strlt	r3, [sp, #28]
 8007f02:	bfb8      	it	lt
 8007f04:	9204      	strlt	r2, [sp, #16]
 8007f06:	7823      	ldrb	r3, [r4, #0]
 8007f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f0a:	d10a      	bne.n	8007f22 <_vfiprintf_r+0x156>
 8007f0c:	7863      	ldrb	r3, [r4, #1]
 8007f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f10:	d132      	bne.n	8007f78 <_vfiprintf_r+0x1ac>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	1d1a      	adds	r2, r3, #4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	9203      	str	r2, [sp, #12]
 8007f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f1e:	3402      	adds	r4, #2
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ff8 <_vfiprintf_r+0x22c>
 8007f26:	7821      	ldrb	r1, [r4, #0]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	f7f8 f950 	bl	80001d0 <memchr>
 8007f30:	b138      	cbz	r0, 8007f42 <_vfiprintf_r+0x176>
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	eba0 000a 	sub.w	r0, r0, sl
 8007f38:	2240      	movs	r2, #64	@ 0x40
 8007f3a:	4082      	lsls	r2, r0
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	3401      	adds	r4, #1
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f46:	4829      	ldr	r0, [pc, #164]	@ (8007fec <_vfiprintf_r+0x220>)
 8007f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f4c:	2206      	movs	r2, #6
 8007f4e:	f7f8 f93f 	bl	80001d0 <memchr>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d03f      	beq.n	8007fd6 <_vfiprintf_r+0x20a>
 8007f56:	4b26      	ldr	r3, [pc, #152]	@ (8007ff0 <_vfiprintf_r+0x224>)
 8007f58:	bb1b      	cbnz	r3, 8007fa2 <_vfiprintf_r+0x1d6>
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	3307      	adds	r3, #7
 8007f5e:	f023 0307 	bic.w	r3, r3, #7
 8007f62:	3308      	adds	r3, #8
 8007f64:	9303      	str	r3, [sp, #12]
 8007f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f68:	443b      	add	r3, r7
 8007f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f6c:	e76a      	b.n	8007e44 <_vfiprintf_r+0x78>
 8007f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f72:	460c      	mov	r4, r1
 8007f74:	2001      	movs	r0, #1
 8007f76:	e7a8      	b.n	8007eca <_vfiprintf_r+0xfe>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	3401      	adds	r4, #1
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	f04f 0c0a 	mov.w	ip, #10
 8007f84:	4620      	mov	r0, r4
 8007f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f8a:	3a30      	subs	r2, #48	@ 0x30
 8007f8c:	2a09      	cmp	r2, #9
 8007f8e:	d903      	bls.n	8007f98 <_vfiprintf_r+0x1cc>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0c6      	beq.n	8007f22 <_vfiprintf_r+0x156>
 8007f94:	9105      	str	r1, [sp, #20]
 8007f96:	e7c4      	b.n	8007f22 <_vfiprintf_r+0x156>
 8007f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e7f0      	b.n	8007f84 <_vfiprintf_r+0x1b8>
 8007fa2:	ab03      	add	r3, sp, #12
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <_vfiprintf_r+0x228>)
 8007faa:	a904      	add	r1, sp, #16
 8007fac:	4630      	mov	r0, r6
 8007fae:	f3af 8000 	nop.w
 8007fb2:	4607      	mov	r7, r0
 8007fb4:	1c78      	adds	r0, r7, #1
 8007fb6:	d1d6      	bne.n	8007f66 <_vfiprintf_r+0x19a>
 8007fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fba:	07d9      	lsls	r1, r3, #31
 8007fbc:	d405      	bmi.n	8007fca <_vfiprintf_r+0x1fe>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	059a      	lsls	r2, r3, #22
 8007fc2:	d402      	bmi.n	8007fca <_vfiprintf_r+0x1fe>
 8007fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fc6:	f7ff fddd 	bl	8007b84 <__retarget_lock_release_recursive>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	065b      	lsls	r3, r3, #25
 8007fce:	f53f af1f 	bmi.w	8007e10 <_vfiprintf_r+0x44>
 8007fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fd4:	e71e      	b.n	8007e14 <_vfiprintf_r+0x48>
 8007fd6:	ab03      	add	r3, sp, #12
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	462a      	mov	r2, r5
 8007fdc:	4b05      	ldr	r3, [pc, #20]	@ (8007ff4 <_vfiprintf_r+0x228>)
 8007fde:	a904      	add	r1, sp, #16
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f879 	bl	80080d8 <_printf_i>
 8007fe6:	e7e4      	b.n	8007fb2 <_vfiprintf_r+0x1e6>
 8007fe8:	08008748 	.word	0x08008748
 8007fec:	08008752 	.word	0x08008752
 8007ff0:	00000000 	.word	0x00000000
 8007ff4:	08007da7 	.word	0x08007da7
 8007ff8:	0800874e 	.word	0x0800874e

08007ffc <_printf_common>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	4616      	mov	r6, r2
 8008002:	4698      	mov	r8, r3
 8008004:	688a      	ldr	r2, [r1, #8]
 8008006:	690b      	ldr	r3, [r1, #16]
 8008008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800800c:	4293      	cmp	r3, r2
 800800e:	bfb8      	it	lt
 8008010:	4613      	movlt	r3, r2
 8008012:	6033      	str	r3, [r6, #0]
 8008014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008018:	4607      	mov	r7, r0
 800801a:	460c      	mov	r4, r1
 800801c:	b10a      	cbz	r2, 8008022 <_printf_common+0x26>
 800801e:	3301      	adds	r3, #1
 8008020:	6033      	str	r3, [r6, #0]
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	0699      	lsls	r1, r3, #26
 8008026:	bf42      	ittt	mi
 8008028:	6833      	ldrmi	r3, [r6, #0]
 800802a:	3302      	addmi	r3, #2
 800802c:	6033      	strmi	r3, [r6, #0]
 800802e:	6825      	ldr	r5, [r4, #0]
 8008030:	f015 0506 	ands.w	r5, r5, #6
 8008034:	d106      	bne.n	8008044 <_printf_common+0x48>
 8008036:	f104 0a19 	add.w	sl, r4, #25
 800803a:	68e3      	ldr	r3, [r4, #12]
 800803c:	6832      	ldr	r2, [r6, #0]
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	42ab      	cmp	r3, r5
 8008042:	dc26      	bgt.n	8008092 <_printf_common+0x96>
 8008044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	3b00      	subs	r3, #0
 800804c:	bf18      	it	ne
 800804e:	2301      	movne	r3, #1
 8008050:	0692      	lsls	r2, r2, #26
 8008052:	d42b      	bmi.n	80080ac <_printf_common+0xb0>
 8008054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008058:	4641      	mov	r1, r8
 800805a:	4638      	mov	r0, r7
 800805c:	47c8      	blx	r9
 800805e:	3001      	adds	r0, #1
 8008060:	d01e      	beq.n	80080a0 <_printf_common+0xa4>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	6922      	ldr	r2, [r4, #16]
 8008066:	f003 0306 	and.w	r3, r3, #6
 800806a:	2b04      	cmp	r3, #4
 800806c:	bf02      	ittt	eq
 800806e:	68e5      	ldreq	r5, [r4, #12]
 8008070:	6833      	ldreq	r3, [r6, #0]
 8008072:	1aed      	subeq	r5, r5, r3
 8008074:	68a3      	ldr	r3, [r4, #8]
 8008076:	bf0c      	ite	eq
 8008078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800807c:	2500      	movne	r5, #0
 800807e:	4293      	cmp	r3, r2
 8008080:	bfc4      	itt	gt
 8008082:	1a9b      	subgt	r3, r3, r2
 8008084:	18ed      	addgt	r5, r5, r3
 8008086:	2600      	movs	r6, #0
 8008088:	341a      	adds	r4, #26
 800808a:	42b5      	cmp	r5, r6
 800808c:	d11a      	bne.n	80080c4 <_printf_common+0xc8>
 800808e:	2000      	movs	r0, #0
 8008090:	e008      	b.n	80080a4 <_printf_common+0xa8>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4641      	mov	r1, r8
 8008098:	4638      	mov	r0, r7
 800809a:	47c8      	blx	r9
 800809c:	3001      	adds	r0, #1
 800809e:	d103      	bne.n	80080a8 <_printf_common+0xac>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a8:	3501      	adds	r5, #1
 80080aa:	e7c6      	b.n	800803a <_printf_common+0x3e>
 80080ac:	18e1      	adds	r1, r4, r3
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	2030      	movs	r0, #48	@ 0x30
 80080b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080b6:	4422      	add	r2, r4
 80080b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080c0:	3302      	adds	r3, #2
 80080c2:	e7c7      	b.n	8008054 <_printf_common+0x58>
 80080c4:	2301      	movs	r3, #1
 80080c6:	4622      	mov	r2, r4
 80080c8:	4641      	mov	r1, r8
 80080ca:	4638      	mov	r0, r7
 80080cc:	47c8      	blx	r9
 80080ce:	3001      	adds	r0, #1
 80080d0:	d0e6      	beq.n	80080a0 <_printf_common+0xa4>
 80080d2:	3601      	adds	r6, #1
 80080d4:	e7d9      	b.n	800808a <_printf_common+0x8e>
	...

080080d8 <_printf_i>:
 80080d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080dc:	7e0f      	ldrb	r7, [r1, #24]
 80080de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080e0:	2f78      	cmp	r7, #120	@ 0x78
 80080e2:	4691      	mov	r9, r2
 80080e4:	4680      	mov	r8, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	469a      	mov	sl, r3
 80080ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080ee:	d807      	bhi.n	8008100 <_printf_i+0x28>
 80080f0:	2f62      	cmp	r7, #98	@ 0x62
 80080f2:	d80a      	bhi.n	800810a <_printf_i+0x32>
 80080f4:	2f00      	cmp	r7, #0
 80080f6:	f000 80d2 	beq.w	800829e <_printf_i+0x1c6>
 80080fa:	2f58      	cmp	r7, #88	@ 0x58
 80080fc:	f000 80b9 	beq.w	8008272 <_printf_i+0x19a>
 8008100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008108:	e03a      	b.n	8008180 <_printf_i+0xa8>
 800810a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800810e:	2b15      	cmp	r3, #21
 8008110:	d8f6      	bhi.n	8008100 <_printf_i+0x28>
 8008112:	a101      	add	r1, pc, #4	@ (adr r1, 8008118 <_printf_i+0x40>)
 8008114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008118:	08008171 	.word	0x08008171
 800811c:	08008185 	.word	0x08008185
 8008120:	08008101 	.word	0x08008101
 8008124:	08008101 	.word	0x08008101
 8008128:	08008101 	.word	0x08008101
 800812c:	08008101 	.word	0x08008101
 8008130:	08008185 	.word	0x08008185
 8008134:	08008101 	.word	0x08008101
 8008138:	08008101 	.word	0x08008101
 800813c:	08008101 	.word	0x08008101
 8008140:	08008101 	.word	0x08008101
 8008144:	08008285 	.word	0x08008285
 8008148:	080081af 	.word	0x080081af
 800814c:	0800823f 	.word	0x0800823f
 8008150:	08008101 	.word	0x08008101
 8008154:	08008101 	.word	0x08008101
 8008158:	080082a7 	.word	0x080082a7
 800815c:	08008101 	.word	0x08008101
 8008160:	080081af 	.word	0x080081af
 8008164:	08008101 	.word	0x08008101
 8008168:	08008101 	.word	0x08008101
 800816c:	08008247 	.word	0x08008247
 8008170:	6833      	ldr	r3, [r6, #0]
 8008172:	1d1a      	adds	r2, r3, #4
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6032      	str	r2, [r6, #0]
 8008178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800817c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008180:	2301      	movs	r3, #1
 8008182:	e09d      	b.n	80082c0 <_printf_i+0x1e8>
 8008184:	6833      	ldr	r3, [r6, #0]
 8008186:	6820      	ldr	r0, [r4, #0]
 8008188:	1d19      	adds	r1, r3, #4
 800818a:	6031      	str	r1, [r6, #0]
 800818c:	0606      	lsls	r6, r0, #24
 800818e:	d501      	bpl.n	8008194 <_printf_i+0xbc>
 8008190:	681d      	ldr	r5, [r3, #0]
 8008192:	e003      	b.n	800819c <_printf_i+0xc4>
 8008194:	0645      	lsls	r5, r0, #25
 8008196:	d5fb      	bpl.n	8008190 <_printf_i+0xb8>
 8008198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800819c:	2d00      	cmp	r5, #0
 800819e:	da03      	bge.n	80081a8 <_printf_i+0xd0>
 80081a0:	232d      	movs	r3, #45	@ 0x2d
 80081a2:	426d      	negs	r5, r5
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081a8:	4859      	ldr	r0, [pc, #356]	@ (8008310 <_printf_i+0x238>)
 80081aa:	230a      	movs	r3, #10
 80081ac:	e011      	b.n	80081d2 <_printf_i+0xfa>
 80081ae:	6821      	ldr	r1, [r4, #0]
 80081b0:	6833      	ldr	r3, [r6, #0]
 80081b2:	0608      	lsls	r0, r1, #24
 80081b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80081b8:	d402      	bmi.n	80081c0 <_printf_i+0xe8>
 80081ba:	0649      	lsls	r1, r1, #25
 80081bc:	bf48      	it	mi
 80081be:	b2ad      	uxthmi	r5, r5
 80081c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081c2:	4853      	ldr	r0, [pc, #332]	@ (8008310 <_printf_i+0x238>)
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	bf14      	ite	ne
 80081c8:	230a      	movne	r3, #10
 80081ca:	2308      	moveq	r3, #8
 80081cc:	2100      	movs	r1, #0
 80081ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081d2:	6866      	ldr	r6, [r4, #4]
 80081d4:	60a6      	str	r6, [r4, #8]
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	bfa2      	ittt	ge
 80081da:	6821      	ldrge	r1, [r4, #0]
 80081dc:	f021 0104 	bicge.w	r1, r1, #4
 80081e0:	6021      	strge	r1, [r4, #0]
 80081e2:	b90d      	cbnz	r5, 80081e8 <_printf_i+0x110>
 80081e4:	2e00      	cmp	r6, #0
 80081e6:	d04b      	beq.n	8008280 <_printf_i+0x1a8>
 80081e8:	4616      	mov	r6, r2
 80081ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ee:	fb03 5711 	mls	r7, r3, r1, r5
 80081f2:	5dc7      	ldrb	r7, [r0, r7]
 80081f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081f8:	462f      	mov	r7, r5
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	460d      	mov	r5, r1
 80081fe:	d9f4      	bls.n	80081ea <_printf_i+0x112>
 8008200:	2b08      	cmp	r3, #8
 8008202:	d10b      	bne.n	800821c <_printf_i+0x144>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07df      	lsls	r7, r3, #31
 8008208:	d508      	bpl.n	800821c <_printf_i+0x144>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	4299      	cmp	r1, r3
 8008210:	bfde      	ittt	le
 8008212:	2330      	movle	r3, #48	@ 0x30
 8008214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800821c:	1b92      	subs	r2, r2, r6
 800821e:	6122      	str	r2, [r4, #16]
 8008220:	f8cd a000 	str.w	sl, [sp]
 8008224:	464b      	mov	r3, r9
 8008226:	aa03      	add	r2, sp, #12
 8008228:	4621      	mov	r1, r4
 800822a:	4640      	mov	r0, r8
 800822c:	f7ff fee6 	bl	8007ffc <_printf_common>
 8008230:	3001      	adds	r0, #1
 8008232:	d14a      	bne.n	80082ca <_printf_i+0x1f2>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b004      	add	sp, #16
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	f043 0320 	orr.w	r3, r3, #32
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	4833      	ldr	r0, [pc, #204]	@ (8008314 <_printf_i+0x23c>)
 8008248:	2778      	movs	r7, #120	@ 0x78
 800824a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6831      	ldr	r1, [r6, #0]
 8008252:	061f      	lsls	r7, r3, #24
 8008254:	f851 5b04 	ldr.w	r5, [r1], #4
 8008258:	d402      	bmi.n	8008260 <_printf_i+0x188>
 800825a:	065f      	lsls	r7, r3, #25
 800825c:	bf48      	it	mi
 800825e:	b2ad      	uxthmi	r5, r5
 8008260:	6031      	str	r1, [r6, #0]
 8008262:	07d9      	lsls	r1, r3, #31
 8008264:	bf44      	itt	mi
 8008266:	f043 0320 	orrmi.w	r3, r3, #32
 800826a:	6023      	strmi	r3, [r4, #0]
 800826c:	b11d      	cbz	r5, 8008276 <_printf_i+0x19e>
 800826e:	2310      	movs	r3, #16
 8008270:	e7ac      	b.n	80081cc <_printf_i+0xf4>
 8008272:	4827      	ldr	r0, [pc, #156]	@ (8008310 <_printf_i+0x238>)
 8008274:	e7e9      	b.n	800824a <_printf_i+0x172>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	f023 0320 	bic.w	r3, r3, #32
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	e7f6      	b.n	800826e <_printf_i+0x196>
 8008280:	4616      	mov	r6, r2
 8008282:	e7bd      	b.n	8008200 <_printf_i+0x128>
 8008284:	6833      	ldr	r3, [r6, #0]
 8008286:	6825      	ldr	r5, [r4, #0]
 8008288:	6961      	ldr	r1, [r4, #20]
 800828a:	1d18      	adds	r0, r3, #4
 800828c:	6030      	str	r0, [r6, #0]
 800828e:	062e      	lsls	r6, r5, #24
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	d501      	bpl.n	8008298 <_printf_i+0x1c0>
 8008294:	6019      	str	r1, [r3, #0]
 8008296:	e002      	b.n	800829e <_printf_i+0x1c6>
 8008298:	0668      	lsls	r0, r5, #25
 800829a:	d5fb      	bpl.n	8008294 <_printf_i+0x1bc>
 800829c:	8019      	strh	r1, [r3, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	4616      	mov	r6, r2
 80082a4:	e7bc      	b.n	8008220 <_printf_i+0x148>
 80082a6:	6833      	ldr	r3, [r6, #0]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	6032      	str	r2, [r6, #0]
 80082ac:	681e      	ldr	r6, [r3, #0]
 80082ae:	6862      	ldr	r2, [r4, #4]
 80082b0:	2100      	movs	r1, #0
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7f7 ff8c 	bl	80001d0 <memchr>
 80082b8:	b108      	cbz	r0, 80082be <_printf_i+0x1e6>
 80082ba:	1b80      	subs	r0, r0, r6
 80082bc:	6060      	str	r0, [r4, #4]
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	2300      	movs	r3, #0
 80082c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c8:	e7aa      	b.n	8008220 <_printf_i+0x148>
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	4632      	mov	r2, r6
 80082ce:	4649      	mov	r1, r9
 80082d0:	4640      	mov	r0, r8
 80082d2:	47d0      	blx	sl
 80082d4:	3001      	adds	r0, #1
 80082d6:	d0ad      	beq.n	8008234 <_printf_i+0x15c>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	d413      	bmi.n	8008306 <_printf_i+0x22e>
 80082de:	68e0      	ldr	r0, [r4, #12]
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	4298      	cmp	r0, r3
 80082e4:	bfb8      	it	lt
 80082e6:	4618      	movlt	r0, r3
 80082e8:	e7a6      	b.n	8008238 <_printf_i+0x160>
 80082ea:	2301      	movs	r3, #1
 80082ec:	4632      	mov	r2, r6
 80082ee:	4649      	mov	r1, r9
 80082f0:	4640      	mov	r0, r8
 80082f2:	47d0      	blx	sl
 80082f4:	3001      	adds	r0, #1
 80082f6:	d09d      	beq.n	8008234 <_printf_i+0x15c>
 80082f8:	3501      	adds	r5, #1
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	9903      	ldr	r1, [sp, #12]
 80082fe:	1a5b      	subs	r3, r3, r1
 8008300:	42ab      	cmp	r3, r5
 8008302:	dcf2      	bgt.n	80082ea <_printf_i+0x212>
 8008304:	e7eb      	b.n	80082de <_printf_i+0x206>
 8008306:	2500      	movs	r5, #0
 8008308:	f104 0619 	add.w	r6, r4, #25
 800830c:	e7f5      	b.n	80082fa <_printf_i+0x222>
 800830e:	bf00      	nop
 8008310:	08008759 	.word	0x08008759
 8008314:	0800876a 	.word	0x0800876a

08008318 <__sflush_r>:
 8008318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	0716      	lsls	r6, r2, #28
 8008322:	4605      	mov	r5, r0
 8008324:	460c      	mov	r4, r1
 8008326:	d454      	bmi.n	80083d2 <__sflush_r+0xba>
 8008328:	684b      	ldr	r3, [r1, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dc02      	bgt.n	8008334 <__sflush_r+0x1c>
 800832e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	dd48      	ble.n	80083c6 <__sflush_r+0xae>
 8008334:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008336:	2e00      	cmp	r6, #0
 8008338:	d045      	beq.n	80083c6 <__sflush_r+0xae>
 800833a:	2300      	movs	r3, #0
 800833c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008340:	682f      	ldr	r7, [r5, #0]
 8008342:	6a21      	ldr	r1, [r4, #32]
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	d030      	beq.n	80083aa <__sflush_r+0x92>
 8008348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	0759      	lsls	r1, r3, #29
 800834e:	d505      	bpl.n	800835c <__sflush_r+0x44>
 8008350:	6863      	ldr	r3, [r4, #4]
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008356:	b10b      	cbz	r3, 800835c <__sflush_r+0x44>
 8008358:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	2300      	movs	r3, #0
 800835e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008360:	6a21      	ldr	r1, [r4, #32]
 8008362:	4628      	mov	r0, r5
 8008364:	47b0      	blx	r6
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	d106      	bne.n	800837a <__sflush_r+0x62>
 800836c:	6829      	ldr	r1, [r5, #0]
 800836e:	291d      	cmp	r1, #29
 8008370:	d82b      	bhi.n	80083ca <__sflush_r+0xb2>
 8008372:	4a2a      	ldr	r2, [pc, #168]	@ (800841c <__sflush_r+0x104>)
 8008374:	410a      	asrs	r2, r1
 8008376:	07d6      	lsls	r6, r2, #31
 8008378:	d427      	bmi.n	80083ca <__sflush_r+0xb2>
 800837a:	2200      	movs	r2, #0
 800837c:	6062      	str	r2, [r4, #4]
 800837e:	04d9      	lsls	r1, r3, #19
 8008380:	6922      	ldr	r2, [r4, #16]
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	d504      	bpl.n	8008390 <__sflush_r+0x78>
 8008386:	1c42      	adds	r2, r0, #1
 8008388:	d101      	bne.n	800838e <__sflush_r+0x76>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b903      	cbnz	r3, 8008390 <__sflush_r+0x78>
 800838e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008392:	602f      	str	r7, [r5, #0]
 8008394:	b1b9      	cbz	r1, 80083c6 <__sflush_r+0xae>
 8008396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800839a:	4299      	cmp	r1, r3
 800839c:	d002      	beq.n	80083a4 <__sflush_r+0x8c>
 800839e:	4628      	mov	r0, r5
 80083a0:	f7ff fbf2 	bl	8007b88 <_free_r>
 80083a4:	2300      	movs	r3, #0
 80083a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80083a8:	e00d      	b.n	80083c6 <__sflush_r+0xae>
 80083aa:	2301      	movs	r3, #1
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b0      	blx	r6
 80083b0:	4602      	mov	r2, r0
 80083b2:	1c50      	adds	r0, r2, #1
 80083b4:	d1c9      	bne.n	800834a <__sflush_r+0x32>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0c6      	beq.n	800834a <__sflush_r+0x32>
 80083bc:	2b1d      	cmp	r3, #29
 80083be:	d001      	beq.n	80083c4 <__sflush_r+0xac>
 80083c0:	2b16      	cmp	r3, #22
 80083c2:	d11e      	bne.n	8008402 <__sflush_r+0xea>
 80083c4:	602f      	str	r7, [r5, #0]
 80083c6:	2000      	movs	r0, #0
 80083c8:	e022      	b.n	8008410 <__sflush_r+0xf8>
 80083ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ce:	b21b      	sxth	r3, r3
 80083d0:	e01b      	b.n	800840a <__sflush_r+0xf2>
 80083d2:	690f      	ldr	r7, [r1, #16]
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	d0f6      	beq.n	80083c6 <__sflush_r+0xae>
 80083d8:	0793      	lsls	r3, r2, #30
 80083da:	680e      	ldr	r6, [r1, #0]
 80083dc:	bf08      	it	eq
 80083de:	694b      	ldreq	r3, [r1, #20]
 80083e0:	600f      	str	r7, [r1, #0]
 80083e2:	bf18      	it	ne
 80083e4:	2300      	movne	r3, #0
 80083e6:	eba6 0807 	sub.w	r8, r6, r7
 80083ea:	608b      	str	r3, [r1, #8]
 80083ec:	f1b8 0f00 	cmp.w	r8, #0
 80083f0:	dde9      	ble.n	80083c6 <__sflush_r+0xae>
 80083f2:	6a21      	ldr	r1, [r4, #32]
 80083f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083f6:	4643      	mov	r3, r8
 80083f8:	463a      	mov	r2, r7
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b0      	blx	r6
 80083fe:	2800      	cmp	r0, #0
 8008400:	dc08      	bgt.n	8008414 <__sflush_r+0xfc>
 8008402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	4407      	add	r7, r0
 8008416:	eba8 0800 	sub.w	r8, r8, r0
 800841a:	e7e7      	b.n	80083ec <__sflush_r+0xd4>
 800841c:	dfbffffe 	.word	0xdfbffffe

08008420 <_fflush_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	690b      	ldr	r3, [r1, #16]
 8008424:	4605      	mov	r5, r0
 8008426:	460c      	mov	r4, r1
 8008428:	b913      	cbnz	r3, 8008430 <_fflush_r+0x10>
 800842a:	2500      	movs	r5, #0
 800842c:	4628      	mov	r0, r5
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	b118      	cbz	r0, 800843a <_fflush_r+0x1a>
 8008432:	6a03      	ldr	r3, [r0, #32]
 8008434:	b90b      	cbnz	r3, 800843a <_fflush_r+0x1a>
 8008436:	f7ff fa9f 	bl	8007978 <__sinit>
 800843a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f3      	beq.n	800842a <_fflush_r+0xa>
 8008442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008444:	07d0      	lsls	r0, r2, #31
 8008446:	d404      	bmi.n	8008452 <_fflush_r+0x32>
 8008448:	0599      	lsls	r1, r3, #22
 800844a:	d402      	bmi.n	8008452 <_fflush_r+0x32>
 800844c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800844e:	f7ff fb98 	bl	8007b82 <__retarget_lock_acquire_recursive>
 8008452:	4628      	mov	r0, r5
 8008454:	4621      	mov	r1, r4
 8008456:	f7ff ff5f 	bl	8008318 <__sflush_r>
 800845a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800845c:	07da      	lsls	r2, r3, #31
 800845e:	4605      	mov	r5, r0
 8008460:	d4e4      	bmi.n	800842c <_fflush_r+0xc>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	059b      	lsls	r3, r3, #22
 8008466:	d4e1      	bmi.n	800842c <_fflush_r+0xc>
 8008468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800846a:	f7ff fb8b 	bl	8007b84 <__retarget_lock_release_recursive>
 800846e:	e7dd      	b.n	800842c <_fflush_r+0xc>

08008470 <__swbuf_r>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	460e      	mov	r6, r1
 8008474:	4614      	mov	r4, r2
 8008476:	4605      	mov	r5, r0
 8008478:	b118      	cbz	r0, 8008482 <__swbuf_r+0x12>
 800847a:	6a03      	ldr	r3, [r0, #32]
 800847c:	b90b      	cbnz	r3, 8008482 <__swbuf_r+0x12>
 800847e:	f7ff fa7b 	bl	8007978 <__sinit>
 8008482:	69a3      	ldr	r3, [r4, #24]
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	071a      	lsls	r2, r3, #28
 800848a:	d501      	bpl.n	8008490 <__swbuf_r+0x20>
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	b943      	cbnz	r3, 80084a2 <__swbuf_r+0x32>
 8008490:	4621      	mov	r1, r4
 8008492:	4628      	mov	r0, r5
 8008494:	f000 f82a 	bl	80084ec <__swsetup_r>
 8008498:	b118      	cbz	r0, 80084a2 <__swbuf_r+0x32>
 800849a:	f04f 37ff 	mov.w	r7, #4294967295
 800849e:	4638      	mov	r0, r7
 80084a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	6922      	ldr	r2, [r4, #16]
 80084a6:	1a98      	subs	r0, r3, r2
 80084a8:	6963      	ldr	r3, [r4, #20]
 80084aa:	b2f6      	uxtb	r6, r6
 80084ac:	4283      	cmp	r3, r0
 80084ae:	4637      	mov	r7, r6
 80084b0:	dc05      	bgt.n	80084be <__swbuf_r+0x4e>
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f7ff ffb3 	bl	8008420 <_fflush_r>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d1ed      	bne.n	800849a <__swbuf_r+0x2a>
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	701e      	strb	r6, [r3, #0]
 80084cc:	6962      	ldr	r2, [r4, #20]
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d004      	beq.n	80084de <__swbuf_r+0x6e>
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	07db      	lsls	r3, r3, #31
 80084d8:	d5e1      	bpl.n	800849e <__swbuf_r+0x2e>
 80084da:	2e0a      	cmp	r6, #10
 80084dc:	d1df      	bne.n	800849e <__swbuf_r+0x2e>
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7ff ff9d 	bl	8008420 <_fflush_r>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d0d9      	beq.n	800849e <__swbuf_r+0x2e>
 80084ea:	e7d6      	b.n	800849a <__swbuf_r+0x2a>

080084ec <__swsetup_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4b29      	ldr	r3, [pc, #164]	@ (8008594 <__swsetup_r+0xa8>)
 80084f0:	4605      	mov	r5, r0
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	460c      	mov	r4, r1
 80084f6:	b118      	cbz	r0, 8008500 <__swsetup_r+0x14>
 80084f8:	6a03      	ldr	r3, [r0, #32]
 80084fa:	b90b      	cbnz	r3, 8008500 <__swsetup_r+0x14>
 80084fc:	f7ff fa3c 	bl	8007978 <__sinit>
 8008500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008504:	0719      	lsls	r1, r3, #28
 8008506:	d422      	bmi.n	800854e <__swsetup_r+0x62>
 8008508:	06da      	lsls	r2, r3, #27
 800850a:	d407      	bmi.n	800851c <__swsetup_r+0x30>
 800850c:	2209      	movs	r2, #9
 800850e:	602a      	str	r2, [r5, #0]
 8008510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	e033      	b.n	8008584 <__swsetup_r+0x98>
 800851c:	0758      	lsls	r0, r3, #29
 800851e:	d512      	bpl.n	8008546 <__swsetup_r+0x5a>
 8008520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008522:	b141      	cbz	r1, 8008536 <__swsetup_r+0x4a>
 8008524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008528:	4299      	cmp	r1, r3
 800852a:	d002      	beq.n	8008532 <__swsetup_r+0x46>
 800852c:	4628      	mov	r0, r5
 800852e:	f7ff fb2b 	bl	8007b88 <_free_r>
 8008532:	2300      	movs	r3, #0
 8008534:	6363      	str	r3, [r4, #52]	@ 0x34
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	2300      	movs	r3, #0
 8008540:	6063      	str	r3, [r4, #4]
 8008542:	6923      	ldr	r3, [r4, #16]
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	f043 0308 	orr.w	r3, r3, #8
 800854c:	81a3      	strh	r3, [r4, #12]
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	b94b      	cbnz	r3, 8008566 <__swsetup_r+0x7a>
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800855c:	d003      	beq.n	8008566 <__swsetup_r+0x7a>
 800855e:	4621      	mov	r1, r4
 8008560:	4628      	mov	r0, r5
 8008562:	f000 f84f 	bl	8008604 <__smakebuf_r>
 8008566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856a:	f013 0201 	ands.w	r2, r3, #1
 800856e:	d00a      	beq.n	8008586 <__swsetup_r+0x9a>
 8008570:	2200      	movs	r2, #0
 8008572:	60a2      	str	r2, [r4, #8]
 8008574:	6962      	ldr	r2, [r4, #20]
 8008576:	4252      	negs	r2, r2
 8008578:	61a2      	str	r2, [r4, #24]
 800857a:	6922      	ldr	r2, [r4, #16]
 800857c:	b942      	cbnz	r2, 8008590 <__swsetup_r+0xa4>
 800857e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008582:	d1c5      	bne.n	8008510 <__swsetup_r+0x24>
 8008584:	bd38      	pop	{r3, r4, r5, pc}
 8008586:	0799      	lsls	r1, r3, #30
 8008588:	bf58      	it	pl
 800858a:	6962      	ldrpl	r2, [r4, #20]
 800858c:	60a2      	str	r2, [r4, #8]
 800858e:	e7f4      	b.n	800857a <__swsetup_r+0x8e>
 8008590:	2000      	movs	r0, #0
 8008592:	e7f7      	b.n	8008584 <__swsetup_r+0x98>
 8008594:	20000018 	.word	0x20000018

08008598 <_sbrk_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d06      	ldr	r5, [pc, #24]	@ (80085b4 <_sbrk_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f8 fd8e 	bl	80010c4 <_sbrk>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_sbrk_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_sbrk_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20000390 	.word	0x20000390

080085b8 <__swhatbuf_r>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	460c      	mov	r4, r1
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	b096      	sub	sp, #88	@ 0x58
 80085c4:	4615      	mov	r5, r2
 80085c6:	461e      	mov	r6, r3
 80085c8:	da0d      	bge.n	80085e6 <__swhatbuf_r+0x2e>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085d0:	f04f 0100 	mov.w	r1, #0
 80085d4:	bf14      	ite	ne
 80085d6:	2340      	movne	r3, #64	@ 0x40
 80085d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085dc:	2000      	movs	r0, #0
 80085de:	6031      	str	r1, [r6, #0]
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	b016      	add	sp, #88	@ 0x58
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	466a      	mov	r2, sp
 80085e8:	f000 f848 	bl	800867c <_fstat_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	dbec      	blt.n	80085ca <__swhatbuf_r+0x12>
 80085f0:	9901      	ldr	r1, [sp, #4]
 80085f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085fa:	4259      	negs	r1, r3
 80085fc:	4159      	adcs	r1, r3
 80085fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008602:	e7eb      	b.n	80085dc <__swhatbuf_r+0x24>

08008604 <__smakebuf_r>:
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008608:	079d      	lsls	r5, r3, #30
 800860a:	4606      	mov	r6, r0
 800860c:	460c      	mov	r4, r1
 800860e:	d507      	bpl.n	8008620 <__smakebuf_r+0x1c>
 8008610:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	2301      	movs	r3, #1
 800861a:	6163      	str	r3, [r4, #20]
 800861c:	b003      	add	sp, #12
 800861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008620:	ab01      	add	r3, sp, #4
 8008622:	466a      	mov	r2, sp
 8008624:	f7ff ffc8 	bl	80085b8 <__swhatbuf_r>
 8008628:	9f00      	ldr	r7, [sp, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	4639      	mov	r1, r7
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff fb16 	bl	8007c60 <_malloc_r>
 8008634:	b948      	cbnz	r0, 800864a <__smakebuf_r+0x46>
 8008636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863a:	059a      	lsls	r2, r3, #22
 800863c:	d4ee      	bmi.n	800861c <__smakebuf_r+0x18>
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	f043 0302 	orr.w	r3, r3, #2
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	e7e2      	b.n	8008610 <__smakebuf_r+0xc>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	6020      	str	r0, [r4, #0]
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800865a:	b15b      	cbz	r3, 8008674 <__smakebuf_r+0x70>
 800865c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 f81d 	bl	80086a0 <_isatty_r>
 8008666:	b128      	cbz	r0, 8008674 <__smakebuf_r+0x70>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	431d      	orrs	r5, r3
 8008678:	81a5      	strh	r5, [r4, #12]
 800867a:	e7cf      	b.n	800861c <__smakebuf_r+0x18>

0800867c <_fstat_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	@ (800869c <_fstat_r+0x20>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	4611      	mov	r1, r2
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	f7f8 fcf2 	bl	8001072 <_fstat>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d102      	bne.n	8008698 <_fstat_r+0x1c>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	b103      	cbz	r3, 8008698 <_fstat_r+0x1c>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	20000390 	.word	0x20000390

080086a0 <_isatty_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	@ (80086bc <_isatty_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f8 fcf1 	bl	8001092 <_isatty>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_isatty_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_isatty_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	20000390 	.word	0x20000390

080086c0 <_init>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr

080086cc <_fini>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr
