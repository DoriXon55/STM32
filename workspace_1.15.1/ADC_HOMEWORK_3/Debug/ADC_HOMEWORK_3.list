
ADC_HOMEWORK_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800850c  0800850c  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008594  08008594  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800859c  0800859c  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085a0  080085a0  000095a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080085a4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000068  0800860c  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800860c  0000a450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018188  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cd  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  000253f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  00026a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a85a  00000000  00000000  00027bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001998d  00000000  00000000  00052433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c0cc  00000000  00000000  0006bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177e8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e4  00000000  00000000  00177ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0017e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084f4 	.word	0x080084f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080084f4 	.word	0x080084f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
/* USER CODE BEGIN 0 */
uint32_t adc_buffer[ADC_BUFFER_SIZE];
volatile static uint16_t joystick[ADC2_BUFFER_SIZE];

int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d102      	bne.n	8000574 <__io_putchar+0x14>
	{
		__io_putchar('\r');
 800056e:	200d      	movs	r0, #13
 8000570:	f7ff fff6 	bl	8000560 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <__io_putchar+0x2c>)
 800057e:	f005 ffbb 	bl	80064f8 <HAL_UART_Transmit>
	return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000268 	.word	0x20000268

08000590 <blinking_frequency>:

}
*/

void blinking_frequency(uint32_t pot_value)
{
 8000590:	b480      	push	{r7}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint32_t min_period = 100;
 8000598:	2364      	movs	r3, #100	@ 0x64
 800059a:	617b      	str	r3, [r7, #20]
	uint32_t max_period = 1000;
 800059c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a0:	613b      	str	r3, [r7, #16]

	uint32_t period = min_period + (pot_value * (max_period - min_period) / 4095);
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	fb03 f202 	mul.w	r2, r3, r2
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <blinking_frequency+0x4c>)
 80005b0:	fba3 1302 	umull	r1, r3, r3, r2
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	0852      	lsrs	r2, r2, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	0adb      	lsrs	r3, r3, #11
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, period);
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <blinking_frequency+0x50>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <blinking_frequency+0x50>)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	00100101 	.word	0x00100101
 80005e0:	2000021c 	.word	0x2000021c

080005e4 <led_brightness>:

void led_brightness(uint32_t light_value)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint32_t pwm_value = (light_value * TIM3->ARR) / 4095;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <led_brightness+0x40>)
 80005ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	fb03 f202 	mul.w	r2, r3, r2
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <led_brightness+0x44>)
 80005f8:	fba3 1302 	umull	r1, r3, r3, r2
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	0852      	lsrs	r2, r2, #1
 8000600:	4413      	add	r3, r2
 8000602:	0adb      	lsrs	r3, r3, #11
 8000604:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_value);
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <led_brightness+0x48>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_value);
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <led_brightness+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40000400 	.word	0x40000400
 8000628:	00100101 	.word	0x00100101
 800062c:	2000021c 	.word	0x2000021c

08000630 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a09      	ldr	r2, [pc, #36]	@ (8000664 <HAL_ADC_ConvCpltCallback+0x34>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d10b      	bne.n	800065a <HAL_ADC_ConvCpltCallback+0x2a>
	{
		uint32_t pot_value = adc_buffer[0];
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_ADC_ConvCpltCallback+0x38>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	60fb      	str	r3, [r7, #12]
		uint32_t light_value = adc_buffer[1];
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <HAL_ADC_ConvCpltCallback+0x38>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	60bb      	str	r3, [r7, #8]

		blinking_frequency(pot_value);
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f7ff ff9e 	bl	8000590 <blinking_frequency>
		led_brightness(light_value);
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f7ff ffc5 	bl	80005e4 <led_brightness>
		//printf("Potentiometer: %lu, Light sensor: %lu\n", pot_value, light_value);

	}

}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	50040000 	.word	0x50040000
 8000668:	200002f0 	.word	0x200002f0

0800066c <START_FUNCTIONS>:




void START_FUNCTIONS(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000670:	2202      	movs	r2, #2
 8000672:	4907      	ldr	r1, [pc, #28]	@ (8000690 <START_FUNCTIONS+0x24>)
 8000674:	4807      	ldr	r0, [pc, #28]	@ (8000694 <START_FUNCTIONS+0x28>)
 8000676:	f001 fc2f 	bl	8001ed8 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joystick, AD2_BUFFER_SIZE);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800067a:	2100      	movs	r1, #0
 800067c:	4806      	ldr	r0, [pc, #24]	@ (8000698 <START_FUNCTIONS+0x2c>)
 800067e:	f004 ff45 	bl	800550c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000682:	2100      	movs	r1, #0
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <START_FUNCTIONS+0x2c>)
 8000686:	f004 ff41 	bl	800550c <HAL_TIM_PWM_Start>


}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200002f0 	.word	0x200002f0
 8000694:	20000084 	.word	0x20000084
 8000698:	2000021c 	.word	0x2000021c

0800069c <test_adc_code>:


uint32_t test_adc_code(uint32_t canal)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
	sConfig.Channel = canal;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ba:	2306      	movs	r3, #6
 80006bc:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006be:	2307      	movs	r3, #7
 80006c0:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4619      	mov	r1, r3
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <test_adc_code+0x54>)
 80006ca:	f001 fce3 	bl	8002094 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <test_adc_code+0x54>)
 80006d0:	f001 fa70 	bl	8001bb4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <test_adc_code+0x54>)
 80006da:	f001 fb25 	bl	8001d28 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 80006de:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <test_adc_code+0x54>)
 80006e0:	f001 fcb6 	bl	8002050 <HAL_ADC_GetValue>
 80006e4:	4603      	mov	r3, r0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fe8e 	bl	800141a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f823 	bl	8000748 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000702:	f000 f873 	bl	80007ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 facd 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 800070a:	f000 faa5 	bl	8000c58 <MX_DMA_Init>
  MX_ADC1_Init();
 800070e:	f000 f899 	bl	8000844 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000712:	f000 f98f 	bl	8000a34 <MX_COMP1_Init>
  MX_DAC1_Init();
 8000716:	f000 f9b9 	bl	8000a8c <MX_DAC1_Init>
  MX_TIM3_Init();
 800071a:	f000 f9e9 	bl	8000af0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800071e:	f000 fa6b 	bl	8000bf8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000722:	f000 f913 	bl	800094c <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  START_FUNCTIONS();
 8000726:	f7ff ffa1 	bl	800066c <START_FUNCTIONS>
  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t fotoresistor_value = test_adc_code(ADC_CHANNEL_2);
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <main+0x4c>)
 800072c:	f7ff ffb6 	bl	800069c <test_adc_code>
 8000730:	6078      	str	r0, [r7, #4]
	  printf("foto: %lu\n", fotoresistor_value);
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <main+0x50>)
 8000736:	f007 f86f 	bl	8007818 <iprintf>
  {
 800073a:	bf00      	nop
 800073c:	e7f5      	b.n	800072a <main+0x36>
 800073e:	bf00      	nop
 8000740:	08600004 	.word	0x08600004
 8000744:	0800850c 	.word	0x0800850c

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	@ 0x58
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2244      	movs	r2, #68	@ 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f007 f8b3 	bl	80078c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800076e:	f003 fb03 	bl	8003d78 <HAL_PWREx_ControlVoltageScaling>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000778:	f000 fac4 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800077c:	2310      	movs	r3, #16
 800077e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000788:	2360      	movs	r3, #96	@ 0x60
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000790:	2301      	movs	r3, #1
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000798:	2328      	movs	r3, #40	@ 0x28
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fb39 	bl	8003e24 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007b8:	f000 faa4 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2303      	movs	r3, #3
 80007c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2104      	movs	r1, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 ff01 	bl	80045dc <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007e0:	f000 fa90 	bl	8000d04 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3758      	adds	r7, #88	@ 0x58
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a2      	sub	sp, #136	@ 0x88
 80007f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2288      	movs	r2, #136	@ 0x88
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f007 f862 	bl	80078c2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000802:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000804:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000808:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000812:	2310      	movs	r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000816:	2307      	movs	r3, #7
 8000818:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000822:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000826:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f8fa 	bl	8004a24 <HAL_RCCEx_PeriphCLKConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000836:	f000 fa65 	bl	8000d04 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3788      	adds	r7, #136	@ 0x88
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000866:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000868:	4a36      	ldr	r2, [pc, #216]	@ (8000944 <MX_ADC1_Init+0x100>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <MX_ADC1_Init+0xfc>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <MX_ADC1_Init+0xfc>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800087e:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000880:	2201      	movs	r2, #1
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000886:	2204      	movs	r2, #4
 8000888:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <MX_ADC1_Init+0xfc>)
 800088c:	2200      	movs	r2, #0
 800088e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000892:	2201      	movs	r2, #1
 8000894:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000898:	2202      	movs	r2, #2
 800089a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_ADC1_Init+0xfc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b0:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c8:	481d      	ldr	r0, [pc, #116]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008ca:	f001 f823 	bl	8001914 <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008d4:	f000 fa16 	bl	8000d04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4817      	ldr	r0, [pc, #92]	@ (8000940 <MX_ADC1_Init+0xfc>)
 80008e4:	f002 f908 	bl	8002af8 <HAL_ADCEx_MultiModeConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008ee:	f000 fa09 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_ADC1_Init+0x104>)
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80008fa:	2307      	movs	r3, #7
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	237f      	movs	r3, #127	@ 0x7f
 8000900:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000902:	2304      	movs	r3, #4
 8000904:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000910:	f001 fbc0 	bl	8002094 <HAL_ADC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800091a:	f000 f9f3 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800091e:	230c      	movs	r3, #12
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_ADC1_Init+0xfc>)
 8000928:	f001 fbb4 	bl	8002094 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000932:	f000 f9e7 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000084 	.word	0x20000084
 8000944:	50040000 	.word	0x50040000
 8000948:	04300002 	.word	0x04300002

0800094c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000962:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000964:	4a30      	ldr	r2, [pc, #192]	@ (8000a28 <MX_ADC2_Init+0xdc>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000968:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000974:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 800097c:	2201      	movs	r2, #1
 800097e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000982:	2204      	movs	r2, #4
 8000984:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 800098e:	2201      	movs	r2, #1
 8000990:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8000992:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000994:	2202      	movs	r2, #2
 8000996:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009c2:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009c4:	f000 ffa6 	bl	8001914 <HAL_ADC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80009ce:	f000 f999 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_ADC2_Init+0xe0>)
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d6:	2306      	movs	r3, #6
 80009d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80009da:	2307      	movs	r3, #7
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009de:	237f      	movs	r3, #127	@ 0x7f
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e2:	2304      	movs	r3, #4
 80009e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 80009f0:	f001 fb50 	bl	8002094 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80009fa:	f000 f983 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_ADC2_Init+0xe4>)
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a02:	230c      	movs	r3, #12
 8000a04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <MX_ADC2_Init+0xd8>)
 8000a0c:	f001 fb42 	bl	8002094 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000a16:	f000 f975 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	50040100 	.word	0x50040100
 8000a2c:	19200040 	.word	0x19200040
 8000a30:	14f00020 	.word	0x14f00020

08000a34 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	@ (8000a88 <MX_COMP1_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a40:	2240      	movs	r2, #64	@ 0x40
 8000a42:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a50:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_COMP1_Init+0x50>)
 8000a72:	f002 f999 	bl	8002da8 <HAL_COMP_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 f942 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200001dc 	.word	0x200001dc
 8000a88:	40010200 	.word	0x40010200

08000a8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2224      	movs	r2, #36	@ 0x24
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f006 ff12 	bl	80078c2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_DAC1_Init+0x5c>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_DAC1_Init+0x60>)
 8000aa2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000aa4:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <MX_DAC1_Init+0x5c>)
 8000aa6:	f002 fb82 	bl	80031ae <HAL_DAC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ab0:	f000 f928 	bl	8000d04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_DAC1_Init+0x5c>)
 8000ad0:	f002 fbf3 	bl	80032ba <HAL_DAC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f913 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000208 	.word	0x20000208
 8000aec:	40007400 	.word	0x40007400

08000af0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b22:	4b33      	ldr	r3, [pc, #204]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b24:	4a33      	ldr	r2, [pc, #204]	@ (8000bf4 <MX_TIM3_Init+0x104>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000b28:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b2a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b38:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4a:	4829      	ldr	r0, [pc, #164]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b4c:	f004 fc26 	bl	800539c <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 f8d5 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4822      	ldr	r0, [pc, #136]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b68:	f004 feea 	bl	8005940 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b72:	f000 f8c7 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b76:	481e      	ldr	r0, [pc, #120]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b78:	f004 fc67 	bl	800544a <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b82:	f000 f8bf 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4816      	ldr	r0, [pc, #88]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000b96:	f005 fbd9 	bl	800634c <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ba0:	f000 f8b0 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	@ 0x60
 8000ba6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000bac:	2302      	movs	r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000bbc:	f004 fdac 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000bc6:	f000 f89d 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2204      	movs	r2, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000bd2:	f004 fda1 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000bdc:	f000 f892 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <MX_TIM3_Init+0x100>)
 8000be2:	f000 fa49 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000be6:	bf00      	nop
 8000be8:	3738      	adds	r7, #56	@ 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000021c 	.word	0x2000021c
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <MX_USART2_UART_Init+0x5c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c3c:	f005 fc0e 	bl	800645c <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c46:	f000 f85d 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000268 	.word	0x20000268
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_DMA_Init+0x48>)
 8000c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <MX_DMA_Init+0x48>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <MX_DMA_Init+0x48>)
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	200b      	movs	r0, #11
 8000c7c:	f002 fa61 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c80:	200b      	movs	r0, #11
 8000c82:	f002 fa7a 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2103      	movs	r1, #3
 8000c8a:	200c      	movs	r0, #12
 8000c8c:	f002 fa59 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c90:	200c      	movs	r0, #12
 8000c92:	f002 fa72 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_GPIO_Init+0x5c>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	@ 0x30
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a6b      	ldr	r2, [pc, #428]	@ (8000f24 <HAL_ADC_MspInit+0x1cc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d171      	bne.n	8000e5e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d7a:	4b6b      	ldr	r3, [pc, #428]	@ (8000f28 <HAL_ADC_MspInit+0x1d0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a69      	ldr	r2, [pc, #420]	@ (8000f28 <HAL_ADC_MspInit+0x1d0>)
 8000d82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d84:	4b68      	ldr	r3, [pc, #416]	@ (8000f28 <HAL_ADC_MspInit+0x1d0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10b      	bne.n	8000da4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000d8c:	4b67      	ldr	r3, [pc, #412]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a66      	ldr	r2, [pc, #408]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000d92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b64      	ldr	r3, [pc, #400]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b61      	ldr	r3, [pc, #388]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da8:	4a60      	ldr	r2, [pc, #384]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b58      	ldr	r3, [pc, #352]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4852      	ldr	r0, [pc, #328]	@ (8000f30 <HAL_ADC_MspInit+0x1d8>)
 8000de8:	f002 fe0e 	bl	8003a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df0:	230b      	movs	r3, #11
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f002 fe01 	bl	8003a08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e06:	4b4b      	ldr	r3, [pc, #300]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e08:	4a4b      	ldr	r2, [pc, #300]	@ (8000f38 <HAL_ADC_MspInit+0x1e0>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e0c:	4b49      	ldr	r3, [pc, #292]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e12:	4b48      	ldr	r3, [pc, #288]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b46      	ldr	r3, [pc, #280]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b45      	ldr	r3, [pc, #276]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e24:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2c:	4b41      	ldr	r3, [pc, #260]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e34:	4b3f      	ldr	r3, [pc, #252]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e36:	2220      	movs	r2, #32
 8000e38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e40:	483c      	ldr	r0, [pc, #240]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e42:	f002 fb6b 	bl	800351c <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000e4c:	f7ff ff5a 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a38      	ldr	r2, [pc, #224]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e54:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e56:	4a37      	ldr	r2, [pc, #220]	@ (8000f34 <HAL_ADC_MspInit+0x1dc>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e5c:	e05d      	b.n	8000f1a <HAL_ADC_MspInit+0x1c2>
  else if(hadc->Instance==ADC2)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a36      	ldr	r2, [pc, #216]	@ (8000f3c <HAL_ADC_MspInit+0x1e4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d158      	bne.n	8000f1a <HAL_ADC_MspInit+0x1c2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <HAL_ADC_MspInit+0x1d0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f28 <HAL_ADC_MspInit+0x1d0>)
 8000e70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <HAL_ADC_MspInit+0x1d0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d10b      	bne.n	8000e92 <HAL_ADC_MspInit+0x13a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000e80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a25      	ldr	r2, [pc, #148]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <HAL_ADC_MspInit+0x1d4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec0:	f002 fda2 	bl	8003a08 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <HAL_ADC_MspInit+0x1ec>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000eec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000efe:	4810      	ldr	r0, [pc, #64]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000f00:	f002 fb0c 	bl	800351c <HAL_DMA_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8000f0a:	f7ff fefb 	bl	8000d04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000f12:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f14:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <HAL_ADC_MspInit+0x1e8>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	50040000 	.word	0x50040000
 8000f28:	200002f8 	.word	0x200002f8
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000800 	.word	0x48000800
 8000f34:	2000014c 	.word	0x2000014c
 8000f38:	40020008 	.word	0x40020008
 8000f3c:	50040100 	.word	0x50040100
 8000f40:	20000194 	.word	0x20000194
 8000f44:	4002001c 	.word	0x4002001c

08000f48 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <HAL_COMP_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d133      	bne.n	8000fd2 <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <HAL_COMP_MspInit+0x98>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <HAL_COMP_MspInit+0x98>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <HAL_COMP_MspInit+0x98>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <HAL_COMP_MspInit+0x98>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <HAL_COMP_MspInit+0x98>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_COMP_MspInit+0x98>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PC5     ------> COMP1_INP
    PB0     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <HAL_COMP_MspInit+0x9c>)
 8000fae:	f002 fd2b 	bl	8003a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP1;
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <HAL_COMP_MspInit+0xa0>)
 8000fce:	f002 fd1b 	bl	8003a08 <HAL_GPIO_Init>

  /* USER CODE END COMP1_MspInit 1 */

  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40010200 	.word	0x40010200
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	48000400 	.word	0x48000400

08000fec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <HAL_DAC_MspInit+0x44>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d113      	bne.n	8001026 <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_DAC_MspInit+0x48>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_DAC_MspInit+0x48>)
 8001004:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001008:	6593      	str	r3, [r2, #88]	@ 0x58
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_DAC_MspInit+0x48>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	210a      	movs	r1, #10
 800101a:	2036      	movs	r0, #54	@ 0x36
 800101c:	f002 f891 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001020:	2036      	movs	r0, #54	@ 0x36
 8001022:	f002 f8aa 	bl	800317a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40007400 	.word	0x40007400
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_TIM_Base_MspInit+0x38>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10b      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_TIM_Base_MspInit+0x3c>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_TIM_Base_MspInit+0x3c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_TIM_Base_MspInit+0x3c>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40000400 	.word	0x40000400
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <HAL_TIM_MspPostInit+0x64>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d11c      	bne.n	80010d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_TIM_MspPostInit+0x68>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_TIM_MspPostInit+0x68>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_TIM_MspPostInit+0x68>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b2:	23c0      	movs	r3, #192	@ 0xc0
 80010b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f002 fc9a 	bl	8003a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40000400 	.word	0x40000400
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ac      	sub	sp, #176	@ 0xb0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2288      	movs	r2, #136	@ 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fbdc 	bl	80078c2 <memset>
  if(huart->Instance==USART2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a25      	ldr	r2, [pc, #148]	@ (80011a4 <HAL_UART_MspInit+0xc0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d143      	bne.n	800119c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fc7f 	bl	8004a24 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff fdea 	bl	8000d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001134:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 8001136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113a:	6593      	str	r3, [r2, #88]	@ 0x58
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001160:	230c      	movs	r3, #12
 8001162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001188:	f002 fc3e 	bl	8003a08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 13, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	210d      	movs	r1, #13
 8001190:	2026      	movs	r0, #38	@ 0x26
 8001192:	f001 ffd6 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001196:	2026      	movs	r0, #38	@ 0x26
 8001198:	f001 ffef 	bl	800317a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	37b0      	adds	r7, #176	@ 0xb0
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40021000 	.word	0x40021000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001202:	f000 f95f 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <DMA1_Channel1_IRQHandler+0x10>)
 8001212:	f002 fb1a 	bl	800384a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000014c 	.word	0x2000014c

08001220 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <DMA1_Channel2_IRQHandler+0x10>)
 8001226:	f002 fb10 	bl	800384a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000194 	.word	0x20000194

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f005 f9e7 	bl	800660c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000268 	.word	0x20000268

08001248 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <TIM6_DAC_IRQHandler+0x10>)
 800124e:	f001 ffd0 	bl	80031f2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000208 	.word	0x20000208

0800125c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00a      	b.n	8001284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800126e:	f3af 8000 	nop.w
 8001272:	4601      	mov	r1, r0
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	b2ca      	uxtb	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf0      	blt.n	800126e <_read+0x12>
  }

  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e009      	b.n	80012bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	60ba      	str	r2, [r7, #8]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f955 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf1      	blt.n	80012a8 <_write+0x12>
  }
  return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_close>:

int _close(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f6:	605a      	str	r2, [r3, #4]
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_isatty>:

int _isatty(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f006 fafa 	bl	8007960 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20018000 	.word	0x20018000
 8001398:	00000400 	.word	0x00000400
 800139c:	200002fc 	.word	0x200002fc
 80013a0:	20000450 	.word	0x20000450

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f006 fab9 	bl	800796c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff f97b 	bl	80006f4 <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800140c:	080085a4 	.word	0x080085a4
  ldr r2, =_sbss
 8001410:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001414:	20000450 	.word	0x20000450

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>

0800141a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f001 fe81 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f80e 	bl	800144c <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e001      	b.n	8001440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800143c:	f7ff fc68 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001440:	79fb      	ldrb	r3, [r7, #7]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_InitTick+0x6c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_InitTick+0x70>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f001 fe8d 	bl	8003196 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d809      	bhi.n	800149c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f001 fe57 	bl	8003142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0x74>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e007      	b.n	80014ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e004      	b.n	80014ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e001      	b.n	80014ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000300 	.word	0x20000300

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000300 	.word	0x20000300

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3360      	adds	r3, #96	@ 0x60
 80015c6:	461a      	mov	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <LL_ADC_SetOffset+0x44>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	03fff000 	.word	0x03fff000

080015fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3360      	adds	r3, #96	@ 0x60
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3360      	adds	r3, #96	@ 0x60
 8001638:	461a      	mov	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3330      	adds	r3, #48	@ 0x30
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	4413      	add	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	211f      	movs	r1, #31
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0e9b      	lsrs	r3, r3, #26
 80016bc:	f003 011f 	and.w	r1, r3, #31
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3314      	adds	r3, #20
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0e5b      	lsrs	r3, r3, #25
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	0d1b      	lsrs	r3, r3, #20
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2107      	movs	r1, #7
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	0d1b      	lsrs	r3, r3, #20
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001726:	bf00      	nop
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0318 	and.w	r3, r3, #24
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001758:	40d9      	lsrs	r1, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	400b      	ands	r3, r1
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	431a      	orrs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	0007ffff 	.word	0x0007ffff

0800177c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 031f 	and.w	r3, r3, #31
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6093      	str	r3, [r2, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017ec:	d101      	bne.n	80017f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001814:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800183c:	d101      	bne.n	8001842 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <LL_ADC_IsEnabled+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_ADC_IsEnabled+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018b2:	f043 0204 	orr.w	r2, r3, #4
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d101      	bne.n	80018de <LL_ADC_REG_IsConversionOngoing+0x18>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d101      	bne.n	8001904 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e130      	b.n	8001b90 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fa0b 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff3f 	bl	80017d8 <LL_ADC_IsDeepPowerDownEnabled>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff25 	bl	80017b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff5a 	bl	8001828 <LL_ADC_IsInternalRegulatorEnabled>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d115      	bne.n	80019a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff3e 	bl	8001800 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001984:	4b84      	ldr	r3, [pc, #528]	@ (8001b98 <HAL_ADC_Init+0x284>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	4a84      	ldr	r2, [pc, #528]	@ (8001b9c <HAL_ADC_Init+0x288>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3b01      	subs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff3c 	bl	8001828 <LL_ADC_IsInternalRegulatorEnabled>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff75 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 80019dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 80c9 	bne.w	8001b7e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80c5 	bne.w	8001b7e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019fc:	f043 0202 	orr.w	r2, r3, #2
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff35 	bl	8001878 <LL_ADC_IsEnabled>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d115      	bne.n	8001a40 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a14:	4862      	ldr	r0, [pc, #392]	@ (8001ba0 <HAL_ADC_Init+0x28c>)
 8001a16:	f7ff ff2f 	bl	8001878 <LL_ADC_IsEnabled>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4861      	ldr	r0, [pc, #388]	@ (8001ba4 <HAL_ADC_Init+0x290>)
 8001a1e:	f7ff ff2b 	bl	8001878 <LL_ADC_IsEnabled>
 8001a22:	4603      	mov	r3, r0
 8001a24:	431c      	orrs	r4, r3
 8001a26:	4860      	ldr	r0, [pc, #384]	@ (8001ba8 <HAL_ADC_Init+0x294>)
 8001a28:	f7ff ff26 	bl	8001878 <LL_ADC_IsEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	485c      	ldr	r0, [pc, #368]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a3c:	f7ff fd86 	bl	800154c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7e5b      	ldrb	r3, [r3, #25]
 8001a44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d106      	bne.n	8001a7c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	3b01      	subs	r3, #1
 8001a74:	045b      	lsls	r3, r3, #17
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b44      	ldr	r3, [pc, #272]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff1b 	bl	80018ec <LL_ADC_INJ_IsConversionOngoing>
 8001ab6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d13d      	bne.n	8001b3a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13a      	bne.n	8001b3a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ac8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ad0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ae0:	f023 0302 	bic.w	r3, r3, #2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	69b9      	ldr	r1, [r7, #24]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d118      	bne.n	8001b2a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	e007      	b.n	8001b3a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10c      	bne.n	8001b5c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	f023 010f 	bic.w	r1, r3, #15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5a:	e007      	b.n	8001b6c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 020f 	bic.w	r2, r2, #15
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b70:	f023 0303 	bic.w	r3, r3, #3
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b7c:	e007      	b.n	8001b8e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	f043 0210 	orr.w	r2, r3, #16
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3724      	adds	r7, #36	@ 0x24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	053e2d63 	.word	0x053e2d63
 8001ba0:	50040000 	.word	0x50040000
 8001ba4:	50040100 	.word	0x50040100
 8001ba8:	50040200 	.word	0x50040200
 8001bac:	50040300 	.word	0x50040300
 8001bb0:	fff0c007 	.word	0xfff0c007

08001bb4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bbc:	4857      	ldr	r0, [pc, #348]	@ (8001d1c <HAL_ADC_Start+0x168>)
 8001bbe:	f7ff fddd 	bl	800177c <LL_ADC_GetMultimode>
 8001bc2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe7c 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 809c 	bne.w	8001d0e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_Start+0x30>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e097      	b.n	8001d14 <HAL_ADC_Start+0x160>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fe43 	bl	8002878 <ADC_Enable>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8083 	bne.w	8001d04 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a42      	ldr	r2, [pc, #264]	@ (8001d20 <HAL_ADC_Start+0x16c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d002      	beq.n	8001c22 <HAL_ADC_Start+0x6e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e000      	b.n	8001c24 <HAL_ADC_Start+0x70>
 8001c22:	4b40      	ldr	r3, [pc, #256]	@ (8001d24 <HAL_ADC_Start+0x170>)
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d002      	beq.n	8001c32 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c4a:	d106      	bne.n	8001c5a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	f023 0206 	bic.w	r2, r3, #6
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	221c      	movs	r2, #28
 8001c66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2a      	ldr	r2, [pc, #168]	@ (8001d20 <HAL_ADC_Start+0x16c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d002      	beq.n	8001c80 <HAL_ADC_Start+0xcc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e000      	b.n	8001c82 <HAL_ADC_Start+0xce>
 8001c80:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <HAL_ADC_Start+0x170>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d008      	beq.n	8001c9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d002      	beq.n	8001c9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d114      	bne.n	8001cc6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cb2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fded 	bl	800189e <LL_ADC_REG_StartConversion>
 8001cc4:	e025      	b.n	8001d12 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <HAL_ADC_Start+0x16c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_Start+0x12e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_Start+0x130>
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <HAL_ADC_Start+0x170>)
 8001ce4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00f      	beq.n	8001d12 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cfa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d02:	e006      	b.n	8001d12 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001d0c:	e001      	b.n	8001d12 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	50040300 	.word	0x50040300
 8001d20:	50040100 	.word	0x50040100
 8001d24:	50040000 	.word	0x50040000

08001d28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d32:	4866      	ldr	r0, [pc, #408]	@ (8001ecc <HAL_ADC_PollForConversion+0x1a4>)
 8001d34:	f7ff fd22 	bl	800177c <LL_ADC_GetMultimode>
 8001d38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d102      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d42:	2308      	movs	r3, #8
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e02a      	b.n	8001d9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d002      	beq.n	8001d5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	d111      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0a4      	b.n	8001ec2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d78:	2304      	movs	r3, #4
 8001d7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d7c:	e00f      	b.n	8001d9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d7e:	4853      	ldr	r0, [pc, #332]	@ (8001ecc <HAL_ADC_PollForConversion+0x1a4>)
 8001d80:	f7ff fd0a 	bl	8001798 <LL_ADC_GetMultiDMATransfer>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	f043 0220 	orr.w	r2, r3, #32
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e093      	b.n	8001ec2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d9e:	f7ff fba5 	bl	80014ec <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001da4:	e021      	b.n	8001dea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d01d      	beq.n	8001dea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001dae:	f7ff fb9d 	bl	80014ec <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d302      	bcc.n	8001dc4 <HAL_ADC_PollForConversion+0x9c>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d112      	bne.n	8001dea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10b      	bne.n	8001dea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	f043 0204 	orr.w	r2, r3, #4
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e06b      	b.n	8001ec2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0d6      	beq.n	8001da6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fc28 	bl	800165e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01c      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e5b      	ldrb	r3, [r3, #25]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d118      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d111      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <HAL_ADC_PollForConversion+0x1a8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d002      	beq.n	8001e5e <HAL_ADC_PollForConversion+0x136>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	e000      	b.n	8001e60 <HAL_ADC_PollForConversion+0x138>
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_ADC_PollForConversion+0x1ac>)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d008      	beq.n	8001e7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d002      	beq.n	8001e7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b09      	cmp	r3, #9
 8001e78:	d104      	bne.n	8001e84 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	e00c      	b.n	8001e9e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a11      	ldr	r2, [pc, #68]	@ (8001ed0 <HAL_ADC_PollForConversion+0x1a8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d002      	beq.n	8001e94 <HAL_ADC_PollForConversion+0x16c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_PollForConversion+0x16e>
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <HAL_ADC_PollForConversion+0x1ac>)
 8001e96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d104      	bne.n	8001eae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e008      	b.n	8001ec0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	50040300 	.word	0x50040300
 8001ed0:	50040100 	.word	0x50040100
 8001ed4:	50040000 	.word	0x50040000

08001ed8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee4:	4853      	ldr	r0, [pc, #332]	@ (8002034 <HAL_ADC_Start_DMA+0x15c>)
 8001ee6:	f7ff fc49 	bl	800177c <LL_ADC_GetMultimode>
 8001eea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fce8 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 8093 	bne.w	8002024 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_Start_DMA+0x34>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e08e      	b.n	800202a <HAL_ADC_Start_DMA+0x152>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a47      	ldr	r2, [pc, #284]	@ (8002038 <HAL_ADC_Start_DMA+0x160>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d008      	beq.n	8001f30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d002      	beq.n	8001f30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d172      	bne.n	8002016 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fca1 	bl	8002878 <ADC_Enable>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d165      	bne.n	800200c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a38      	ldr	r2, [pc, #224]	@ (800203c <HAL_ADC_Start_DMA+0x164>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_ADC_Start_DMA+0x8c>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_Start_DMA+0x8e>
 8001f64:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <HAL_ADC_Start_DMA+0x168>)
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d002      	beq.n	8001f74 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f023 0206 	bic.w	r2, r3, #6
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa4:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <HAL_ADC_Start_DMA+0x16c>)
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	4a26      	ldr	r2, [pc, #152]	@ (8002048 <HAL_ADC_Start_DMA+0x170>)
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <HAL_ADC_Start_DMA+0x174>)
 8001fb6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	221c      	movs	r2, #28
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0210 	orr.w	r2, r2, #16
 8001fd6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3340      	adds	r3, #64	@ 0x40
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f001 fb48 	bl	800368c <HAL_DMA_Start_IT>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fc4a 	bl	800189e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800200a:	e00d      	b.n	8002028 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002014:	e008      	b.n	8002028 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002022:	e001      	b.n	8002028 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002024:	2302      	movs	r3, #2
 8002026:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002028:	7dfb      	ldrb	r3, [r7, #23]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	50040300 	.word	0x50040300
 8002038:	50040200 	.word	0x50040200
 800203c:	50040100 	.word	0x50040100
 8002040:	50040000 	.word	0x50040000
 8002044:	08002985 	.word	0x08002985
 8002048:	08002a5d 	.word	0x08002a5d
 800204c:	08002a79 	.word	0x08002a79

08002050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0b6      	sub	sp, #216	@ 0xd8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x22>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e3c9      	b.n	800284a <HAL_ADC_ConfigChannel+0x7b6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fbff 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 83aa 	bne.w	8002824 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d824      	bhi.n	800212a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	3b02      	subs	r3, #2
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d81b      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x8e>
 80020ea:	a201      	add	r2, pc, #4	@ (adr r2, 80020f0 <HAL_ADC_ConfigChannel+0x5c>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002109 	.word	0x08002109
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002119 	.word	0x08002119
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002100:	230c      	movs	r3, #12
 8002102:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002106:	e010      	b.n	800212a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002108:	2312      	movs	r3, #18
 800210a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800210e:	e00c      	b.n	800212a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002110:	2318      	movs	r3, #24
 8002112:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002116:	e008      	b.n	800212a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002120:	e003      	b.n	800212a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002122:	2306      	movs	r3, #6
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002128:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002138:	f7ff faa4 	bl	8001684 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fbc0 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8002146:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fbcc 	bl	80018ec <LL_ADC_INJ_IsConversionOngoing>
 8002154:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 81a4 	bne.w	80024aa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 819f 	bne.w	80024aa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	461a      	mov	r2, r3
 800217a:	f7ff faaf 	bl	80016dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d00a      	beq.n	80021b6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b0:	f7ff fa00 	bl	80015b4 <LL_ADC_SetOffset>
 80021b4:	e179      	b.n	80024aa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fa1d 	bl	80015fc <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x14e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fa12 	bl	80015fc <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	e01e      	b.n	8002220 <HAL_ADC_ConfigChannel+0x18c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fa07 	bl	80015fc <LL_ADC_GetOffsetChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002204:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e004      	b.n	800221e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1a4>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	e018      	b.n	800226a <HAL_ADC_ConfigChannel+0x1d6>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800224c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e004      	b.n	800226a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800226a:	429a      	cmp	r2, r3
 800226c:	d106      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f9d6 	bl	8001628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f9ba 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x214>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f9af 	bl	80015fc <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	e01e      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x252>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f9a4 	bl	80015fc <LL_ADC_GetOffsetChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80022da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x26a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	e018      	b.n	8002330 <HAL_ADC_ConfigChannel+0x29c>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002312:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002316:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800231a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002326:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002330:	429a      	cmp	r2, r3
 8002332:	d106      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f973 	bl	8001628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f957 	bl	80015fc <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <HAL_ADC_ConfigChannel+0x2da>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f94c 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	e01e      	b.n	80023ac <HAL_ADC_ConfigChannel+0x318>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2102      	movs	r1, #2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f941 	bl	80015fc <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800238c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e004      	b.n	80023aa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x330>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	e014      	b.n	80023ee <HAL_ADC_ConfigChannel+0x35a>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e004      	b.n	80023ee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80023e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f914 	bl	8001628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2103      	movs	r1, #3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f8f8 	bl	80015fc <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_ADC_ConfigChannel+0x398>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2103      	movs	r1, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f8ed 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 021f 	and.w	r2, r3, #31
 800242a:	e017      	b.n	800245c <HAL_ADC_ConfigChannel+0x3c8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2103      	movs	r1, #3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f8e2 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002446:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e003      	b.n	800245a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x3e0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	e011      	b.n	8002498 <HAL_ADC_ConfigChannel+0x404>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002484:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002486:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800248c:	2320      	movs	r3, #32
 800248e:	e003      	b.n	8002498 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002498:	429a      	cmp	r2, r3
 800249a:	d106      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2103      	movs	r1, #3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f8bf 	bl	8001628 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f9e2 	bl	8001878 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 8140 	bne.w	800273c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f7ff f933 	bl	8001734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a8f      	ldr	r2, [pc, #572]	@ (8002710 <HAL_ADC_ConfigChannel+0x67c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f040 8131 	bne.w	800273c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x46e>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	3301      	adds	r3, #1
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	bf94      	ite	ls
 80024fa:	2301      	movls	r3, #1
 80024fc:	2300      	movhi	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e019      	b.n	8002536 <HAL_ADC_ConfigChannel+0x4a2>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800251e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2b09      	cmp	r3, #9
 800252e:	bf94      	ite	ls
 8002530:	2301      	movls	r3, #1
 8002532:	2300      	movhi	r3, #0
 8002534:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002536:	2b00      	cmp	r3, #0
 8002538:	d079      	beq.n	800262e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d107      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x4c2>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	3301      	adds	r3, #1
 800254e:	069b      	lsls	r3, r3, #26
 8002550:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002554:	e015      	b.n	8002582 <HAL_ADC_ConfigChannel+0x4ee>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002566:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e003      	b.n	800257a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	069b      	lsls	r3, r3, #26
 800257e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x50e>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	3301      	adds	r3, #1
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	e017      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x53e>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80025be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	ea42 0103 	orr.w	r1, r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x564>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 021f 	and.w	r2, r3, #31
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	e018      	b.n	800262a <HAL_ADC_ConfigChannel+0x596>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800260a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e003      	b.n	800261c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262a:	430b      	orrs	r3, r1
 800262c:	e081      	b.n	8002732 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_ADC_ConfigChannel+0x5b6>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002648:	e015      	b.n	8002676 <HAL_ADC_ConfigChannel+0x5e2>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x602>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	3301      	adds	r3, #1
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	e017      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x632>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	61bb      	str	r3, [r7, #24]
  return result;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	ea42 0103 	orr.w	r1, r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x65e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	051b      	lsls	r3, r3, #20
 80026ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x69c>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  return result;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e006      	b.n	800271c <HAL_ADC_ConfigChannel+0x688>
 800270e:	bf00      	nop
 8002710:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f003 021f 	and.w	r2, r3, #31
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	3b1e      	subs	r3, #30
 800272a:	051b      	lsls	r3, r3, #20
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002730:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe ffd0 	bl	80016dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <HAL_ADC_ConfigChannel+0x7c0>)
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d07a      	beq.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002748:	4843      	ldr	r0, [pc, #268]	@ (8002858 <HAL_ADC_ConfigChannel+0x7c4>)
 800274a:	f7fe ff25 	bl	8001598 <LL_ADC_GetCommonPathInternalCh>
 800274e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a41      	ldr	r2, [pc, #260]	@ (800285c <HAL_ADC_ConfigChannel+0x7c8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d12c      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800275c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d126      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3c      	ldr	r2, [pc, #240]	@ (8002860 <HAL_ADC_ConfigChannel+0x7cc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_ADC_ConfigChannel+0x6e8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3b      	ldr	r2, [pc, #236]	@ (8002864 <HAL_ADC_ConfigChannel+0x7d0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d15d      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002780:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002784:	4619      	mov	r1, r3
 8002786:	4834      	ldr	r0, [pc, #208]	@ (8002858 <HAL_ADC_ConfigChannel+0x7c4>)
 8002788:	f7fe fef3 	bl	8001572 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278c:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <HAL_ADC_ConfigChannel+0x7d4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	4a36      	ldr	r2, [pc, #216]	@ (800286c <HAL_ADC_ConfigChannel+0x7d8>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027a6:	e002      	b.n	80027ae <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b4:	e040      	b.n	8002838 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_ADC_ConfigChannel+0x7dc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d118      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d112      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	@ (8002860 <HAL_ADC_ConfigChannel+0x7cc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x74c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a22      	ldr	r2, [pc, #136]	@ (8002864 <HAL_ADC_ConfigChannel+0x7d0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d12d      	bne.n	800283c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027e8:	4619      	mov	r1, r3
 80027ea:	481b      	ldr	r0, [pc, #108]	@ (8002858 <HAL_ADC_ConfigChannel+0x7c4>)
 80027ec:	f7fe fec1 	bl	8001572 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f0:	e024      	b.n	800283c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_ADC_ConfigChannel+0x7e0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d120      	bne.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11a      	bne.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <HAL_ADC_ConfigChannel+0x7cc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d115      	bne.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002816:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800281a:	4619      	mov	r1, r3
 800281c:	480e      	ldr	r0, [pc, #56]	@ (8002858 <HAL_ADC_ConfigChannel+0x7c4>)
 800281e:	f7fe fea8 	bl	8001572 <LL_ADC_SetCommonPathInternalCh>
 8002822:	e00c      	b.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002836:	e002      	b.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002838:	bf00      	nop
 800283a:	e000      	b.n	800283e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800283c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002846:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800284a:	4618      	mov	r0, r3
 800284c:	37d8      	adds	r7, #216	@ 0xd8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	80080000 	.word	0x80080000
 8002858:	50040300 	.word	0x50040300
 800285c:	c7520000 	.word	0xc7520000
 8002860:	50040000 	.word	0x50040000
 8002864:	50040200 	.word	0x50040200
 8002868:	20000000 	.word	0x20000000
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	cb840000 	.word	0xcb840000
 8002874:	80000001 	.word	0x80000001

08002878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fff5 	bl	8001878 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d169      	bne.n	8002968 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	4b36      	ldr	r3, [pc, #216]	@ (8002974 <ADC_Enable+0xfc>)
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e055      	b.n	800296a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe ffc4 	bl	8001850 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028c8:	482b      	ldr	r0, [pc, #172]	@ (8002978 <ADC_Enable+0x100>)
 80028ca:	f7fe fe65 	bl	8001598 <LL_ADC_GetCommonPathInternalCh>
 80028ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d8:	4b28      	ldr	r3, [pc, #160]	@ (800297c <ADC_Enable+0x104>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	4a28      	ldr	r2, [pc, #160]	@ (8002980 <ADC_Enable+0x108>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028f2:	e002      	b.n	80028fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f9      	bne.n	80028f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002900:	f7fe fdf4 	bl	80014ec <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002906:	e028      	b.n	800295a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe ffb3 	bl	8001878 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe ff97 	bl	8001850 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002922:	f7fe fde3 	bl	80014ec <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d914      	bls.n	800295a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d00d      	beq.n	800295a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002942:	f043 0210 	orr.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d1cf      	bne.n	8002908 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	8000003f 	.word	0x8000003f
 8002978:	50040300 	.word	0x50040300
 800297c:	20000000 	.word	0x20000000
 8002980:	053e2d63 	.word	0x053e2d63

08002984 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800299a:	2b00      	cmp	r3, #0
 800299c:	d14b      	bne.n	8002a36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d021      	beq.n	80029fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fe4e 	bl	800165e <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d032      	beq.n	8002a2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d12b      	bne.n	8002a2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11f      	bne.n	8002a2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80029fa:	e018      	b.n	8002a2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d111      	bne.n	8002a2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7fd fdfe 	bl	8000630 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a34:	e00e      	b.n	8002a54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff fb1b 	bl	800207e <HAL_ADC_ErrorCallback>
}
 8002a48:	e004      	b.n	8002a54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fafd 	bl	800206a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff faed 	bl	800207e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <LL_ADC_IsEnabled>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_IsEnabled+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_IsEnabled+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b09f      	sub	sp, #124	@ 0x7c
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e093      	b.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b22:	2300      	movs	r3, #0
 8002b24:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a47      	ldr	r2, [pc, #284]	@ (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d102      	bne.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b30:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	e001      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e072      	b.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ffb9 	bl	8002ad2 <LL_ADC_REG_IsConversionOngoing>
 8002b60:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ffb3 	bl	8002ad2 <LL_ADC_REG_IsConversionOngoing>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d154      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d151      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b78:	4b35      	ldr	r3, [pc, #212]	@ (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02c      	beq.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b96:	035b      	lsls	r3, r3, #13
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba0:	4829      	ldr	r0, [pc, #164]	@ (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ba2:	f7ff ff83 	bl	8002aac <LL_ADC_IsEnabled>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4828      	ldr	r0, [pc, #160]	@ (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002baa:	f7ff ff7f 	bl	8002aac <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	431c      	orrs	r4, r3
 8002bb2:	4828      	ldr	r0, [pc, #160]	@ (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bb4:	f7ff ff7a 	bl	8002aac <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d137      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	6811      	ldr	r1, [r2, #0]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	6892      	ldr	r2, [r2, #8]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bda:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bdc:	e028      	b.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bea:	4817      	ldr	r0, [pc, #92]	@ (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bec:	f7ff ff5e 	bl	8002aac <LL_ADC_IsEnabled>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	4816      	ldr	r0, [pc, #88]	@ (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bf4:	f7ff ff5a 	bl	8002aac <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	431c      	orrs	r4, r3
 8002bfc:	4815      	ldr	r0, [pc, #84]	@ (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bfe:	f7ff ff55 	bl	8002aac <LL_ADC_IsEnabled>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4323      	orrs	r3, r4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d112      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1a:	e009      	b.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c2e:	e000      	b.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c3a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	377c      	adds	r7, #124	@ 0x7c
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	50040000 	.word	0x50040000
 8002c4c:	50040100 	.word	0x50040100
 8002c50:	50040300 	.word	0x50040300
 8002c54:	50040200 	.word	0x50040200

08002c58 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40010400 	.word	0x40010400

08002c7c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4904      	ldr	r1, [pc, #16]	@ (8002ca0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]

}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <LL_EXTI_DisableEvent_0_31+0x24>)
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4904      	ldr	r1, [pc, #16]	@ (8002cec <LL_EXTI_DisableEvent_0_31+0x24>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010400 	.word	0x40010400

08002cf0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	4904      	ldr	r1, [pc, #16]	@ (8002d10 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]

}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40010400 	.word	0x40010400

08002d14 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	4904      	ldr	r1, [pc, #16]	@ (8002d38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]

}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40010400 	.word	0x40010400

08002d3c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	4904      	ldr	r1, [pc, #16]	@ (8002d5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60cb      	str	r3, [r1, #12]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40010400 	.word	0x40010400

08002d60 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	4904      	ldr	r1, [pc, #16]	@ (8002d84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40010400 	.word	0x40010400

08002d88 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6153      	str	r3, [r2, #20]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e0d1      	b.n	8002f68 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dd2:	d102      	bne.n	8002dda <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e0c6      	b.n	8002f68 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f74 <HAL_COMP_Init+0x1cc>)
 8002df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df8:	4a5e      	ldr	r2, [pc, #376]	@ (8002f74 <HAL_COMP_Init+0x1cc>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e00:	4b5c      	ldr	r3, [pc, #368]	@ (8002f74 <HAL_COMP_Init+0x1cc>)
 8002e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fe f89b 	bl	8000f48 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e1c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b4b      	ldr	r3, [pc, #300]	@ (8002f78 <HAL_COMP_Init+0x1d0>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	6979      	ldr	r1, [r7, #20]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5e:	d106      	bne.n	8002e6e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002e60:	4b46      	ldr	r3, [pc, #280]	@ (8002f7c <HAL_COMP_Init+0x1d4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a45      	ldr	r2, [pc, #276]	@ (8002f7c <HAL_COMP_Init+0x1d4>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e005      	b.n	8002e7a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_COMP_Init+0x1d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a42      	ldr	r2, [pc, #264]	@ (8002f7c <HAL_COMP_Init+0x1d4>)
 8002e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e78:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d016      	beq.n	8002eb6 <HAL_COMP_Init+0x10e>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d113      	bne.n	8002eb6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f80 <HAL_COMP_Init+0x1d8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	4a3b      	ldr	r2, [pc, #236]	@ (8002f84 <HAL_COMP_Init+0x1dc>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002ea8:	e002      	b.n	8002eb0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f9      	bne.n	8002eaa <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	@ (8002f88 <HAL_COMP_Init+0x1e0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d102      	bne.n	8002ec6 <HAL_COMP_Init+0x11e>
 8002ec0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ec4:	e001      	b.n	8002eca <HAL_COMP_Init+0x122>
 8002ec6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eca:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d037      	beq.n	8002f48 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002ee4:	6938      	ldr	r0, [r7, #16]
 8002ee6:	f7ff ff03 	bl	8002cf0 <LL_EXTI_EnableRisingTrig_0_31>
 8002eea:	e002      	b.n	8002ef2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002eec:	6938      	ldr	r0, [r7, #16]
 8002eee:	f7ff ff11 	bl	8002d14 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002efe:	6938      	ldr	r0, [r7, #16]
 8002f00:	f7ff ff1c 	bl	8002d3c <LL_EXTI_EnableFallingTrig_0_31>
 8002f04:	e002      	b.n	8002f0c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002f06:	6938      	ldr	r0, [r7, #16]
 8002f08:	f7ff ff2a 	bl	8002d60 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8002f0c:	6938      	ldr	r0, [r7, #16]
 8002f0e:	f7ff ff3b 	bl	8002d88 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002f1e:	6938      	ldr	r0, [r7, #16]
 8002f20:	f7ff fec0 	bl	8002ca4 <LL_EXTI_EnableEvent_0_31>
 8002f24:	e002      	b.n	8002f2c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002f26:	6938      	ldr	r0, [r7, #16]
 8002f28:	f7ff fece 	bl	8002cc8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002f38:	6938      	ldr	r0, [r7, #16]
 8002f3a:	f7ff fe8d 	bl	8002c58 <LL_EXTI_EnableIT_0_31>
 8002f3e:	e009      	b.n	8002f54 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002f40:	6938      	ldr	r0, [r7, #16]
 8002f42:	f7ff fe9b 	bl	8002c7c <LL_EXTI_DisableIT_0_31>
 8002f46:	e005      	b.n	8002f54 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002f48:	6938      	ldr	r0, [r7, #16]
 8002f4a:	f7ff febd 	bl	8002cc8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002f4e:	6938      	ldr	r0, [r7, #16]
 8002f50:	f7ff fe94 	bl	8002c7c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d103      	bne.n	8002f68 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	ff207d03 	.word	0xff207d03
 8002f7c:	40010204 	.word	0x40010204
 8002f80:	20000000 	.word	0x20000000
 8002f84:	053e2d63 	.word	0x053e2d63
 8002f88:	40010200 	.word	0x40010200

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	@ (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	@ (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	@ (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e014      	b.n	80031ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fd ff0b 	bl	8000fec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003208:	d120      	bne.n	800324c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d118      	bne.n	800324c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2204      	movs	r2, #4
 800321e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003244:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f82d 	bl	80032a6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800325a:	d120      	bne.n	800329e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800326a:	d118      	bne.n	800329e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2204      	movs	r2, #4
 8003270:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003296:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f935 	bl	8003508 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	795b      	ldrb	r3, [r3, #5]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_DAC_ConfigChannel+0x1c>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e114      	b.n	8003500 <HAL_DAC_ConfigChannel+0x246>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2202      	movs	r2, #2
 80032e0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	f040 8081 	bne.w	80033ee <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032ec:	f7fe f8fe 	bl	80014ec <HAL_GetTick>
 80032f0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d140      	bne.n	800337a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032f8:	e018      	b.n	800332c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032fa:	f7fe f8f7 	bl	80014ec <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d911      	bls.n	800332c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f043 0208 	orr.w	r2, r3, #8
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2203      	movs	r2, #3
 8003326:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0e9      	b.n	8003500 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1df      	bne.n	80032fa <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800333a:	2001      	movs	r0, #1
 800333c:	f7fe f8e2 	bl	8001504 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	6992      	ldr	r2, [r2, #24]
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40
 800334a:	e023      	b.n	8003394 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800334c:	f7fe f8ce 	bl	80014ec <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d90f      	bls.n	800337a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	da0a      	bge.n	800337a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f043 0208 	orr.w	r2, r3, #8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2203      	movs	r2, #3
 8003374:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0c2      	b.n	8003500 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003380:	2b00      	cmp	r3, #0
 8003382:	dbe3      	blt.n	800334c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003384:	2001      	movs	r0, #1
 8003386:	f7fe f8bd 	bl	8001504 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	6992      	ldr	r2, [r2, #24]
 8003392:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	ea02 0103 	and.w	r1, r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	21ff      	movs	r1, #255	@ 0xff
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	ea02 0103 	and.w	r1, r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11d      	bne.n	8003432 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	221f      	movs	r2, #31
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2207      	movs	r2, #7
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	431a      	orrs	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	400a      	ands	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	22c0      	movs	r2, #192	@ 0xc0
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	400a      	ands	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e098      	b.n	8003660 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b4d      	ldr	r3, [pc, #308]	@ (800366c <HAL_DMA_Init+0x150>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d80f      	bhi.n	800355a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b4b      	ldr	r3, [pc, #300]	@ (8003670 <HAL_DMA_Init+0x154>)
 8003542:	4413      	add	r3, r2
 8003544:	4a4b      	ldr	r2, [pc, #300]	@ (8003674 <HAL_DMA_Init+0x158>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	009a      	lsls	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a48      	ldr	r2, [pc, #288]	@ (8003678 <HAL_DMA_Init+0x15c>)
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
 8003558:	e00e      	b.n	8003578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b46      	ldr	r3, [pc, #280]	@ (800367c <HAL_DMA_Init+0x160>)
 8003562:	4413      	add	r3, r2
 8003564:	4a43      	ldr	r2, [pc, #268]	@ (8003674 <HAL_DMA_Init+0x158>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a42      	ldr	r2, [pc, #264]	@ (8003680 <HAL_DMA_Init+0x164>)
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d2:	d039      	beq.n	8003648 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	4a27      	ldr	r2, [pc, #156]	@ (8003678 <HAL_DMA_Init+0x15c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d11a      	bne.n	8003614 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035de:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_DMA_Init+0x168>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f003 031c 	and.w	r3, r3, #28
 80035ea:	210f      	movs	r1, #15
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4924      	ldr	r1, [pc, #144]	@ (8003684 <HAL_DMA_Init+0x168>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <HAL_DMA_Init+0x168>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003604:	f003 031c 	and.w	r3, r3, #28
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	491d      	ldr	r1, [pc, #116]	@ (8003684 <HAL_DMA_Init+0x168>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
 8003612:	e019      	b.n	8003648 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003614:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <HAL_DMA_Init+0x16c>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	210f      	movs	r1, #15
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	4917      	ldr	r1, [pc, #92]	@ (8003688 <HAL_DMA_Init+0x16c>)
 800362a:	4013      	ands	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800362e:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <HAL_DMA_Init+0x16c>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f003 031c 	and.w	r3, r3, #28
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	4911      	ldr	r1, [pc, #68]	@ (8003688 <HAL_DMA_Init+0x16c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40020407 	.word	0x40020407
 8003670:	bffdfff8 	.word	0xbffdfff8
 8003674:	cccccccd 	.word	0xcccccccd
 8003678:	40020000 	.word	0x40020000
 800367c:	bffdfbf8 	.word	0xbffdfbf8
 8003680:	40020400 	.word	0x40020400
 8003684:	400200a8 	.word	0x400200a8
 8003688:	400204a8 	.word	0x400204a8

0800368c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Start_IT+0x20>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e04b      	b.n	8003744 <HAL_DMA_Start_IT+0xb8>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d13a      	bne.n	8003736 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f95f 	bl	80039a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 020e 	orr.w	r2, r2, #14
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e00f      	b.n	8003724 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 020a 	orr.w	r2, r2, #10
 8003722:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e005      	b.n	8003742 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020e 	bic.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	f003 021c 	and.w	r2, r3, #28
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d005      	beq.n	80037ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2204      	movs	r2, #4
 80037e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e029      	b.n	8003840 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 020e 	bic.w	r2, r2, #14
 80037fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	f003 021c 	and.w	r2, r3, #28
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
    }
  }
  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f003 031c 	and.w	r3, r3, #28
 800386a:	2204      	movs	r2, #4
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d026      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x7a>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d021      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0204 	bic.w	r2, r2, #4
 800389c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	f003 021c 	and.w	r2, r3, #28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	2104      	movs	r1, #4
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d071      	beq.n	800399e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038c2:	e06c      	b.n	800399e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c8:	f003 031c 	and.w	r3, r3, #28
 80038cc:	2202      	movs	r2, #2
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02e      	beq.n	8003936 <HAL_DMA_IRQHandler+0xec>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d029      	beq.n	8003936 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020a 	bic.w	r2, r2, #10
 80038fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390c:	f003 021c 	and.w	r2, r3, #28
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	2102      	movs	r1, #2
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d038      	beq.n	800399e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003934:	e033      	b.n	800399e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f003 031c 	and.w	r3, r3, #28
 800393e:	2208      	movs	r2, #8
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d02a      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d025      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003968:	f003 021c 	and.w	r2, r3, #28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
}
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f003 021c 	and.w	r2, r3, #28
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f202 	lsl.w	r2, r1, r2
 80039c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d108      	bne.n	80039ec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039ea:	e007      	b.n	80039fc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e17f      	b.n	8003d18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8171 	beq.w	8003d12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d005      	beq.n	8003a48 <HAL_GPIO_Init+0x40>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0201 	and.w	r2, r3, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d118      	bne.n	8003ae8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003abc:	2201      	movs	r2, #1
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d017      	beq.n	8003b24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d123      	bne.n	8003b78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	220f      	movs	r2, #15
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	08da      	lsrs	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3208      	adds	r2, #8
 8003b72:	6939      	ldr	r1, [r7, #16]
 8003b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80ac 	beq.w	8003d12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	4b5f      	ldr	r3, [pc, #380]	@ (8003d38 <HAL_GPIO_Init+0x330>)
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8003d38 <HAL_GPIO_Init+0x330>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d38 <HAL_GPIO_Init+0x330>)
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d3c <HAL_GPIO_Init+0x334>)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bfc:	d025      	beq.n	8003c4a <HAL_GPIO_Init+0x242>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4f      	ldr	r2, [pc, #316]	@ (8003d40 <HAL_GPIO_Init+0x338>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <HAL_GPIO_Init+0x23e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_GPIO_Init+0x33c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d019      	beq.n	8003c42 <HAL_GPIO_Init+0x23a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <HAL_GPIO_Init+0x340>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_GPIO_Init+0x236>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_GPIO_Init+0x344>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00d      	beq.n	8003c3a <HAL_GPIO_Init+0x232>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	@ (8003d50 <HAL_GPIO_Init+0x348>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <HAL_GPIO_Init+0x22e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4a      	ldr	r2, [pc, #296]	@ (8003d54 <HAL_GPIO_Init+0x34c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_GPIO_Init+0x22a>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00c      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c32:	2307      	movs	r3, #7
 8003c34:	e00a      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c36:	2305      	movs	r3, #5
 8003c38:	e008      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e006      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e004      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e002      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	f002 0203 	and.w	r2, r2, #3
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	4093      	lsls	r3, r2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c5c:	4937      	ldr	r1, [pc, #220]	@ (8003d3c <HAL_GPIO_Init+0x334>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3302      	adds	r3, #2
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c8e:	4a32      	ldr	r2, [pc, #200]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c94:	4b30      	ldr	r3, [pc, #192]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cb8:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cbe:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d0c:	4a12      	ldr	r2, [pc, #72]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f47f ae78 	bne.w	8003a18 <HAL_GPIO_Init+0x10>
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	48000400 	.word	0x48000400
 8003d44:	48000800 	.word	0x48000800
 8003d48:	48000c00 	.word	0x48000c00
 8003d4c:	48001000 	.word	0x48001000
 8003d50:	48001400 	.word	0x48001400
 8003d54:	48001800 	.word	0x48001800
 8003d58:	40010400 	.word	0x40010400

08003d5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40007000 	.word	0x40007000

08003d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d86:	d130      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d88:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d94:	d038      	beq.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d96:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003da6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2232      	movs	r2, #50	@ 0x32
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0c9b      	lsrs	r3, r3, #18
 8003db8:	3301      	adds	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dbc:	e002      	b.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc4:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd0:	d102      	bne.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f2      	bne.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de4:	d110      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e00f      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dea:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df6:	d007      	beq.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003df8:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e00:	4a05      	ldr	r2, [pc, #20]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	431bde83 	.word	0x431bde83

08003e24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e3ca      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b97      	ldr	r3, [pc, #604]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4b94      	ldr	r3, [pc, #592]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80e4 	beq.w	8004020 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_RCC_OscConfig+0x4a>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	f040 808b 	bne.w	8003f7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	f040 8087 	bne.w	8003f7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e6e:	4b89      	ldr	r3, [pc, #548]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x62>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e3a2      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	4b82      	ldr	r3, [pc, #520]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x7c>
 8003e96:	4b7f      	ldr	r3, [pc, #508]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e9e:	e005      	b.n	8003eac <HAL_RCC_OscConfig+0x88>
 8003ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d223      	bcs.n	8003ef8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fd55 	bl	8004964 <RCC_SetFlashLatencyFromMSIRange>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e383      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec4:	4b73      	ldr	r3, [pc, #460]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a72      	ldr	r2, [pc, #456]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003eca:	f043 0308 	orr.w	r3, r3, #8
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b70      	ldr	r3, [pc, #448]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	496d      	ldr	r1, [pc, #436]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	4968      	ldr	r1, [pc, #416]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
 8003ef6:	e025      	b.n	8003f44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef8:	4b66      	ldr	r3, [pc, #408]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003efe:	f043 0308 	orr.w	r3, r3, #8
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4960      	ldr	r1, [pc, #384]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f16:	4b5f      	ldr	r3, [pc, #380]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	495b      	ldr	r1, [pc, #364]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fd15 	bl	8004964 <RCC_SetFlashLatencyFromMSIRange>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e343      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f44:	f000 fc4a 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	4950      	ldr	r1, [pc, #320]	@ (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	4a4e      	ldr	r2, [pc, #312]	@ (800409c <HAL_RCC_OscConfig+0x278>)
 8003f62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f64:	4b4e      	ldr	r3, [pc, #312]	@ (80040a0 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd fa6f 	bl	800144c <HAL_InitTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d052      	beq.n	800401e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	e327      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d032      	beq.n	8003fea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f84:	4b43      	ldr	r3, [pc, #268]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a42      	ldr	r2, [pc, #264]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f90:	f7fd faac 	bl	80014ec <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f98:	f7fd faa8 	bl	80014ec <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e310      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003faa:	4b3a      	ldr	r3, [pc, #232]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb6:	4b37      	ldr	r3, [pc, #220]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a36      	ldr	r2, [pc, #216]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	f043 0308 	orr.w	r3, r3, #8
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4931      	ldr	r1, [pc, #196]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	492c      	ldr	r1, [pc, #176]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	e01a      	b.n	8004020 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fea:	4b2a      	ldr	r3, [pc, #168]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a29      	ldr	r2, [pc, #164]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fa79 	bl	80014ec <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fa75 	bl	80014ec <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e2dd      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004010:	4b20      	ldr	r3, [pc, #128]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x1da>
 800401c:	e000      	b.n	8004020 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800401e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d074      	beq.n	8004116 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x21a>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d10e      	bne.n	8004056 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d10b      	bne.n	8004056 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d064      	beq.n	8004114 <HAL_RCC_OscConfig+0x2f0>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d160      	bne.n	8004114 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e2ba      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x24a>
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0b      	ldr	r2, [pc, #44]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e026      	b.n	80040bc <HAL_RCC_OscConfig+0x298>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004076:	d115      	bne.n	80040a4 <HAL_RCC_OscConfig+0x280>
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 800407e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a02      	ldr	r2, [pc, #8]	@ (8004094 <HAL_RCC_OscConfig+0x270>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e014      	b.n	80040bc <HAL_RCC_OscConfig+0x298>
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	08008518 	.word	0x08008518
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004
 80040a4:	4ba0      	ldr	r3, [pc, #640]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a9f      	ldr	r2, [pc, #636]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b9d      	ldr	r3, [pc, #628]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a9c      	ldr	r2, [pc, #624]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fa12 	bl	80014ec <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fa0e 	bl	80014ec <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e276      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	4b92      	ldr	r3, [pc, #584]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x2a8>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd f9fe 	bl	80014ec <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fd f9fa 	bl	80014ec <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e262      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004106:	4b88      	ldr	r3, [pc, #544]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x2d0>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d060      	beq.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d005      	beq.n	8004134 <HAL_RCC_OscConfig+0x310>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d119      	bne.n	8004162 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d116      	bne.n	8004162 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004134:	4b7c      	ldr	r3, [pc, #496]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x328>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e23f      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b76      	ldr	r3, [pc, #472]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	4973      	ldr	r1, [pc, #460]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004160:	e040      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d023      	beq.n	80041b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416a:	4b6f      	ldr	r3, [pc, #444]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6e      	ldr	r2, [pc, #440]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fd f9b9 	bl	80014ec <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fd f9b5 	bl	80014ec <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e21d      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004190:	4b65      	ldr	r3, [pc, #404]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b62      	ldr	r3, [pc, #392]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	061b      	lsls	r3, r3, #24
 80041aa:	495f      	ldr	r1, [pc, #380]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	e018      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80041b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fd f995 	bl	80014ec <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c6:	f7fd f991 	bl	80014ec <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1f9      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d03c      	beq.n	800426a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01c      	beq.n	8004232 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd f970 	bl	80014ec <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004210:	f7fd f96c 	bl	80014ec <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e1d4      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004222:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ef      	beq.n	8004210 <HAL_RCC_OscConfig+0x3ec>
 8004230:	e01b      	b.n	800426a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004232:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004238:	4a3b      	ldr	r2, [pc, #236]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd f953 	bl	80014ec <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd f94f 	bl	80014ec <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1b7      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425c:	4b32      	ldr	r3, [pc, #200]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1ef      	bne.n	800424a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80a6 	beq.w	80043c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800427c:	4b2a      	ldr	r3, [pc, #168]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428c:	4a26      	ldr	r2, [pc, #152]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	@ 0x58
 8004294:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a4:	4b21      	ldr	r3, [pc, #132]	@ (800432c <HAL_RCC_OscConfig+0x508>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d118      	bne.n	80042e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b0:	4b1e      	ldr	r3, [pc, #120]	@ (800432c <HAL_RCC_OscConfig+0x508>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <HAL_RCC_OscConfig+0x508>)
 80042b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042bc:	f7fd f916 	bl	80014ec <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fd f912 	bl	80014ec <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e17a      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	4b15      	ldr	r3, [pc, #84]	@ (800432c <HAL_RCC_OscConfig+0x508>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <HAL_RCC_OscConfig+0x4d8>
 80042ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042fa:	e029      	b.n	8004350 <HAL_RCC_OscConfig+0x52c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b05      	cmp	r3, #5
 8004302:	d115      	bne.n	8004330 <HAL_RCC_OscConfig+0x50c>
 8004304:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	4a07      	ldr	r2, [pc, #28]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004314:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	4a03      	ldr	r2, [pc, #12]	@ (8004328 <HAL_RCC_OscConfig+0x504>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004324:	e014      	b.n	8004350 <HAL_RCC_OscConfig+0x52c>
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	40007000 	.word	0x40007000
 8004330:	4b9c      	ldr	r3, [pc, #624]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	4a9b      	ldr	r2, [pc, #620]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004340:	4b98      	ldr	r3, [pc, #608]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004346:	4a97      	ldr	r2, [pc, #604]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004348:	f023 0304 	bic.w	r3, r3, #4
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d016      	beq.n	8004386 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd f8c8 	bl	80014ec <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fd f8c4 	bl	80014ec <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e12a      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004376:	4b8b      	ldr	r3, [pc, #556]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ed      	beq.n	8004360 <HAL_RCC_OscConfig+0x53c>
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004386:	f7fd f8b1 	bl	80014ec <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fd f8ad 	bl	80014ec <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e113      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a4:	4b7f      	ldr	r3, [pc, #508]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ed      	bne.n	800438e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b2:	7ffb      	ldrb	r3, [r7, #31]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b7a      	ldr	r3, [pc, #488]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	4a79      	ldr	r2, [pc, #484]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80fe 	beq.w	80045ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f040 80d0 	bne.w	8004578 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043d8:	4b72      	ldr	r3, [pc, #456]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0203 	and.w	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d130      	bne.n	800444e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	3b01      	subs	r3, #1
 80043f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d127      	bne.n	800444e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004408:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d11f      	bne.n	800444e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004418:	2a07      	cmp	r2, #7
 800441a:	bf14      	ite	ne
 800441c:	2201      	movne	r2, #1
 800441e:	2200      	moveq	r2, #0
 8004420:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004422:	4293      	cmp	r3, r2
 8004424:	d113      	bne.n	800444e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	3b01      	subs	r3, #1
 8004434:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d109      	bne.n	800444e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d06e      	beq.n	800452c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d069      	beq.n	8004528 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004454:	4b53      	ldr	r3, [pc, #332]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004460:	4b50      	ldr	r3, [pc, #320]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0ad      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004470:	4b4c      	ldr	r3, [pc, #304]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800447a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800447c:	f7fd f836 	bl	80014ec <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fd f832 	bl	80014ec <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e09a      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004496:	4b43      	ldr	r3, [pc, #268]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a2:	4b40      	ldr	r3, [pc, #256]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	4b40      	ldr	r3, [pc, #256]	@ (80045a8 <HAL_RCC_OscConfig+0x784>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044b2:	3a01      	subs	r2, #1
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044bc:	0212      	lsls	r2, r2, #8
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0552      	lsls	r2, r2, #21
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044d0:	0852      	lsrs	r2, r2, #1
 80044d2:	3a01      	subs	r2, #1
 80044d4:	0652      	lsls	r2, r2, #25
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044dc:	0912      	lsrs	r2, r2, #4
 80044de:	0452      	lsls	r2, r2, #17
 80044e0:	430a      	orrs	r2, r1
 80044e2:	4930      	ldr	r1, [pc, #192]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044e8:	4b2e      	ldr	r3, [pc, #184]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2d      	ldr	r2, [pc, #180]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f4:	4b2b      	ldr	r3, [pc, #172]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a2a      	ldr	r2, [pc, #168]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 80044fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004500:	f7fc fff4 	bl	80014ec <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7fc fff0 	bl	80014ec <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e058      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451a:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004526:	e050      	b.n	80045ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e04f      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452c:	4b1d      	ldr	r3, [pc, #116]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d148      	bne.n	80045ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004538:	4b1a      	ldr	r3, [pc, #104]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004544:	4b17      	ldr	r3, [pc, #92]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 800454a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800454e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004550:	f7fc ffcc 	bl	80014ec <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004558:	f7fc ffc8 	bl	80014ec <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e030      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456a:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x734>
 8004576:	e028      	b.n	80045ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d023      	beq.n	80045c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <HAL_RCC_OscConfig+0x780>)
 8004584:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fc ffaf 	bl	80014ec <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004590:	e00c      	b.n	80045ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004592:	f7fc ffab 	bl	80014ec <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d905      	bls.n	80045ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e013      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
 80045a4:	40021000 	.word	0x40021000
 80045a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ac:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_RCC_OscConfig+0x7b0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ec      	bne.n	8004592 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045b8:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_RCC_OscConfig+0x7b0>)
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4905      	ldr	r1, [pc, #20]	@ (80045d4 <HAL_RCC_OscConfig+0x7b0>)
 80045be:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <HAL_RCC_OscConfig+0x7b4>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	60cb      	str	r3, [r1, #12]
 80045c4:	e001      	b.n	80045ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	feeefffc 	.word	0xfeeefffc

080045dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0e7      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b75      	ldr	r3, [pc, #468]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d910      	bls.n	8004620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b72      	ldr	r3, [pc, #456]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0207 	bic.w	r2, r3, #7
 8004606:	4970      	ldr	r1, [pc, #448]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b6e      	ldr	r3, [pc, #440]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0cf      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	4b66      	ldr	r3, [pc, #408]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004638:	429a      	cmp	r2, r3
 800463a:	d908      	bls.n	800464e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b63      	ldr	r3, [pc, #396]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4960      	ldr	r1, [pc, #384]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d04c      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b03      	cmp	r3, #3
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	4b5a      	ldr	r3, [pc, #360]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d121      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0a6      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467a:	4b54      	ldr	r3, [pc, #336]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d115      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e09a      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004692:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e08e      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a2:	4b4a      	ldr	r3, [pc, #296]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e086      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b46      	ldr	r3, [pc, #280]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4943      	ldr	r1, [pc, #268]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c4:	f7fc ff12 	bl	80014ec <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fc ff0e 	bl	80014ec <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e06e      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b3a      	ldr	r3, [pc, #232]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800470c:	429a      	cmp	r2, r3
 800470e:	d208      	bcs.n	8004722 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b2e      	ldr	r3, [pc, #184]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	492b      	ldr	r1, [pc, #172]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004722:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d210      	bcs.n	8004752 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 0207 	bic.w	r2, r3, #7
 8004738:	4923      	ldr	r1, [pc, #140]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004740:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e036      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475e:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4918      	ldr	r1, [pc, #96]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477c:	4b13      	ldr	r3, [pc, #76]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4910      	ldr	r1, [pc, #64]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004790:	f000 f824 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b0d      	ldr	r3, [pc, #52]	@ (80047cc <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	490b      	ldr	r1, [pc, #44]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f4>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <HAL_RCC_ClockConfig+0x1f8>)
 80047ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047b0:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x1fc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fc fe49 	bl	800144c <HAL_InitTick>
 80047ba:	4603      	mov	r3, r0
 80047bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80047be:	7afb      	ldrb	r3, [r7, #11]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40021000 	.word	0x40021000
 80047d0:	08008518 	.word	0x08008518
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	@ 0x24
 80047e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ea:	4b3e      	ldr	r3, [pc, #248]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f4:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x34>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b0c      	cmp	r3, #12
 8004808:	d121      	bne.n	800484e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d11e      	bne.n	800484e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004810:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800481c:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e005      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800482c:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004838:	4a2b      	ldr	r2, [pc, #172]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004840:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10d      	bne.n	8004864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d102      	bne.n	800485a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004854:	4b25      	ldr	r3, [pc, #148]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e004      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d101      	bne.n	8004864 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004860:	4b23      	ldr	r3, [pc, #140]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004862:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d134      	bne.n	80048d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800486a:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d003      	beq.n	8004882 <HAL_RCC_GetSysClockFreq+0xa6>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d003      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0xac>
 8004880:	e005      	b.n	800488e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004884:	617b      	str	r3, [r7, #20]
      break;
 8004886:	e005      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004888:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800488a:	617b      	str	r3, [r7, #20]
      break;
 800488c:	e002      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	617b      	str	r3, [r7, #20]
      break;
 8004892:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004894:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	3301      	adds	r3, #1
 80048a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048a2:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	fb03 f202 	mul.w	r2, r3, r2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ba:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	0e5b      	lsrs	r3, r3, #25
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	3301      	adds	r3, #1
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048d4:	69bb      	ldr	r3, [r7, #24]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3724      	adds	r7, #36	@ 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08008530 	.word	0x08008530
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	007a1200 	.word	0x007a1200

080048f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f8:	4b03      	ldr	r3, [pc, #12]	@ (8004908 <HAL_RCC_GetHCLKFreq+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000000 	.word	0x20000000

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004910:	f7ff fff0 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4904      	ldr	r1, [pc, #16]	@ (8004934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	08008528 	.word	0x08008528

08004938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800493c:	f7ff ffda 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b06      	ldr	r3, [pc, #24]	@ (800495c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0adb      	lsrs	r3, r3, #11
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4904      	ldr	r1, [pc, #16]	@ (8004960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	08008528 	.word	0x08008528

08004964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004970:	4b2a      	ldr	r3, [pc, #168]	@ (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800497c:	f7ff f9ee 	bl	8003d5c <HAL_PWREx_GetVoltageRange>
 8004980:	6178      	str	r0, [r7, #20]
 8004982:	e014      	b.n	80049ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4b25      	ldr	r3, [pc, #148]	@ (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004990:	4b22      	ldr	r3, [pc, #136]	@ (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800499c:	f7ff f9de 	bl	8003d5c <HAL_PWREx_GetVoltageRange>
 80049a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049a2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b4:	d10b      	bne.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b80      	cmp	r3, #128	@ 0x80
 80049ba:	d919      	bls.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2ba0      	cmp	r3, #160	@ 0xa0
 80049c0:	d902      	bls.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049c2:	2302      	movs	r3, #2
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	e013      	b.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049c8:	2301      	movs	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e010      	b.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b80      	cmp	r3, #128	@ 0x80
 80049d2:	d902      	bls.n	80049da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049d4:	2303      	movs	r3, #3
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e00a      	b.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b80      	cmp	r3, #128	@ 0x80
 80049de:	d102      	bne.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049e0:	2302      	movs	r3, #2
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e004      	b.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b70      	cmp	r3, #112	@ 0x70
 80049ea:	d101      	bne.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049ec:	2301      	movs	r3, #1
 80049ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 0207 	bic.w	r2, r3, #7
 80049f8:	4909      	ldr	r1, [pc, #36]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d001      	beq.n	8004a12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40022000 	.word	0x40022000

08004a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a30:	2300      	movs	r3, #0
 8004a32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d041      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a48:	d02a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a4e:	d824      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a54:	d008      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a5a:	d81e      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a64:	d010      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a66:	e018      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a68:	4b86      	ldr	r3, [pc, #536]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a85      	ldr	r2, [pc, #532]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a74:	e015      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fabb 	bl	8004ff8 <RCCEx_PLLSAI1_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a86:	e00c      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fba6 	bl	80051e0 <RCCEx_PLLSAI2_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aa8:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab6:	4973      	ldr	r1, [pc, #460]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004abe:	e001      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d041      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ad8:	d02a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ada:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ade:	d824      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aea:	d81e      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004af4:	d010      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004af6:	e018      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a61      	ldr	r2, [pc, #388]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b04:	e015      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fa73 	bl	8004ff8 <RCCEx_PLLSAI1_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b16:	e00c      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3320      	adds	r3, #32
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb5e 	bl	80051e0 <RCCEx_PLLSAI2_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b28:	e003      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004b2e:	e000      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b38:	4b52      	ldr	r3, [pc, #328]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b46:	494f      	ldr	r1, [pc, #316]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004b4e:	e001      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80a0 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b80:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b88:	4b3e      	ldr	r3, [pc, #248]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b98:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ba4:	f7fc fca2 	bl	80014ec <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004baa:	e009      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bac:	f7fc fc9e 	bl	80014ec <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d902      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	74fb      	strb	r3, [r7, #19]
        break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc0:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d15c      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01f      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d019      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf0:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bfc:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	4a20      	ldr	r2, [pc, #128]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	4a1c      	ldr	r2, [pc, #112]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c1c:	4a19      	ldr	r2, [pc, #100]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fc fc5d 	bl	80014ec <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c34:	e00b      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fc fc59 	bl	80014ec <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d902      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0ec      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c72:	4904      	ldr	r1, [pc, #16]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c7a:	e009      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	74bb      	strb	r3, [r7, #18]
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c90:	7c7b      	ldrb	r3, [r7, #17]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c96:	4b9e      	ldr	r3, [pc, #632]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	4a9d      	ldr	r2, [pc, #628]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cae:	4b98      	ldr	r3, [pc, #608]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	f023 0203 	bic.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	4994      	ldr	r1, [pc, #592]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f023 020c 	bic.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	498c      	ldr	r1, [pc, #560]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf2:	4b87      	ldr	r3, [pc, #540]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	4983      	ldr	r1, [pc, #524]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d14:	4b7e      	ldr	r3, [pc, #504]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	497b      	ldr	r1, [pc, #492]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d36:	4b76      	ldr	r3, [pc, #472]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	4972      	ldr	r1, [pc, #456]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d58:	4b6d      	ldr	r3, [pc, #436]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d66:	496a      	ldr	r1, [pc, #424]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d7a:	4b65      	ldr	r3, [pc, #404]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	4961      	ldr	r1, [pc, #388]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004daa:	4959      	ldr	r1, [pc, #356]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dbe:	4b54      	ldr	r3, [pc, #336]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dcc:	4950      	ldr	r1, [pc, #320]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de0:	4b4b      	ldr	r3, [pc, #300]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	4948      	ldr	r1, [pc, #288]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e02:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e10:	493f      	ldr	r1, [pc, #252]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d028      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e24:	4b3a      	ldr	r3, [pc, #232]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e32:	4937      	ldr	r1, [pc, #220]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e42:	d106      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e44:	4b32      	ldr	r3, [pc, #200]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a31      	ldr	r2, [pc, #196]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e4e:	60d3      	str	r3, [r2, #12]
 8004e50:	e011      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e5a:	d10c      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f8c8 	bl	8004ff8 <RCCEx_PLLSAI1_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e72:	7cfb      	ldrb	r3, [r7, #19]
 8004e74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d028      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e82:	4b23      	ldr	r3, [pc, #140]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	491f      	ldr	r1, [pc, #124]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eac:	60d3      	str	r3, [r2, #12]
 8004eae:	e011      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f899 	bl	8004ff8 <RCCEx_PLLSAI1_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eee:	4908      	ldr	r1, [pc, #32]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004efe:	d109      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f00:	4b03      	ldr	r3, [pc, #12]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a02      	ldr	r2, [pc, #8]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0a:	60d3      	str	r3, [r2, #12]
 8004f0c:	e014      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2101      	movs	r1, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 f867 	bl	8004ff8 <RCCEx_PLLSAI1_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d02f      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f52:	4928      	ldr	r1, [pc, #160]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f62:	d10d      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f844 	bl	8004ff8 <RCCEx_PLLSAI1_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d014      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	74bb      	strb	r3, [r7, #18]
 8004f7e:	e011      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3320      	adds	r3, #32
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f925 	bl	80051e0 <RCCEx_PLLSAI2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fbe:	490d      	ldr	r1, [pc, #52]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fd2:	4b08      	ldr	r3, [pc, #32]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe2:	4904      	ldr	r1, [pc, #16]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fea:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000

08004ff8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005006:	4b75      	ldr	r3, [pc, #468]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005012:	4b72      	ldr	r3, [pc, #456]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0203 	and.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d10d      	bne.n	800503e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
       ||
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800502a:	4b6c      	ldr	r3, [pc, #432]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
       ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d047      	beq.n	80050ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e044      	b.n	80050ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d018      	beq.n	800507e <RCCEx_PLLSAI1_Config+0x86>
 800504c:	2b03      	cmp	r3, #3
 800504e:	d825      	bhi.n	800509c <RCCEx_PLLSAI1_Config+0xa4>
 8005050:	2b01      	cmp	r3, #1
 8005052:	d002      	beq.n	800505a <RCCEx_PLLSAI1_Config+0x62>
 8005054:	2b02      	cmp	r3, #2
 8005056:	d009      	beq.n	800506c <RCCEx_PLLSAI1_Config+0x74>
 8005058:	e020      	b.n	800509c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800505a:	4b60      	ldr	r3, [pc, #384]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d11d      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800506a:	e01a      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800506c:	4b5b      	ldr	r3, [pc, #364]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d116      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507c:	e013      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800507e:	4b57      	ldr	r3, [pc, #348]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800508a:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800509a:	e006      	b.n	80050aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
      break;
 80050a0:	e004      	b.n	80050ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10d      	bne.n	80050ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050b2:	4b4a      	ldr	r3, [pc, #296]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	430b      	orrs	r3, r1
 80050c8:	4944      	ldr	r1, [pc, #272]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d17d      	bne.n	80051d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050d4:	4b41      	ldr	r3, [pc, #260]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a40      	ldr	r2, [pc, #256]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80050da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e0:	f7fc fa04 	bl	80014ec <HAL_GetTick>
 80050e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050e6:	e009      	b.n	80050fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050e8:	f7fc fa00 	bl	80014ec <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d902      	bls.n	80050fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	73fb      	strb	r3, [r7, #15]
        break;
 80050fa:	e005      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050fc:	4b37      	ldr	r3, [pc, #220]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1ef      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d160      	bne.n	80051d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d111      	bne.n	8005138 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005114:	4b31      	ldr	r3, [pc, #196]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800511c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	0211      	lsls	r1, r2, #8
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68d2      	ldr	r2, [r2, #12]
 800512a:	0912      	lsrs	r2, r2, #4
 800512c:	0452      	lsls	r2, r2, #17
 800512e:	430a      	orrs	r2, r1
 8005130:	492a      	ldr	r1, [pc, #168]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	610b      	str	r3, [r1, #16]
 8005136:	e027      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d112      	bne.n	8005164 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800513e:	4b27      	ldr	r3, [pc, #156]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005146:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6892      	ldr	r2, [r2, #8]
 800514e:	0211      	lsls	r1, r2, #8
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6912      	ldr	r2, [r2, #16]
 8005154:	0852      	lsrs	r2, r2, #1
 8005156:	3a01      	subs	r2, #1
 8005158:	0552      	lsls	r2, r2, #21
 800515a:	430a      	orrs	r2, r1
 800515c:	491f      	ldr	r1, [pc, #124]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800515e:	4313      	orrs	r3, r2
 8005160:	610b      	str	r3, [r1, #16]
 8005162:	e011      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005164:	4b1d      	ldr	r3, [pc, #116]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800516c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6892      	ldr	r2, [r2, #8]
 8005174:	0211      	lsls	r1, r2, #8
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6952      	ldr	r2, [r2, #20]
 800517a:	0852      	lsrs	r2, r2, #1
 800517c:	3a01      	subs	r2, #1
 800517e:	0652      	lsls	r2, r2, #25
 8005180:	430a      	orrs	r2, r1
 8005182:	4916      	ldr	r1, [pc, #88]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005188:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a13      	ldr	r2, [pc, #76]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800518e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005192:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fc f9aa 	bl	80014ec <HAL_GetTick>
 8005198:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800519a:	e009      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800519c:	f7fc f9a6 	bl	80014ec <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d902      	bls.n	80051b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	73fb      	strb	r3, [r7, #15]
          break;
 80051ae:	e005      	b.n	80051bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b0:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0ef      	beq.n	800519c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	4904      	ldr	r1, [pc, #16]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000

080051e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051fa:	4b67      	ldr	r3, [pc, #412]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0203 	and.w	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d10d      	bne.n	8005226 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
       ||
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005212:	4b61      	ldr	r3, [pc, #388]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
       ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d047      	beq.n	80052b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e044      	b.n	80052b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d018      	beq.n	8005266 <RCCEx_PLLSAI2_Config+0x86>
 8005234:	2b03      	cmp	r3, #3
 8005236:	d825      	bhi.n	8005284 <RCCEx_PLLSAI2_Config+0xa4>
 8005238:	2b01      	cmp	r3, #1
 800523a:	d002      	beq.n	8005242 <RCCEx_PLLSAI2_Config+0x62>
 800523c:	2b02      	cmp	r3, #2
 800523e:	d009      	beq.n	8005254 <RCCEx_PLLSAI2_Config+0x74>
 8005240:	e020      	b.n	8005284 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005242:	4b55      	ldr	r3, [pc, #340]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11d      	bne.n	800528a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005252:	e01a      	b.n	800528a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005254:	4b50      	ldr	r3, [pc, #320]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005264:	e013      	b.n	800528e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005266:	4b4c      	ldr	r3, [pc, #304]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005272:	4b49      	ldr	r3, [pc, #292]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005282:	e006      	b.n	8005292 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e004      	b.n	8005294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005292:	bf00      	nop
    }

    if(status == HAL_OK)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10d      	bne.n	80052b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800529a:	4b3f      	ldr	r3, [pc, #252]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	430b      	orrs	r3, r1
 80052b0:	4939      	ldr	r1, [pc, #228]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d167      	bne.n	800538c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052bc:	4b36      	ldr	r3, [pc, #216]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a35      	ldr	r2, [pc, #212]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc f910 	bl	80014ec <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d0:	f7fc f90c 	bl	80014ec <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
        break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ef      	bne.n	80052d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d14a      	bne.n	800538c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d111      	bne.n	8005320 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052fc:	4b26      	ldr	r3, [pc, #152]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	0211      	lsls	r1, r2, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68d2      	ldr	r2, [r2, #12]
 8005312:	0912      	lsrs	r2, r2, #4
 8005314:	0452      	lsls	r2, r2, #17
 8005316:	430a      	orrs	r2, r1
 8005318:	491f      	ldr	r1, [pc, #124]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531a:	4313      	orrs	r3, r2
 800531c:	614b      	str	r3, [r1, #20]
 800531e:	e011      	b.n	8005344 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005320:	4b1d      	ldr	r3, [pc, #116]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005328:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6892      	ldr	r2, [r2, #8]
 8005330:	0211      	lsls	r1, r2, #8
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6912      	ldr	r2, [r2, #16]
 8005336:	0852      	lsrs	r2, r2, #1
 8005338:	3a01      	subs	r2, #1
 800533a:	0652      	lsls	r2, r2, #25
 800533c:	430a      	orrs	r2, r1
 800533e:	4916      	ldr	r1, [pc, #88]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005340:	4313      	orrs	r3, r2
 8005342:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005344:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a13      	ldr	r2, [pc, #76]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fc f8cc 	bl	80014ec <HAL_GetTick>
 8005354:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005356:	e009      	b.n	800536c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005358:	f7fc f8c8 	bl	80014ec <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d902      	bls.n	800536c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	73fb      	strb	r3, [r7, #15]
          break;
 800536a:	e005      	b.n	8005378 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800537e:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4904      	ldr	r1, [pc, #16]	@ (8005398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005388:	4313      	orrs	r3, r2
 800538a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000

0800539c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e049      	b.n	8005442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb fe38 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f000 fb7a 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e049      	b.n	80054f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f841 	bl	80054f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f000 fb23 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x24>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e03c      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d109      	bne.n	800554a <HAL_TIM_PWM_Start+0x3e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e02f      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d109      	bne.n	8005564 <HAL_TIM_PWM_Start+0x58>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e022      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d109      	bne.n	800557e <HAL_TIM_PWM_Start+0x72>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e015      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b10      	cmp	r3, #16
 8005582:	d109      	bne.n	8005598 <HAL_TIM_PWM_Start+0x8c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e008      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e09c      	b.n	80056ec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_PWM_Start+0xb6>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055c0:	e023      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xc6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d0:	e01b      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Start+0xd6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e0:	e013      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0xe6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055f0:	e00b      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0xf6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005600:	e003      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2201      	movs	r2, #1
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fe74 	bl	8006300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a35      	ldr	r2, [pc, #212]	@ (80056f4 <HAL_TIM_PWM_Start+0x1e8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_TIM_PWM_Start+0x13e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a34      	ldr	r2, [pc, #208]	@ (80056f8 <HAL_TIM_PWM_Start+0x1ec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIM_PWM_Start+0x13e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a32      	ldr	r2, [pc, #200]	@ (80056fc <HAL_TIM_PWM_Start+0x1f0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIM_PWM_Start+0x13e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a31      	ldr	r2, [pc, #196]	@ (8005700 <HAL_TIM_PWM_Start+0x1f4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIM_PWM_Start+0x13e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2f      	ldr	r2, [pc, #188]	@ (8005704 <HAL_TIM_PWM_Start+0x1f8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_Start+0x142>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_TIM_PWM_Start+0x144>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005662:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a22      	ldr	r2, [pc, #136]	@ (80056f4 <HAL_TIM_PWM_Start+0x1e8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01d      	beq.n	80056aa <HAL_TIM_PWM_Start+0x19e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005676:	d018      	beq.n	80056aa <HAL_TIM_PWM_Start+0x19e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <HAL_TIM_PWM_Start+0x1fc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_TIM_PWM_Start+0x19e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	@ (800570c <HAL_TIM_PWM_Start+0x200>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_TIM_PWM_Start+0x19e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <HAL_TIM_PWM_Start+0x204>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIM_PWM_Start+0x19e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a17      	ldr	r2, [pc, #92]	@ (80056f8 <HAL_TIM_PWM_Start+0x1ec>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIM_PWM_Start+0x19e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <HAL_TIM_PWM_Start+0x1f0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d115      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4b18      	ldr	r3, [pc, #96]	@ (8005714 <HAL_TIM_PWM_Start+0x208>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d015      	beq.n	80056e8 <HAL_TIM_PWM_Start+0x1dc>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c2:	d011      	beq.n	80056e8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	e008      	b.n	80056e8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e000      	b.n	80056ea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	00010007 	.word	0x00010007

08005718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005732:	2302      	movs	r3, #2
 8005734:	e0ff      	b.n	8005936 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b14      	cmp	r3, #20
 8005742:	f200 80f0 	bhi.w	8005926 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	080057a1 	.word	0x080057a1
 8005750:	08005927 	.word	0x08005927
 8005754:	08005927 	.word	0x08005927
 8005758:	08005927 	.word	0x08005927
 800575c:	080057e1 	.word	0x080057e1
 8005760:	08005927 	.word	0x08005927
 8005764:	08005927 	.word	0x08005927
 8005768:	08005927 	.word	0x08005927
 800576c:	08005823 	.word	0x08005823
 8005770:	08005927 	.word	0x08005927
 8005774:	08005927 	.word	0x08005927
 8005778:	08005927 	.word	0x08005927
 800577c:	08005863 	.word	0x08005863
 8005780:	08005927 	.word	0x08005927
 8005784:	08005927 	.word	0x08005927
 8005788:	08005927 	.word	0x08005927
 800578c:	080058a5 	.word	0x080058a5
 8005790:	08005927 	.word	0x08005927
 8005794:	08005927 	.word	0x08005927
 8005798:	08005927 	.word	0x08005927
 800579c:	080058e5 	.word	0x080058e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fa3a 	bl	8005c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0208 	orr.w	r2, r2, #8
 80057ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6999      	ldr	r1, [r3, #24]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	619a      	str	r2, [r3, #24]
      break;
 80057de:	e0a5      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 faaa 	bl	8005d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	619a      	str	r2, [r3, #24]
      break;
 8005820:	e084      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fb13 	bl	8005e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0208 	orr.w	r2, r2, #8
 800583c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0204 	bic.w	r2, r2, #4
 800584c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69d9      	ldr	r1, [r3, #28]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	61da      	str	r2, [r3, #28]
      break;
 8005860:	e064      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fb7b 	bl	8005f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800587c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69d9      	ldr	r1, [r3, #28]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	61da      	str	r2, [r3, #28]
      break;
 80058a2:	e043      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fbc4 	bl	8006038 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0204 	bic.w	r2, r2, #4
 80058ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058e2:	e023      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fc08 	bl	8006100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800590e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005924:	e002      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
      break;
 800592a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIM_ConfigClockSource+0x1c>
 8005958:	2302      	movs	r3, #2
 800595a:	e0b6      	b.n	8005aca <HAL_TIM_ConfigClockSource+0x18a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800597e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005998:	d03e      	beq.n	8005a18 <HAL_TIM_ConfigClockSource+0xd8>
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599e:	f200 8087 	bhi.w	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a6:	f000 8086 	beq.w	8005ab6 <HAL_TIM_ConfigClockSource+0x176>
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ae:	d87f      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059b0:	2b70      	cmp	r3, #112	@ 0x70
 80059b2:	d01a      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0xaa>
 80059b4:	2b70      	cmp	r3, #112	@ 0x70
 80059b6:	d87b      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059b8:	2b60      	cmp	r3, #96	@ 0x60
 80059ba:	d050      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x11e>
 80059bc:	2b60      	cmp	r3, #96	@ 0x60
 80059be:	d877      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059c0:	2b50      	cmp	r3, #80	@ 0x50
 80059c2:	d03c      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0xfe>
 80059c4:	2b50      	cmp	r3, #80	@ 0x50
 80059c6:	d873      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d058      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x13e>
 80059cc:	2b40      	cmp	r3, #64	@ 0x40
 80059ce:	d86f      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059d0:	2b30      	cmp	r3, #48	@ 0x30
 80059d2:	d064      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15e>
 80059d4:	2b30      	cmp	r3, #48	@ 0x30
 80059d6:	d86b      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d060      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15e>
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d867      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d05c      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15e>
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d05a      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15e>
 80059e8:	e062      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059fa:	f000 fc61 	bl	80062c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	609a      	str	r2, [r3, #8]
      break;
 8005a16:	e04f      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a28:	f000 fc4a 	bl	80062c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a3a:	609a      	str	r2, [r3, #8]
      break;
 8005a3c:	e03c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 fbbe 	bl	80061cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2150      	movs	r1, #80	@ 0x50
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fc17 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e02c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f000 fbdd 	bl	800622a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2160      	movs	r1, #96	@ 0x60
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fc07 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005a7c:	e01c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 fb9e 	bl	80061cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2140      	movs	r1, #64	@ 0x40
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fbf7 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e00c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f000 fbee 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005aae:	e003      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab4:	e000      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a46      	ldr	r2, [pc, #280]	@ (8005c00 <TIM_Base_SetConfig+0x12c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d013      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af2:	d00f      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a43      	ldr	r2, [pc, #268]	@ (8005c04 <TIM_Base_SetConfig+0x130>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a42      	ldr	r2, [pc, #264]	@ (8005c08 <TIM_Base_SetConfig+0x134>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a41      	ldr	r2, [pc, #260]	@ (8005c0c <TIM_Base_SetConfig+0x138>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a40      	ldr	r2, [pc, #256]	@ (8005c10 <TIM_Base_SetConfig+0x13c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d108      	bne.n	8005b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a35      	ldr	r2, [pc, #212]	@ (8005c00 <TIM_Base_SetConfig+0x12c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01f      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b34:	d01b      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a32      	ldr	r2, [pc, #200]	@ (8005c04 <TIM_Base_SetConfig+0x130>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d017      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a31      	ldr	r2, [pc, #196]	@ (8005c08 <TIM_Base_SetConfig+0x134>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a30      	ldr	r2, [pc, #192]	@ (8005c0c <TIM_Base_SetConfig+0x138>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00f      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2f      	ldr	r2, [pc, #188]	@ (8005c10 <TIM_Base_SetConfig+0x13c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2e      	ldr	r2, [pc, #184]	@ (8005c14 <TIM_Base_SetConfig+0x140>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <TIM_Base_SetConfig+0x148>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	@ (8005c00 <TIM_Base_SetConfig+0x12c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00f      	beq.n	8005bcc <TIM_Base_SetConfig+0xf8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a18      	ldr	r2, [pc, #96]	@ (8005c10 <TIM_Base_SetConfig+0x13c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <TIM_Base_SetConfig+0xf8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a17      	ldr	r2, [pc, #92]	@ (8005c14 <TIM_Base_SetConfig+0x140>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <TIM_Base_SetConfig+0xf8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_Base_SetConfig+0xf8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <TIM_Base_SetConfig+0x148>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d103      	bne.n	8005bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d105      	bne.n	8005bf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40013400 	.word	0x40013400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f023 0201 	bic.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0302 	bic.w	r3, r3, #2
 8005c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d2c <TIM_OC1_SetConfig+0x10c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <TIM_OC1_SetConfig+0x110>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d34 <TIM_OC1_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a29      	ldr	r2, [pc, #164]	@ (8005d38 <TIM_OC1_SetConfig+0x118>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <TIM_OC1_SetConfig+0x11c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10c      	bne.n	8005cba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0308 	bic.w	r3, r3, #8
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <TIM_OC1_SetConfig+0x10c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <TIM_OC1_SetConfig+0x110>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <TIM_OC1_SetConfig+0x114>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <TIM_OC1_SetConfig+0x118>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <TIM_OC1_SetConfig+0x11c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d111      	bne.n	8005d06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a28      	ldr	r2, [pc, #160]	@ (8005e40 <TIM_OC2_SetConfig+0x100>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC2_SetConfig+0x6c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a27      	ldr	r2, [pc, #156]	@ (8005e44 <TIM_OC2_SetConfig+0x104>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d10d      	bne.n	8005dc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <TIM_OC2_SetConfig+0x100>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00f      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e44 <TIM_OC2_SetConfig+0x104>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <TIM_OC2_SetConfig+0x108>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e4c <TIM_OC2_SetConfig+0x10c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <TIM_OC2_SetConfig+0x110>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d113      	bne.n	8005e18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	@ (8005f50 <TIM_OC3_SetConfig+0xfc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_OC3_SetConfig+0x6a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <TIM_OC3_SetConfig+0x100>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d10d      	bne.n	8005eda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <TIM_OC3_SetConfig+0xfc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00f      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <TIM_OC3_SetConfig+0x100>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00b      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1a      	ldr	r2, [pc, #104]	@ (8005f58 <TIM_OC3_SetConfig+0x104>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d007      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <TIM_OC3_SetConfig+0x108>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a18      	ldr	r2, [pc, #96]	@ (8005f60 <TIM_OC3_SetConfig+0x10c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d113      	bne.n	8005f2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a18      	ldr	r2, [pc, #96]	@ (8006024 <TIM_OC4_SetConfig+0xc0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <TIM_OC4_SetConfig+0xc4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	@ (800602c <TIM_OC4_SetConfig+0xc8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <TIM_OC4_SetConfig+0xcc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a14      	ldr	r2, [pc, #80]	@ (8006034 <TIM_OC4_SetConfig+0xd0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d109      	bne.n	8005ffc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800

08006038 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800607c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a17      	ldr	r2, [pc, #92]	@ (80060ec <TIM_OC5_SetConfig+0xb4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00f      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a16      	ldr	r2, [pc, #88]	@ (80060f0 <TIM_OC5_SetConfig+0xb8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00b      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <TIM_OC5_SetConfig+0xbc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <TIM_OC5_SetConfig+0xc0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <TIM_OC5_SetConfig+0xc4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d109      	bne.n	80060c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800

08006100 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	051b      	lsls	r3, r3, #20
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <TIM_OC6_SetConfig+0xb8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00f      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <TIM_OC6_SetConfig+0xbc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <TIM_OC6_SetConfig+0xc0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_OC6_SetConfig+0xc4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <TIM_OC6_SetConfig+0xc8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d109      	bne.n	8006190 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40013400 	.word	0x40013400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800

080061cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 030a 	bic.w	r3, r3, #10
 8006208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622a:	b480      	push	{r7}
 800622c:	b087      	sub	sp, #28
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	f023 0210 	bic.w	r2, r3, #16
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006266:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f043 0307 	orr.w	r3, r3, #7
 80062ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	609a      	str	r2, [r3, #8]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	021a      	lsls	r2, r3, #8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2201      	movs	r2, #1
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	43db      	mvns	r3, r3
 8006322:	401a      	ands	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1a      	ldr	r2, [r3, #32]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	fa01 f303 	lsl.w	r3, r1, r3
 8006338:	431a      	orrs	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
}
 800633e:	bf00      	nop
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006360:	2302      	movs	r3, #2
 8006362:	e068      	b.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2e      	ldr	r2, [pc, #184]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d004      	beq.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2d      	ldr	r2, [pc, #180]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d108      	bne.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800639e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01d      	beq.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d6:	d018      	beq.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00e      	beq.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a18      	ldr	r2, [pc, #96]	@ (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a13      	ldr	r2, [pc, #76]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d10c      	bne.n	8006424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	4313      	orrs	r3, r2
 800641a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40014000 	.word	0x40014000

0800645c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e040      	b.n	80064f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fa fe30 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2224      	movs	r2, #36	@ 0x24
 8006488:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fe90 	bl	80071c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fbd5 	bl	8006c58 <UART_SetConfig>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e01b      	b.n	80064f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 ff0f 	bl	800730c <UART_CheckIdleState>
 80064ee:	4603      	mov	r3, r0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	@ 0x28
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800650c:	2b20      	cmp	r3, #32
 800650e:	d177      	bne.n	8006600 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_UART_Transmit+0x24>
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e070      	b.n	8006602 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2221      	movs	r2, #33	@ 0x21
 800652c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800652e:	f7fa ffdd 	bl	80014ec <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	88fa      	ldrh	r2, [r7, #6]
 8006538:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654c:	d108      	bne.n	8006560 <HAL_UART_Transmit+0x68>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e003      	b.n	8006568 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006568:	e02f      	b.n	80065ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	@ 0x80
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 ff71 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e03b      	b.n	8006602 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659c:	b292      	uxth	r2, r2
 800659e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	3302      	adds	r3, #2
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	e007      	b.n	80065b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3301      	adds	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1c9      	bne.n	800656a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	2140      	movs	r1, #64	@ 0x40
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 ff3b 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e005      	b.n	8006602 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006600:	2302      	movs	r3, #2
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b0ba      	sub	sp, #232	@ 0xe8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800663a:	4013      	ands	r3, r2
 800663c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d115      	bne.n	8006674 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00f      	beq.n	8006674 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 82ca 	beq.w	8006bfe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
      }
      return;
 8006672:	e2c4      	b.n	8006bfe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8117 	beq.w	80068ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800667e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800668a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800668e:	4b85      	ldr	r3, [pc, #532]	@ (80068a4 <HAL_UART_IRQHandler+0x298>)
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 810a 	beq.w	80068ac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d011      	beq.n	80066c8 <HAL_UART_IRQHandler+0xbc>
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2201      	movs	r2, #1
 80066b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066be:	f043 0201 	orr.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d011      	beq.n	80066f8 <HAL_UART_IRQHandler+0xec>
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2202      	movs	r2, #2
 80066e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ee:	f043 0204 	orr.w	r2, r3, #4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d011      	beq.n	8006728 <HAL_UART_IRQHandler+0x11c>
 8006704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2204      	movs	r2, #4
 8006716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800671e:	f043 0202 	orr.w	r2, r3, #2
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d105      	bne.n	800674c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800676c:	2b00      	cmp	r3, #0
 800676e:	d012      	beq.n	8006796 <HAL_UART_IRQHandler+0x18a>
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006774:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800678c:	f043 0220 	orr.w	r2, r3, #32
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8230 	beq.w	8006c02 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067de:	2b40      	cmp	r3, #64	@ 0x40
 80067e0:	d005      	beq.n	80067ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d04f      	beq.n	800688e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fea1 	bl	8007536 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	d141      	bne.n	8006886 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800681c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800682e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800683a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1d9      	bne.n	8006802 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006852:	2b00      	cmp	r3, #0
 8006854:	d013      	beq.n	800687e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685a:	4a13      	ldr	r2, [pc, #76]	@ (80068a8 <HAL_UART_IRQHandler+0x29c>)
 800685c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006862:	4618      	mov	r0, r3
 8006864:	f7fc ffb0 	bl	80037c8 <HAL_DMA_Abort_IT>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d017      	beq.n	800689e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	e00f      	b.n	800689e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9d4 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006884:	e00b      	b.n	800689e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9d0 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	e007      	b.n	800689e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9cc 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800689c:	e1b1      	b.n	8006c02 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689e:	bf00      	nop
    return;
 80068a0:	e1af      	b.n	8006c02 <HAL_UART_IRQHandler+0x5f6>
 80068a2:	bf00      	nop
 80068a4:	04000120 	.word	0x04000120
 80068a8:	080075ff 	.word	0x080075ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f040 816a 	bne.w	8006b8a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8163 	beq.w	8006b8a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 815c 	beq.w	8006b8a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2210      	movs	r2, #16
 80068d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e4:	2b40      	cmp	r3, #64	@ 0x40
 80068e6:	f040 80d4 	bne.w	8006a92 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80ad 	beq.w	8006a5a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800690a:	429a      	cmp	r2, r3
 800690c:	f080 80a5 	bcs.w	8006a5a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 8086 	bne.w	8006a38 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006948:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800695a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800696e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1da      	bne.n	800692c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800699a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800699e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e1      	bne.n	8006976 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e3      	bne.n	80069b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a08:	f023 0310 	bic.w	r3, r3, #16
 8006a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e4      	bne.n	80069f8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fc fe8a 	bl	800374c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8f4 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006a58:	e0d5      	b.n	8006c06 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a64:	429a      	cmp	r2, r3
 8006a66:	f040 80ce 	bne.w	8006c06 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	f040 80c5 	bne.w	8006c06 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8d8 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
      return;
 8006a90:	e0b9      	b.n	8006c06 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80ab 	beq.w	8006c0a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a6 	beq.w	8006c0a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	623b      	str	r3, [r7, #32]
   return(result);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b18:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e3      	bne.n	8006af4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f023 0310 	bic.w	r3, r3, #16
 8006b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	69b9      	ldr	r1, [r7, #24]
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e4      	bne.n	8006b40 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f85c 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b88:	e03f      	b.n	8006c0a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x5a8>
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fd66 	bl	800767e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bb2:	e02d      	b.n	8006c10 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01c      	beq.n	8006c0e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
    }
    return;
 8006bdc:	e017      	b.n	8006c0e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d012      	beq.n	8006c10 <HAL_UART_IRQHandler+0x604>
 8006bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fd17 	bl	800762a <UART_EndTransmit_IT>
    return;
 8006bfc:	e008      	b.n	8006c10 <HAL_UART_IRQHandler+0x604>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e006      	b.n	8006c10 <HAL_UART_IRQHandler+0x604>
    return;
 8006c02:	bf00      	nop
 8006c04:	e004      	b.n	8006c10 <HAL_UART_IRQHandler+0x604>
      return;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <HAL_UART_IRQHandler+0x604>
      return;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <HAL_UART_IRQHandler+0x604>
    return;
 8006c0e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c10:	37e8      	adds	r7, #232	@ 0xe8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c5c:	b08a      	sub	sp, #40	@ 0x28
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4ba4      	ldr	r3, [pc, #656]	@ (8006f18 <UART_SetConfig+0x2c0>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a99      	ldr	r2, [pc, #612]	@ (8006f1c <UART_SetConfig+0x2c4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a90      	ldr	r2, [pc, #576]	@ (8006f20 <UART_SetConfig+0x2c8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d126      	bne.n	8006d30 <UART_SetConfig+0xd8>
 8006ce2:	4b90      	ldr	r3, [pc, #576]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d81b      	bhi.n	8006d28 <UART_SetConfig+0xd0>
 8006cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <UART_SetConfig+0xa0>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d21 	.word	0x08006d21
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0e:	e116      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d10:	2302      	movs	r3, #2
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d16:	e112      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1e:	e10e      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d20:	2308      	movs	r3, #8
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d26:	e10a      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2e:	e106      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a7c      	ldr	r2, [pc, #496]	@ (8006f28 <UART_SetConfig+0x2d0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d138      	bne.n	8006dac <UART_SetConfig+0x154>
 8006d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d40:	f003 030c 	and.w	r3, r3, #12
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d82d      	bhi.n	8006da4 <UART_SetConfig+0x14c>
 8006d48:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <UART_SetConfig+0xf8>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006da5 	.word	0x08006da5
 8006d60:	08006d95 	.word	0x08006d95
 8006d64:	08006da5 	.word	0x08006da5
 8006d68:	08006da5 	.word	0x08006da5
 8006d6c:	08006da5 	.word	0x08006da5
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006da5 	.word	0x08006da5
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006d9d 	.word	0x08006d9d
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d8a:	e0d8      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d92:	e0d4      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d9a:	e0d0      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006da2:	e0cc      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006daa:	e0c8      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f2c <UART_SetConfig+0x2d4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d125      	bne.n	8006e02 <UART_SetConfig+0x1aa>
 8006db6:	4b5b      	ldr	r3, [pc, #364]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006dc0:	2b30      	cmp	r3, #48	@ 0x30
 8006dc2:	d016      	beq.n	8006df2 <UART_SetConfig+0x19a>
 8006dc4:	2b30      	cmp	r3, #48	@ 0x30
 8006dc6:	d818      	bhi.n	8006dfa <UART_SetConfig+0x1a2>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d00a      	beq.n	8006de2 <UART_SetConfig+0x18a>
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d814      	bhi.n	8006dfa <UART_SetConfig+0x1a2>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <UART_SetConfig+0x182>
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d008      	beq.n	8006dea <UART_SetConfig+0x192>
 8006dd8:	e00f      	b.n	8006dfa <UART_SetConfig+0x1a2>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de0:	e0ad      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006de2:	2302      	movs	r3, #2
 8006de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de8:	e0a9      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006dea:	2304      	movs	r3, #4
 8006dec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006df0:	e0a5      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006df2:	2308      	movs	r3, #8
 8006df4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006df8:	e0a1      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006dfa:	2310      	movs	r3, #16
 8006dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e00:	e09d      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a4a      	ldr	r2, [pc, #296]	@ (8006f30 <UART_SetConfig+0x2d8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d125      	bne.n	8006e58 <UART_SetConfig+0x200>
 8006e0c:	4b45      	ldr	r3, [pc, #276]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e18:	d016      	beq.n	8006e48 <UART_SetConfig+0x1f0>
 8006e1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e1c:	d818      	bhi.n	8006e50 <UART_SetConfig+0x1f8>
 8006e1e:	2b80      	cmp	r3, #128	@ 0x80
 8006e20:	d00a      	beq.n	8006e38 <UART_SetConfig+0x1e0>
 8006e22:	2b80      	cmp	r3, #128	@ 0x80
 8006e24:	d814      	bhi.n	8006e50 <UART_SetConfig+0x1f8>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <UART_SetConfig+0x1d8>
 8006e2a:	2b40      	cmp	r3, #64	@ 0x40
 8006e2c:	d008      	beq.n	8006e40 <UART_SetConfig+0x1e8>
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x1f8>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e36:	e082      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3e:	e07e      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e46:	e07a      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e076      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e56:	e072      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a35      	ldr	r2, [pc, #212]	@ (8006f34 <UART_SetConfig+0x2dc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d12a      	bne.n	8006eb8 <UART_SetConfig+0x260>
 8006e62:	4b30      	ldr	r3, [pc, #192]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e70:	d01a      	beq.n	8006ea8 <UART_SetConfig+0x250>
 8006e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e76:	d81b      	bhi.n	8006eb0 <UART_SetConfig+0x258>
 8006e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7c:	d00c      	beq.n	8006e98 <UART_SetConfig+0x240>
 8006e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e82:	d815      	bhi.n	8006eb0 <UART_SetConfig+0x258>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <UART_SetConfig+0x238>
 8006e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8c:	d008      	beq.n	8006ea0 <UART_SetConfig+0x248>
 8006e8e:	e00f      	b.n	8006eb0 <UART_SetConfig+0x258>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e96:	e052      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9e:	e04e      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea6:	e04a      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eae:	e046      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb6:	e042      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a17      	ldr	r2, [pc, #92]	@ (8006f1c <UART_SetConfig+0x2c4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d13a      	bne.n	8006f38 <UART_SetConfig+0x2e0>
 8006ec2:	4b18      	ldr	r3, [pc, #96]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ecc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ed0:	d01a      	beq.n	8006f08 <UART_SetConfig+0x2b0>
 8006ed2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ed6:	d81b      	bhi.n	8006f10 <UART_SetConfig+0x2b8>
 8006ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006edc:	d00c      	beq.n	8006ef8 <UART_SetConfig+0x2a0>
 8006ede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ee2:	d815      	bhi.n	8006f10 <UART_SetConfig+0x2b8>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <UART_SetConfig+0x298>
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eec:	d008      	beq.n	8006f00 <UART_SetConfig+0x2a8>
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x2b8>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef6:	e022      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efe:	e01e      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f06:	e01a      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0e:	e016      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f16:	e012      	b.n	8006f3e <UART_SetConfig+0x2e6>
 8006f18:	efff69f3 	.word	0xefff69f3
 8006f1c:	40008000 	.word	0x40008000
 8006f20:	40013800 	.word	0x40013800
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40004400 	.word	0x40004400
 8006f2c:	40004800 	.word	0x40004800
 8006f30:	40004c00 	.word	0x40004c00
 8006f34:	40005000 	.word	0x40005000
 8006f38:	2310      	movs	r3, #16
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a9f      	ldr	r2, [pc, #636]	@ (80071c0 <UART_SetConfig+0x568>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d17a      	bne.n	800703e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d824      	bhi.n	8006f9a <UART_SetConfig+0x342>
 8006f50:	a201      	add	r2, pc, #4	@ (adr r2, 8006f58 <UART_SetConfig+0x300>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f7d 	.word	0x08006f7d
 8006f5c:	08006f9b 	.word	0x08006f9b
 8006f60:	08006f85 	.word	0x08006f85
 8006f64:	08006f9b 	.word	0x08006f9b
 8006f68:	08006f8b 	.word	0x08006f8b
 8006f6c:	08006f9b 	.word	0x08006f9b
 8006f70:	08006f9b 	.word	0x08006f9b
 8006f74:	08006f9b 	.word	0x08006f9b
 8006f78:	08006f93 	.word	0x08006f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f7c:	f7fd fcc6 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8006f80:	61f8      	str	r0, [r7, #28]
        break;
 8006f82:	e010      	b.n	8006fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f84:	4b8f      	ldr	r3, [pc, #572]	@ (80071c4 <UART_SetConfig+0x56c>)
 8006f86:	61fb      	str	r3, [r7, #28]
        break;
 8006f88:	e00d      	b.n	8006fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8a:	f7fd fc27 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 8006f8e:	61f8      	str	r0, [r7, #28]
        break;
 8006f90:	e009      	b.n	8006fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f96:	61fb      	str	r3, [r7, #28]
        break;
 8006f98:	e005      	b.n	8006fa6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80fb 	beq.w	80071a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d305      	bcc.n	8006fca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d903      	bls.n	8006fd2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fd0:	e0e8      	b.n	80071a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	461c      	mov	r4, r3
 8006fd8:	4615      	mov	r5, r2
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	022b      	lsls	r3, r5, #8
 8006fe4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006fe8:	0222      	lsls	r2, r4, #8
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	6849      	ldr	r1, [r1, #4]
 8006fee:	0849      	lsrs	r1, r1, #1
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	4688      	mov	r8, r1
 8006ff4:	4681      	mov	r9, r0
 8006ff6:	eb12 0a08 	adds.w	sl, r2, r8
 8006ffa:	eb43 0b09 	adc.w	fp, r3, r9
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700c:	4650      	mov	r0, sl
 800700e:	4659      	mov	r1, fp
 8007010:	f7f9 f92e 	bl	8000270 <__aeabi_uldivmod>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4613      	mov	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007022:	d308      	bcc.n	8007036 <UART_SetConfig+0x3de>
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800702a:	d204      	bcs.n	8007036 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e0b6      	b.n	80071a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800703c:	e0b2      	b.n	80071a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007046:	d15e      	bne.n	8007106 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007048:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800704c:	2b08      	cmp	r3, #8
 800704e:	d828      	bhi.n	80070a2 <UART_SetConfig+0x44a>
 8007050:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <UART_SetConfig+0x400>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007085 	.word	0x08007085
 8007060:	0800708d 	.word	0x0800708d
 8007064:	080070a3 	.word	0x080070a3
 8007068:	08007093 	.word	0x08007093
 800706c:	080070a3 	.word	0x080070a3
 8007070:	080070a3 	.word	0x080070a3
 8007074:	080070a3 	.word	0x080070a3
 8007078:	0800709b 	.word	0x0800709b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fd fc46 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8007080:	61f8      	str	r0, [r7, #28]
        break;
 8007082:	e014      	b.n	80070ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007084:	f7fd fc58 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8007088:	61f8      	str	r0, [r7, #28]
        break;
 800708a:	e010      	b.n	80070ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800708c:	4b4d      	ldr	r3, [pc, #308]	@ (80071c4 <UART_SetConfig+0x56c>)
 800708e:	61fb      	str	r3, [r7, #28]
        break;
 8007090:	e00d      	b.n	80070ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007092:	f7fd fba3 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 8007096:	61f8      	str	r0, [r7, #28]
        break;
 8007098:	e009      	b.n	80070ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800709e:	61fb      	str	r3, [r7, #28]
        break;
 80070a0:	e005      	b.n	80070ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d077      	beq.n	80071a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	005a      	lsls	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	441a      	add	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b0f      	cmp	r3, #15
 80070ce:	d916      	bls.n	80070fe <UART_SetConfig+0x4a6>
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d6:	d212      	bcs.n	80070fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f023 030f 	bic.w	r3, r3, #15
 80070e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	8afb      	ldrh	r3, [r7, #22]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	8afa      	ldrh	r2, [r7, #22]
 80070fa:	60da      	str	r2, [r3, #12]
 80070fc:	e052      	b.n	80071a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007104:	e04e      	b.n	80071a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007106:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800710a:	2b08      	cmp	r3, #8
 800710c:	d827      	bhi.n	800715e <UART_SetConfig+0x506>
 800710e:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <UART_SetConfig+0x4bc>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007139 	.word	0x08007139
 8007118:	08007141 	.word	0x08007141
 800711c:	08007149 	.word	0x08007149
 8007120:	0800715f 	.word	0x0800715f
 8007124:	0800714f 	.word	0x0800714f
 8007128:	0800715f 	.word	0x0800715f
 800712c:	0800715f 	.word	0x0800715f
 8007130:	0800715f 	.word	0x0800715f
 8007134:	08007157 	.word	0x08007157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007138:	f7fd fbe8 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 800713c:	61f8      	str	r0, [r7, #28]
        break;
 800713e:	e014      	b.n	800716a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007140:	f7fd fbfa 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8007144:	61f8      	str	r0, [r7, #28]
        break;
 8007146:	e010      	b.n	800716a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007148:	4b1e      	ldr	r3, [pc, #120]	@ (80071c4 <UART_SetConfig+0x56c>)
 800714a:	61fb      	str	r3, [r7, #28]
        break;
 800714c:	e00d      	b.n	800716a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800714e:	f7fd fb45 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 8007152:	61f8      	str	r0, [r7, #28]
        break;
 8007154:	e009      	b.n	800716a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800715a:	61fb      	str	r3, [r7, #28]
        break;
 800715c:	e005      	b.n	800716a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007168:	bf00      	nop
    }

    if (pclk != 0U)
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d019      	beq.n	80071a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	085a      	lsrs	r2, r3, #1
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	441a      	add	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007182:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b0f      	cmp	r3, #15
 8007188:	d909      	bls.n	800719e <UART_SetConfig+0x546>
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007190:	d205      	bcs.n	800719e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60da      	str	r2, [r3, #12]
 800719c:	e002      	b.n	80071a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80071b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3728      	adds	r7, #40	@ 0x28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071be:	bf00      	nop
 80071c0:	40008000 	.word	0x40008000
 80071c4:	00f42400 	.word	0x00f42400

080071c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01a      	beq.n	80072de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072c6:	d10a      	bne.n	80072de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	605a      	str	r2, [r3, #4]
  }
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b098      	sub	sp, #96	@ 0x60
 8007310:	af02      	add	r7, sp, #8
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800731c:	f7fa f8e6 	bl	80014ec <HAL_GetTick>
 8007320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b08      	cmp	r3, #8
 800732e:	d12e      	bne.n	800738e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007338:	2200      	movs	r2, #0
 800733a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f88c 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d021      	beq.n	800738e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800735e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007368:	647b      	str	r3, [r7, #68]	@ 0x44
 800736a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800736e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e6      	bne.n	800734a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e062      	b.n	8007454 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b04      	cmp	r3, #4
 800739a:	d149      	bne.n	8007430 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800739c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a4:	2200      	movs	r2, #0
 80073a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f856 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d03c      	beq.n	8007430 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	623b      	str	r3, [r7, #32]
   return(result);
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3308      	adds	r3, #8
 80073ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007408:	61fa      	str	r2, [r7, #28]
 800740a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	69b9      	ldr	r1, [r7, #24]
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	617b      	str	r3, [r7, #20]
   return(result);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e5      	bne.n	80073e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e011      	b.n	8007454 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3758      	adds	r7, #88	@ 0x58
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746c:	e04f      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d04b      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007476:	f7fa f839 	bl	80014ec <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	429a      	cmp	r2, r3
 8007484:	d302      	bcc.n	800748c <UART_WaitOnFlagUntilTimeout+0x30>
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e04e      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d037      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xb2>
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b80      	cmp	r3, #128	@ 0x80
 80074a2:	d034      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b40      	cmp	r3, #64	@ 0x40
 80074a8:	d031      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d110      	bne.n	80074da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2208      	movs	r2, #8
 80074be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f838 	bl	8007536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2208      	movs	r2, #8
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e029      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e8:	d111      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f81e 	bl	8007536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e00f      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d0a0      	beq.n	800746e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007536:	b480      	push	{r7}
 8007538:	b095      	sub	sp, #84	@ 0x54
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800755c:	643b      	str	r3, [r7, #64]	@ 0x40
 800755e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e6      	bne.n	800753e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3308      	adds	r3, #8
 8007576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3308      	adds	r3, #8
 800758e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d118      	bne.n	80075de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f023 0310 	bic.w	r3, r3, #16
 80075c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ca:	61bb      	str	r3, [r7, #24]
 80075cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	613b      	str	r3, [r7, #16]
   return(result);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e6      	bne.n	80075ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80075f2:	bf00      	nop
 80075f4:	3754      	adds	r7, #84	@ 0x54
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fb05 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b088      	sub	sp, #32
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6979      	ldr	r1, [r7, #20]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	613b      	str	r3, [r7, #16]
   return(result);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fad1 	bl	8006c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007676:	bf00      	nop
 8007678:	3720      	adds	r7, #32
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <std>:
 8007694:	2300      	movs	r3, #0
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	e9c0 3300 	strd	r3, r3, [r0]
 800769e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076a2:	6083      	str	r3, [r0, #8]
 80076a4:	8181      	strh	r1, [r0, #12]
 80076a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076a8:	81c2      	strh	r2, [r0, #14]
 80076aa:	6183      	str	r3, [r0, #24]
 80076ac:	4619      	mov	r1, r3
 80076ae:	2208      	movs	r2, #8
 80076b0:	305c      	adds	r0, #92	@ 0x5c
 80076b2:	f000 f906 	bl	80078c2 <memset>
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x58>)
 80076b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x5c>)
 80076bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x60>)
 80076c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x64>)
 80076c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x68>)
 80076c8:	6224      	str	r4, [r4, #32]
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d006      	beq.n	80076dc <std+0x48>
 80076ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076d2:	4294      	cmp	r4, r2
 80076d4:	d002      	beq.n	80076dc <std+0x48>
 80076d6:	33d0      	adds	r3, #208	@ 0xd0
 80076d8:	429c      	cmp	r4, r3
 80076da:	d105      	bne.n	80076e8 <std+0x54>
 80076dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e4:	f000 b966 	b.w	80079b4 <__retarget_lock_init_recursive>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	0800783d 	.word	0x0800783d
 80076f0:	0800785f 	.word	0x0800785f
 80076f4:	08007897 	.word	0x08007897
 80076f8:	080078bb 	.word	0x080078bb
 80076fc:	20000304 	.word	0x20000304

08007700 <stdio_exit_handler>:
 8007700:	4a02      	ldr	r2, [pc, #8]	@ (800770c <stdio_exit_handler+0xc>)
 8007702:	4903      	ldr	r1, [pc, #12]	@ (8007710 <stdio_exit_handler+0x10>)
 8007704:	4803      	ldr	r0, [pc, #12]	@ (8007714 <stdio_exit_handler+0x14>)
 8007706:	f000 b869 	b.w	80077dc <_fwalk_sglue>
 800770a:	bf00      	nop
 800770c:	2000000c 	.word	0x2000000c
 8007710:	08008255 	.word	0x08008255
 8007714:	2000001c 	.word	0x2000001c

08007718 <cleanup_stdio>:
 8007718:	6841      	ldr	r1, [r0, #4]
 800771a:	4b0c      	ldr	r3, [pc, #48]	@ (800774c <cleanup_stdio+0x34>)
 800771c:	4299      	cmp	r1, r3
 800771e:	b510      	push	{r4, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	d001      	beq.n	8007728 <cleanup_stdio+0x10>
 8007724:	f000 fd96 	bl	8008254 <_fflush_r>
 8007728:	68a1      	ldr	r1, [r4, #8]
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <cleanup_stdio+0x38>)
 800772c:	4299      	cmp	r1, r3
 800772e:	d002      	beq.n	8007736 <cleanup_stdio+0x1e>
 8007730:	4620      	mov	r0, r4
 8007732:	f000 fd8f 	bl	8008254 <_fflush_r>
 8007736:	68e1      	ldr	r1, [r4, #12]
 8007738:	4b06      	ldr	r3, [pc, #24]	@ (8007754 <cleanup_stdio+0x3c>)
 800773a:	4299      	cmp	r1, r3
 800773c:	d004      	beq.n	8007748 <cleanup_stdio+0x30>
 800773e:	4620      	mov	r0, r4
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f000 bd86 	b.w	8008254 <_fflush_r>
 8007748:	bd10      	pop	{r4, pc}
 800774a:	bf00      	nop
 800774c:	20000304 	.word	0x20000304
 8007750:	2000036c 	.word	0x2000036c
 8007754:	200003d4 	.word	0x200003d4

08007758 <global_stdio_init.part.0>:
 8007758:	b510      	push	{r4, lr}
 800775a:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <global_stdio_init.part.0+0x30>)
 800775c:	4c0b      	ldr	r4, [pc, #44]	@ (800778c <global_stdio_init.part.0+0x34>)
 800775e:	4a0c      	ldr	r2, [pc, #48]	@ (8007790 <global_stdio_init.part.0+0x38>)
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	4620      	mov	r0, r4
 8007764:	2200      	movs	r2, #0
 8007766:	2104      	movs	r1, #4
 8007768:	f7ff ff94 	bl	8007694 <std>
 800776c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007770:	2201      	movs	r2, #1
 8007772:	2109      	movs	r1, #9
 8007774:	f7ff ff8e 	bl	8007694 <std>
 8007778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800777c:	2202      	movs	r2, #2
 800777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007782:	2112      	movs	r1, #18
 8007784:	f7ff bf86 	b.w	8007694 <std>
 8007788:	2000043c 	.word	0x2000043c
 800778c:	20000304 	.word	0x20000304
 8007790:	08007701 	.word	0x08007701

08007794 <__sfp_lock_acquire>:
 8007794:	4801      	ldr	r0, [pc, #4]	@ (800779c <__sfp_lock_acquire+0x8>)
 8007796:	f000 b90e 	b.w	80079b6 <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	20000445 	.word	0x20000445

080077a0 <__sfp_lock_release>:
 80077a0:	4801      	ldr	r0, [pc, #4]	@ (80077a8 <__sfp_lock_release+0x8>)
 80077a2:	f000 b909 	b.w	80079b8 <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	20000445 	.word	0x20000445

080077ac <__sinit>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	f7ff fff0 	bl	8007794 <__sfp_lock_acquire>
 80077b4:	6a23      	ldr	r3, [r4, #32]
 80077b6:	b11b      	cbz	r3, 80077c0 <__sinit+0x14>
 80077b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077bc:	f7ff bff0 	b.w	80077a0 <__sfp_lock_release>
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__sinit+0x28>)
 80077c2:	6223      	str	r3, [r4, #32]
 80077c4:	4b04      	ldr	r3, [pc, #16]	@ (80077d8 <__sinit+0x2c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f5      	bne.n	80077b8 <__sinit+0xc>
 80077cc:	f7ff ffc4 	bl	8007758 <global_stdio_init.part.0>
 80077d0:	e7f2      	b.n	80077b8 <__sinit+0xc>
 80077d2:	bf00      	nop
 80077d4:	08007719 	.word	0x08007719
 80077d8:	2000043c 	.word	0x2000043c

080077dc <_fwalk_sglue>:
 80077dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e0:	4607      	mov	r7, r0
 80077e2:	4688      	mov	r8, r1
 80077e4:	4614      	mov	r4, r2
 80077e6:	2600      	movs	r6, #0
 80077e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ec:	f1b9 0901 	subs.w	r9, r9, #1
 80077f0:	d505      	bpl.n	80077fe <_fwalk_sglue+0x22>
 80077f2:	6824      	ldr	r4, [r4, #0]
 80077f4:	2c00      	cmp	r4, #0
 80077f6:	d1f7      	bne.n	80077e8 <_fwalk_sglue+0xc>
 80077f8:	4630      	mov	r0, r6
 80077fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d907      	bls.n	8007814 <_fwalk_sglue+0x38>
 8007804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007808:	3301      	adds	r3, #1
 800780a:	d003      	beq.n	8007814 <_fwalk_sglue+0x38>
 800780c:	4629      	mov	r1, r5
 800780e:	4638      	mov	r0, r7
 8007810:	47c0      	blx	r8
 8007812:	4306      	orrs	r6, r0
 8007814:	3568      	adds	r5, #104	@ 0x68
 8007816:	e7e9      	b.n	80077ec <_fwalk_sglue+0x10>

08007818 <iprintf>:
 8007818:	b40f      	push	{r0, r1, r2, r3}
 800781a:	b507      	push	{r0, r1, r2, lr}
 800781c:	4906      	ldr	r1, [pc, #24]	@ (8007838 <iprintf+0x20>)
 800781e:	ab04      	add	r3, sp, #16
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	f853 2b04 	ldr.w	r2, [r3], #4
 8007826:	6881      	ldr	r1, [r0, #8]
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	f000 f9e9 	bl	8007c00 <_vfiprintf_r>
 800782e:	b003      	add	sp, #12
 8007830:	f85d eb04 	ldr.w	lr, [sp], #4
 8007834:	b004      	add	sp, #16
 8007836:	4770      	bx	lr
 8007838:	20000018 	.word	0x20000018

0800783c <__sread>:
 800783c:	b510      	push	{r4, lr}
 800783e:	460c      	mov	r4, r1
 8007840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007844:	f000 f868 	bl	8007918 <_read_r>
 8007848:	2800      	cmp	r0, #0
 800784a:	bfab      	itete	ge
 800784c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800784e:	89a3      	ldrhlt	r3, [r4, #12]
 8007850:	181b      	addge	r3, r3, r0
 8007852:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007856:	bfac      	ite	ge
 8007858:	6563      	strge	r3, [r4, #84]	@ 0x54
 800785a:	81a3      	strhlt	r3, [r4, #12]
 800785c:	bd10      	pop	{r4, pc}

0800785e <__swrite>:
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	461f      	mov	r7, r3
 8007864:	898b      	ldrh	r3, [r1, #12]
 8007866:	05db      	lsls	r3, r3, #23
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4616      	mov	r6, r2
 800786e:	d505      	bpl.n	800787c <__swrite+0x1e>
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	2302      	movs	r3, #2
 8007876:	2200      	movs	r2, #0
 8007878:	f000 f83c 	bl	80078f4 <_lseek_r>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	4632      	mov	r2, r6
 800788a:	463b      	mov	r3, r7
 800788c:	4628      	mov	r0, r5
 800788e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	f000 b853 	b.w	800793c <_write_r>

08007896 <__sseek>:
 8007896:	b510      	push	{r4, lr}
 8007898:	460c      	mov	r4, r1
 800789a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789e:	f000 f829 	bl	80078f4 <_lseek_r>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	bf15      	itete	ne
 80078a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078b2:	81a3      	strheq	r3, [r4, #12]
 80078b4:	bf18      	it	ne
 80078b6:	81a3      	strhne	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__sclose>:
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 b809 	b.w	80078d4 <_close_r>

080078c2 <memset>:
 80078c2:	4402      	add	r2, r0
 80078c4:	4603      	mov	r3, r0
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d100      	bne.n	80078cc <memset+0xa>
 80078ca:	4770      	bx	lr
 80078cc:	f803 1b01 	strb.w	r1, [r3], #1
 80078d0:	e7f9      	b.n	80078c6 <memset+0x4>
	...

080078d4 <_close_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4d06      	ldr	r5, [pc, #24]	@ (80078f0 <_close_r+0x1c>)
 80078d8:	2300      	movs	r3, #0
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7f9 fcf5 	bl	80012ce <_close>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_close_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_close_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20000440 	.word	0x20000440

080078f4 <_lseek_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d07      	ldr	r5, [pc, #28]	@ (8007914 <_lseek_r+0x20>)
 80078f8:	4604      	mov	r4, r0
 80078fa:	4608      	mov	r0, r1
 80078fc:	4611      	mov	r1, r2
 80078fe:	2200      	movs	r2, #0
 8007900:	602a      	str	r2, [r5, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	f7f9 fd0a 	bl	800131c <_lseek>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_lseek_r+0x1e>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_lseek_r+0x1e>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20000440 	.word	0x20000440

08007918 <_read_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	@ (8007938 <_read_r+0x20>)
 800791c:	4604      	mov	r4, r0
 800791e:	4608      	mov	r0, r1
 8007920:	4611      	mov	r1, r2
 8007922:	2200      	movs	r2, #0
 8007924:	602a      	str	r2, [r5, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f7f9 fc98 	bl	800125c <_read>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_read_r+0x1e>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_read_r+0x1e>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20000440 	.word	0x20000440

0800793c <_write_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	@ (800795c <_write_r+0x20>)
 8007940:	4604      	mov	r4, r0
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	2200      	movs	r2, #0
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	f7f9 fca3 	bl	8001296 <_write>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_write_r+0x1e>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_write_r+0x1e>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000440 	.word	0x20000440

08007960 <__errno>:
 8007960:	4b01      	ldr	r3, [pc, #4]	@ (8007968 <__errno+0x8>)
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000018 	.word	0x20000018

0800796c <__libc_init_array>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4d0d      	ldr	r5, [pc, #52]	@ (80079a4 <__libc_init_array+0x38>)
 8007970:	4c0d      	ldr	r4, [pc, #52]	@ (80079a8 <__libc_init_array+0x3c>)
 8007972:	1b64      	subs	r4, r4, r5
 8007974:	10a4      	asrs	r4, r4, #2
 8007976:	2600      	movs	r6, #0
 8007978:	42a6      	cmp	r6, r4
 800797a:	d109      	bne.n	8007990 <__libc_init_array+0x24>
 800797c:	4d0b      	ldr	r5, [pc, #44]	@ (80079ac <__libc_init_array+0x40>)
 800797e:	4c0c      	ldr	r4, [pc, #48]	@ (80079b0 <__libc_init_array+0x44>)
 8007980:	f000 fdb8 	bl	80084f4 <_init>
 8007984:	1b64      	subs	r4, r4, r5
 8007986:	10a4      	asrs	r4, r4, #2
 8007988:	2600      	movs	r6, #0
 800798a:	42a6      	cmp	r6, r4
 800798c:	d105      	bne.n	800799a <__libc_init_array+0x2e>
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	f855 3b04 	ldr.w	r3, [r5], #4
 8007994:	4798      	blx	r3
 8007996:	3601      	adds	r6, #1
 8007998:	e7ee      	b.n	8007978 <__libc_init_array+0xc>
 800799a:	f855 3b04 	ldr.w	r3, [r5], #4
 800799e:	4798      	blx	r3
 80079a0:	3601      	adds	r6, #1
 80079a2:	e7f2      	b.n	800798a <__libc_init_array+0x1e>
 80079a4:	0800859c 	.word	0x0800859c
 80079a8:	0800859c 	.word	0x0800859c
 80079ac:	0800859c 	.word	0x0800859c
 80079b0:	080085a0 	.word	0x080085a0

080079b4 <__retarget_lock_init_recursive>:
 80079b4:	4770      	bx	lr

080079b6 <__retarget_lock_acquire_recursive>:
 80079b6:	4770      	bx	lr

080079b8 <__retarget_lock_release_recursive>:
 80079b8:	4770      	bx	lr
	...

080079bc <_free_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4605      	mov	r5, r0
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d041      	beq.n	8007a48 <_free_r+0x8c>
 80079c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c8:	1f0c      	subs	r4, r1, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfb8      	it	lt
 80079ce:	18e4      	addlt	r4, r4, r3
 80079d0:	f000 f8e0 	bl	8007b94 <__malloc_lock>
 80079d4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a4c <_free_r+0x90>)
 80079d6:	6813      	ldr	r3, [r2, #0]
 80079d8:	b933      	cbnz	r3, 80079e8 <_free_r+0x2c>
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	6014      	str	r4, [r2, #0]
 80079de:	4628      	mov	r0, r5
 80079e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079e4:	f000 b8dc 	b.w	8007ba0 <__malloc_unlock>
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d908      	bls.n	80079fe <_free_r+0x42>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf01      	itttt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	1809      	addeq	r1, r1, r0
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	e7ed      	b.n	80079da <_free_r+0x1e>
 80079fe:	461a      	mov	r2, r3
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	b10b      	cbz	r3, 8007a08 <_free_r+0x4c>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d9fa      	bls.n	80079fe <_free_r+0x42>
 8007a08:	6811      	ldr	r1, [r2, #0]
 8007a0a:	1850      	adds	r0, r2, r1
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d10b      	bne.n	8007a28 <_free_r+0x6c>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	4401      	add	r1, r0
 8007a14:	1850      	adds	r0, r2, r1
 8007a16:	4283      	cmp	r3, r0
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	d1e0      	bne.n	80079de <_free_r+0x22>
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	6053      	str	r3, [r2, #4]
 8007a22:	4408      	add	r0, r1
 8007a24:	6010      	str	r0, [r2, #0]
 8007a26:	e7da      	b.n	80079de <_free_r+0x22>
 8007a28:	d902      	bls.n	8007a30 <_free_r+0x74>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	e7d6      	b.n	80079de <_free_r+0x22>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	1821      	adds	r1, r4, r0
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf04      	itt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	6063      	str	r3, [r4, #4]
 8007a3e:	bf04      	itt	eq
 8007a40:	1809      	addeq	r1, r1, r0
 8007a42:	6021      	streq	r1, [r4, #0]
 8007a44:	6054      	str	r4, [r2, #4]
 8007a46:	e7ca      	b.n	80079de <_free_r+0x22>
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2000044c 	.word	0x2000044c

08007a50 <sbrk_aligned>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4e0f      	ldr	r6, [pc, #60]	@ (8007a90 <sbrk_aligned+0x40>)
 8007a54:	460c      	mov	r4, r1
 8007a56:	6831      	ldr	r1, [r6, #0]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	b911      	cbnz	r1, 8007a62 <sbrk_aligned+0x12>
 8007a5c:	f000 fcb6 	bl	80083cc <_sbrk_r>
 8007a60:	6030      	str	r0, [r6, #0]
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 fcb1 	bl	80083cc <_sbrk_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d103      	bne.n	8007a76 <sbrk_aligned+0x26>
 8007a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8007a72:	4620      	mov	r0, r4
 8007a74:	bd70      	pop	{r4, r5, r6, pc}
 8007a76:	1cc4      	adds	r4, r0, #3
 8007a78:	f024 0403 	bic.w	r4, r4, #3
 8007a7c:	42a0      	cmp	r0, r4
 8007a7e:	d0f8      	beq.n	8007a72 <sbrk_aligned+0x22>
 8007a80:	1a21      	subs	r1, r4, r0
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 fca2 	bl	80083cc <_sbrk_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d1f2      	bne.n	8007a72 <sbrk_aligned+0x22>
 8007a8c:	e7ef      	b.n	8007a6e <sbrk_aligned+0x1e>
 8007a8e:	bf00      	nop
 8007a90:	20000448 	.word	0x20000448

08007a94 <_malloc_r>:
 8007a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a98:	1ccd      	adds	r5, r1, #3
 8007a9a:	f025 0503 	bic.w	r5, r5, #3
 8007a9e:	3508      	adds	r5, #8
 8007aa0:	2d0c      	cmp	r5, #12
 8007aa2:	bf38      	it	cc
 8007aa4:	250c      	movcc	r5, #12
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	db01      	blt.n	8007ab0 <_malloc_r+0x1c>
 8007aac:	42a9      	cmp	r1, r5
 8007aae:	d904      	bls.n	8007aba <_malloc_r+0x26>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b90 <_malloc_r+0xfc>
 8007abe:	f000 f869 	bl	8007b94 <__malloc_lock>
 8007ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac6:	461c      	mov	r4, r3
 8007ac8:	bb44      	cbnz	r4, 8007b1c <_malloc_r+0x88>
 8007aca:	4629      	mov	r1, r5
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff ffbf 	bl	8007a50 <sbrk_aligned>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	d158      	bne.n	8007b8a <_malloc_r+0xf6>
 8007ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8007adc:	4627      	mov	r7, r4
 8007ade:	2f00      	cmp	r7, #0
 8007ae0:	d143      	bne.n	8007b6a <_malloc_r+0xd6>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d04b      	beq.n	8007b7e <_malloc_r+0xea>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4630      	mov	r0, r6
 8007aec:	eb04 0903 	add.w	r9, r4, r3
 8007af0:	f000 fc6c 	bl	80083cc <_sbrk_r>
 8007af4:	4581      	cmp	r9, r0
 8007af6:	d142      	bne.n	8007b7e <_malloc_r+0xea>
 8007af8:	6821      	ldr	r1, [r4, #0]
 8007afa:	1a6d      	subs	r5, r5, r1
 8007afc:	4629      	mov	r1, r5
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ffa6 	bl	8007a50 <sbrk_aligned>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d03a      	beq.n	8007b7e <_malloc_r+0xea>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	442b      	add	r3, r5
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	bb62      	cbnz	r2, 8007b70 <_malloc_r+0xdc>
 8007b16:	f8c8 7000 	str.w	r7, [r8]
 8007b1a:	e00f      	b.n	8007b3c <_malloc_r+0xa8>
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	1b52      	subs	r2, r2, r5
 8007b20:	d420      	bmi.n	8007b64 <_malloc_r+0xd0>
 8007b22:	2a0b      	cmp	r2, #11
 8007b24:	d917      	bls.n	8007b56 <_malloc_r+0xc2>
 8007b26:	1961      	adds	r1, r4, r5
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	6025      	str	r5, [r4, #0]
 8007b2c:	bf18      	it	ne
 8007b2e:	6059      	strne	r1, [r3, #4]
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	bf08      	it	eq
 8007b34:	f8c8 1000 	streq.w	r1, [r8]
 8007b38:	5162      	str	r2, [r4, r5]
 8007b3a:	604b      	str	r3, [r1, #4]
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 f82f 	bl	8007ba0 <__malloc_unlock>
 8007b42:	f104 000b 	add.w	r0, r4, #11
 8007b46:	1d23      	adds	r3, r4, #4
 8007b48:	f020 0007 	bic.w	r0, r0, #7
 8007b4c:	1ac2      	subs	r2, r0, r3
 8007b4e:	bf1c      	itt	ne
 8007b50:	1a1b      	subne	r3, r3, r0
 8007b52:	50a3      	strne	r3, [r4, r2]
 8007b54:	e7af      	b.n	8007ab6 <_malloc_r+0x22>
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	bf0c      	ite	eq
 8007b5c:	f8c8 2000 	streq.w	r2, [r8]
 8007b60:	605a      	strne	r2, [r3, #4]
 8007b62:	e7eb      	b.n	8007b3c <_malloc_r+0xa8>
 8007b64:	4623      	mov	r3, r4
 8007b66:	6864      	ldr	r4, [r4, #4]
 8007b68:	e7ae      	b.n	8007ac8 <_malloc_r+0x34>
 8007b6a:	463c      	mov	r4, r7
 8007b6c:	687f      	ldr	r7, [r7, #4]
 8007b6e:	e7b6      	b.n	8007ade <_malloc_r+0x4a>
 8007b70:	461a      	mov	r2, r3
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d1fb      	bne.n	8007b70 <_malloc_r+0xdc>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	6053      	str	r3, [r2, #4]
 8007b7c:	e7de      	b.n	8007b3c <_malloc_r+0xa8>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 f80c 	bl	8007ba0 <__malloc_unlock>
 8007b88:	e794      	b.n	8007ab4 <_malloc_r+0x20>
 8007b8a:	6005      	str	r5, [r0, #0]
 8007b8c:	e7d6      	b.n	8007b3c <_malloc_r+0xa8>
 8007b8e:	bf00      	nop
 8007b90:	2000044c 	.word	0x2000044c

08007b94 <__malloc_lock>:
 8007b94:	4801      	ldr	r0, [pc, #4]	@ (8007b9c <__malloc_lock+0x8>)
 8007b96:	f7ff bf0e 	b.w	80079b6 <__retarget_lock_acquire_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	20000444 	.word	0x20000444

08007ba0 <__malloc_unlock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__malloc_unlock+0x8>)
 8007ba2:	f7ff bf09 	b.w	80079b8 <__retarget_lock_release_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20000444 	.word	0x20000444

08007bac <__sfputc_r>:
 8007bac:	6893      	ldr	r3, [r2, #8]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	b410      	push	{r4}
 8007bb4:	6093      	str	r3, [r2, #8]
 8007bb6:	da08      	bge.n	8007bca <__sfputc_r+0x1e>
 8007bb8:	6994      	ldr	r4, [r2, #24]
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	db01      	blt.n	8007bc2 <__sfputc_r+0x16>
 8007bbe:	290a      	cmp	r1, #10
 8007bc0:	d103      	bne.n	8007bca <__sfputc_r+0x1e>
 8007bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc6:	f000 bb6d 	b.w	80082a4 <__swbuf_r>
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	1c58      	adds	r0, r3, #1
 8007bce:	6010      	str	r0, [r2, #0]
 8007bd0:	7019      	strb	r1, [r3, #0]
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <__sfputs_r>:
 8007bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	18d5      	adds	r5, r2, r3
 8007be4:	42ac      	cmp	r4, r5
 8007be6:	d101      	bne.n	8007bec <__sfputs_r+0x12>
 8007be8:	2000      	movs	r0, #0
 8007bea:	e007      	b.n	8007bfc <__sfputs_r+0x22>
 8007bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf0:	463a      	mov	r2, r7
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffda 	bl	8007bac <__sfputc_r>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d1f3      	bne.n	8007be4 <__sfputs_r+0xa>
 8007bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c00 <_vfiprintf_r>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	460d      	mov	r5, r1
 8007c06:	b09d      	sub	sp, #116	@ 0x74
 8007c08:	4614      	mov	r4, r2
 8007c0a:	4698      	mov	r8, r3
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	b118      	cbz	r0, 8007c18 <_vfiprintf_r+0x18>
 8007c10:	6a03      	ldr	r3, [r0, #32]
 8007c12:	b90b      	cbnz	r3, 8007c18 <_vfiprintf_r+0x18>
 8007c14:	f7ff fdca 	bl	80077ac <__sinit>
 8007c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c1a:	07d9      	lsls	r1, r3, #31
 8007c1c:	d405      	bmi.n	8007c2a <_vfiprintf_r+0x2a>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	059a      	lsls	r2, r3, #22
 8007c22:	d402      	bmi.n	8007c2a <_vfiprintf_r+0x2a>
 8007c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c26:	f7ff fec6 	bl	80079b6 <__retarget_lock_acquire_recursive>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	d501      	bpl.n	8007c34 <_vfiprintf_r+0x34>
 8007c30:	692b      	ldr	r3, [r5, #16]
 8007c32:	b99b      	cbnz	r3, 8007c5c <_vfiprintf_r+0x5c>
 8007c34:	4629      	mov	r1, r5
 8007c36:	4630      	mov	r0, r6
 8007c38:	f000 fb72 	bl	8008320 <__swsetup_r>
 8007c3c:	b170      	cbz	r0, 8007c5c <_vfiprintf_r+0x5c>
 8007c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c40:	07dc      	lsls	r4, r3, #31
 8007c42:	d504      	bpl.n	8007c4e <_vfiprintf_r+0x4e>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	b01d      	add	sp, #116	@ 0x74
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	0598      	lsls	r0, r3, #22
 8007c52:	d4f7      	bmi.n	8007c44 <_vfiprintf_r+0x44>
 8007c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c56:	f7ff feaf 	bl	80079b8 <__retarget_lock_release_recursive>
 8007c5a:	e7f3      	b.n	8007c44 <_vfiprintf_r+0x44>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c60:	2320      	movs	r3, #32
 8007c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6a:	2330      	movs	r3, #48	@ 0x30
 8007c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e1c <_vfiprintf_r+0x21c>
 8007c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c74:	f04f 0901 	mov.w	r9, #1
 8007c78:	4623      	mov	r3, r4
 8007c7a:	469a      	mov	sl, r3
 8007c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c80:	b10a      	cbz	r2, 8007c86 <_vfiprintf_r+0x86>
 8007c82:	2a25      	cmp	r2, #37	@ 0x25
 8007c84:	d1f9      	bne.n	8007c7a <_vfiprintf_r+0x7a>
 8007c86:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8a:	d00b      	beq.n	8007ca4 <_vfiprintf_r+0xa4>
 8007c8c:	465b      	mov	r3, fp
 8007c8e:	4622      	mov	r2, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffa1 	bl	8007bda <__sfputs_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f000 80a7 	beq.w	8007dec <_vfiprintf_r+0x1ec>
 8007c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca0:	445a      	add	r2, fp
 8007ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 809f 	beq.w	8007dec <_vfiprintf_r+0x1ec>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cb8:	f10a 0a01 	add.w	sl, sl, #1
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cc6:	4654      	mov	r4, sl
 8007cc8:	2205      	movs	r2, #5
 8007cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cce:	4853      	ldr	r0, [pc, #332]	@ (8007e1c <_vfiprintf_r+0x21c>)
 8007cd0:	f7f8 fa7e 	bl	80001d0 <memchr>
 8007cd4:	9a04      	ldr	r2, [sp, #16]
 8007cd6:	b9d8      	cbnz	r0, 8007d10 <_vfiprintf_r+0x110>
 8007cd8:	06d1      	lsls	r1, r2, #27
 8007cda:	bf44      	itt	mi
 8007cdc:	2320      	movmi	r3, #32
 8007cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ce2:	0713      	lsls	r3, r2, #28
 8007ce4:	bf44      	itt	mi
 8007ce6:	232b      	movmi	r3, #43	@ 0x2b
 8007ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cec:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf2:	d015      	beq.n	8007d20 <_vfiprintf_r+0x120>
 8007cf4:	9a07      	ldr	r2, [sp, #28]
 8007cf6:	4654      	mov	r4, sl
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f04f 0c0a 	mov.w	ip, #10
 8007cfe:	4621      	mov	r1, r4
 8007d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d04:	3b30      	subs	r3, #48	@ 0x30
 8007d06:	2b09      	cmp	r3, #9
 8007d08:	d94b      	bls.n	8007da2 <_vfiprintf_r+0x1a2>
 8007d0a:	b1b0      	cbz	r0, 8007d3a <_vfiprintf_r+0x13a>
 8007d0c:	9207      	str	r2, [sp, #28]
 8007d0e:	e014      	b.n	8007d3a <_vfiprintf_r+0x13a>
 8007d10:	eba0 0308 	sub.w	r3, r0, r8
 8007d14:	fa09 f303 	lsl.w	r3, r9, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	46a2      	mov	sl, r4
 8007d1e:	e7d2      	b.n	8007cc6 <_vfiprintf_r+0xc6>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d19      	adds	r1, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9103      	str	r1, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfbb      	ittet	lt
 8007d2c:	425b      	neglt	r3, r3
 8007d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d32:	9307      	strge	r3, [sp, #28]
 8007d34:	9307      	strlt	r3, [sp, #28]
 8007d36:	bfb8      	it	lt
 8007d38:	9204      	strlt	r2, [sp, #16]
 8007d3a:	7823      	ldrb	r3, [r4, #0]
 8007d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d3e:	d10a      	bne.n	8007d56 <_vfiprintf_r+0x156>
 8007d40:	7863      	ldrb	r3, [r4, #1]
 8007d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d44:	d132      	bne.n	8007dac <_vfiprintf_r+0x1ac>
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	1d1a      	adds	r2, r3, #4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	9203      	str	r2, [sp, #12]
 8007d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d52:	3402      	adds	r4, #2
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e2c <_vfiprintf_r+0x22c>
 8007d5a:	7821      	ldrb	r1, [r4, #0]
 8007d5c:	2203      	movs	r2, #3
 8007d5e:	4650      	mov	r0, sl
 8007d60:	f7f8 fa36 	bl	80001d0 <memchr>
 8007d64:	b138      	cbz	r0, 8007d76 <_vfiprintf_r+0x176>
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	eba0 000a 	sub.w	r0, r0, sl
 8007d6c:	2240      	movs	r2, #64	@ 0x40
 8007d6e:	4082      	lsls	r2, r0
 8007d70:	4313      	orrs	r3, r2
 8007d72:	3401      	adds	r4, #1
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7a:	4829      	ldr	r0, [pc, #164]	@ (8007e20 <_vfiprintf_r+0x220>)
 8007d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d80:	2206      	movs	r2, #6
 8007d82:	f7f8 fa25 	bl	80001d0 <memchr>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d03f      	beq.n	8007e0a <_vfiprintf_r+0x20a>
 8007d8a:	4b26      	ldr	r3, [pc, #152]	@ (8007e24 <_vfiprintf_r+0x224>)
 8007d8c:	bb1b      	cbnz	r3, 8007dd6 <_vfiprintf_r+0x1d6>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	3307      	adds	r3, #7
 8007d92:	f023 0307 	bic.w	r3, r3, #7
 8007d96:	3308      	adds	r3, #8
 8007d98:	9303      	str	r3, [sp, #12]
 8007d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9c:	443b      	add	r3, r7
 8007d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da0:	e76a      	b.n	8007c78 <_vfiprintf_r+0x78>
 8007da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007da6:	460c      	mov	r4, r1
 8007da8:	2001      	movs	r0, #1
 8007daa:	e7a8      	b.n	8007cfe <_vfiprintf_r+0xfe>
 8007dac:	2300      	movs	r3, #0
 8007dae:	3401      	adds	r4, #1
 8007db0:	9305      	str	r3, [sp, #20]
 8007db2:	4619      	mov	r1, r3
 8007db4:	f04f 0c0a 	mov.w	ip, #10
 8007db8:	4620      	mov	r0, r4
 8007dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dbe:	3a30      	subs	r2, #48	@ 0x30
 8007dc0:	2a09      	cmp	r2, #9
 8007dc2:	d903      	bls.n	8007dcc <_vfiprintf_r+0x1cc>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0c6      	beq.n	8007d56 <_vfiprintf_r+0x156>
 8007dc8:	9105      	str	r1, [sp, #20]
 8007dca:	e7c4      	b.n	8007d56 <_vfiprintf_r+0x156>
 8007dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e7f0      	b.n	8007db8 <_vfiprintf_r+0x1b8>
 8007dd6:	ab03      	add	r3, sp, #12
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4b12      	ldr	r3, [pc, #72]	@ (8007e28 <_vfiprintf_r+0x228>)
 8007dde:	a904      	add	r1, sp, #16
 8007de0:	4630      	mov	r0, r6
 8007de2:	f3af 8000 	nop.w
 8007de6:	4607      	mov	r7, r0
 8007de8:	1c78      	adds	r0, r7, #1
 8007dea:	d1d6      	bne.n	8007d9a <_vfiprintf_r+0x19a>
 8007dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dee:	07d9      	lsls	r1, r3, #31
 8007df0:	d405      	bmi.n	8007dfe <_vfiprintf_r+0x1fe>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	059a      	lsls	r2, r3, #22
 8007df6:	d402      	bmi.n	8007dfe <_vfiprintf_r+0x1fe>
 8007df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dfa:	f7ff fddd 	bl	80079b8 <__retarget_lock_release_recursive>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	065b      	lsls	r3, r3, #25
 8007e02:	f53f af1f 	bmi.w	8007c44 <_vfiprintf_r+0x44>
 8007e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e08:	e71e      	b.n	8007c48 <_vfiprintf_r+0x48>
 8007e0a:	ab03      	add	r3, sp, #12
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	462a      	mov	r2, r5
 8007e10:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <_vfiprintf_r+0x228>)
 8007e12:	a904      	add	r1, sp, #16
 8007e14:	4630      	mov	r0, r6
 8007e16:	f000 f879 	bl	8007f0c <_printf_i>
 8007e1a:	e7e4      	b.n	8007de6 <_vfiprintf_r+0x1e6>
 8007e1c:	08008560 	.word	0x08008560
 8007e20:	0800856a 	.word	0x0800856a
 8007e24:	00000000 	.word	0x00000000
 8007e28:	08007bdb 	.word	0x08007bdb
 8007e2c:	08008566 	.word	0x08008566

08007e30 <_printf_common>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	4616      	mov	r6, r2
 8007e36:	4698      	mov	r8, r3
 8007e38:	688a      	ldr	r2, [r1, #8]
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bfb8      	it	lt
 8007e44:	4613      	movlt	r3, r2
 8007e46:	6033      	str	r3, [r6, #0]
 8007e48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	b10a      	cbz	r2, 8007e56 <_printf_common+0x26>
 8007e52:	3301      	adds	r3, #1
 8007e54:	6033      	str	r3, [r6, #0]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	0699      	lsls	r1, r3, #26
 8007e5a:	bf42      	ittt	mi
 8007e5c:	6833      	ldrmi	r3, [r6, #0]
 8007e5e:	3302      	addmi	r3, #2
 8007e60:	6033      	strmi	r3, [r6, #0]
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	f015 0506 	ands.w	r5, r5, #6
 8007e68:	d106      	bne.n	8007e78 <_printf_common+0x48>
 8007e6a:	f104 0a19 	add.w	sl, r4, #25
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	6832      	ldr	r2, [r6, #0]
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dc26      	bgt.n	8007ec6 <_printf_common+0x96>
 8007e78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	3b00      	subs	r3, #0
 8007e80:	bf18      	it	ne
 8007e82:	2301      	movne	r3, #1
 8007e84:	0692      	lsls	r2, r2, #26
 8007e86:	d42b      	bmi.n	8007ee0 <_printf_common+0xb0>
 8007e88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	4638      	mov	r0, r7
 8007e90:	47c8      	blx	r9
 8007e92:	3001      	adds	r0, #1
 8007e94:	d01e      	beq.n	8007ed4 <_printf_common+0xa4>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	6922      	ldr	r2, [r4, #16]
 8007e9a:	f003 0306 	and.w	r3, r3, #6
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	bf02      	ittt	eq
 8007ea2:	68e5      	ldreq	r5, [r4, #12]
 8007ea4:	6833      	ldreq	r3, [r6, #0]
 8007ea6:	1aed      	subeq	r5, r5, r3
 8007ea8:	68a3      	ldr	r3, [r4, #8]
 8007eaa:	bf0c      	ite	eq
 8007eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb0:	2500      	movne	r5, #0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	bfc4      	itt	gt
 8007eb6:	1a9b      	subgt	r3, r3, r2
 8007eb8:	18ed      	addgt	r5, r5, r3
 8007eba:	2600      	movs	r6, #0
 8007ebc:	341a      	adds	r4, #26
 8007ebe:	42b5      	cmp	r5, r6
 8007ec0:	d11a      	bne.n	8007ef8 <_printf_common+0xc8>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e008      	b.n	8007ed8 <_printf_common+0xa8>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4652      	mov	r2, sl
 8007eca:	4641      	mov	r1, r8
 8007ecc:	4638      	mov	r0, r7
 8007ece:	47c8      	blx	r9
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d103      	bne.n	8007edc <_printf_common+0xac>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007edc:	3501      	adds	r5, #1
 8007ede:	e7c6      	b.n	8007e6e <_printf_common+0x3e>
 8007ee0:	18e1      	adds	r1, r4, r3
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	2030      	movs	r0, #48	@ 0x30
 8007ee6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007eea:	4422      	add	r2, r4
 8007eec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	e7c7      	b.n	8007e88 <_printf_common+0x58>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4622      	mov	r2, r4
 8007efc:	4641      	mov	r1, r8
 8007efe:	4638      	mov	r0, r7
 8007f00:	47c8      	blx	r9
 8007f02:	3001      	adds	r0, #1
 8007f04:	d0e6      	beq.n	8007ed4 <_printf_common+0xa4>
 8007f06:	3601      	adds	r6, #1
 8007f08:	e7d9      	b.n	8007ebe <_printf_common+0x8e>
	...

08007f0c <_printf_i>:
 8007f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	7e0f      	ldrb	r7, [r1, #24]
 8007f12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f14:	2f78      	cmp	r7, #120	@ 0x78
 8007f16:	4691      	mov	r9, r2
 8007f18:	4680      	mov	r8, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	469a      	mov	sl, r3
 8007f1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f22:	d807      	bhi.n	8007f34 <_printf_i+0x28>
 8007f24:	2f62      	cmp	r7, #98	@ 0x62
 8007f26:	d80a      	bhi.n	8007f3e <_printf_i+0x32>
 8007f28:	2f00      	cmp	r7, #0
 8007f2a:	f000 80d2 	beq.w	80080d2 <_printf_i+0x1c6>
 8007f2e:	2f58      	cmp	r7, #88	@ 0x58
 8007f30:	f000 80b9 	beq.w	80080a6 <_printf_i+0x19a>
 8007f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f3c:	e03a      	b.n	8007fb4 <_printf_i+0xa8>
 8007f3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f42:	2b15      	cmp	r3, #21
 8007f44:	d8f6      	bhi.n	8007f34 <_printf_i+0x28>
 8007f46:	a101      	add	r1, pc, #4	@ (adr r1, 8007f4c <_printf_i+0x40>)
 8007f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f4c:	08007fa5 	.word	0x08007fa5
 8007f50:	08007fb9 	.word	0x08007fb9
 8007f54:	08007f35 	.word	0x08007f35
 8007f58:	08007f35 	.word	0x08007f35
 8007f5c:	08007f35 	.word	0x08007f35
 8007f60:	08007f35 	.word	0x08007f35
 8007f64:	08007fb9 	.word	0x08007fb9
 8007f68:	08007f35 	.word	0x08007f35
 8007f6c:	08007f35 	.word	0x08007f35
 8007f70:	08007f35 	.word	0x08007f35
 8007f74:	08007f35 	.word	0x08007f35
 8007f78:	080080b9 	.word	0x080080b9
 8007f7c:	08007fe3 	.word	0x08007fe3
 8007f80:	08008073 	.word	0x08008073
 8007f84:	08007f35 	.word	0x08007f35
 8007f88:	08007f35 	.word	0x08007f35
 8007f8c:	080080db 	.word	0x080080db
 8007f90:	08007f35 	.word	0x08007f35
 8007f94:	08007fe3 	.word	0x08007fe3
 8007f98:	08007f35 	.word	0x08007f35
 8007f9c:	08007f35 	.word	0x08007f35
 8007fa0:	0800807b 	.word	0x0800807b
 8007fa4:	6833      	ldr	r3, [r6, #0]
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6032      	str	r2, [r6, #0]
 8007fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e09d      	b.n	80080f4 <_printf_i+0x1e8>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	6820      	ldr	r0, [r4, #0]
 8007fbc:	1d19      	adds	r1, r3, #4
 8007fbe:	6031      	str	r1, [r6, #0]
 8007fc0:	0606      	lsls	r6, r0, #24
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_i+0xbc>
 8007fc4:	681d      	ldr	r5, [r3, #0]
 8007fc6:	e003      	b.n	8007fd0 <_printf_i+0xc4>
 8007fc8:	0645      	lsls	r5, r0, #25
 8007fca:	d5fb      	bpl.n	8007fc4 <_printf_i+0xb8>
 8007fcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fd0:	2d00      	cmp	r5, #0
 8007fd2:	da03      	bge.n	8007fdc <_printf_i+0xd0>
 8007fd4:	232d      	movs	r3, #45	@ 0x2d
 8007fd6:	426d      	negs	r5, r5
 8007fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fdc:	4859      	ldr	r0, [pc, #356]	@ (8008144 <_printf_i+0x238>)
 8007fde:	230a      	movs	r3, #10
 8007fe0:	e011      	b.n	8008006 <_printf_i+0xfa>
 8007fe2:	6821      	ldr	r1, [r4, #0]
 8007fe4:	6833      	ldr	r3, [r6, #0]
 8007fe6:	0608      	lsls	r0, r1, #24
 8007fe8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fec:	d402      	bmi.n	8007ff4 <_printf_i+0xe8>
 8007fee:	0649      	lsls	r1, r1, #25
 8007ff0:	bf48      	it	mi
 8007ff2:	b2ad      	uxthmi	r5, r5
 8007ff4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ff6:	4853      	ldr	r0, [pc, #332]	@ (8008144 <_printf_i+0x238>)
 8007ff8:	6033      	str	r3, [r6, #0]
 8007ffa:	bf14      	ite	ne
 8007ffc:	230a      	movne	r3, #10
 8007ffe:	2308      	moveq	r3, #8
 8008000:	2100      	movs	r1, #0
 8008002:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008006:	6866      	ldr	r6, [r4, #4]
 8008008:	60a6      	str	r6, [r4, #8]
 800800a:	2e00      	cmp	r6, #0
 800800c:	bfa2      	ittt	ge
 800800e:	6821      	ldrge	r1, [r4, #0]
 8008010:	f021 0104 	bicge.w	r1, r1, #4
 8008014:	6021      	strge	r1, [r4, #0]
 8008016:	b90d      	cbnz	r5, 800801c <_printf_i+0x110>
 8008018:	2e00      	cmp	r6, #0
 800801a:	d04b      	beq.n	80080b4 <_printf_i+0x1a8>
 800801c:	4616      	mov	r6, r2
 800801e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008022:	fb03 5711 	mls	r7, r3, r1, r5
 8008026:	5dc7      	ldrb	r7, [r0, r7]
 8008028:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800802c:	462f      	mov	r7, r5
 800802e:	42bb      	cmp	r3, r7
 8008030:	460d      	mov	r5, r1
 8008032:	d9f4      	bls.n	800801e <_printf_i+0x112>
 8008034:	2b08      	cmp	r3, #8
 8008036:	d10b      	bne.n	8008050 <_printf_i+0x144>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	07df      	lsls	r7, r3, #31
 800803c:	d508      	bpl.n	8008050 <_printf_i+0x144>
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	6861      	ldr	r1, [r4, #4]
 8008042:	4299      	cmp	r1, r3
 8008044:	bfde      	ittt	le
 8008046:	2330      	movle	r3, #48	@ 0x30
 8008048:	f806 3c01 	strble.w	r3, [r6, #-1]
 800804c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008050:	1b92      	subs	r2, r2, r6
 8008052:	6122      	str	r2, [r4, #16]
 8008054:	f8cd a000 	str.w	sl, [sp]
 8008058:	464b      	mov	r3, r9
 800805a:	aa03      	add	r2, sp, #12
 800805c:	4621      	mov	r1, r4
 800805e:	4640      	mov	r0, r8
 8008060:	f7ff fee6 	bl	8007e30 <_printf_common>
 8008064:	3001      	adds	r0, #1
 8008066:	d14a      	bne.n	80080fe <_printf_i+0x1f2>
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	b004      	add	sp, #16
 800806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	f043 0320 	orr.w	r3, r3, #32
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	4833      	ldr	r0, [pc, #204]	@ (8008148 <_printf_i+0x23c>)
 800807c:	2778      	movs	r7, #120	@ 0x78
 800807e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	6831      	ldr	r1, [r6, #0]
 8008086:	061f      	lsls	r7, r3, #24
 8008088:	f851 5b04 	ldr.w	r5, [r1], #4
 800808c:	d402      	bmi.n	8008094 <_printf_i+0x188>
 800808e:	065f      	lsls	r7, r3, #25
 8008090:	bf48      	it	mi
 8008092:	b2ad      	uxthmi	r5, r5
 8008094:	6031      	str	r1, [r6, #0]
 8008096:	07d9      	lsls	r1, r3, #31
 8008098:	bf44      	itt	mi
 800809a:	f043 0320 	orrmi.w	r3, r3, #32
 800809e:	6023      	strmi	r3, [r4, #0]
 80080a0:	b11d      	cbz	r5, 80080aa <_printf_i+0x19e>
 80080a2:	2310      	movs	r3, #16
 80080a4:	e7ac      	b.n	8008000 <_printf_i+0xf4>
 80080a6:	4827      	ldr	r0, [pc, #156]	@ (8008144 <_printf_i+0x238>)
 80080a8:	e7e9      	b.n	800807e <_printf_i+0x172>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	f023 0320 	bic.w	r3, r3, #32
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	e7f6      	b.n	80080a2 <_printf_i+0x196>
 80080b4:	4616      	mov	r6, r2
 80080b6:	e7bd      	b.n	8008034 <_printf_i+0x128>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	6825      	ldr	r5, [r4, #0]
 80080bc:	6961      	ldr	r1, [r4, #20]
 80080be:	1d18      	adds	r0, r3, #4
 80080c0:	6030      	str	r0, [r6, #0]
 80080c2:	062e      	lsls	r6, r5, #24
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	d501      	bpl.n	80080cc <_printf_i+0x1c0>
 80080c8:	6019      	str	r1, [r3, #0]
 80080ca:	e002      	b.n	80080d2 <_printf_i+0x1c6>
 80080cc:	0668      	lsls	r0, r5, #25
 80080ce:	d5fb      	bpl.n	80080c8 <_printf_i+0x1bc>
 80080d0:	8019      	strh	r1, [r3, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	4616      	mov	r6, r2
 80080d8:	e7bc      	b.n	8008054 <_printf_i+0x148>
 80080da:	6833      	ldr	r3, [r6, #0]
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	6032      	str	r2, [r6, #0]
 80080e0:	681e      	ldr	r6, [r3, #0]
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	2100      	movs	r1, #0
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7f8 f872 	bl	80001d0 <memchr>
 80080ec:	b108      	cbz	r0, 80080f2 <_printf_i+0x1e6>
 80080ee:	1b80      	subs	r0, r0, r6
 80080f0:	6060      	str	r0, [r4, #4]
 80080f2:	6863      	ldr	r3, [r4, #4]
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	2300      	movs	r3, #0
 80080f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080fc:	e7aa      	b.n	8008054 <_printf_i+0x148>
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	4632      	mov	r2, r6
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	47d0      	blx	sl
 8008108:	3001      	adds	r0, #1
 800810a:	d0ad      	beq.n	8008068 <_printf_i+0x15c>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	079b      	lsls	r3, r3, #30
 8008110:	d413      	bmi.n	800813a <_printf_i+0x22e>
 8008112:	68e0      	ldr	r0, [r4, #12]
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	4298      	cmp	r0, r3
 8008118:	bfb8      	it	lt
 800811a:	4618      	movlt	r0, r3
 800811c:	e7a6      	b.n	800806c <_printf_i+0x160>
 800811e:	2301      	movs	r3, #1
 8008120:	4632      	mov	r2, r6
 8008122:	4649      	mov	r1, r9
 8008124:	4640      	mov	r0, r8
 8008126:	47d0      	blx	sl
 8008128:	3001      	adds	r0, #1
 800812a:	d09d      	beq.n	8008068 <_printf_i+0x15c>
 800812c:	3501      	adds	r5, #1
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	9903      	ldr	r1, [sp, #12]
 8008132:	1a5b      	subs	r3, r3, r1
 8008134:	42ab      	cmp	r3, r5
 8008136:	dcf2      	bgt.n	800811e <_printf_i+0x212>
 8008138:	e7eb      	b.n	8008112 <_printf_i+0x206>
 800813a:	2500      	movs	r5, #0
 800813c:	f104 0619 	add.w	r6, r4, #25
 8008140:	e7f5      	b.n	800812e <_printf_i+0x222>
 8008142:	bf00      	nop
 8008144:	08008571 	.word	0x08008571
 8008148:	08008582 	.word	0x08008582

0800814c <__sflush_r>:
 800814c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008154:	0716      	lsls	r6, r2, #28
 8008156:	4605      	mov	r5, r0
 8008158:	460c      	mov	r4, r1
 800815a:	d454      	bmi.n	8008206 <__sflush_r+0xba>
 800815c:	684b      	ldr	r3, [r1, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	dc02      	bgt.n	8008168 <__sflush_r+0x1c>
 8008162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd48      	ble.n	80081fa <__sflush_r+0xae>
 8008168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800816a:	2e00      	cmp	r6, #0
 800816c:	d045      	beq.n	80081fa <__sflush_r+0xae>
 800816e:	2300      	movs	r3, #0
 8008170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008174:	682f      	ldr	r7, [r5, #0]
 8008176:	6a21      	ldr	r1, [r4, #32]
 8008178:	602b      	str	r3, [r5, #0]
 800817a:	d030      	beq.n	80081de <__sflush_r+0x92>
 800817c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	0759      	lsls	r1, r3, #29
 8008182:	d505      	bpl.n	8008190 <__sflush_r+0x44>
 8008184:	6863      	ldr	r3, [r4, #4]
 8008186:	1ad2      	subs	r2, r2, r3
 8008188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800818a:	b10b      	cbz	r3, 8008190 <__sflush_r+0x44>
 800818c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008194:	6a21      	ldr	r1, [r4, #32]
 8008196:	4628      	mov	r0, r5
 8008198:	47b0      	blx	r6
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	d106      	bne.n	80081ae <__sflush_r+0x62>
 80081a0:	6829      	ldr	r1, [r5, #0]
 80081a2:	291d      	cmp	r1, #29
 80081a4:	d82b      	bhi.n	80081fe <__sflush_r+0xb2>
 80081a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008250 <__sflush_r+0x104>)
 80081a8:	410a      	asrs	r2, r1
 80081aa:	07d6      	lsls	r6, r2, #31
 80081ac:	d427      	bmi.n	80081fe <__sflush_r+0xb2>
 80081ae:	2200      	movs	r2, #0
 80081b0:	6062      	str	r2, [r4, #4]
 80081b2:	04d9      	lsls	r1, r3, #19
 80081b4:	6922      	ldr	r2, [r4, #16]
 80081b6:	6022      	str	r2, [r4, #0]
 80081b8:	d504      	bpl.n	80081c4 <__sflush_r+0x78>
 80081ba:	1c42      	adds	r2, r0, #1
 80081bc:	d101      	bne.n	80081c2 <__sflush_r+0x76>
 80081be:	682b      	ldr	r3, [r5, #0]
 80081c0:	b903      	cbnz	r3, 80081c4 <__sflush_r+0x78>
 80081c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80081c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081c6:	602f      	str	r7, [r5, #0]
 80081c8:	b1b9      	cbz	r1, 80081fa <__sflush_r+0xae>
 80081ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ce:	4299      	cmp	r1, r3
 80081d0:	d002      	beq.n	80081d8 <__sflush_r+0x8c>
 80081d2:	4628      	mov	r0, r5
 80081d4:	f7ff fbf2 	bl	80079bc <_free_r>
 80081d8:	2300      	movs	r3, #0
 80081da:	6363      	str	r3, [r4, #52]	@ 0x34
 80081dc:	e00d      	b.n	80081fa <__sflush_r+0xae>
 80081de:	2301      	movs	r3, #1
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b0      	blx	r6
 80081e4:	4602      	mov	r2, r0
 80081e6:	1c50      	adds	r0, r2, #1
 80081e8:	d1c9      	bne.n	800817e <__sflush_r+0x32>
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0c6      	beq.n	800817e <__sflush_r+0x32>
 80081f0:	2b1d      	cmp	r3, #29
 80081f2:	d001      	beq.n	80081f8 <__sflush_r+0xac>
 80081f4:	2b16      	cmp	r3, #22
 80081f6:	d11e      	bne.n	8008236 <__sflush_r+0xea>
 80081f8:	602f      	str	r7, [r5, #0]
 80081fa:	2000      	movs	r0, #0
 80081fc:	e022      	b.n	8008244 <__sflush_r+0xf8>
 80081fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008202:	b21b      	sxth	r3, r3
 8008204:	e01b      	b.n	800823e <__sflush_r+0xf2>
 8008206:	690f      	ldr	r7, [r1, #16]
 8008208:	2f00      	cmp	r7, #0
 800820a:	d0f6      	beq.n	80081fa <__sflush_r+0xae>
 800820c:	0793      	lsls	r3, r2, #30
 800820e:	680e      	ldr	r6, [r1, #0]
 8008210:	bf08      	it	eq
 8008212:	694b      	ldreq	r3, [r1, #20]
 8008214:	600f      	str	r7, [r1, #0]
 8008216:	bf18      	it	ne
 8008218:	2300      	movne	r3, #0
 800821a:	eba6 0807 	sub.w	r8, r6, r7
 800821e:	608b      	str	r3, [r1, #8]
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	dde9      	ble.n	80081fa <__sflush_r+0xae>
 8008226:	6a21      	ldr	r1, [r4, #32]
 8008228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800822a:	4643      	mov	r3, r8
 800822c:	463a      	mov	r2, r7
 800822e:	4628      	mov	r0, r5
 8008230:	47b0      	blx	r6
 8008232:	2800      	cmp	r0, #0
 8008234:	dc08      	bgt.n	8008248 <__sflush_r+0xfc>
 8008236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008248:	4407      	add	r7, r0
 800824a:	eba8 0800 	sub.w	r8, r8, r0
 800824e:	e7e7      	b.n	8008220 <__sflush_r+0xd4>
 8008250:	dfbffffe 	.word	0xdfbffffe

08008254 <_fflush_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	690b      	ldr	r3, [r1, #16]
 8008258:	4605      	mov	r5, r0
 800825a:	460c      	mov	r4, r1
 800825c:	b913      	cbnz	r3, 8008264 <_fflush_r+0x10>
 800825e:	2500      	movs	r5, #0
 8008260:	4628      	mov	r0, r5
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	b118      	cbz	r0, 800826e <_fflush_r+0x1a>
 8008266:	6a03      	ldr	r3, [r0, #32]
 8008268:	b90b      	cbnz	r3, 800826e <_fflush_r+0x1a>
 800826a:	f7ff fa9f 	bl	80077ac <__sinit>
 800826e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f3      	beq.n	800825e <_fflush_r+0xa>
 8008276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008278:	07d0      	lsls	r0, r2, #31
 800827a:	d404      	bmi.n	8008286 <_fflush_r+0x32>
 800827c:	0599      	lsls	r1, r3, #22
 800827e:	d402      	bmi.n	8008286 <_fflush_r+0x32>
 8008280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008282:	f7ff fb98 	bl	80079b6 <__retarget_lock_acquire_recursive>
 8008286:	4628      	mov	r0, r5
 8008288:	4621      	mov	r1, r4
 800828a:	f7ff ff5f 	bl	800814c <__sflush_r>
 800828e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008290:	07da      	lsls	r2, r3, #31
 8008292:	4605      	mov	r5, r0
 8008294:	d4e4      	bmi.n	8008260 <_fflush_r+0xc>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	059b      	lsls	r3, r3, #22
 800829a:	d4e1      	bmi.n	8008260 <_fflush_r+0xc>
 800829c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800829e:	f7ff fb8b 	bl	80079b8 <__retarget_lock_release_recursive>
 80082a2:	e7dd      	b.n	8008260 <_fflush_r+0xc>

080082a4 <__swbuf_r>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	460e      	mov	r6, r1
 80082a8:	4614      	mov	r4, r2
 80082aa:	4605      	mov	r5, r0
 80082ac:	b118      	cbz	r0, 80082b6 <__swbuf_r+0x12>
 80082ae:	6a03      	ldr	r3, [r0, #32]
 80082b0:	b90b      	cbnz	r3, 80082b6 <__swbuf_r+0x12>
 80082b2:	f7ff fa7b 	bl	80077ac <__sinit>
 80082b6:	69a3      	ldr	r3, [r4, #24]
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	071a      	lsls	r2, r3, #28
 80082be:	d501      	bpl.n	80082c4 <__swbuf_r+0x20>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	b943      	cbnz	r3, 80082d6 <__swbuf_r+0x32>
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f82a 	bl	8008320 <__swsetup_r>
 80082cc:	b118      	cbz	r0, 80082d6 <__swbuf_r+0x32>
 80082ce:	f04f 37ff 	mov.w	r7, #4294967295
 80082d2:	4638      	mov	r0, r7
 80082d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	6922      	ldr	r2, [r4, #16]
 80082da:	1a98      	subs	r0, r3, r2
 80082dc:	6963      	ldr	r3, [r4, #20]
 80082de:	b2f6      	uxtb	r6, r6
 80082e0:	4283      	cmp	r3, r0
 80082e2:	4637      	mov	r7, r6
 80082e4:	dc05      	bgt.n	80082f2 <__swbuf_r+0x4e>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f7ff ffb3 	bl	8008254 <_fflush_r>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d1ed      	bne.n	80082ce <__swbuf_r+0x2a>
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	60a3      	str	r3, [r4, #8]
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	701e      	strb	r6, [r3, #0]
 8008300:	6962      	ldr	r2, [r4, #20]
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	429a      	cmp	r2, r3
 8008306:	d004      	beq.n	8008312 <__swbuf_r+0x6e>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	07db      	lsls	r3, r3, #31
 800830c:	d5e1      	bpl.n	80082d2 <__swbuf_r+0x2e>
 800830e:	2e0a      	cmp	r6, #10
 8008310:	d1df      	bne.n	80082d2 <__swbuf_r+0x2e>
 8008312:	4621      	mov	r1, r4
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff ff9d 	bl	8008254 <_fflush_r>
 800831a:	2800      	cmp	r0, #0
 800831c:	d0d9      	beq.n	80082d2 <__swbuf_r+0x2e>
 800831e:	e7d6      	b.n	80082ce <__swbuf_r+0x2a>

08008320 <__swsetup_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4b29      	ldr	r3, [pc, #164]	@ (80083c8 <__swsetup_r+0xa8>)
 8008324:	4605      	mov	r5, r0
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	460c      	mov	r4, r1
 800832a:	b118      	cbz	r0, 8008334 <__swsetup_r+0x14>
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b90b      	cbnz	r3, 8008334 <__swsetup_r+0x14>
 8008330:	f7ff fa3c 	bl	80077ac <__sinit>
 8008334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008338:	0719      	lsls	r1, r3, #28
 800833a:	d422      	bmi.n	8008382 <__swsetup_r+0x62>
 800833c:	06da      	lsls	r2, r3, #27
 800833e:	d407      	bmi.n	8008350 <__swsetup_r+0x30>
 8008340:	2209      	movs	r2, #9
 8008342:	602a      	str	r2, [r5, #0]
 8008344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	e033      	b.n	80083b8 <__swsetup_r+0x98>
 8008350:	0758      	lsls	r0, r3, #29
 8008352:	d512      	bpl.n	800837a <__swsetup_r+0x5a>
 8008354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008356:	b141      	cbz	r1, 800836a <__swsetup_r+0x4a>
 8008358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <__swsetup_r+0x46>
 8008360:	4628      	mov	r0, r5
 8008362:	f7ff fb2b 	bl	80079bc <_free_r>
 8008366:	2300      	movs	r3, #0
 8008368:	6363      	str	r3, [r4, #52]	@ 0x34
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	2300      	movs	r3, #0
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f043 0308 	orr.w	r3, r3, #8
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	b94b      	cbnz	r3, 800839a <__swsetup_r+0x7a>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800838c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008390:	d003      	beq.n	800839a <__swsetup_r+0x7a>
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f000 f84f 	bl	8008438 <__smakebuf_r>
 800839a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839e:	f013 0201 	ands.w	r2, r3, #1
 80083a2:	d00a      	beq.n	80083ba <__swsetup_r+0x9a>
 80083a4:	2200      	movs	r2, #0
 80083a6:	60a2      	str	r2, [r4, #8]
 80083a8:	6962      	ldr	r2, [r4, #20]
 80083aa:	4252      	negs	r2, r2
 80083ac:	61a2      	str	r2, [r4, #24]
 80083ae:	6922      	ldr	r2, [r4, #16]
 80083b0:	b942      	cbnz	r2, 80083c4 <__swsetup_r+0xa4>
 80083b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083b6:	d1c5      	bne.n	8008344 <__swsetup_r+0x24>
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
 80083ba:	0799      	lsls	r1, r3, #30
 80083bc:	bf58      	it	pl
 80083be:	6962      	ldrpl	r2, [r4, #20]
 80083c0:	60a2      	str	r2, [r4, #8]
 80083c2:	e7f4      	b.n	80083ae <__swsetup_r+0x8e>
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7f7      	b.n	80083b8 <__swsetup_r+0x98>
 80083c8:	20000018 	.word	0x20000018

080083cc <_sbrk_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_sbrk_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f8 ffae 	bl	8001338 <_sbrk>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_sbrk_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_sbrk_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000440 	.word	0x20000440

080083ec <__swhatbuf_r>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	2900      	cmp	r1, #0
 80083f6:	b096      	sub	sp, #88	@ 0x58
 80083f8:	4615      	mov	r5, r2
 80083fa:	461e      	mov	r6, r3
 80083fc:	da0d      	bge.n	800841a <__swhatbuf_r+0x2e>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008404:	f04f 0100 	mov.w	r1, #0
 8008408:	bf14      	ite	ne
 800840a:	2340      	movne	r3, #64	@ 0x40
 800840c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008410:	2000      	movs	r0, #0
 8008412:	6031      	str	r1, [r6, #0]
 8008414:	602b      	str	r3, [r5, #0]
 8008416:	b016      	add	sp, #88	@ 0x58
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	466a      	mov	r2, sp
 800841c:	f000 f848 	bl	80084b0 <_fstat_r>
 8008420:	2800      	cmp	r0, #0
 8008422:	dbec      	blt.n	80083fe <__swhatbuf_r+0x12>
 8008424:	9901      	ldr	r1, [sp, #4]
 8008426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800842a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800842e:	4259      	negs	r1, r3
 8008430:	4159      	adcs	r1, r3
 8008432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008436:	e7eb      	b.n	8008410 <__swhatbuf_r+0x24>

08008438 <__smakebuf_r>:
 8008438:	898b      	ldrh	r3, [r1, #12]
 800843a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843c:	079d      	lsls	r5, r3, #30
 800843e:	4606      	mov	r6, r0
 8008440:	460c      	mov	r4, r1
 8008442:	d507      	bpl.n	8008454 <__smakebuf_r+0x1c>
 8008444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	6123      	str	r3, [r4, #16]
 800844c:	2301      	movs	r3, #1
 800844e:	6163      	str	r3, [r4, #20]
 8008450:	b003      	add	sp, #12
 8008452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008454:	ab01      	add	r3, sp, #4
 8008456:	466a      	mov	r2, sp
 8008458:	f7ff ffc8 	bl	80083ec <__swhatbuf_r>
 800845c:	9f00      	ldr	r7, [sp, #0]
 800845e:	4605      	mov	r5, r0
 8008460:	4639      	mov	r1, r7
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff fb16 	bl	8007a94 <_malloc_r>
 8008468:	b948      	cbnz	r0, 800847e <__smakebuf_r+0x46>
 800846a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846e:	059a      	lsls	r2, r3, #22
 8008470:	d4ee      	bmi.n	8008450 <__smakebuf_r+0x18>
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	f043 0302 	orr.w	r3, r3, #2
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	e7e2      	b.n	8008444 <__smakebuf_r+0xc>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	6020      	str	r0, [r4, #0]
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800848e:	b15b      	cbz	r3, 80084a8 <__smakebuf_r+0x70>
 8008490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f81d 	bl	80084d4 <_isatty_r>
 800849a:	b128      	cbz	r0, 80084a8 <__smakebuf_r+0x70>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	f043 0301 	orr.w	r3, r3, #1
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	431d      	orrs	r5, r3
 80084ac:	81a5      	strh	r5, [r4, #12]
 80084ae:	e7cf      	b.n	8008450 <__smakebuf_r+0x18>

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	@ (80084d0 <_fstat_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f8 ff12 	bl	80012e6 <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20000440 	.word	0x20000440

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	@ (80084f0 <_isatty_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f8 ff11 	bl	8001306 <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000440 	.word	0x20000440

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
