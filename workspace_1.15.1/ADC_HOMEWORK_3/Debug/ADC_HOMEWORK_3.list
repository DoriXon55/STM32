
ADC_HOMEWORK_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007278  08007278  00008278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c0  080072c0  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080072c0  080072c0  000082c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c8  080072c8  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080072d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  080072dc  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080072dc  00009258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178ae  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3c  00000000  00000000  000208ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00023828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d4  00000000  00000000  00024dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002985d  00000000  00000000  00025e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ab2  00000000  00000000  0004f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109f18  00000000  00000000  000681a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001720bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d18  00000000  00000000  00172100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00177e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007260 	.word	0x08007260

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007260 	.word	0x08007260

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <blinking_frequency>:
	}
}


void blinking_frequency(uint32_t pot_value)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint32_t min_period = 1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
	uint32_t max_period = 10;
 80004c4:	230a      	movs	r3, #10
 80004c6:	613b      	str	r3, [r7, #16]

	uint32_t period = min_period + (pot_value * (max_period - min_period) / 4095);
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	fb03 f202 	mul.w	r2, r3, r2
 80004d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <blinking_frequency+0x4c>)
 80004d6:	fba3 1302 	umull	r1, r3, r3, r2
 80004da:	1ad2      	subs	r2, r2, r3
 80004dc:	0852      	lsrs	r2, r2, #1
 80004de:	4413      	add	r3, r2
 80004e0:	0adb      	lsrs	r3, r3, #11
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	4413      	add	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, period);
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <blinking_frequency+0x50>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004f0:	4a05      	ldr	r2, [pc, #20]	@ (8000508 <blinking_frequency+0x50>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	60d3      	str	r3, [r2, #12]
}
 80004f6:	bf00      	nop
 80004f8:	371c      	adds	r7, #28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	00100101 	.word	0x00100101
 8000508:	20000178 	.word	0x20000178

0800050c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <HAL_ADC_ConvCpltCallback+0x28>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <HAL_ADC_ConvCpltCallback+0x20>
	{
		uint32_t pot_value = adc_buffer;
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	b29b      	uxth	r3, r3
 8000524:	60fb      	str	r3, [r7, #12]
		blinking_frequency(pot_value);
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f7ff ffc6 	bl	80004b8 <blinking_frequency>
	}

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	50040000 	.word	0x50040000
 8000538:	2000024c 	.word	0x2000024c

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fd8f 	bl	8001062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f83e 	bl	80005c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000548:	f000 f88e 	bl	8000668 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fac4 	bl	8000ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 faa4 	bl	8000a9c <MX_DMA_Init>
  MX_ADC1_Init();
 8000554:	f000 f8b4 	bl	80006c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000558:	f000 f98e 	bl	8000878 <MX_COMP1_Init>
  MX_DAC1_Init();
 800055c:	f000 f9b8 	bl	80008d0 <MX_DAC1_Init>
  MX_TIM3_Init();
 8000560:	f000 f9e8 	bl	8000934 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000564:	f000 fa6a 	bl	8000a3c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000568:	f000 f922 	bl	80007b0 <MX_ADC2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800056c:	217f      	movs	r1, #127	@ 0x7f
 800056e:	4810      	ldr	r0, [pc, #64]	@ (80005b0 <main+0x74>)
 8000570:	f001 ffea 	bl	8002548 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buffer, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	490f      	ldr	r1, [pc, #60]	@ (80005b4 <main+0x78>)
 8000578:	480d      	ldr	r0, [pc, #52]	@ (80005b0 <main+0x74>)
 800057a:	f001 f957 	bl	800182c <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <main+0x7c>)
 8000582:	f002 fc08 	bl	8002d96 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8000586:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <main+0x7c>)
 8000590:	f002 fca8 	bl	8002ee4 <HAL_DAC_SetValue>
  HAL_COMP_Start(&hcomp1);
 8000594:	4809      	ldr	r0, [pc, #36]	@ (80005bc <main+0x80>)
 8000596:	f002 fa81 	bl	8002a9c <HAL_COMP_Start>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joystick, AD2_BUFFER_SIZE);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0x84>)
 800059e:	f004 fdf9 	bl	8005194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005a2:	2104      	movs	r1, #4
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x84>)
 80005a6:	f004 fdf5 	bl	8005194 <HAL_TIM_PWM_Start>


  while (1)
 80005aa:	bf00      	nop
 80005ac:	e7fd      	b.n	80005aa <main+0x6e>
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028
 80005b4:	2000024c 	.word	0x2000024c
 80005b8:	20000164 	.word	0x20000164
 80005bc:	20000138 	.word	0x20000138
 80005c0:	20000178 	.word	0x20000178

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	@ 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 fe17 	bl	8007206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ea:	f003 fa09 	bl	8003a00 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 faa0 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000614:	2328      	movs	r3, #40	@ 0x28
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fa3f 	bl	8003aac <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000634:	f000 fa80 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2303      	movs	r3, #3
 800063e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2104      	movs	r1, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fe07 	bl	8004264 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800065c:	f000 fa6c 	bl	8000b38 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	@ 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0a2      	sub	sp, #136	@ 0x88
 800066c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2288      	movs	r2, #136	@ 0x88
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f006 fdc6 	bl	8007206 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800067e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000680:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000684:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800068e:	2310      	movs	r3, #16
 8000690:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800069e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f800 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80006b2:	f000 fa41 	bl	8000b38 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3788      	adds	r7, #136	@ 0x88
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 80006e4:	4a30      	ldr	r2, [pc, #192]	@ (80007a8 <MX_ADC1_Init+0xe8>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000702:	2204      	movs	r2, #4
 8000704:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000708:	2200      	movs	r2, #0
 800070a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 800070e:	2201      	movs	r2, #1
 8000710:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000712:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000736:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	4817      	ldr	r0, [pc, #92]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000746:	f000 ff21 	bl	800158c <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000750:	f000 f9f2 	bl	8000b38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 8000760:	f001 ff52 	bl	8002608 <HAL_ADCEx_MultiModeConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800076a:	f000 f9e5 	bl	8000b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ADC1_Init+0xec>)
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000772:	2306      	movs	r3, #6
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000776:	2307      	movs	r3, #7
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077a:	237f      	movs	r3, #127	@ 0x7f
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077e:	2304      	movs	r3, #4
 8000780:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <MX_ADC1_Init+0xe4>)
 800078c:	f001 f91e 	bl	80019cc <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000796:	f000 f9cf 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	@ 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000028 	.word	0x20000028
 80007a8:	50040000 	.word	0x50040000
 80007ac:	04300002 	.word	0x04300002

080007b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c6:	4b29      	ldr	r3, [pc, #164]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007c8:	4a29      	ldr	r2, [pc, #164]	@ (8000870 <MX_ADC2_Init+0xc0>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007cc:	4b27      	ldr	r3, [pc, #156]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d8:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007de:	4b23      	ldr	r3, [pc, #140]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_ADC2_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_ADC2_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_ADC2_Init+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_ADC2_Init+0xbc>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_ADC2_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_ADC2_Init+0xbc>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000826:	4811      	ldr	r0, [pc, #68]	@ (800086c <MX_ADC2_Init+0xbc>)
 8000828:	f000 feb0 	bl	800158c <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000832:	f000 f981 	bl	8000b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_ADC2_Init+0xc4>)
 8000838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083a:	2306      	movs	r3, #6
 800083c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000842:	237f      	movs	r3, #127	@ 0x7f
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000846:	2304      	movs	r3, #4
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_ADC2_Init+0xbc>)
 8000854:	f001 f8ba 	bl	80019cc <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800085e:	f000 f96b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000008c 	.word	0x2000008c
 8000870:	50040100 	.word	0x50040100
 8000874:	19200040 	.word	0x19200040

08000878 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_COMP1_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_COMP1_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_COMP1_Init+0x50>)
 8000884:	2240      	movs	r2, #64	@ 0x40
 8000886:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_COMP1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_COMP1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_COMP1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_COMP1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_COMP1_Init+0x50>)
 80008b4:	f002 f800 	bl	80028b8 <HAL_COMP_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 f93b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000138 	.word	0x20000138
 80008cc:	40010200 	.word	0x40010200

080008d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2224      	movs	r2, #36	@ 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f006 fc92 	bl	8007206 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_DAC1_Init+0x5c>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_DAC1_Init+0x60>)
 80008e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <MX_DAC1_Init+0x5c>)
 80008ea:	f002 fa32 	bl	8002d52 <HAL_DAC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008f4:	f000 f920 	bl	8000b38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000900:	2302      	movs	r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000904:	2301      	movs	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_DAC1_Init+0x5c>)
 8000914:	f002 fb15 	bl	8002f42 <HAL_DAC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f90b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000164 	.word	0x20000164
 8000930:	40007400 	.word	0x40007400

08000934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	@ 0x38
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000966:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000968:	4a33      	ldr	r2, [pc, #204]	@ (8000a38 <MX_TIM3_Init+0x104>)
 800096a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <MX_TIM3_Init+0x100>)
 800096e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000972:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b2f      	ldr	r3, [pc, #188]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800097a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <MX_TIM3_Init+0x100>)
 800097c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000980:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b2c      	ldr	r3, [pc, #176]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <MX_TIM3_Init+0x100>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098e:	4829      	ldr	r0, [pc, #164]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000990:	f004 fb48 	bl	8005024 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f8cd 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <MX_TIM3_Init+0x100>)
 80009ac:	f004 fe0c 	bl	80055c8 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80009b6:	f000 f8bf 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ba:	481e      	ldr	r0, [pc, #120]	@ (8000a34 <MX_TIM3_Init+0x100>)
 80009bc:	f004 fb89 	bl	80050d2 <HAL_TIM_PWM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009c6:	f000 f8b7 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <MX_TIM3_Init+0x100>)
 80009da:	f005 fafb 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009e4:	f000 f8a8 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2360      	movs	r3, #96	@ 0x60
 80009ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009f0:	2302      	movs	r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000a00:	f004 fcce 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a0a:	f000 f895 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2204      	movs	r2, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000a16:	f004 fcc3 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000a20:	f000 f88a 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <MX_TIM3_Init+0x100>)
 8000a26:	f000 f9f9 	bl	8000e1c <HAL_TIM_MspPostInit>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	@ 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000178 	.word	0x20000178
 8000a38:	40000400 	.word	0x40000400

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <MX_USART2_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a80:	f005 fb30 	bl	80060e4 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f855 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200001c4 	.word	0x200001c4
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_DMA_Init+0x38>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <MX_DMA_Init+0x38>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_DMA_Init+0x38>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	200b      	movs	r0, #11
 8000ac0:	f002 f911 	bl	8002ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac4:	200b      	movs	r0, #11
 8000ac6:	f002 f92a 	bl	8002d1e <HAL_NVIC_EnableIRQ>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_GPIO_Init+0x5c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	@ 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a49      	ldr	r2, [pc, #292]	@ (8000cd0 <HAL_ADC_MspInit+0x144>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d158      	bne.n	8000c60 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000bae:	4b49      	ldr	r3, [pc, #292]	@ (8000cd4 <HAL_ADC_MspInit+0x148>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a47      	ldr	r2, [pc, #284]	@ (8000cd4 <HAL_ADC_MspInit+0x148>)
 8000bb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000bb8:	4b46      	ldr	r3, [pc, #280]	@ (8000cd4 <HAL_ADC_MspInit+0x148>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10b      	bne.n	8000bd8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bc0:	4b45      	ldr	r3, [pc, #276]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	4a44      	ldr	r2, [pc, #272]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000bc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bcc:	4b42      	ldr	r3, [pc, #264]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be4:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4836      	ldr	r0, [pc, #216]	@ (8000cdc <HAL_ADC_MspInit+0x150>)
 8000c04:	f002 fd44 	bl	8003690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c08:	4b35      	ldr	r3, [pc, #212]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c0a:	4a36      	ldr	r2, [pc, #216]	@ (8000ce4 <HAL_ADC_MspInit+0x158>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c38:	2220      	movs	r2, #32
 8000c3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c42:	4827      	ldr	r0, [pc, #156]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c44:	f002 faae 	bl	80031a4 <HAL_DMA_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c4e:	f7ff ff73 	bl	8000b38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a22      	ldr	r2, [pc, #136]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c58:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <HAL_ADC_MspInit+0x154>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c5e:	e032      	b.n	8000cc6 <HAL_ADC_MspInit+0x13a>
  else if(hadc->Instance==ADC2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <HAL_ADC_MspInit+0x15c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12d      	bne.n	8000cc6 <HAL_ADC_MspInit+0x13a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <HAL_ADC_MspInit+0x148>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a18      	ldr	r2, [pc, #96]	@ (8000cd4 <HAL_ADC_MspInit+0x148>)
 8000c72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <HAL_ADC_MspInit+0x148>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10b      	bne.n	8000c94 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000c82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_ADC_MspInit+0x14c>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cac:	2303      	movs	r3, #3
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc2:	f002 fce5 	bl	8003690 <HAL_GPIO_Init>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	@ 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	50040000 	.word	0x50040000
 8000cd4:	20000250 	.word	0x20000250
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	200000f0 	.word	0x200000f0
 8000ce4:	40020008 	.word	0x40020008
 8000ce8:	50040100 	.word	0x50040100

08000cec <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1d      	ldr	r2, [pc, #116]	@ (8000d80 <HAL_COMP_MspInit+0x94>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d133      	bne.n	8000d76 <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <HAL_COMP_MspInit+0x98>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <HAL_COMP_MspInit+0x98>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <HAL_COMP_MspInit+0x98>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_COMP_MspInit+0x98>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <HAL_COMP_MspInit+0x98>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_COMP_MspInit+0x98>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PC5     ------> COMP1_INP
    PB0     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d3e:	2320      	movs	r3, #32
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	@ (8000d88 <HAL_COMP_MspInit+0x9c>)
 8000d52:	f002 fc9d 	bl	8003690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP1;
 8000d66:	230c      	movs	r3, #12
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <HAL_COMP_MspInit+0xa0>)
 8000d72:	f002 fc8d 	bl	8003690 <HAL_GPIO_Init>

  /* USER CODE END COMP1_MspInit 1 */

  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40010200 	.word	0x40010200
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	48000400 	.word	0x48000400

08000d90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <HAL_DAC_MspInit+0x44>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d113      	bne.n	8000dca <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_DAC_MspInit+0x48>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <HAL_DAC_MspInit+0x48>)
 8000da8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_DAC_MspInit+0x48>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	2036      	movs	r0, #54	@ 0x36
 8000dc0:	f001 ff91 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc4:	2036      	movs	r0, #54	@ 0x36
 8000dc6:	f001 ffaa 	bl	8002d1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40007400 	.word	0x40007400
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_TIM_Base_MspInit+0x38>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10b      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_TIM_Base_MspInit+0x3c>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <HAL_TIM_Base_MspInit+0x3c>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <HAL_TIM_Base_MspInit+0x3c>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <HAL_TIM_MspPostInit+0x64>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d11c      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_TIM_MspPostInit+0x68>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <HAL_TIM_MspPostInit+0x68>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_TIM_MspPostInit+0x68>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e56:	23c0      	movs	r3, #192	@ 0xc0
 8000e58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f002 fc0c 	bl	8003690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2288      	movs	r2, #136	@ 0x88
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 f9ac 	bl	8007206 <memset>
  if(huart->Instance==USART2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a25      	ldr	r2, [pc, #148]	@ (8000f48 <HAL_UART_MspInit+0xc0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d143      	bne.n	8000f40 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fbf1 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ed0:	f7ff fe32 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <HAL_UART_MspInit+0xc4>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <HAL_UART_MspInit+0xc4>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <HAL_UART_MspInit+0xc4>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_UART_MspInit+0xc4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <HAL_UART_MspInit+0xc4>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_UART_MspInit+0xc4>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f04:	230c      	movs	r3, #12
 8000f06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2c:	f002 fbb0 	bl	8003690 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 9, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2109      	movs	r1, #9
 8000f34:	2026      	movs	r0, #38	@ 0x26
 8000f36:	f001 fed6 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f3a:	2026      	movs	r0, #38	@ 0x26
 8000f3c:	f001 feef 	bl	8002d1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f40:	bf00      	nop
 8000f42:	37b0      	adds	r7, #176	@ 0xb0
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa6:	f000 f8b1 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000fb6:	f002 fa8c 	bl	80034d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000f0 	.word	0x200000f0

08000fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <USART2_IRQHandler+0x10>)
 8000fca:	f005 f8d9 	bl	8006180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001c4 	.word	0x200001c4

08000fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <TIM6_DAC_IRQHandler+0x10>)
 8000fde:	f001 ff27 	bl	8002e30 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000164 	.word	0x20000164

08000fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f006 f8eb 	bl	8007218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001042:	f7ff fa7b 	bl	800053c <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001048:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001054:	080072d0 	.word	0x080072d0
  ldr r2, =_sbss
 8001058:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800105c:	20000258 	.word	0x20000258

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>

08001062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f001 fe2f 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f80e 	bl	8001094 <HAL_InitTick>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	e001      	b.n	8001088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001084:	f7ff fd5e 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001088:	79fb      	ldrb	r3, [r7, #7]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_InitTick+0x6c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d023      	beq.n	80010f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_InitTick+0x70>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fe3b 	bl	8002d3a <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10f      	bne.n	80010ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d809      	bhi.n	80010e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f001 fe05 	bl	8002ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_InitTick+0x74>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e004      	b.n	80010f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e001      	b.n	80010f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000254 	.word	0x20000254

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000254 	.word	0x20000254

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3360      	adds	r3, #96	@ 0x60
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <LL_ADC_SetOffset+0x44>)
 800121e:	4013      	ands	r3, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	4313      	orrs	r3, r2
 800122c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	03fff000 	.word	0x03fff000

08001244 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3360      	adds	r3, #96	@ 0x60
 8001252:	461a      	mov	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3360      	adds	r3, #96	@ 0x60
 8001280:	461a      	mov	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3330      	adds	r3, #48	@ 0x30
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	4413      	add	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	211f      	movs	r1, #31
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0e9b      	lsrs	r3, r3, #26
 8001304:	f003 011f 	and.w	r1, r3, #31
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	431a      	orrs	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3314      	adds	r3, #20
 8001334:	461a      	mov	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	0e5b      	lsrs	r3, r3, #25
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	0d1b      	lsrs	r3, r3, #20
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2107      	movs	r1, #7
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	401a      	ands	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0d1b      	lsrs	r3, r3, #20
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0318 	and.w	r3, r3, #24
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013a0:	40d9      	lsrs	r1, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	400b      	ands	r3, r1
 80013a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	0007ffff 	.word	0x0007ffff

080013c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 031f 	and.w	r3, r3, #31
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80013f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6093      	str	r3, [r2, #8]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001418:	d101      	bne.n	800141e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800143c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001440:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001468:	d101      	bne.n	800146e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800148c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014b8:	f043 0202 	orr.w	r2, r3, #2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <LL_ADC_IsEnabled+0x18>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <LL_ADC_IsEnabled+0x1a>
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b02      	cmp	r3, #2
 8001504:	d101      	bne.n	800150a <LL_ADC_IsDisableOngoing+0x18>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsDisableOngoing+0x1a>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b04      	cmp	r3, #4
 8001552:	d101      	bne.n	8001558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b08      	cmp	r3, #8
 8001578:	d101      	bne.n	800157e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e130      	b.n	8001808 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fae9 	bl	8000b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff19 	bl	8001404 <LL_ADC_IsDeepPowerDownEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff feff 	bl	80013e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff34 	bl	8001454 <LL_ADC_IsInternalRegulatorEnabled>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff18 	bl	800142c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015fc:	4b84      	ldr	r3, [pc, #528]	@ (8001810 <HAL_ADC_Init+0x284>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	4a84      	ldr	r2, [pc, #528]	@ (8001814 <HAL_ADC_Init+0x288>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001610:	e002      	b.n	8001618 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff16 	bl	8001454 <LL_ADC_IsInternalRegulatorEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff76 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001654:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80c9 	bne.w	80017f6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80c5 	bne.w	80017f6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001674:	f043 0202 	orr.w	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff23 	bl	80014cc <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800168c:	4862      	ldr	r0, [pc, #392]	@ (8001818 <HAL_ADC_Init+0x28c>)
 800168e:	f7ff ff1d 	bl	80014cc <LL_ADC_IsEnabled>
 8001692:	4604      	mov	r4, r0
 8001694:	4861      	ldr	r0, [pc, #388]	@ (800181c <HAL_ADC_Init+0x290>)
 8001696:	f7ff ff19 	bl	80014cc <LL_ADC_IsEnabled>
 800169a:	4603      	mov	r3, r0
 800169c:	431c      	orrs	r4, r3
 800169e:	4860      	ldr	r0, [pc, #384]	@ (8001820 <HAL_ADC_Init+0x294>)
 80016a0:	f7ff ff14 	bl	80014cc <LL_ADC_IsEnabled>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4323      	orrs	r3, r4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	485c      	ldr	r0, [pc, #368]	@ (8001824 <HAL_ADC_Init+0x298>)
 80016b4:	f7ff fd6e 	bl	8001194 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e5b      	ldrb	r3, [r3, #25]
 80016bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80016c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80016ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	3b01      	subs	r3, #1
 80016ec:	045b      	lsls	r3, r3, #17
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001708:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b44      	ldr	r3, [pc, #272]	@ (8001828 <HAL_ADC_Init+0x29c>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	430b      	orrs	r3, r1
 8001722:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff1c 	bl	8001566 <LL_ADC_INJ_IsConversionOngoing>
 800172e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d13d      	bne.n	80017b2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d13a      	bne.n	80017b2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001740:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001748:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001758:	f023 0302 	bic.w	r3, r3, #2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	69b9      	ldr	r1, [r7, #24]
 8001762:	430b      	orrs	r3, r1
 8001764:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800176c:	2b01      	cmp	r3, #1
 800176e:	d118      	bne.n	80017a2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001792:	430a      	orrs	r2, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	e007      	b.n	80017b2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10c      	bne.n	80017d4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	f023 010f 	bic.w	r1, r3, #15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017d2:	e007      	b.n	80017e4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020f 	bic.w	r2, r2, #15
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e8:	f023 0303 	bic.w	r3, r3, #3
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80017f4:	e007      	b.n	8001806 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fa:	f043 0210 	orr.w	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001806:	7ffb      	ldrb	r3, [r7, #31]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3724      	adds	r7, #36	@ 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	053e2d63 	.word	0x053e2d63
 8001818:	50040000 	.word	0x50040000
 800181c:	50040100 	.word	0x50040100
 8001820:	50040200 	.word	0x50040200
 8001824:	50040300 	.word	0x50040300
 8001828:	fff0c007 	.word	0xfff0c007

0800182c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001838:	4853      	ldr	r0, [pc, #332]	@ (8001988 <HAL_ADC_Start_DMA+0x15c>)
 800183a:	f7ff fdc3 	bl	80013c4 <LL_ADC_GetMultimode>
 800183e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe7b 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 8093 	bne.w	8001978 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_ADC_Start_DMA+0x34>
 800185c:	2302      	movs	r3, #2
 800185e:	e08e      	b.n	800197e <HAL_ADC_Start_DMA+0x152>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a47      	ldr	r2, [pc, #284]	@ (800198c <HAL_ADC_Start_DMA+0x160>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d008      	beq.n	8001884 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d002      	beq.n	8001884 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d172      	bne.n	800196a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 fc93 	bl	80021b0 <ADC_Enable>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d165      	bne.n	8001960 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001898:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a38      	ldr	r2, [pc, #224]	@ (8001990 <HAL_ADC_Start_DMA+0x164>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d002      	beq.n	80018b8 <HAL_ADC_Start_DMA+0x8c>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	e000      	b.n	80018ba <HAL_ADC_Start_DMA+0x8e>
 80018b8:	4b36      	ldr	r3, [pc, #216]	@ (8001994 <HAL_ADC_Start_DMA+0x168>)
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	4293      	cmp	r3, r2
 80018c0:	d002      	beq.n	80018c8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e4:	f023 0206 	bic.w	r2, r3, #6
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f8:	4a27      	ldr	r2, [pc, #156]	@ (8001998 <HAL_ADC_Start_DMA+0x16c>)
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	4a26      	ldr	r2, [pc, #152]	@ (800199c <HAL_ADC_Start_DMA+0x170>)
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a25      	ldr	r2, [pc, #148]	@ (80019a0 <HAL_ADC_Start_DMA+0x174>)
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	221c      	movs	r2, #28
 8001912:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0210 	orr.w	r2, r2, #16
 800192a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3340      	adds	r3, #64	@ 0x40
 8001946:	4619      	mov	r1, r3
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f001 fce2 	bl	8003314 <HAL_DMA_Start_IT>
 8001950:	4603      	mov	r3, r0
 8001952:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fddd 	bl	8001518 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800195e:	e00d      	b.n	800197c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001968:	e008      	b.n	800197c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001976:	e001      	b.n	800197c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001978:	2302      	movs	r3, #2
 800197a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800197c:	7dfb      	ldrb	r3, [r7, #23]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	50040300 	.word	0x50040300
 800198c:	50040200 	.word	0x50040200
 8001990:	50040100 	.word	0x50040100
 8001994:	50040000 	.word	0x50040000
 8001998:	0800237b 	.word	0x0800237b
 800199c:	08002453 	.word	0x08002453
 80019a0:	0800246f 	.word	0x0800246f

080019a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0b6      	sub	sp, #216	@ 0xd8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x22>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e3c9      	b.n	8002182 <HAL_ADC_ConfigChannel+0x7b6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fda0 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 83aa 	bne.w	800215c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d824      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	3b02      	subs	r3, #2
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d81b      	bhi.n	8001a5a <HAL_ADC_ConfigChannel+0x8e>
 8001a22:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <HAL_ADC_ConfigChannel+0x5c>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a41 	.word	0x08001a41
 8001a30:	08001a49 	.word	0x08001a49
 8001a34:	08001a51 	.word	0x08001a51
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a3e:	e010      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a40:	2312      	movs	r3, #18
 8001a42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a46:	e00c      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a48:	2318      	movs	r3, #24
 8001a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a4e:	e008      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a58:	e003      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a60:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a70:	f7ff fc2c 	bl	80012cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fd61 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001a7e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd6d 	bl	8001566 <LL_ADC_INJ_IsConversionOngoing>
 8001a8c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 81a4 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 819f 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f7ff fc37 	bl	8001324 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d00a      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ae8:	f7ff fb88 	bl	80011fc <LL_ADC_SetOffset>
 8001aec:	e179      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fba5 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10a      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x14e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb9a 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	e01e      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x18c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb8f 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e004      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1a4>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0e9b      	lsrs	r3, r3, #26
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	e018      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x1d6>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001b8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e004      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fb5e 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb42 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10a      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x214>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fb37 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	f003 021f 	and.w	r2, r3, #31
 8001bde:	e01e      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x252>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fb2c 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x26a>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	e018      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x29c>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e004      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d106      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	2101      	movs	r1, #1
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fafb 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fadf 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x2da>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2102      	movs	r1, #2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fad4 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	e01e      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x318>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2102      	movs	r1, #2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fac9 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x330>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	e014      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x35a>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2102      	movs	r1, #2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa9c 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fa80 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x398>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2103      	movs	r1, #3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fa75 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	e017      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x3c8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2103      	movs	r1, #3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa6a 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d7e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001d80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d86:	2320      	movs	r3, #32
 8001d88:	e003      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x3e0>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	e011      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x404>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e003      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fa47 	bl	8001270 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fb70 	bl	80014cc <LL_ADC_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8140 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fabb 	bl	800137c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a8f      	ldr	r2, [pc, #572]	@ (8002048 <HAL_ADC_ConfigChannel+0x67c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 8131 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10b      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x46e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	bf94      	ite	ls
 8001e32:	2301      	movls	r3, #1
 8001e34:	2300      	movhi	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	e019      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x4a2>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e52:	2320      	movs	r3, #32
 8001e54:	e003      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d079      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x4c2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	3301      	adds	r3, #1
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8c:	e015      	b.n	8001eba <HAL_ADC_ConfigChannel+0x4ee>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e9e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	069b      	lsls	r3, r3, #26
 8001eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x50e>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	e017      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x53e>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x564>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 021f 	and.w	r2, r3, #31
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	051b      	lsls	r3, r3, #20
 8001f2e:	e018      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x596>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e003      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 021f 	and.w	r2, r3, #31
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f62:	430b      	orrs	r3, r1
 8001f64:	e081      	b.n	800206a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x5b6>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	3301      	adds	r3, #1
 8001f7a:	069b      	lsls	r3, r3, #26
 8001f7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f80:	e015      	b.n	8001fae <HAL_ADC_ConfigChannel+0x5e2>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	069b      	lsls	r3, r3, #26
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x602>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	e017      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x632>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	61bb      	str	r3, [r7, #24]
  return result;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	ea42 0103 	orr.w	r1, r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_ADC_ConfigChannel+0x65e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	3301      	adds	r3, #1
 8002016:	f003 021f 	and.w	r2, r3, #31
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	051b      	lsls	r3, r3, #20
 8002024:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002028:	e01e      	b.n	8002068 <HAL_ADC_ConfigChannel+0x69c>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	60fb      	str	r3, [r7, #12]
  return result;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e006      	b.n	8002054 <HAL_ADC_ConfigChannel+0x688>
 8002046:	bf00      	nop
 8002048:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f003 021f 	and.w	r2, r3, #31
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	3b1e      	subs	r3, #30
 8002062:	051b      	lsls	r3, r3, #20
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002068:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	4619      	mov	r1, r3
 8002070:	f7ff f958 	bl	8001324 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b44      	ldr	r3, [pc, #272]	@ (800218c <HAL_ADC_ConfigChannel+0x7c0>)
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d07a      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002080:	4843      	ldr	r0, [pc, #268]	@ (8002190 <HAL_ADC_ConfigChannel+0x7c4>)
 8002082:	f7ff f8ad 	bl	80011e0 <LL_ADC_GetCommonPathInternalCh>
 8002086:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a41      	ldr	r2, [pc, #260]	@ (8002194 <HAL_ADC_ConfigChannel+0x7c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d12c      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d126      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002198 <HAL_ADC_ConfigChannel+0x7cc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x6e8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a3b      	ldr	r2, [pc, #236]	@ (800219c <HAL_ADC_ConfigChannel+0x7d0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d15d      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020bc:	4619      	mov	r1, r3
 80020be:	4834      	ldr	r0, [pc, #208]	@ (8002190 <HAL_ADC_ConfigChannel+0x7c4>)
 80020c0:	f7ff f87b 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020de:	e002      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ec:	e040      	b.n	8002170 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2d      	ldr	r2, [pc, #180]	@ (80021a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d118      	bne.n	800212a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d112      	bne.n	800212a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a23      	ldr	r2, [pc, #140]	@ (8002198 <HAL_ADC_ConfigChannel+0x7cc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x74c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a22      	ldr	r2, [pc, #136]	@ (800219c <HAL_ADC_ConfigChannel+0x7d0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800211c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002120:	4619      	mov	r1, r3
 8002122:	481b      	ldr	r0, [pc, #108]	@ (8002190 <HAL_ADC_ConfigChannel+0x7c4>)
 8002124:	f7ff f849 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002128:	e024      	b.n	8002174 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <HAL_ADC_ConfigChannel+0x7e0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d120      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11a      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <HAL_ADC_ConfigChannel+0x7cc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d115      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800214e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002152:	4619      	mov	r1, r3
 8002154:	480e      	ldr	r0, [pc, #56]	@ (8002190 <HAL_ADC_ConfigChannel+0x7c4>)
 8002156:	f7ff f830 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
 800215a:	e00c      	b.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800216e:	e002      	b.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800217e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002182:	4618      	mov	r0, r3
 8002184:	37d8      	adds	r7, #216	@ 0xd8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	80080000 	.word	0x80080000
 8002190:	50040300 	.word	0x50040300
 8002194:	c7520000 	.word	0xc7520000
 8002198:	50040000 	.word	0x50040000
 800219c:	50040200 	.word	0x50040200
 80021a0:	20000000 	.word	0x20000000
 80021a4:	053e2d63 	.word	0x053e2d63
 80021a8:	cb840000 	.word	0xcb840000
 80021ac:	80000001 	.word	0x80000001

080021b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f983 	bl	80014cc <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d169      	bne.n	80022a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <ADC_Enable+0xfc>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e055      	b.n	80022a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f93e 	bl	800147c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002200:	482b      	ldr	r0, [pc, #172]	@ (80022b0 <ADC_Enable+0x100>)
 8002202:	f7fe ffed 	bl	80011e0 <LL_ADC_GetCommonPathInternalCh>
 8002206:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002210:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <ADC_Enable+0x104>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	4a28      	ldr	r2, [pc, #160]	@ (80022b8 <ADC_Enable+0x108>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800222a:	e002      	b.n	8002232 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3b01      	subs	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f9      	bne.n	800222c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002238:	f7fe ff7c 	bl	8001134 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800223e:	e028      	b.n	8002292 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f941 	bl	80014cc <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f911 	bl	800147c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225a:	f7fe ff6b 	bl	8001134 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d914      	bls.n	8002292 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d00d      	beq.n	8002292 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f043 0210 	orr.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d1cf      	bne.n	8002240 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	8000003f 	.word	0x8000003f
 80022b0:	50040300 	.word	0x50040300
 80022b4:	20000000 	.word	0x20000000
 80022b8:	053e2d63 	.word	0x053e2d63

080022bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f912 	bl	80014f2 <LL_ADC_IsDisableOngoing>
 80022ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f8f9 	bl	80014cc <LL_ADC_IsEnabled>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d047      	beq.n	8002370 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d144      	bne.n	8002370 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030d 	and.w	r3, r3, #13
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10c      	bne.n	800230e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f8d3 	bl	80014a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2203      	movs	r2, #3
 8002304:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002306:	f7fe ff15 	bl	8001134 <HAL_GetTick>
 800230a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800230c:	e029      	b.n	8002362 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e023      	b.n	8002372 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232a:	f7fe ff03 	bl	8001134 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d914      	bls.n	8002362 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e007      	b.n	8002372 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1dc      	bne.n	800232a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002390:	2b00      	cmp	r3, #0
 8002392:	d14b      	bne.n	800242c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002398:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d021      	beq.n	80023f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe ff77 	bl	80012a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d032      	beq.n	8002424 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d12b      	bne.n	8002424 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d11f      	bne.n	8002424 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80023f0:	e018      	b.n	8002424 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d111      	bne.n	8002424 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7fe f871 	bl	800050c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800242a:	e00e      	b.n	800244a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fabd 	bl	80019b8 <HAL_ADC_ErrorCallback>
}
 800243e:	e004      	b.n	800244a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff fa9f 	bl	80019a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002480:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff fa8f 	bl	80019b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <LL_ADC_IsEnabled>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <LL_ADC_IsEnabled+0x18>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_IsEnabled+0x1a>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_StartCalibration>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80024da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_IsCalibrationOnGoing>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800250a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800250e:	d101      	bne.n	8002514 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_REG_IsConversionOngoing>:
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d101      	bne.n	800253a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_ADCEx_Calibration_Start+0x1c>
 8002560:	2302      	movs	r3, #2
 8002562:	e04d      	b.n	8002600 <HAL_ADCEx_Calibration_Start+0xb8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fea5 	bl	80022bc <ADC_Disable>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d136      	bne.n	80025ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002584:	f023 0302 	bic.w	r3, r3, #2
 8002588:	f043 0202 	orr.w	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff96 	bl	80024c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800259c:	e014      	b.n	80025c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80025aa:	d30d      	bcc.n	80025c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	f023 0312 	bic.w	r3, r3, #18
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01b      	b.n	8002600 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff94 	bl	80024fa <LL_ADC_IsCalibrationOnGoing>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e2      	bne.n	800259e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	f023 0303 	bic.w	r3, r3, #3
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80025e8:	e005      	b.n	80025f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b09f      	sub	sp, #124	@ 0x7c
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002622:	2302      	movs	r3, #2
 8002624:	e093      	b.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800262e:	2300      	movs	r3, #0
 8002630:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002632:	2300      	movs	r3, #0
 8002634:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a47      	ldr	r2, [pc, #284]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002640:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	e001      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e072      	b.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff59 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 8002670:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff53 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d154      	bne.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002684:	2b00      	cmp	r3, #0
 8002686:	d151      	bne.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002688:	4b35      	ldr	r3, [pc, #212]	@ (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800268a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02c      	beq.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026a6:	035b      	lsls	r3, r3, #13
 80026a8:	430b      	orrs	r3, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b0:	4829      	ldr	r0, [pc, #164]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026b2:	f7ff fef6 	bl	80024a2 <LL_ADC_IsEnabled>
 80026b6:	4604      	mov	r4, r0
 80026b8:	4828      	ldr	r0, [pc, #160]	@ (800275c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ba:	f7ff fef2 	bl	80024a2 <LL_ADC_IsEnabled>
 80026be:	4603      	mov	r3, r0
 80026c0:	431c      	orrs	r4, r3
 80026c2:	4828      	ldr	r0, [pc, #160]	@ (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026c4:	f7ff feed 	bl	80024a2 <LL_ADC_IsEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4323      	orrs	r3, r4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d137      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026d8:	f023 030f 	bic.w	r3, r3, #15
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6811      	ldr	r1, [r2, #0]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026ec:	e028      	b.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026fa:	4817      	ldr	r0, [pc, #92]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026fc:	f7ff fed1 	bl	80024a2 <LL_ADC_IsEnabled>
 8002700:	4604      	mov	r4, r0
 8002702:	4816      	ldr	r0, [pc, #88]	@ (800275c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002704:	f7ff fecd 	bl	80024a2 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	431c      	orrs	r4, r3
 800270c:	4815      	ldr	r0, [pc, #84]	@ (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800270e:	f7ff fec8 	bl	80024a2 <LL_ADC_IsEnabled>
 8002712:	4603      	mov	r3, r0
 8002714:	4323      	orrs	r3, r4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d112      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800271a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002722:	f023 030f 	bic.w	r3, r3, #15
 8002726:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002728:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800272a:	e009      	b.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800273e:	e000      	b.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002740:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800274a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800274e:	4618      	mov	r0, r3
 8002750:	377c      	adds	r7, #124	@ 0x7c
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	bf00      	nop
 8002758:	50040000 	.word	0x50040000
 800275c:	50040100 	.word	0x50040100
 8002760:	50040300 	.word	0x50040300
 8002764:	50040200 	.word	0x50040200

08002768 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <LL_EXTI_EnableIT_0_31+0x20>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4904      	ldr	r1, [pc, #16]	@ (8002788 <LL_EXTI_EnableIT_0_31+0x20>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40010400 	.word	0x40010400

0800278c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	43db      	mvns	r3, r3
 800279c:	4904      	ldr	r1, [pc, #16]	@ (80027b0 <LL_EXTI_DisableIT_0_31+0x24>)
 800279e:	4013      	ands	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010400 	.word	0x40010400

080027b4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4904      	ldr	r1, [pc, #16]	@ (80027d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]

}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40010400 	.word	0x40010400

080027d8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4904      	ldr	r1, [pc, #16]	@ (80027fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010400 	.word	0x40010400

08002800 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	4904      	ldr	r1, [pc, #16]	@ (8002820 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]

}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40010400 	.word	0x40010400

08002824 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	43db      	mvns	r3, r3
 8002834:	4904      	ldr	r1, [pc, #16]	@ (8002848 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002836:	4013      	ands	r3, r2
 8002838:	608b      	str	r3, [r1, #8]

}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010400 	.word	0x40010400

0800284c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4904      	ldr	r1, [pc, #16]	@ (800286c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40010400 	.word	0x40010400

08002870 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	43db      	mvns	r3, r3
 8002880:	4904      	ldr	r1, [pc, #16]	@ (8002894 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002882:	4013      	ands	r3, r2
 8002884:	60cb      	str	r3, [r1, #12]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010400 	.word	0x40010400

08002898 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80028a0:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6153      	str	r3, [r2, #20]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010400 	.word	0x40010400

080028b8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e0d1      	b.n	8002a78 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028e2:	d102      	bne.n	80028ea <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e0c6      	b.n	8002a78 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002904:	4b5f      	ldr	r3, [pc, #380]	@ (8002a84 <HAL_COMP_Init+0x1cc>)
 8002906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002908:	4a5e      	ldr	r2, [pc, #376]	@ (8002a84 <HAL_COMP_Init+0x1cc>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002910:	4b5c      	ldr	r3, [pc, #368]	@ (8002a84 <HAL_COMP_Init+0x1cc>)
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe f9e5 	bl	8000cec <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800292c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_COMP_Init+0x1d0>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	6979      	ldr	r1, [r7, #20]
 8002962:	430b      	orrs	r3, r1
 8002964:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800296e:	d106      	bne.n	800297e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002970:	4b46      	ldr	r3, [pc, #280]	@ (8002a8c <HAL_COMP_Init+0x1d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a45      	ldr	r2, [pc, #276]	@ (8002a8c <HAL_COMP_Init+0x1d4>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e005      	b.n	800298a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_COMP_Init+0x1d4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a42      	ldr	r2, [pc, #264]	@ (8002a8c <HAL_COMP_Init+0x1d4>)
 8002984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002988:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <HAL_COMP_Init+0x10e>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d113      	bne.n	80029c6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800299e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a90 <HAL_COMP_Init+0x1d8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002a94 <HAL_COMP_Init+0x1dc>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80029b8:	e002      	b.n	80029c0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a33      	ldr	r2, [pc, #204]	@ (8002a98 <HAL_COMP_Init+0x1e0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d102      	bne.n	80029d6 <HAL_COMP_Init+0x11e>
 80029d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029d4:	e001      	b.n	80029da <HAL_COMP_Init+0x122>
 80029d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029da:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d037      	beq.n	8002a58 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80029f4:	6938      	ldr	r0, [r7, #16]
 80029f6:	f7ff ff03 	bl	8002800 <LL_EXTI_EnableRisingTrig_0_31>
 80029fa:	e002      	b.n	8002a02 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f7ff ff11 	bl	8002824 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002a0e:	6938      	ldr	r0, [r7, #16]
 8002a10:	f7ff ff1c 	bl	800284c <LL_EXTI_EnableFallingTrig_0_31>
 8002a14:	e002      	b.n	8002a1c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002a16:	6938      	ldr	r0, [r7, #16]
 8002a18:	f7ff ff2a 	bl	8002870 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8002a1c:	6938      	ldr	r0, [r7, #16]
 8002a1e:	f7ff ff3b 	bl	8002898 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002a2e:	6938      	ldr	r0, [r7, #16]
 8002a30:	f7ff fec0 	bl	80027b4 <LL_EXTI_EnableEvent_0_31>
 8002a34:	e002      	b.n	8002a3c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002a36:	6938      	ldr	r0, [r7, #16]
 8002a38:	f7ff fece 	bl	80027d8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002a48:	6938      	ldr	r0, [r7, #16]
 8002a4a:	f7ff fe8d 	bl	8002768 <LL_EXTI_EnableIT_0_31>
 8002a4e:	e009      	b.n	8002a64 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002a50:	6938      	ldr	r0, [r7, #16]
 8002a52:	f7ff fe9b 	bl	800278c <LL_EXTI_DisableIT_0_31>
 8002a56:	e005      	b.n	8002a64 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002a58:	6938      	ldr	r0, [r7, #16]
 8002a5a:	f7ff febd 	bl	80027d8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002a5e:	6938      	ldr	r0, [r7, #16]
 8002a60:	f7ff fe94 	bl	800278c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8002a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	ff207d03 	.word	0xff207d03
 8002a8c:	40010204 	.word	0x40010204
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	40010200 	.word	0x40010200

08002a9c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e030      	b.n	8002b1a <HAL_COMP_Start+0x7e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ac6:	d102      	bne.n	8002ace <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e025      	b.n	8002b1a <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d11d      	bne.n	8002b16 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <HAL_COMP_Start+0x8c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b2c <HAL_COMP_Start+0x90>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	3301      	adds	r3, #1
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b06:	e002      	b.n	8002b0e <HAL_COMP_Start+0x72>
      {
        wait_loop_index--;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <HAL_COMP_Start+0x6c>
 8002b14:	e001      	b.n	8002b1a <HAL_COMP_Start+0x7e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	053e2d63 	.word	0x053e2d63

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	@ (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	@ (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e014      	b.n	8002d8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	791b      	ldrb	r3, [r3, #4]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe f80b 	bl	8000d90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	795b      	ldrb	r3, [r3, #5]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_DAC_Start+0x16>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e03b      	b.n	8002e24 <HAL_DAC_Start+0x8e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d118      	bne.n	8002e16 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	e00f      	b.n	8002e16 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e04:	d107      	bne.n	8002e16 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0202 	orr.w	r2, r2, #2
 8002e14:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e46:	d120      	bne.n	8002e8a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e56:	d118      	bne.n	8002e8a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e82:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f852 	bl	8002f2e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e98:	d120      	bne.n	8002edc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ea8:	d118      	bne.n	8002edc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f043 0202 	orr.w	r2, r3, #2
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ec4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f95a 	bl	8003190 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3308      	adds	r3, #8
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e004      	b.n	8002f18 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3314      	adds	r3, #20
 8002f16:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	795b      	ldrb	r3, [r3, #5]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_DAC_ConfigChannel+0x1c>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e114      	b.n	8003188 <HAL_DAC_ConfigChannel+0x246>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2202      	movs	r2, #2
 8002f68:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	f040 8081 	bne.w	8003076 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f74:	f7fe f8de 	bl	8001134 <HAL_GetTick>
 8002f78:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d140      	bne.n	8003002 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f80:	e018      	b.n	8002fb4 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f82:	f7fe f8d7 	bl	8001134 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d911      	bls.n	8002fb4 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f043 0208 	orr.w	r2, r3, #8
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2203      	movs	r2, #3
 8002fae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0e9      	b.n	8003188 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1df      	bne.n	8002f82 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe f8c2 	bl	800114c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	6992      	ldr	r2, [r2, #24]
 8002fd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fd2:	e023      	b.n	800301c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fd4:	f7fe f8ae 	bl	8001134 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d90f      	bls.n	8003002 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da0a      	bge.n	8003002 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f043 0208 	orr.w	r2, r3, #8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0c2      	b.n	8003188 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	dbe3      	blt.n	8002fd4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800300c:	2001      	movs	r0, #1
 800300e:	f7fe f89d 	bl	800114c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	6992      	ldr	r2, [r2, #24]
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	ea02 0103 	and.w	r1, r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	21ff      	movs	r1, #255	@ 0xff
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	ea02 0103 	and.w	r1, r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	409a      	lsls	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d11d      	bne.n	80030ba <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	221f      	movs	r2, #31
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2207      	movs	r2, #7
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	431a      	orrs	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	22c0      	movs	r2, #192	@ 0xc0
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43da      	mvns	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e098      	b.n	80032e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b4d      	ldr	r3, [pc, #308]	@ (80032f4 <HAL_DMA_Init+0x150>)
 80031be:	429a      	cmp	r2, r3
 80031c0:	d80f      	bhi.n	80031e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_DMA_Init+0x154>)
 80031ca:	4413      	add	r3, r2
 80031cc:	4a4b      	ldr	r2, [pc, #300]	@ (80032fc <HAL_DMA_Init+0x158>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	009a      	lsls	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a48      	ldr	r2, [pc, #288]	@ (8003300 <HAL_DMA_Init+0x15c>)
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40
 80031e0:	e00e      	b.n	8003200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b46      	ldr	r3, [pc, #280]	@ (8003304 <HAL_DMA_Init+0x160>)
 80031ea:	4413      	add	r3, r2
 80031ec:	4a43      	ldr	r2, [pc, #268]	@ (80032fc <HAL_DMA_Init+0x158>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_DMA_Init+0x164>)
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800325a:	d039      	beq.n	80032d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	4a27      	ldr	r2, [pc, #156]	@ (8003300 <HAL_DMA_Init+0x15c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d11a      	bne.n	800329c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003266:	4b29      	ldr	r3, [pc, #164]	@ (800330c <HAL_DMA_Init+0x168>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f003 031c 	and.w	r3, r3, #28
 8003272:	210f      	movs	r1, #15
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	4924      	ldr	r1, [pc, #144]	@ (800330c <HAL_DMA_Init+0x168>)
 800327c:	4013      	ands	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003280:	4b22      	ldr	r3, [pc, #136]	@ (800330c <HAL_DMA_Init+0x168>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f003 031c 	and.w	r3, r3, #28
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	491d      	ldr	r1, [pc, #116]	@ (800330c <HAL_DMA_Init+0x168>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
 800329a:	e019      	b.n	80032d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800329c:	4b1c      	ldr	r3, [pc, #112]	@ (8003310 <HAL_DMA_Init+0x16c>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	f003 031c 	and.w	r3, r3, #28
 80032a8:	210f      	movs	r1, #15
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	4917      	ldr	r1, [pc, #92]	@ (8003310 <HAL_DMA_Init+0x16c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032b6:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <HAL_DMA_Init+0x16c>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f003 031c 	and.w	r3, r3, #28
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	4911      	ldr	r1, [pc, #68]	@ (8003310 <HAL_DMA_Init+0x16c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40020407 	.word	0x40020407
 80032f8:	bffdfff8 	.word	0xbffdfff8
 80032fc:	cccccccd 	.word	0xcccccccd
 8003300:	40020000 	.word	0x40020000
 8003304:	bffdfbf8 	.word	0xbffdfbf8
 8003308:	40020400 	.word	0x40020400
 800330c:	400200a8 	.word	0x400200a8
 8003310:	400204a8 	.word	0x400204a8

08003314 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Start_IT+0x20>
 8003330:	2302      	movs	r3, #2
 8003332:	e04b      	b.n	80033cc <HAL_DMA_Start_IT+0xb8>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d13a      	bne.n	80033be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f95f 	bl	8003630 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 020e 	orr.w	r2, r2, #14
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e00f      	b.n	80033ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 020a 	orr.w	r2, r2, #10
 80033aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e005      	b.n	80033ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d008      	beq.n	80033fe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2204      	movs	r2, #4
 80033f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 020e 	bic.w	r2, r2, #14
 800340c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f003 021c 	and.w	r2, r3, #28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d005      	beq.n	8003474 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e029      	b.n	80034c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020e 	bic.w	r2, r2, #14
 8003482:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	f003 021c 	and.w	r2, r3, #28
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
    }
  }
  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f003 031c 	and.w	r3, r3, #28
 80034f2:	2204      	movs	r2, #4
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d026      	beq.n	800354c <HAL_DMA_IRQHandler+0x7a>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d021      	beq.n	800354c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d107      	bne.n	8003526 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0204 	bic.w	r2, r2, #4
 8003524:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f003 021c 	and.w	r2, r3, #28
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2104      	movs	r1, #4
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	2b00      	cmp	r3, #0
 8003540:	d071      	beq.n	8003626 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800354a:	e06c      	b.n	8003626 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003550:	f003 031c 	and.w	r3, r3, #28
 8003554:	2202      	movs	r2, #2
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02e      	beq.n	80035be <HAL_DMA_IRQHandler+0xec>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d029      	beq.n	80035be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 020a 	bic.w	r2, r2, #10
 8003586:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003594:	f003 021c 	and.w	r2, r3, #28
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	2102      	movs	r1, #2
 800359e:	fa01 f202 	lsl.w	r2, r1, r2
 80035a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d038      	beq.n	8003626 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035bc:	e033      	b.n	8003626 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f003 031c 	and.w	r3, r3, #28
 80035c6:	2208      	movs	r2, #8
 80035c8:	409a      	lsls	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d02a      	beq.n	8003628 <HAL_DMA_IRQHandler+0x156>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d025      	beq.n	8003628 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 020e 	bic.w	r2, r2, #14
 80035ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	f003 021c 	and.w	r2, r3, #28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003626:	bf00      	nop
 8003628:	bf00      	nop
}
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f003 021c 	and.w	r2, r3, #28
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b10      	cmp	r3, #16
 8003660:	d108      	bne.n	8003674 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003672:	e007      	b.n	8003684 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369e:	e17f      	b.n	80039a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8171 	beq.w	800399a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_GPIO_Init+0x40>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d130      	bne.n	8003732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003706:	2201      	movs	r2, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0201 	and.w	r2, r3, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b03      	cmp	r3, #3
 800373c:	d118      	bne.n	8003770 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	08db      	lsrs	r3, r3, #3
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	6939      	ldr	r1, [r7, #16]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80ac 	beq.w	800399a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	4b5f      	ldr	r3, [pc, #380]	@ (80039c0 <HAL_GPIO_Init+0x330>)
 8003844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003846:	4a5e      	ldr	r2, [pc, #376]	@ (80039c0 <HAL_GPIO_Init+0x330>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6613      	str	r3, [r2, #96]	@ 0x60
 800384e:	4b5c      	ldr	r3, [pc, #368]	@ (80039c0 <HAL_GPIO_Init+0x330>)
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800385a:	4a5a      	ldr	r2, [pc, #360]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003884:	d025      	beq.n	80038d2 <HAL_GPIO_Init+0x242>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4f      	ldr	r2, [pc, #316]	@ (80039c8 <HAL_GPIO_Init+0x338>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_GPIO_Init+0x23e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4e      	ldr	r2, [pc, #312]	@ (80039cc <HAL_GPIO_Init+0x33c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d019      	beq.n	80038ca <HAL_GPIO_Init+0x23a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4d      	ldr	r2, [pc, #308]	@ (80039d0 <HAL_GPIO_Init+0x340>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0x236>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	@ (80039d4 <HAL_GPIO_Init+0x344>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_GPIO_Init+0x232>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	@ (80039d8 <HAL_GPIO_Init+0x348>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <HAL_GPIO_Init+0x22e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4a      	ldr	r2, [pc, #296]	@ (80039dc <HAL_GPIO_Init+0x34c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_GPIO_Init+0x22a>
 80038b6:	2306      	movs	r3, #6
 80038b8:	e00c      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038ba:	2307      	movs	r3, #7
 80038bc:	e00a      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038be:	2305      	movs	r3, #5
 80038c0:	e008      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e004      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e002      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038d2:	2300      	movs	r3, #0
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	f002 0203 	and.w	r2, r2, #3
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	4093      	lsls	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038e4:	4937      	ldr	r1, [pc, #220]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	3302      	adds	r3, #2
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f2:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003916:	4a32      	ldr	r2, [pc, #200]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800391c:	4b30      	ldr	r3, [pc, #192]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003940:	4a27      	ldr	r2, [pc, #156]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003946:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800396a:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003994:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <HAL_GPIO_Init+0x350>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3301      	adds	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f ae78 	bne.w	80036a0 <HAL_GPIO_Init+0x10>
  }
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40010000 	.word	0x40010000
 80039c8:	48000400 	.word	0x48000400
 80039cc:	48000800 	.word	0x48000800
 80039d0:	48000c00 	.word	0x48000c00
 80039d4:	48001000 	.word	0x48001000
 80039d8:	48001400 	.word	0x48001400
 80039dc:	48001800 	.word	0x48001800
 80039e0:	40010400 	.word	0x40010400

080039e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <HAL_PWREx_GetVoltageRange+0x18>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40007000 	.word	0x40007000

08003a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0e:	d130      	bne.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a10:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a1c:	d038      	beq.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a26:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2232      	movs	r2, #50	@ 0x32
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0c9b      	lsrs	r3, r3, #18
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a44:	e002      	b.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4c:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a58:	d102      	bne.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f2      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a60:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6c:	d110      	bne.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00f      	b.n	8003a92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a72:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7e:	d007      	beq.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a80:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a88:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e3ca      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003abe:	4b97      	ldr	r3, [pc, #604]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ac8:	4b94      	ldr	r3, [pc, #592]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80e4 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4a>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	f040 808b 	bne.w	8003c04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	f040 8087 	bne.w	8003c04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af6:	4b89      	ldr	r3, [pc, #548]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e3a2      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1a      	ldr	r2, [r3, #32]
 8003b12:	4b82      	ldr	r3, [pc, #520]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_RCC_OscConfig+0x7c>
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b26:	e005      	b.n	8003b34 <HAL_RCC_OscConfig+0x88>
 8003b28:	4b7c      	ldr	r3, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d223      	bcs.n	8003b80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fd55 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e383      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b4c:	4b73      	ldr	r3, [pc, #460]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a72      	ldr	r2, [pc, #456]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b52:	f043 0308 	orr.w	r3, r3, #8
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b70      	ldr	r3, [pc, #448]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	496d      	ldr	r1, [pc, #436]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	4968      	ldr	r1, [pc, #416]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
 8003b7e:	e025      	b.n	8003bcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b80:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b63      	ldr	r3, [pc, #396]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4960      	ldr	r1, [pc, #384]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	495b      	ldr	r1, [pc, #364]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fd15 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e343      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bcc:	f000 fc4a 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b52      	ldr	r3, [pc, #328]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	4950      	ldr	r1, [pc, #320]	@ (8003d20 <HAL_RCC_OscConfig+0x274>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	4a4e      	ldr	r2, [pc, #312]	@ (8003d24 <HAL_RCC_OscConfig+0x278>)
 8003bea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bec:	4b4e      	ldr	r3, [pc, #312]	@ (8003d28 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fd fa4f 	bl	8001094 <HAL_InitTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d052      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	e327      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d032      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c0c:	4b43      	ldr	r3, [pc, #268]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a42      	ldr	r2, [pc, #264]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fa8c 	bl	8001134 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c20:	f7fd fa88 	bl	8001134 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e310      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c32:	4b3a      	ldr	r3, [pc, #232]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c3e:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a36      	ldr	r2, [pc, #216]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c44:	f043 0308 	orr.w	r3, r3, #8
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b34      	ldr	r3, [pc, #208]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4931      	ldr	r1, [pc, #196]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	492c      	ldr	r1, [pc, #176]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
 8003c70:	e01a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c72:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a29      	ldr	r2, [pc, #164]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fa59 	bl	8001134 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c86:	f7fd fa55 	bl	8001134 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e2dd      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c98:	4b20      	ldr	r3, [pc, #128]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x1da>
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ca6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d074      	beq.n	8003d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x21a>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d10e      	bne.n	8003cde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc6:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d064      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2f0>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d160      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e2ba      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x24a>
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0b      	ldr	r2, [pc, #44]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e026      	b.n	8003d44 <HAL_RCC_OscConfig+0x298>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cfe:	d115      	bne.n	8003d2c <HAL_RCC_OscConfig+0x280>
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a05      	ldr	r2, [pc, #20]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003d06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a02      	ldr	r2, [pc, #8]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	e014      	b.n	8003d44 <HAL_RCC_OscConfig+0x298>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	08007278 	.word	0x08007278
 8003d24:	20000000 	.word	0x20000000
 8003d28:	20000004 	.word	0x20000004
 8003d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a9f      	ldr	r2, [pc, #636]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b9d      	ldr	r3, [pc, #628]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a9c      	ldr	r2, [pc, #624]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f9f2 	bl	8001134 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fd f9ee 	bl	8001134 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e276      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d66:	4b92      	ldr	r3, [pc, #584]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x2a8>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd f9de 	bl	8001134 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fd f9da 	bl	8001134 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e262      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d8e:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x2d0>
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d060      	beq.n	8003e6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_OscConfig+0x310>
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d119      	bne.n	8003dea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d116      	bne.n	8003dea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x328>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e23f      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b76      	ldr	r3, [pc, #472]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	4973      	ldr	r1, [pc, #460]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de8:	e040      	b.n	8003e6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d023      	beq.n	8003e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df2:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fd f999 	bl	8001134 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e06:	f7fd f995 	bl	8001134 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e21d      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e18:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b62      	ldr	r3, [pc, #392]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	495f      	ldr	r1, [pc, #380]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
 8003e38:	e018      	b.n	8003e6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd f975 	bl	8001134 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7fd f971 	bl	8001134 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1f9      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d03c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01c      	beq.n	8003eba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e80:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e86:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd f950 	bl	8001134 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd f94c 	bl	8001134 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1d4      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ef      	beq.n	8003e98 <HAL_RCC_OscConfig+0x3ec>
 8003eb8:	e01b      	b.n	8003ef2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eba:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fd f933 	bl	8001134 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd f92f 	bl	8001134 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1b7      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee4:	4b32      	ldr	r3, [pc, #200]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ef      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80a6 	beq.w	800404c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f04:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	4a26      	ldr	r2, [pc, #152]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f1c:	4b24      	ldr	r3, [pc, #144]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2c:	4b21      	ldr	r3, [pc, #132]	@ (8003fb4 <HAL_RCC_OscConfig+0x508>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d118      	bne.n	8003f6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f38:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb4 <HAL_RCC_OscConfig+0x508>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <HAL_RCC_OscConfig+0x508>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f44:	f7fd f8f6 	bl	8001134 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4c:	f7fd f8f2 	bl	8001134 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e17a      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5e:	4b15      	ldr	r3, [pc, #84]	@ (8003fb4 <HAL_RCC_OscConfig+0x508>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_RCC_OscConfig+0x4d8>
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f78:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f82:	e029      	b.n	8003fd8 <HAL_RCC_OscConfig+0x52c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x50c>
 8003f8c:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	4a07      	ldr	r2, [pc, #28]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f9c:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	4a03      	ldr	r2, [pc, #12]	@ (8003fb0 <HAL_RCC_OscConfig+0x504>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fac:	e014      	b.n	8003fd8 <HAL_RCC_OscConfig+0x52c>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fbe:	4a9b      	ldr	r2, [pc, #620]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fc8:	4b98      	ldr	r3, [pc, #608]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fce:	4a97      	ldr	r2, [pc, #604]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d016      	beq.n	800400e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd f8a8 	bl	8001134 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fd f8a4 	bl	8001134 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e12a      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ed      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x53c>
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fd f891 	bl	8001134 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004014:	e00a      	b.n	800402c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fd f88d 	bl	8001134 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e113      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800402c:	4b7f      	ldr	r3, [pc, #508]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ed      	bne.n	8004016 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004040:	4b7a      	ldr	r3, [pc, #488]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004044:	4a79      	ldr	r2, [pc, #484]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80fe 	beq.w	8004252 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	2b02      	cmp	r3, #2
 800405c:	f040 80d0 	bne.w	8004200 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004060:	4b72      	ldr	r3, [pc, #456]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0203 	and.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	429a      	cmp	r2, r3
 8004072:	d130      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	3b01      	subs	r3, #1
 8004080:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d127      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004090:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d11f      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040a0:	2a07      	cmp	r2, #7
 80040a2:	bf14      	ite	ne
 80040a4:	2201      	movne	r2, #1
 80040a6:	2200      	moveq	r2, #0
 80040a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d113      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	3b01      	subs	r3, #1
 80040d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d06e      	beq.n	80041b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d069      	beq.n	80041b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0ad      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040f8:	4b4c      	ldr	r3, [pc, #304]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a4b      	ldr	r2, [pc, #300]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004104:	f7fd f816 	bl	8001134 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd f812 	bl	8001134 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e09a      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411e:	4b43      	ldr	r3, [pc, #268]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	4b40      	ldr	r3, [pc, #256]	@ (8004230 <HAL_RCC_OscConfig+0x784>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800413a:	3a01      	subs	r2, #1
 800413c:	0112      	lsls	r2, r2, #4
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004144:	0212      	lsls	r2, r2, #8
 8004146:	4311      	orrs	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800414c:	0852      	lsrs	r2, r2, #1
 800414e:	3a01      	subs	r2, #1
 8004150:	0552      	lsls	r2, r2, #21
 8004152:	4311      	orrs	r1, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004158:	0852      	lsrs	r2, r2, #1
 800415a:	3a01      	subs	r2, #1
 800415c:	0652      	lsls	r2, r2, #25
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004164:	0912      	lsrs	r2, r2, #4
 8004166:	0452      	lsls	r2, r2, #17
 8004168:	430a      	orrs	r2, r1
 800416a:	4930      	ldr	r1, [pc, #192]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 800416c:	4313      	orrs	r3, r2
 800416e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004170:	4b2e      	ldr	r3, [pc, #184]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2d      	ldr	r2, [pc, #180]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800417c:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a2a      	ldr	r2, [pc, #168]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004186:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004188:	f7fc ffd4 	bl	8001134 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004190:	f7fc ffd0 	bl	8001134 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e058      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a2:	4b22      	ldr	r3, [pc, #136]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ae:	e050      	b.n	8004252 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04f      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b4:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d148      	bne.n	8004252 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a19      	ldr	r2, [pc, #100]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041cc:	4b17      	ldr	r3, [pc, #92]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a16      	ldr	r2, [pc, #88]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041d8:	f7fc ffac 	bl	8001134 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fc ffa8 	bl	8001134 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e030      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f2:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x734>
 80041fe:	e028      	b.n	8004252 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d023      	beq.n	800424e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b09      	ldr	r3, [pc, #36]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a08      	ldr	r2, [pc, #32]	@ (800422c <HAL_RCC_OscConfig+0x780>)
 800420c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fc ff8f 	bl	8001134 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004218:	e00c      	b.n	8004234 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421a:	f7fc ff8b 	bl	8001134 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d905      	bls.n	8004234 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e013      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
 800422c:	40021000 	.word	0x40021000
 8004230:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_OscConfig+0x7b0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ec      	bne.n	800421a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <HAL_RCC_OscConfig+0x7b0>)
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4905      	ldr	r1, [pc, #20]	@ (800425c <HAL_RCC_OscConfig+0x7b0>)
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCC_OscConfig+0x7b4>)
 8004248:	4013      	ands	r3, r2
 800424a:	60cb      	str	r3, [r1, #12]
 800424c:	e001      	b.n	8004252 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	feeefffc 	.word	0xfeeefffc

08004264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0e7      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b75      	ldr	r3, [pc, #468]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d910      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b72      	ldr	r3, [pc, #456]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	4970      	ldr	r1, [pc, #448]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b6e      	ldr	r3, [pc, #440]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0cf      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	4b66      	ldr	r3, [pc, #408]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d908      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b63      	ldr	r3, [pc, #396]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4960      	ldr	r1, [pc, #384]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04c      	beq.n	800437c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d121      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0a6      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004302:	4b54      	ldr	r3, [pc, #336]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d115      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e09a      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800431a:	4b4e      	ldr	r3, [pc, #312]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e08e      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432a:	4b4a      	ldr	r3, [pc, #296]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e086      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800433a:	4b46      	ldr	r3, [pc, #280]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4943      	ldr	r1, [pc, #268]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fc fef2 	bl	8001134 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fc feee 	bl	8001134 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e06e      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b3a      	ldr	r3, [pc, #232]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 020c 	and.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	429a      	cmp	r2, r3
 800437a:	d1eb      	bne.n	8004354 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	4b31      	ldr	r3, [pc, #196]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004394:	429a      	cmp	r2, r3
 8004396:	d208      	bcs.n	80043aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b2e      	ldr	r3, [pc, #184]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	492b      	ldr	r1, [pc, #172]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043aa:	4b29      	ldr	r3, [pc, #164]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d210      	bcs.n	80043da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b8:	4b25      	ldr	r3, [pc, #148]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 0207 	bic.w	r2, r3, #7
 80043c0:	4923      	ldr	r1, [pc, #140]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c8:	4b21      	ldr	r3, [pc, #132]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e036      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4918      	ldr	r1, [pc, #96]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004404:	4b13      	ldr	r3, [pc, #76]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4910      	ldr	r1, [pc, #64]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004418:	f000 f824 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	490b      	ldr	r1, [pc, #44]	@ (8004458 <HAL_RCC_ClockConfig+0x1f4>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	4a09      	ldr	r2, [pc, #36]	@ (800445c <HAL_RCC_ClockConfig+0x1f8>)
 8004436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_ClockConfig+0x1fc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fe29 	bl	8001094 <HAL_InitTick>
 8004442:	4603      	mov	r3, r0
 8004444:	72fb      	strb	r3, [r7, #11]

  return status;
 8004446:	7afb      	ldrb	r3, [r7, #11]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40022000 	.word	0x40022000
 8004454:	40021000 	.word	0x40021000
 8004458:	08007278 	.word	0x08007278
 800445c:	20000000 	.word	0x20000000
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b3e      	ldr	r3, [pc, #248]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x34>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d11e      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004498:	4b34      	ldr	r3, [pc, #208]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044a4:	4b31      	ldr	r3, [pc, #196]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d102      	bne.n	80044e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044dc:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x110>)
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e004      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044e8:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d134      	bne.n	800455c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044f2:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d003      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0xa6>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d003      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0xac>
 8004508:	e005      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x110>)
 800450c:	617b      	str	r3, [r7, #20]
      break;
 800450e:	e005      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x114>)
 8004512:	617b      	str	r3, [r7, #20]
      break;
 8004514:	e002      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	617b      	str	r3, [r7, #20]
      break;
 800451a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800451c:	4b13      	ldr	r3, [pc, #76]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	3301      	adds	r3, #1
 8004528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800452a:	4b10      	ldr	r3, [pc, #64]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	fb03 f202 	mul.w	r2, r3, r2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	0e5b      	lsrs	r3, r3, #25
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	3301      	adds	r3, #1
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800455c:	69bb      	ldr	r3, [r7, #24]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3724      	adds	r7, #36	@ 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	08007290 	.word	0x08007290
 8004574:	00f42400 	.word	0x00f42400
 8004578:	007a1200 	.word	0x007a1200

0800457c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004580:	4b03      	ldr	r3, [pc, #12]	@ (8004590 <HAL_RCC_GetHCLKFreq+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000000 	.word	0x20000000

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004598:	f7ff fff0 	bl	800457c <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4904      	ldr	r1, [pc, #16]	@ (80045bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08007288 	.word	0x08007288

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045c4:	f7ff ffda 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0adb      	lsrs	r3, r3, #11
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4904      	ldr	r1, [pc, #16]	@ (80045e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	08007288 	.word	0x08007288

080045ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045f8:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004604:	f7ff f9ee 	bl	80039e4 <HAL_PWREx_GetVoltageRange>
 8004608:	6178      	str	r0, [r7, #20]
 800460a:	e014      	b.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800460c:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	4a24      	ldr	r2, [pc, #144]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6593      	str	r3, [r2, #88]	@ 0x58
 8004618:	4b22      	ldr	r3, [pc, #136]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004624:	f7ff f9de 	bl	80039e4 <HAL_PWREx_GetVoltageRange>
 8004628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4b1e      	ldr	r3, [pc, #120]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463c:	d10b      	bne.n	8004656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b80      	cmp	r3, #128	@ 0x80
 8004642:	d919      	bls.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2ba0      	cmp	r3, #160	@ 0xa0
 8004648:	d902      	bls.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800464a:	2302      	movs	r3, #2
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e013      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004650:	2301      	movs	r3, #1
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	e010      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b80      	cmp	r3, #128	@ 0x80
 800465a:	d902      	bls.n	8004662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800465c:	2303      	movs	r3, #3
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e00a      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b80      	cmp	r3, #128	@ 0x80
 8004666:	d102      	bne.n	800466e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004668:	2302      	movs	r3, #2
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	e004      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b70      	cmp	r3, #112	@ 0x70
 8004672:	d101      	bne.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004674:	2301      	movs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 0207 	bic.w	r2, r3, #7
 8004680:	4909      	ldr	r1, [pc, #36]	@ (80046a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004688:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d001      	beq.n	800469a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40022000 	.word	0x40022000

080046ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046b4:	2300      	movs	r3, #0
 80046b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046b8:	2300      	movs	r3, #0
 80046ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d041      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046d0:	d02a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046d6:	d824      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046e2:	d81e      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ec:	d010      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ee:	e018      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046f0:	4b86      	ldr	r3, [pc, #536]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a85      	ldr	r2, [pc, #532]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046fc:	e015      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fabb 	bl	8004c80 <RCCEx_PLLSAI1_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800470e:	e00c      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3320      	adds	r3, #32
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fba6 	bl	8004e68 <RCCEx_PLLSAI2_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	74fb      	strb	r3, [r7, #19]
      break;
 8004726:	e000      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004730:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800473e:	4973      	ldr	r1, [pc, #460]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004746:	e001      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d041      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800475c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004760:	d02a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004766:	d824      	bhi.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800476c:	d008      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800476e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004772:	d81e      	bhi.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800477c:	d010      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800477e:	e018      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004780:	4b62      	ldr	r3, [pc, #392]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a61      	ldr	r2, [pc, #388]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800478c:	e015      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	2100      	movs	r1, #0
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fa73 	bl	8004c80 <RCCEx_PLLSAI1_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800479e:	e00c      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3320      	adds	r3, #32
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fb5e 	bl	8004e68 <RCCEx_PLLSAI2_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047b0:	e003      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	74fb      	strb	r3, [r7, #19]
      break;
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047c0:	4b52      	ldr	r3, [pc, #328]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ce:	494f      	ldr	r1, [pc, #316]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80047d6:	e001      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80a0 	beq.w	800492a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047ee:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b41      	ldr	r3, [pc, #260]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004808:	4a40      	ldr	r2, [pc, #256]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800480e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004810:	4b3e      	ldr	r3, [pc, #248]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481c:	2301      	movs	r3, #1
 800481e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004820:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3a      	ldr	r2, [pc, #232]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800482c:	f7fc fc82 	bl	8001134 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004832:	e009      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004834:	f7fc fc7e 	bl	8001134 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d902      	bls.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	74fb      	strb	r3, [r7, #19]
        break;
 8004846:	e005      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004848:	4b31      	ldr	r3, [pc, #196]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ef      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d15c      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800485a:	4b2c      	ldr	r3, [pc, #176]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01f      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	429a      	cmp	r2, r3
 8004876:	d019      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004878:	4b24      	ldr	r3, [pc, #144]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004884:	4b21      	ldr	r3, [pc, #132]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488a:	4a20      	ldr	r2, [pc, #128]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004894:	4b1d      	ldr	r3, [pc, #116]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489a:	4a1c      	ldr	r2, [pc, #112]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048a4:	4a19      	ldr	r2, [pc, #100]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fc fc3d 	bl	8001134 <HAL_GetTick>
 80048ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048bc:	e00b      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fc fc39 	bl	8001134 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d902      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	74fb      	strb	r3, [r7, #19]
            break;
 80048d4:	e006      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ec      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10c      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ea:	4b08      	ldr	r3, [pc, #32]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fa:	4904      	ldr	r1, [pc, #16]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004902:	e009      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	74bb      	strb	r3, [r7, #18]
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004918:	7c7b      	ldrb	r3, [r7, #17]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d105      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800491e:	4b9e      	ldr	r3, [pc, #632]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004922:	4a9d      	ldr	r2, [pc, #628]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004928:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004936:	4b98      	ldr	r3, [pc, #608]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f023 0203 	bic.w	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	4994      	ldr	r1, [pc, #592]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004958:	4b8f      	ldr	r3, [pc, #572]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495e:	f023 020c 	bic.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004966:	498c      	ldr	r1, [pc, #560]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800497a:	4b87      	ldr	r3, [pc, #540]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004980:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	4983      	ldr	r1, [pc, #524]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800499c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	497b      	ldr	r1, [pc, #492]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049be:	4b76      	ldr	r3, [pc, #472]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049cc:	4972      	ldr	r1, [pc, #456]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049e0:	4b6d      	ldr	r3, [pc, #436]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ee:	496a      	ldr	r1, [pc, #424]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a02:	4b65      	ldr	r3, [pc, #404]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	4961      	ldr	r1, [pc, #388]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a24:	4b5c      	ldr	r3, [pc, #368]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a32:	4959      	ldr	r1, [pc, #356]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a46:	4b54      	ldr	r3, [pc, #336]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a54:	4950      	ldr	r1, [pc, #320]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a68:	4b4b      	ldr	r3, [pc, #300]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a76:	4948      	ldr	r1, [pc, #288]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a8a:	4b43      	ldr	r3, [pc, #268]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	493f      	ldr	r1, [pc, #252]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d028      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aac:	4b3a      	ldr	r3, [pc, #232]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aba:	4937      	ldr	r1, [pc, #220]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aca:	d106      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004acc:	4b32      	ldr	r3, [pc, #200]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a31      	ldr	r2, [pc, #196]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	60d3      	str	r3, [r2, #12]
 8004ad8:	e011      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f8c8 	bl	8004c80 <RCCEx_PLLSAI1_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d028      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b0a:	4b23      	ldr	r3, [pc, #140]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	491f      	ldr	r1, [pc, #124]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b28:	d106      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b34:	60d3      	str	r3, [r2, #12]
 8004b36:	e011      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2101      	movs	r1, #1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f899 	bl	8004c80 <RCCEx_PLLSAI1_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02b      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b68:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b76:	4908      	ldr	r1, [pc, #32]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b86:	d109      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b88:	4b03      	ldr	r3, [pc, #12]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a02      	ldr	r2, [pc, #8]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b92:	60d3      	str	r3, [r2, #12]
 8004b94:	e014      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2101      	movs	r1, #1
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f867 	bl	8004c80 <RCCEx_PLLSAI1_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bda:	4928      	ldr	r1, [pc, #160]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bea:	d10d      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f844 	bl	8004c80 <RCCEx_PLLSAI1_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	74bb      	strb	r3, [r7, #18]
 8004c06:	e011      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3320      	adds	r3, #32
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 f925 	bl	8004e68 <RCCEx_PLLSAI2_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c46:	490d      	ldr	r1, [pc, #52]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c5a:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c6a:	4904      	ldr	r1, [pc, #16]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000

08004c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c8e:	4b75      	ldr	r3, [pc, #468]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d018      	beq.n	8004ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c9a:	4b72      	ldr	r3, [pc, #456]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0203 	and.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d10d      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
       ||
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d047      	beq.n	8004d56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
 8004cca:	e044      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d018      	beq.n	8004d06 <RCCEx_PLLSAI1_Config+0x86>
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d825      	bhi.n	8004d24 <RCCEx_PLLSAI1_Config+0xa4>
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d002      	beq.n	8004ce2 <RCCEx_PLLSAI1_Config+0x62>
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d009      	beq.n	8004cf4 <RCCEx_PLLSAI1_Config+0x74>
 8004ce0:	e020      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ce2:	4b60      	ldr	r3, [pc, #384]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11d      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf2:	e01a      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d116      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d04:	e013      	b.n	8004d2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d06:	4b57      	ldr	r3, [pc, #348]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d12:	4b54      	ldr	r3, [pc, #336]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d22:	e006      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	e004      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	4944      	ldr	r1, [pc, #272]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d17d      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d5c:	4b41      	ldr	r3, [pc, #260]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a40      	ldr	r2, [pc, #256]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d68:	f7fc f9e4 	bl	8001134 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d6e:	e009      	b.n	8004d84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d70:	f7fc f9e0 	bl	8001134 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	73fb      	strb	r3, [r7, #15]
        break;
 8004d82:	e005      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d84:	4b37      	ldr	r3, [pc, #220]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ef      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d160      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d111      	bne.n	8004dc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9c:	4b31      	ldr	r3, [pc, #196]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6892      	ldr	r2, [r2, #8]
 8004dac:	0211      	lsls	r1, r2, #8
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68d2      	ldr	r2, [r2, #12]
 8004db2:	0912      	lsrs	r2, r2, #4
 8004db4:	0452      	lsls	r2, r2, #17
 8004db6:	430a      	orrs	r2, r1
 8004db8:	492a      	ldr	r1, [pc, #168]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]
 8004dbe:	e027      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d112      	bne.n	8004dec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc6:	4b27      	ldr	r3, [pc, #156]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004dce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
 8004dd6:	0211      	lsls	r1, r2, #8
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6912      	ldr	r2, [r2, #16]
 8004ddc:	0852      	lsrs	r2, r2, #1
 8004dde:	3a01      	subs	r2, #1
 8004de0:	0552      	lsls	r2, r2, #21
 8004de2:	430a      	orrs	r2, r1
 8004de4:	491f      	ldr	r1, [pc, #124]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	610b      	str	r3, [r1, #16]
 8004dea:	e011      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004df4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6892      	ldr	r2, [r2, #8]
 8004dfc:	0211      	lsls	r1, r2, #8
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6952      	ldr	r2, [r2, #20]
 8004e02:	0852      	lsrs	r2, r2, #1
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0652      	lsls	r2, r2, #25
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	4916      	ldr	r1, [pc, #88]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a13      	ldr	r2, [pc, #76]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fc f98a 	bl	8001134 <HAL_GetTick>
 8004e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e22:	e009      	b.n	8004e38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e24:	f7fc f986 	bl	8001134 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d902      	bls.n	8004e38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	73fb      	strb	r3, [r7, #15]
          break;
 8004e36:	e005      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ef      	beq.n	8004e24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000

08004e68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e76:	4b6a      	ldr	r3, [pc, #424]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e82:	4b67      	ldr	r3, [pc, #412]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0203 	and.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d10d      	bne.n	8004eae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
       ||
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e9a:	4b61      	ldr	r3, [pc, #388]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d047      	beq.n	8004f3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
 8004eb2:	e044      	b.n	8004f3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d018      	beq.n	8004eee <RCCEx_PLLSAI2_Config+0x86>
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d825      	bhi.n	8004f0c <RCCEx_PLLSAI2_Config+0xa4>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d002      	beq.n	8004eca <RCCEx_PLLSAI2_Config+0x62>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d009      	beq.n	8004edc <RCCEx_PLLSAI2_Config+0x74>
 8004ec8:	e020      	b.n	8004f0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eca:	4b55      	ldr	r3, [pc, #340]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eda:	e01a      	b.n	8004f12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004edc:	4b50      	ldr	r3, [pc, #320]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d116      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e013      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eee:	4b4c      	ldr	r3, [pc, #304]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10f      	bne.n	8004f1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004efa:	4b49      	ldr	r3, [pc, #292]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e004      	b.n	8004f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f22:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	430b      	orrs	r3, r1
 8004f38:	4939      	ldr	r1, [pc, #228]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d167      	bne.n	8005014 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f44:	4b36      	ldr	r3, [pc, #216]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a35      	ldr	r2, [pc, #212]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fc f8f0 	bl	8001134 <HAL_GetTick>
 8004f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f56:	e009      	b.n	8004f6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f58:	f7fc f8ec 	bl	8001134 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d902      	bls.n	8004f6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	73fb      	strb	r3, [r7, #15]
        break;
 8004f6a:	e005      	b.n	8004f78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ef      	bne.n	8004f58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d14a      	bne.n	8005014 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f84:	4b26      	ldr	r3, [pc, #152]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6892      	ldr	r2, [r2, #8]
 8004f94:	0211      	lsls	r1, r2, #8
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68d2      	ldr	r2, [r2, #12]
 8004f9a:	0912      	lsrs	r2, r2, #4
 8004f9c:	0452      	lsls	r2, r2, #17
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	491f      	ldr	r1, [pc, #124]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	614b      	str	r3, [r1, #20]
 8004fa6:	e011      	b.n	8004fcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	0211      	lsls	r1, r2, #8
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6912      	ldr	r2, [r2, #16]
 8004fbe:	0852      	lsrs	r2, r2, #1
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	0652      	lsls	r2, r2, #25
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	4916      	ldr	r1, [pc, #88]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fcc:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fc f8ac 	bl	8001134 <HAL_GetTick>
 8004fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fde:	e009      	b.n	8004ff4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fe0:	f7fc f8a8 	bl	8001134 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d902      	bls.n	8004ff4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ff2:	e005      	b.n	8005000 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ef      	beq.n	8004fe0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005006:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4904      	ldr	r1, [pc, #16]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005010:	4313      	orrs	r3, r2
 8005012:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000

08005024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e049      	b.n	80050ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fb fec6 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f000 fb7a 	bl	800575c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e049      	b.n	8005178 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f841 	bl	8005180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f000 fb23 	bl	800575c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_TIM_PWM_Start+0x24>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e03c      	b.n	8005232 <HAL_TIM_PWM_Start+0x9e>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d109      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x3e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e02f      	b.n	8005232 <HAL_TIM_PWM_Start+0x9e>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x58>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e022      	b.n	8005232 <HAL_TIM_PWM_Start+0x9e>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d109      	bne.n	8005206 <HAL_TIM_PWM_Start+0x72>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e015      	b.n	8005232 <HAL_TIM_PWM_Start+0x9e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b10      	cmp	r3, #16
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x8c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e008      	b.n	8005232 <HAL_TIM_PWM_Start+0x9e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	bf14      	ite	ne
 800522c:	2301      	movne	r3, #1
 800522e:	2300      	moveq	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e09c      	b.n	8005374 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_TIM_PWM_Start+0xb6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005248:	e023      	b.n	8005292 <HAL_TIM_PWM_Start+0xfe>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Start+0xc6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005258:	e01b      	b.n	8005292 <HAL_TIM_PWM_Start+0xfe>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start+0xd6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005268:	e013      	b.n	8005292 <HAL_TIM_PWM_Start+0xfe>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start+0xe6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005278:	e00b      	b.n	8005292 <HAL_TIM_PWM_Start+0xfe>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b10      	cmp	r3, #16
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0xf6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005288:	e003      	b.n	8005292 <HAL_TIM_PWM_Start+0xfe>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fe74 	bl	8005f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a35      	ldr	r2, [pc, #212]	@ (800537c <HAL_TIM_PWM_Start+0x1e8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x13e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a34      	ldr	r2, [pc, #208]	@ (8005380 <HAL_TIM_PWM_Start+0x1ec>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x13e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a32      	ldr	r2, [pc, #200]	@ (8005384 <HAL_TIM_PWM_Start+0x1f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x13e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a31      	ldr	r2, [pc, #196]	@ (8005388 <HAL_TIM_PWM_Start+0x1f4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x13e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2f      	ldr	r2, [pc, #188]	@ (800538c <HAL_TIM_PWM_Start+0x1f8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x142>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_PWM_Start+0x144>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a22      	ldr	r2, [pc, #136]	@ (800537c <HAL_TIM_PWM_Start+0x1e8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01d      	beq.n	8005332 <HAL_TIM_PWM_Start+0x19e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fe:	d018      	beq.n	8005332 <HAL_TIM_PWM_Start+0x19e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <HAL_TIM_PWM_Start+0x1fc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_TIM_PWM_Start+0x19e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	@ (8005394 <HAL_TIM_PWM_Start+0x200>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_TIM_PWM_Start+0x19e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1f      	ldr	r2, [pc, #124]	@ (8005398 <HAL_TIM_PWM_Start+0x204>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_TIM_PWM_Start+0x19e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a17      	ldr	r2, [pc, #92]	@ (8005380 <HAL_TIM_PWM_Start+0x1ec>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_TIM_PWM_Start+0x19e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <HAL_TIM_PWM_Start+0x1f0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d115      	bne.n	800535e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	4b18      	ldr	r3, [pc, #96]	@ (800539c <HAL_TIM_PWM_Start+0x208>)
 800533a:	4013      	ands	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b06      	cmp	r3, #6
 8005342:	d015      	beq.n	8005370 <HAL_TIM_PWM_Start+0x1dc>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800534a:	d011      	beq.n	8005370 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	e008      	b.n	8005370 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e000      	b.n	8005372 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40013400 	.word	0x40013400
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	00010007 	.word	0x00010007

080053a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e0ff      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b14      	cmp	r3, #20
 80053ca:	f200 80f0 	bhi.w	80055ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ce:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005429 	.word	0x08005429
 80053d8:	080055af 	.word	0x080055af
 80053dc:	080055af 	.word	0x080055af
 80053e0:	080055af 	.word	0x080055af
 80053e4:	08005469 	.word	0x08005469
 80053e8:	080055af 	.word	0x080055af
 80053ec:	080055af 	.word	0x080055af
 80053f0:	080055af 	.word	0x080055af
 80053f4:	080054ab 	.word	0x080054ab
 80053f8:	080055af 	.word	0x080055af
 80053fc:	080055af 	.word	0x080055af
 8005400:	080055af 	.word	0x080055af
 8005404:	080054eb 	.word	0x080054eb
 8005408:	080055af 	.word	0x080055af
 800540c:	080055af 	.word	0x080055af
 8005410:	080055af 	.word	0x080055af
 8005414:	0800552d 	.word	0x0800552d
 8005418:	080055af 	.word	0x080055af
 800541c:	080055af 	.word	0x080055af
 8005420:	080055af 	.word	0x080055af
 8005424:	0800556d 	.word	0x0800556d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fa3a 	bl	80058a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0208 	orr.w	r2, r2, #8
 8005442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0204 	bic.w	r2, r2, #4
 8005452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6999      	ldr	r1, [r3, #24]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	619a      	str	r2, [r3, #24]
      break;
 8005466:	e0a5      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 faaa 	bl	80059c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6999      	ldr	r1, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	619a      	str	r2, [r3, #24]
      break;
 80054a8:	e084      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fb13 	bl	8005adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0208 	orr.w	r2, r2, #8
 80054c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0204 	bic.w	r2, r2, #4
 80054d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69d9      	ldr	r1, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	61da      	str	r2, [r3, #28]
      break;
 80054e8:	e064      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fb7b 	bl	8005bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	021a      	lsls	r2, r3, #8
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	61da      	str	r2, [r3, #28]
      break;
 800552a:	e043      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fbc4 	bl	8005cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800556a:	e023      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fc08 	bl	8005d88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055ac:	e002      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
      break;
 80055b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop

080055c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIM_ConfigClockSource+0x1c>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e0b6      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x18a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005602:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800560e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005620:	d03e      	beq.n	80056a0 <HAL_TIM_ConfigClockSource+0xd8>
 8005622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005626:	f200 8087 	bhi.w	8005738 <HAL_TIM_ConfigClockSource+0x170>
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562e:	f000 8086 	beq.w	800573e <HAL_TIM_ConfigClockSource+0x176>
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005636:	d87f      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005638:	2b70      	cmp	r3, #112	@ 0x70
 800563a:	d01a      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0xaa>
 800563c:	2b70      	cmp	r3, #112	@ 0x70
 800563e:	d87b      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005640:	2b60      	cmp	r3, #96	@ 0x60
 8005642:	d050      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x11e>
 8005644:	2b60      	cmp	r3, #96	@ 0x60
 8005646:	d877      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005648:	2b50      	cmp	r3, #80	@ 0x50
 800564a:	d03c      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0xfe>
 800564c:	2b50      	cmp	r3, #80	@ 0x50
 800564e:	d873      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d058      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x13e>
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d86f      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005658:	2b30      	cmp	r3, #48	@ 0x30
 800565a:	d064      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 800565c:	2b30      	cmp	r3, #48	@ 0x30
 800565e:	d86b      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d060      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d867      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d05c      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 800566c:	2b10      	cmp	r3, #16
 800566e:	d05a      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 8005670:	e062      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005682:	f000 fc61 	bl	8005f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	609a      	str	r2, [r3, #8]
      break;
 800569e:	e04f      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056b0:	f000 fc4a 	bl	8005f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056c2:	609a      	str	r2, [r3, #8]
      break;
 80056c4:	e03c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 fbbe 	bl	8005e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2150      	movs	r1, #80	@ 0x50
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fc17 	bl	8005f12 <TIM_ITRx_SetConfig>
      break;
 80056e4:	e02c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f2:	461a      	mov	r2, r3
 80056f4:	f000 fbdd 	bl	8005eb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2160      	movs	r1, #96	@ 0x60
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fc07 	bl	8005f12 <TIM_ITRx_SetConfig>
      break;
 8005704:	e01c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	461a      	mov	r2, r3
 8005714:	f000 fb9e 	bl	8005e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2140      	movs	r1, #64	@ 0x40
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fbf7 	bl	8005f12 <TIM_ITRx_SetConfig>
      break;
 8005724:	e00c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4619      	mov	r1, r3
 8005730:	4610      	mov	r0, r2
 8005732:	f000 fbee 	bl	8005f12 <TIM_ITRx_SetConfig>
      break;
 8005736:	e003      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e000      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800573e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a46      	ldr	r2, [pc, #280]	@ (8005888 <TIM_Base_SetConfig+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577a:	d00f      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a43      	ldr	r2, [pc, #268]	@ (800588c <TIM_Base_SetConfig+0x130>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a42      	ldr	r2, [pc, #264]	@ (8005890 <TIM_Base_SetConfig+0x134>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a41      	ldr	r2, [pc, #260]	@ (8005894 <TIM_Base_SetConfig+0x138>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a40      	ldr	r2, [pc, #256]	@ (8005898 <TIM_Base_SetConfig+0x13c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d108      	bne.n	80057ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a35      	ldr	r2, [pc, #212]	@ (8005888 <TIM_Base_SetConfig+0x12c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01f      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057bc:	d01b      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a32      	ldr	r2, [pc, #200]	@ (800588c <TIM_Base_SetConfig+0x130>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d017      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a31      	ldr	r2, [pc, #196]	@ (8005890 <TIM_Base_SetConfig+0x134>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <TIM_Base_SetConfig+0x138>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00f      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005898 <TIM_Base_SetConfig+0x13c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	@ (800589c <TIM_Base_SetConfig+0x140>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d007      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a2d      	ldr	r2, [pc, #180]	@ (80058a0 <TIM_Base_SetConfig+0x144>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <TIM_Base_SetConfig+0x148>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d108      	bne.n	8005808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a16      	ldr	r2, [pc, #88]	@ (8005888 <TIM_Base_SetConfig+0x12c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00f      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a18      	ldr	r2, [pc, #96]	@ (8005898 <TIM_Base_SetConfig+0x13c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a17      	ldr	r2, [pc, #92]	@ (800589c <TIM_Base_SetConfig+0x140>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <TIM_Base_SetConfig+0x144>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <TIM_Base_SetConfig+0x148>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d103      	bne.n	800585c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	611a      	str	r2, [r3, #16]
  }
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	40013400 	.word	0x40013400
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800

080058a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f023 0201 	bic.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f023 0302 	bic.w	r3, r3, #2
 80058f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <TIM_OC1_SetConfig+0x10c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00f      	beq.n	8005928 <TIM_OC1_SetConfig+0x80>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a2b      	ldr	r2, [pc, #172]	@ (80059b8 <TIM_OC1_SetConfig+0x110>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00b      	beq.n	8005928 <TIM_OC1_SetConfig+0x80>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a2a      	ldr	r2, [pc, #168]	@ (80059bc <TIM_OC1_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_OC1_SetConfig+0x80>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a29      	ldr	r2, [pc, #164]	@ (80059c0 <TIM_OC1_SetConfig+0x118>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC1_SetConfig+0x80>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a28      	ldr	r2, [pc, #160]	@ (80059c4 <TIM_OC1_SetConfig+0x11c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10c      	bne.n	8005942 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0308 	bic.w	r3, r3, #8
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1b      	ldr	r2, [pc, #108]	@ (80059b4 <TIM_OC1_SetConfig+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_OC1_SetConfig+0xc2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1a      	ldr	r2, [pc, #104]	@ (80059b8 <TIM_OC1_SetConfig+0x110>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_OC1_SetConfig+0xc2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a19      	ldr	r2, [pc, #100]	@ (80059bc <TIM_OC1_SetConfig+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_OC1_SetConfig+0xc2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <TIM_OC1_SetConfig+0x118>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_OC1_SetConfig+0xc2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a17      	ldr	r2, [pc, #92]	@ (80059c4 <TIM_OC1_SetConfig+0x11c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d111      	bne.n	800598e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40013400 	.word	0x40013400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800

080059c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f023 0210 	bic.w	r2, r3, #16
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0320 	bic.w	r3, r3, #32
 8005a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a28      	ldr	r2, [pc, #160]	@ (8005ac8 <TIM_OC2_SetConfig+0x100>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC2_SetConfig+0x6c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a27      	ldr	r2, [pc, #156]	@ (8005acc <TIM_OC2_SetConfig+0x104>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10d      	bne.n	8005a50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <TIM_OC2_SetConfig+0x100>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_OC2_SetConfig+0xb0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005acc <TIM_OC2_SetConfig+0x104>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_OC2_SetConfig+0xb0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <TIM_OC2_SetConfig+0x108>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC2_SetConfig+0xb0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <TIM_OC2_SetConfig+0x10c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC2_SetConfig+0xb0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <TIM_OC2_SetConfig+0x110>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d113      	bne.n	8005aa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a27      	ldr	r2, [pc, #156]	@ (8005bd8 <TIM_OC3_SetConfig+0xfc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0x6a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a26      	ldr	r2, [pc, #152]	@ (8005bdc <TIM_OC3_SetConfig+0x100>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10d      	bne.n	8005b62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <TIM_OC3_SetConfig+0xfc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00f      	beq.n	8005b8a <TIM_OC3_SetConfig+0xae>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bdc <TIM_OC3_SetConfig+0x100>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <TIM_OC3_SetConfig+0xae>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1a      	ldr	r2, [pc, #104]	@ (8005be0 <TIM_OC3_SetConfig+0x104>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_OC3_SetConfig+0xae>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	@ (8005be4 <TIM_OC3_SetConfig+0x108>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC3_SetConfig+0xae>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <TIM_OC3_SetConfig+0x10c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d113      	bne.n	8005bb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40013400 	.word	0x40013400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400
 8005be8:	40014800 	.word	0x40014800

08005bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <TIM_OC4_SetConfig+0xc0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_OC4_SetConfig+0x84>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a17      	ldr	r2, [pc, #92]	@ (8005cb0 <TIM_OC4_SetConfig+0xc4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <TIM_OC4_SetConfig+0x84>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	@ (8005cb4 <TIM_OC4_SetConfig+0xc8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_OC4_SetConfig+0x84>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <TIM_OC4_SetConfig+0xcc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_OC4_SetConfig+0x84>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a14      	ldr	r2, [pc, #80]	@ (8005cbc <TIM_OC4_SetConfig+0xd0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d109      	bne.n	8005c84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	019b      	lsls	r3, r3, #6
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800

08005cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <TIM_OC5_SetConfig+0xb4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_OC5_SetConfig+0x7a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a16      	ldr	r2, [pc, #88]	@ (8005d78 <TIM_OC5_SetConfig+0xb8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_OC5_SetConfig+0x7a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a15      	ldr	r2, [pc, #84]	@ (8005d7c <TIM_OC5_SetConfig+0xbc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_OC5_SetConfig+0x7a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a14      	ldr	r2, [pc, #80]	@ (8005d80 <TIM_OC5_SetConfig+0xc0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_OC5_SetConfig+0x7a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a13      	ldr	r2, [pc, #76]	@ (8005d84 <TIM_OC5_SetConfig+0xc4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d109      	bne.n	8005d4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	051b      	lsls	r3, r3, #20
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a18      	ldr	r2, [pc, #96]	@ (8005e40 <TIM_OC6_SetConfig+0xb8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00f      	beq.n	8005e04 <TIM_OC6_SetConfig+0x7c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <TIM_OC6_SetConfig+0xbc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_OC6_SetConfig+0x7c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a16      	ldr	r2, [pc, #88]	@ (8005e48 <TIM_OC6_SetConfig+0xc0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_OC6_SetConfig+0x7c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a15      	ldr	r2, [pc, #84]	@ (8005e4c <TIM_OC6_SetConfig+0xc4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_OC6_SetConfig+0x7c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a14      	ldr	r2, [pc, #80]	@ (8005e50 <TIM_OC6_SetConfig+0xc8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d109      	bne.n	8005e18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800

08005e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0201 	bic.w	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 030a 	bic.w	r3, r3, #10
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f023 0210 	bic.w	r2, r3, #16
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	031b      	lsls	r3, r3, #12
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f043 0307 	orr.w	r3, r3, #7
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	609a      	str	r2, [r3, #8]
}
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	609a      	str	r2, [r3, #8]
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1a      	ldr	r2, [r3, #32]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	401a      	ands	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e068      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d108      	bne.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1e      	ldr	r2, [pc, #120]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01d      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d018      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10c      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40014000 	.word	0x40014000

080060e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e040      	b.n	8006178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fa febe 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	@ 0x24
 8006110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fe06 	bl	8006d3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fb4b 	bl	80067cc <UART_SetConfig>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e01b      	b.n	8006178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800614e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800615e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fe85 	bl	8006e80 <UART_CheckIdleState>
 8006176:	4603      	mov	r3, r0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b0ba      	sub	sp, #232	@ 0xe8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061ae:	4013      	ands	r3, r2
 80061b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d115      	bne.n	80061e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00f      	beq.n	80061e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 82ca 	beq.w	8006772 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
      }
      return;
 80061e6:	e2c4      	b.n	8006772 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80061e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8117 	beq.w	8006420 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006202:	4b85      	ldr	r3, [pc, #532]	@ (8006418 <HAL_UART_IRQHandler+0x298>)
 8006204:	4013      	ands	r3, r2
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 810a 	beq.w	8006420 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d011      	beq.n	800623c <HAL_UART_IRQHandler+0xbc>
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006232:	f043 0201 	orr.w	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d011      	beq.n	800626c <HAL_UART_IRQHandler+0xec>
 8006248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2202      	movs	r2, #2
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006262:	f043 0204 	orr.w	r2, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800626c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d011      	beq.n	800629c <HAL_UART_IRQHandler+0x11c>
 8006278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2204      	movs	r2, #4
 800628a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006292:	f043 0202 	orr.w	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d017      	beq.n	80062d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2208      	movs	r2, #8
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ce:	f043 0208 	orr.w	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d012      	beq.n	800630a <HAL_UART_IRQHandler+0x18a>
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8230 	beq.w	8006776 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006344:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006352:	2b40      	cmp	r3, #64	@ 0x40
 8006354:	d005      	beq.n	8006362 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800635a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04f      	beq.n	8006402 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fea1 	bl	80070aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006372:	2b40      	cmp	r3, #64	@ 0x40
 8006374:	d141      	bne.n	80063fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800638c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1d9      	bne.n	8006376 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d013      	beq.n	80063f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ce:	4a13      	ldr	r2, [pc, #76]	@ (800641c <HAL_UART_IRQHandler+0x29c>)
 80063d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fd f83a 	bl	8003450 <HAL_DMA_Abort_IT>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d017      	beq.n	8006412 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f0:	e00f      	b.n	8006412 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9d4 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	e00b      	b.n	8006412 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9d0 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	e007      	b.n	8006412 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9cc 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006410:	e1b1      	b.n	8006776 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006412:	bf00      	nop
    return;
 8006414:	e1af      	b.n	8006776 <HAL_UART_IRQHandler+0x5f6>
 8006416:	bf00      	nop
 8006418:	04000120 	.word	0x04000120
 800641c:	08007173 	.word	0x08007173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006424:	2b01      	cmp	r3, #1
 8006426:	f040 816a 	bne.w	80066fe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800642a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8163 	beq.w	80066fe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 815c 	beq.w	80066fe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2210      	movs	r2, #16
 800644c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b40      	cmp	r3, #64	@ 0x40
 800645a:	f040 80d4 	bne.w	8006606 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800646a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80ad 	beq.w	80065ce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800647a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800647e:	429a      	cmp	r2, r3
 8006480:	f080 80a5 	bcs.w	80065ce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800648a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	f040 8086 	bne.w	80065ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1da      	bne.n	80064a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3308      	adds	r3, #8
 800650a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800650e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006512:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006516:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e1      	bne.n	80064ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800654a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800654c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006550:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e3      	bne.n	8006526 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800657a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800657c:	f023 0310 	bic.w	r3, r3, #16
 8006580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800658e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006590:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006594:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800659c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e4      	bne.n	800656c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fc ff14 	bl	80033d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8f4 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80065cc:	e0d5      	b.n	800677a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d8:	429a      	cmp	r2, r3
 80065da:	f040 80ce 	bne.w	800677a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	f040 80c5 	bne.w	800677a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8d8 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
      return;
 8006604:	e0b9      	b.n	800677a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006612:	b29b      	uxth	r3, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80ab 	beq.w	800677e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80a6 	beq.w	800677e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006646:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006654:	647b      	str	r3, [r7, #68]	@ 0x44
 8006656:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800665a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e4      	bne.n	8006632 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	623b      	str	r3, [r7, #32]
   return(result);
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800668c:	633a      	str	r2, [r7, #48]	@ 0x30
 800668e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e3      	bne.n	8006668 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 0310 	bic.w	r3, r3, #16
 80066c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	617b      	str	r3, [r7, #20]
   return(result);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e4      	bne.n	80066b4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f85c 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066fc:	e03f      	b.n	800677e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <HAL_UART_IRQHandler+0x5a8>
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800670e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800671e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fd66 	bl	80071f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006726:	e02d      	b.n	8006784 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00e      	beq.n	8006752 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01c      	beq.n	8006782 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
    }
    return;
 8006750:	e017      	b.n	8006782 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d012      	beq.n	8006784 <HAL_UART_IRQHandler+0x604>
 800675e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fd17 	bl	800719e <UART_EndTransmit_IT>
    return;
 8006770:	e008      	b.n	8006784 <HAL_UART_IRQHandler+0x604>
      return;
 8006772:	bf00      	nop
 8006774:	e006      	b.n	8006784 <HAL_UART_IRQHandler+0x604>
    return;
 8006776:	bf00      	nop
 8006778:	e004      	b.n	8006784 <HAL_UART_IRQHandler+0x604>
      return;
 800677a:	bf00      	nop
 800677c:	e002      	b.n	8006784 <HAL_UART_IRQHandler+0x604>
      return;
 800677e:	bf00      	nop
 8006780:	e000      	b.n	8006784 <HAL_UART_IRQHandler+0x604>
    return;
 8006782:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006784:	37e8      	adds	r7, #232	@ 0xe8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop

0800678c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d0:	b08a      	sub	sp, #40	@ 0x28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	431a      	orrs	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4ba4      	ldr	r3, [pc, #656]	@ (8006a8c <UART_SetConfig+0x2c0>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006804:	430b      	orrs	r3, r1
 8006806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a99      	ldr	r2, [pc, #612]	@ (8006a90 <UART_SetConfig+0x2c4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006834:	4313      	orrs	r3, r2
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006848:	430a      	orrs	r2, r1
 800684a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a90      	ldr	r2, [pc, #576]	@ (8006a94 <UART_SetConfig+0x2c8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d126      	bne.n	80068a4 <UART_SetConfig+0xd8>
 8006856:	4b90      	ldr	r3, [pc, #576]	@ (8006a98 <UART_SetConfig+0x2cc>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d81b      	bhi.n	800689c <UART_SetConfig+0xd0>
 8006864:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <UART_SetConfig+0xa0>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	0800687d 	.word	0x0800687d
 8006870:	0800688d 	.word	0x0800688d
 8006874:	08006885 	.word	0x08006885
 8006878:	08006895 	.word	0x08006895
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e116      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006884:	2302      	movs	r3, #2
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e112      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006892:	e10e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689a:	e10a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e106      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a7c      	ldr	r2, [pc, #496]	@ (8006a9c <UART_SetConfig+0x2d0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d138      	bne.n	8006920 <UART_SetConfig+0x154>
 80068ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006a98 <UART_SetConfig+0x2cc>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d82d      	bhi.n	8006918 <UART_SetConfig+0x14c>
 80068bc:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0xf8>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006919 	.word	0x08006919
 80068cc:	08006919 	.word	0x08006919
 80068d0:	08006919 	.word	0x08006919
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006919 	.word	0x08006919
 80068dc:	08006919 	.word	0x08006919
 80068e0:	08006919 	.word	0x08006919
 80068e4:	08006901 	.word	0x08006901
 80068e8:	08006919 	.word	0x08006919
 80068ec:	08006919 	.word	0x08006919
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006911 	.word	0x08006911
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068fe:	e0d8      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006900:	2302      	movs	r3, #2
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006906:	e0d4      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006908:	2304      	movs	r3, #4
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690e:	e0d0      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006910:	2308      	movs	r3, #8
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006916:	e0cc      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006918:	2310      	movs	r3, #16
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691e:	e0c8      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa0 <UART_SetConfig+0x2d4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d125      	bne.n	8006976 <UART_SetConfig+0x1aa>
 800692a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a98 <UART_SetConfig+0x2cc>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006930:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006934:	2b30      	cmp	r3, #48	@ 0x30
 8006936:	d016      	beq.n	8006966 <UART_SetConfig+0x19a>
 8006938:	2b30      	cmp	r3, #48	@ 0x30
 800693a:	d818      	bhi.n	800696e <UART_SetConfig+0x1a2>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d00a      	beq.n	8006956 <UART_SetConfig+0x18a>
 8006940:	2b20      	cmp	r3, #32
 8006942:	d814      	bhi.n	800696e <UART_SetConfig+0x1a2>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <UART_SetConfig+0x182>
 8006948:	2b10      	cmp	r3, #16
 800694a:	d008      	beq.n	800695e <UART_SetConfig+0x192>
 800694c:	e00f      	b.n	800696e <UART_SetConfig+0x1a2>
 800694e:	2300      	movs	r3, #0
 8006950:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006954:	e0ad      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006956:	2302      	movs	r3, #2
 8006958:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800695c:	e0a9      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800695e:	2304      	movs	r3, #4
 8006960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006964:	e0a5      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006966:	2308      	movs	r3, #8
 8006968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696c:	e0a1      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800696e:	2310      	movs	r3, #16
 8006970:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006974:	e09d      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa4 <UART_SetConfig+0x2d8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d125      	bne.n	80069cc <UART_SetConfig+0x200>
 8006980:	4b45      	ldr	r3, [pc, #276]	@ (8006a98 <UART_SetConfig+0x2cc>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006986:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800698a:	2bc0      	cmp	r3, #192	@ 0xc0
 800698c:	d016      	beq.n	80069bc <UART_SetConfig+0x1f0>
 800698e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006990:	d818      	bhi.n	80069c4 <UART_SetConfig+0x1f8>
 8006992:	2b80      	cmp	r3, #128	@ 0x80
 8006994:	d00a      	beq.n	80069ac <UART_SetConfig+0x1e0>
 8006996:	2b80      	cmp	r3, #128	@ 0x80
 8006998:	d814      	bhi.n	80069c4 <UART_SetConfig+0x1f8>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <UART_SetConfig+0x1d8>
 800699e:	2b40      	cmp	r3, #64	@ 0x40
 80069a0:	d008      	beq.n	80069b4 <UART_SetConfig+0x1e8>
 80069a2:	e00f      	b.n	80069c4 <UART_SetConfig+0x1f8>
 80069a4:	2300      	movs	r3, #0
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069aa:	e082      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069ac:	2302      	movs	r3, #2
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b2:	e07e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ba:	e07a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c2:	e076      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ca:	e072      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a35      	ldr	r2, [pc, #212]	@ (8006aa8 <UART_SetConfig+0x2dc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d12a      	bne.n	8006a2c <UART_SetConfig+0x260>
 80069d6:	4b30      	ldr	r3, [pc, #192]	@ (8006a98 <UART_SetConfig+0x2cc>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069e4:	d01a      	beq.n	8006a1c <UART_SetConfig+0x250>
 80069e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ea:	d81b      	bhi.n	8006a24 <UART_SetConfig+0x258>
 80069ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f0:	d00c      	beq.n	8006a0c <UART_SetConfig+0x240>
 80069f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f6:	d815      	bhi.n	8006a24 <UART_SetConfig+0x258>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <UART_SetConfig+0x238>
 80069fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a00:	d008      	beq.n	8006a14 <UART_SetConfig+0x248>
 8006a02:	e00f      	b.n	8006a24 <UART_SetConfig+0x258>
 8006a04:	2300      	movs	r3, #0
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a0a:	e052      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a12:	e04e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a14:	2304      	movs	r3, #4
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1a:	e04a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a22:	e046      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a24:	2310      	movs	r3, #16
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2a:	e042      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a17      	ldr	r2, [pc, #92]	@ (8006a90 <UART_SetConfig+0x2c4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d13a      	bne.n	8006aac <UART_SetConfig+0x2e0>
 8006a36:	4b18      	ldr	r3, [pc, #96]	@ (8006a98 <UART_SetConfig+0x2cc>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a44:	d01a      	beq.n	8006a7c <UART_SetConfig+0x2b0>
 8006a46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4a:	d81b      	bhi.n	8006a84 <UART_SetConfig+0x2b8>
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a50:	d00c      	beq.n	8006a6c <UART_SetConfig+0x2a0>
 8006a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a56:	d815      	bhi.n	8006a84 <UART_SetConfig+0x2b8>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <UART_SetConfig+0x298>
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a60:	d008      	beq.n	8006a74 <UART_SetConfig+0x2a8>
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x2b8>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a6a:	e022      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a72:	e01e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7a:	e01a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a82:	e016      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8a:	e012      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a8c:	efff69f3 	.word	0xefff69f3
 8006a90:	40008000 	.word	0x40008000
 8006a94:	40013800 	.word	0x40013800
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40004400 	.word	0x40004400
 8006aa0:	40004800 	.word	0x40004800
 8006aa4:	40004c00 	.word	0x40004c00
 8006aa8:	40005000 	.word	0x40005000
 8006aac:	2310      	movs	r3, #16
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a9f      	ldr	r2, [pc, #636]	@ (8006d34 <UART_SetConfig+0x568>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d17a      	bne.n	8006bb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006abc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d824      	bhi.n	8006b0e <UART_SetConfig+0x342>
 8006ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <UART_SetConfig+0x300>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006aff 	.word	0x08006aff
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b0f 	.word	0x08006b0f
 8006ae8:	08006b0f 	.word	0x08006b0f
 8006aec:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7fd fd50 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
        break;
 8006af6:	e010      	b.n	8006b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b8f      	ldr	r3, [pc, #572]	@ (8006d38 <UART_SetConfig+0x56c>)
 8006afa:	61fb      	str	r3, [r7, #28]
        break;
 8006afc:	e00d      	b.n	8006b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fd fcb1 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8006b02:	61f8      	str	r0, [r7, #28]
        break;
 8006b04:	e009      	b.n	8006b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0a:	61fb      	str	r3, [r7, #28]
        break;
 8006b0c:	e005      	b.n	8006b1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80fb 	beq.w	8006d18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d305      	bcc.n	8006b3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d903      	bls.n	8006b46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b44:	e0e8      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	022b      	lsls	r3, r5, #8
 8006b58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b5c:	0222      	lsls	r2, r4, #8
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	6849      	ldr	r1, [r1, #4]
 8006b62:	0849      	lsrs	r1, r1, #1
 8006b64:	2000      	movs	r0, #0
 8006b66:	4688      	mov	r8, r1
 8006b68:	4681      	mov	r9, r0
 8006b6a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b6e:	eb43 0b09 	adc.w	fp, r3, r9
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b80:	4650      	mov	r0, sl
 8006b82:	4659      	mov	r1, fp
 8006b84:	f7f9 fb20 	bl	80001c8 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b96:	d308      	bcc.n	8006baa <UART_SetConfig+0x3de>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9e:	d204      	bcs.n	8006baa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	e0b6      	b.n	8006d18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bb0:	e0b2      	b.n	8006d18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bba:	d15e      	bne.n	8006c7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d828      	bhi.n	8006c16 <UART_SetConfig+0x44a>
 8006bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <UART_SetConfig+0x400>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	08006c17 	.word	0x08006c17
 8006bdc:	08006c07 	.word	0x08006c07
 8006be0:	08006c17 	.word	0x08006c17
 8006be4:	08006c17 	.word	0x08006c17
 8006be8:	08006c17 	.word	0x08006c17
 8006bec:	08006c0f 	.word	0x08006c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7fd fcd0 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	61f8      	str	r0, [r7, #28]
        break;
 8006bf6:	e014      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf8:	f7fd fce2 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8006bfc:	61f8      	str	r0, [r7, #28]
        break;
 8006bfe:	e010      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c00:	4b4d      	ldr	r3, [pc, #308]	@ (8006d38 <UART_SetConfig+0x56c>)
 8006c02:	61fb      	str	r3, [r7, #28]
        break;
 8006c04:	e00d      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fd fc2d 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8006c0a:	61f8      	str	r0, [r7, #28]
        break;
 8006c0c:	e009      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e005      	b.n	8006c22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d077      	beq.n	8006d18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	005a      	lsls	r2, r3, #1
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	441a      	add	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b0f      	cmp	r3, #15
 8006c42:	d916      	bls.n	8006c72 <UART_SetConfig+0x4a6>
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4a:	d212      	bcs.n	8006c72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f023 030f 	bic.w	r3, r3, #15
 8006c54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	8afa      	ldrh	r2, [r7, #22]
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	e052      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c78:	e04e      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d827      	bhi.n	8006cd2 <UART_SetConfig+0x506>
 8006c82:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <UART_SetConfig+0x4bc>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cd3 	.word	0x08006cd3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fd fc72 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	61f8      	str	r0, [r7, #28]
        break;
 8006cb2:	e014      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fd fc84 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	61f8      	str	r0, [r7, #28]
        break;
 8006cba:	e010      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <UART_SetConfig+0x56c>)
 8006cbe:	61fb      	str	r3, [r7, #28]
        break;
 8006cc0:	e00d      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd fbcf 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8006cc6:	61f8      	str	r0, [r7, #28]
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cce:	61fb      	str	r3, [r7, #28]
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d019      	beq.n	8006d18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	085a      	lsrs	r2, r3, #1
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	441a      	add	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d909      	bls.n	8006d12 <UART_SetConfig+0x546>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d04:	d205      	bcs.n	8006d12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
 8006d10:	e002      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	@ 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d32:	bf00      	nop
 8006d34:	40008000 	.word	0x40008000
 8006d38:	00f42400 	.word	0x00f42400

08006d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01a      	beq.n	8006e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e3a:	d10a      	bne.n	8006e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b098      	sub	sp, #96	@ 0x60
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e90:	f7fa f950 	bl	8001134 <HAL_GetTick>
 8006e94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d12e      	bne.n	8006f02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eac:	2200      	movs	r2, #0
 8006eae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f88c 	bl	8006fd0 <UART_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d021      	beq.n	8006f02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ede:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e6      	bne.n	8006ebe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e062      	b.n	8006fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d149      	bne.n	8006fa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f856 	bl	8006fd0 <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d03c      	beq.n	8006fa4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	623b      	str	r3, [r7, #32]
   return(result);
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f7c:	61fa      	str	r2, [r7, #28]
 8006f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e011      	b.n	8006fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3758      	adds	r7, #88	@ 0x58
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe0:	e04f      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d04b      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fea:	f7fa f8a3 	bl	8001134 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d302      	bcc.n	8007000 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e04e      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d037      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b80      	cmp	r3, #128	@ 0x80
 8007016:	d034      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b40      	cmp	r3, #64	@ 0x40
 800701c:	d031      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d110      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2208      	movs	r2, #8
 8007032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f838 	bl	80070aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2208      	movs	r2, #8
 800703e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e029      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705c:	d111      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f81e 	bl	80070aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e00f      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4013      	ands	r3, r2
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	bf0c      	ite	eq
 8007092:	2301      	moveq	r3, #1
 8007094:	2300      	movne	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	429a      	cmp	r2, r3
 800709e:	d0a0      	beq.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b095      	sub	sp, #84	@ 0x54
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800710a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711c:	2b01      	cmp	r3, #1
 800711e:	d118      	bne.n	8007152 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	60bb      	str	r3, [r7, #8]
   return(result);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f023 0310 	bic.w	r3, r3, #16
 8007134:	647b      	str	r3, [r7, #68]	@ 0x44
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6979      	ldr	r1, [r7, #20]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	613b      	str	r3, [r7, #16]
   return(result);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e6      	bne.n	8007120 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007166:	bf00      	nop
 8007168:	3754      	adds	r7, #84	@ 0x54
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff fb05 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b088      	sub	sp, #32
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6979      	ldr	r1, [r7, #20]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	613b      	str	r3, [r7, #16]
   return(result);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e6      	bne.n	80071a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff fad1 	bl	800678c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ea:	bf00      	nop
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <memset>:
 8007206:	4402      	add	r2, r0
 8007208:	4603      	mov	r3, r0
 800720a:	4293      	cmp	r3, r2
 800720c:	d100      	bne.n	8007210 <memset+0xa>
 800720e:	4770      	bx	lr
 8007210:	f803 1b01 	strb.w	r1, [r3], #1
 8007214:	e7f9      	b.n	800720a <memset+0x4>
	...

08007218 <__libc_init_array>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4d0d      	ldr	r5, [pc, #52]	@ (8007250 <__libc_init_array+0x38>)
 800721c:	4c0d      	ldr	r4, [pc, #52]	@ (8007254 <__libc_init_array+0x3c>)
 800721e:	1b64      	subs	r4, r4, r5
 8007220:	10a4      	asrs	r4, r4, #2
 8007222:	2600      	movs	r6, #0
 8007224:	42a6      	cmp	r6, r4
 8007226:	d109      	bne.n	800723c <__libc_init_array+0x24>
 8007228:	4d0b      	ldr	r5, [pc, #44]	@ (8007258 <__libc_init_array+0x40>)
 800722a:	4c0c      	ldr	r4, [pc, #48]	@ (800725c <__libc_init_array+0x44>)
 800722c:	f000 f818 	bl	8007260 <_init>
 8007230:	1b64      	subs	r4, r4, r5
 8007232:	10a4      	asrs	r4, r4, #2
 8007234:	2600      	movs	r6, #0
 8007236:	42a6      	cmp	r6, r4
 8007238:	d105      	bne.n	8007246 <__libc_init_array+0x2e>
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007240:	4798      	blx	r3
 8007242:	3601      	adds	r6, #1
 8007244:	e7ee      	b.n	8007224 <__libc_init_array+0xc>
 8007246:	f855 3b04 	ldr.w	r3, [r5], #4
 800724a:	4798      	blx	r3
 800724c:	3601      	adds	r6, #1
 800724e:	e7f2      	b.n	8007236 <__libc_init_array+0x1e>
 8007250:	080072c8 	.word	0x080072c8
 8007254:	080072c8 	.word	0x080072c8
 8007258:	080072c8 	.word	0x080072c8
 800725c:	080072cc 	.word	0x080072cc

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
